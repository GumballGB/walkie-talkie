
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000586c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005a28  08005a28  00006a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a98  08005a98  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a98  08005a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aa0  08005aa0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa0  08005aa0  00006aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aa4  08005aa4  00006aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005aa8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a70  2000000c  08005ab4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a7c  08005ab4  00007a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188c3  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a27  00000000  00000000  0001f8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  00022328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fa  00000000  00000000  000238b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afa6  00000000  00000000  000249aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019376  00000000  00000000  0004f950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c26a  00000000  00000000  00068cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174f30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cec  00000000  00000000  00174f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0017ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005a10 	.word	0x08005a10

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005a10 	.word	0x08005a10

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B_BUTTON_Pin) {
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000538:	d114      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x3c>
			// Set buttonPressed flag to true
			buttonPressed = 1;
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <HAL_GPIO_EXTI_Callback+0x44>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]

			// Toggle LED for debug
			HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);
 8000540:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000544:	480a      	ldr	r0, [pc, #40]	@ (8000570 <HAL_GPIO_EXTI_Callback+0x48>)
 8000546:	f002 f845 	bl	80025d4 <HAL_GPIO_TogglePin>

			// Start the listening process (if not already listening)
			if (!listening) {
 800054a:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <HAL_GPIO_EXTI_Callback+0x4c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d108      	bne.n	8000564 <HAL_GPIO_EXTI_Callback+0x3c>
				listening = 1;
 8000552:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
				// Start DFSDM to capture audio for 1 second
				HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t *)audioBuffer, AUDIO_BUFFER_SIZE);
 8000558:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800055c:	4906      	ldr	r1, [pc, #24]	@ (8000578 <HAL_GPIO_EXTI_Callback+0x50>)
 800055e:	4807      	ldr	r0, [pc, #28]	@ (800057c <HAL_GPIO_EXTI_Callback+0x54>)
 8000560:	f001 f932 	bl	80017c8 <HAL_DFSDM_FilterRegularStart_DMA>
				// Start a timer for 1 second
			}
		}

}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000828 	.word	0x20000828
 8000570:	48000400 	.word	0x48000400
 8000574:	20000829 	.word	0x20000829
 8000578:	20000028 	.word	0x20000028
 800057c:	2000082c 	.word	0x2000082c

08000580 <StartAudioCapture>:


void StartAudioCapture(void) {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    // Start the DFSDM filter to capture audio
    HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, (int32_t *)audioBuffer, AUDIO_BUFFER_SIZE);
 8000584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000588:	4902      	ldr	r1, [pc, #8]	@ (8000594 <StartAudioCapture+0x14>)
 800058a:	4803      	ldr	r0, [pc, #12]	@ (8000598 <StartAudioCapture+0x18>)
 800058c:	f001 f91c 	bl	80017c8 <HAL_DFSDM_FilterRegularStart_DMA>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000028 	.word	0x20000028
 8000598:	2000082c 	.word	0x2000082c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fd96 	bl	80010d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f821 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f9d7 	bl	800095c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 f9ab 	bl	8000908 <MX_DMA_Init>
  MX_I2C2_Init();
 80005b2:	f000 f8cf 	bl	8000754 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005b6:	f000 f95b 	bl	8000870 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005ba:	f000 f90b 	bl	80007d4 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 80005be:	f000 f867 	bl	8000690 <MX_DFSDM1_Init>


  /* USER CODE BEGIN 2 */

  // Start Timer2 to generate the clock signal for the microphone
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005c2:	2100      	movs	r1, #0
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <main+0x48>)
 80005c6:	f003 fe75 	bl	80042b4 <HAL_TIM_PWM_Start>

  int fo = 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */


	  if (!listening) {
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <main+0x4c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1fb      	bne.n	80005ce <main+0x32>
	          // Start capturing audio
	          StartAudioCapture();
 80005d6:	f7ff ffd3 	bl	8000580 <StartAudioCapture>
	          //listening = 1;  // Indicate that we are listening
	          fo++;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3301      	adds	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
	  if (!listening) {
 80005e0:	e7f5      	b.n	80005ce <main+0x32>
 80005e2:	bf00      	nop
 80005e4:	2000096c 	.word	0x2000096c
 80005e8:	20000829 	.word	0x20000829

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	@ 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2244      	movs	r2, #68	@ 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 f9dc 	bl	80059b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800060e:	2000      	movs	r0, #0
 8000610:	f002 f964 	bl	80028dc <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800061a:	f000 fa0f 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061e:	2310      	movs	r3, #16
 8000620:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800062a:	2360      	movs	r3, #96	@ 0x60
 800062c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000632:	2301      	movs	r3, #1
 8000634:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800063a:	233c      	movs	r3, #60	@ 0x3c
 800063c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f9e8 	bl	8002a24 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065a:	f000 f9ef 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2303      	movs	r3, #3
 8000664:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	2105      	movs	r1, #5
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fdee 	bl	8003258 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000682:	f000 f9db 	bl	8000a3c <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3758      	adds	r7, #88	@ 0x58
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <MX_DFSDM1_Init+0xb8>)
 8000698:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800069a:	4b2a      	ldr	r3, [pc, #168]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80006a6:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 10;
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 80006b4:	220a      	movs	r2, #10
 80006b6:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80006be:	4821      	ldr	r0, [pc, #132]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 80006c0:	f000 ff62 	bl	8001588 <HAL_DFSDM_FilterInit>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 80006ca:	f000 f9b7 	bl	8000a3c <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <MX_DFSDM1_Init+0xc0>)
 80006d2:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006da:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 8000706:	2200      	movs	r2, #0
 8000708:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 64;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 800070c:	2240      	movs	r2, #64	@ 0x40
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 8000712:	2200      	movs	r2, #0
 8000714:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 8000718:	2200      	movs	r2, #0
 800071a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800071c:	480b      	ldr	r0, [pc, #44]	@ (800074c <MX_DFSDM1_Init+0xbc>)
 800071e:	f000 fe5f 	bl	80013e0 <HAL_DFSDM_ChannelInit>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 8000728:	f000 f988 	bl	8000a3c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800072c:	2201      	movs	r2, #1
 800072e:	2101      	movs	r1, #1
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_DFSDM1_Init+0xb4>)
 8000732:	f001 f803 	bl	800173c <HAL_DFSDM_FilterConfigRegChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 800073c:	f000 f97e 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000082c 	.word	0x2000082c
 8000748:	40016100 	.word	0x40016100
 800074c:	20000880 	.word	0x20000880
 8000750:	40016000 	.word	0x40016000

08000754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000758:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	@ (80007cc <MX_I2C2_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	@ (80007d0 <MX_I2C2_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <MX_I2C2_Init+0x74>)
 8000790:	f001 ff52 	bl	8002638 <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800079a:	f000 f94f 	bl	8000a3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	@ (80007c8 <MX_I2C2_Init+0x74>)
 80007a2:	f001 ffe4 	bl	800276e <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 f946 	bl	8000a3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_I2C2_Init+0x74>)
 80007b4:	f002 f826 	bl	8002804 <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f93d 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000918 	.word	0x20000918
 80007cc:	40005800 	.word	0x40005800
 80007d0:	30a175ab 	.word	0x30a175ab

080007d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <MX_TIM2_Init+0x98>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_TIM2_Init+0x98>)
 80007fc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_TIM2_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_TIM2_Init+0x98>)
 800080a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800080e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_TIM2_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_TIM2_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081c:	4813      	ldr	r0, [pc, #76]	@ (800086c <MX_TIM2_Init+0x98>)
 800081e:	f003 fcf1 	bl	8004204 <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000828:	f000 f908 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <MX_TIM2_Init+0x98>)
 800083a:	f003 ff48 	bl	80046ce <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000844:	f000 f8fa 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000848:	2320      	movs	r3, #32
 800084a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_TIM2_Init+0x98>)
 8000856:	f004 f99b 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000860:	f000 f8ec 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000096c 	.word	0x2000096c

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	@ (8000904 <MX_USART1_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008ba:	f004 fa0f 	bl	8004cdc <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f8ba 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008cc:	f004 ffaa 	bl	8005824 <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f8b1 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008de:	f004 ffdf 	bl	80058a0 <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f8a8 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_USART1_UART_Init+0x90>)
 80008ee:	f004 ff60 	bl	80057b2 <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f8a0 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200009b8 	.word	0x200009b8
 8000904:	40013800 	.word	0x40013800

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <MX_DMA_Init+0x50>)
 8000910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000912:	4a11      	ldr	r2, [pc, #68]	@ (8000958 <MX_DMA_Init+0x50>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6493      	str	r3, [r2, #72]	@ 0x48
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_DMA_Init+0x50>)
 800091c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_DMA_Init+0x50>)
 8000928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800092a:	4a0b      	ldr	r2, [pc, #44]	@ (8000958 <MX_DMA_Init+0x50>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6493      	str	r3, [r2, #72]	@ 0x48
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_DMA_Init+0x50>)
 8000934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	200b      	movs	r0, #11
 8000944:	f000 fd15 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000948:	200b      	movs	r0, #11
 800094a:	f000 fd2e 	bl	80013aa <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b2f      	ldr	r3, [pc, #188]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a2e      	ldr	r2, [pc, #184]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	4b29      	ldr	r3, [pc, #164]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a28      	ldr	r2, [pc, #160]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b26      	ldr	r3, [pc, #152]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_GPIO_Init+0xd4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d8:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <MX_GPIO_Init+0xd8>)
 80009da:	f001 fde3 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <MX_GPIO_Init+0xdc>)
 80009f6:	f001 fc43 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 80009fa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <MX_GPIO_Init+0xd8>)
 8000a14:	f001 fc34 	bl	8002280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2028      	movs	r0, #40	@ 0x28
 8000a1e:	f000 fca8 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a22:	2028      	movs	r0, #40	@ 0x28
 8000a24:	f000 fcc1 	bl	80013aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	@ 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	48000400 	.word	0x48000400
 8000a38:	48000800 	.word	0x48000800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b0b0      	sub	sp, #192	@ 0xc0
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	2294      	movs	r2, #148	@ 0x94
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 ff81 	bl	80059b8 <memset>
  if(DFSDM1_Init == 0)
 8000ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8000c60 <HAL_DFSDM_FilterMspInit+0x1d0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 8096 	bne.w	8000bec <HAL_DFSDM_FilterMspInit+0x15c>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fe7f 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_DFSDM_FilterMspInit+0x50>
    {
      Error_Handler();
 8000adc:	f7ff ffae 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000ae0:	4b60      	ldr	r3, [pc, #384]	@ (8000c64 <HAL_DFSDM_FilterMspInit+0x1d4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	4a5f      	ldr	r2, [pc, #380]	@ (8000c64 <HAL_DFSDM_FilterMspInit+0x1d4>)
 8000ae8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000aea:	4b5e      	ldr	r3, [pc, #376]	@ (8000c64 <HAL_DFSDM_FilterMspInit+0x1d4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10b      	bne.n	8000b0a <HAL_DFSDM_FilterMspInit+0x7a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000af2:	4b5d      	ldr	r3, [pc, #372]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000af6:	4a5c      	ldr	r2, [pc, #368]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000af8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000afe:	4b5a      	ldr	r3, [pc, #360]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	4b57      	ldr	r3, [pc, #348]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a56      	ldr	r2, [pc, #344]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b54      	ldr	r3, [pc, #336]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	4b51      	ldr	r3, [pc, #324]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a50      	ldr	r2, [pc, #320]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	4a4a      	ldr	r2, [pc, #296]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b46:	4b48      	ldr	r3, [pc, #288]	@ (8000c68 <HAL_DFSDM_FilterMspInit+0x1d8>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB2     ------> DFSDM1_CKIN0
    PE9     ------> DFSDM1_CKOUT
    PD3     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b52:	2304      	movs	r3, #4
 8000b54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b74:	4619      	mov	r1, r3
 8000b76:	483d      	ldr	r0, [pc, #244]	@ (8000c6c <HAL_DFSDM_FilterMspInit+0x1dc>)
 8000b78:	f001 fb82 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000b96:	2306      	movs	r3, #6
 8000b98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4833      	ldr	r0, [pc, #204]	@ (8000c70 <HAL_DFSDM_FilterMspInit+0x1e0>)
 8000ba4:	f001 fb6c 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4829      	ldr	r0, [pc, #164]	@ (8000c74 <HAL_DFSDM_FilterMspInit+0x1e4>)
 8000bce:	f001 fb57 	bl	8002280 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	203d      	movs	r0, #61	@ 0x3d
 8000bd8:	f000 fbcb 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 8000bdc:	203d      	movs	r0, #61	@ 0x3d
 8000bde:	f000 fbe4 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_DFSDM_FilterMspInit+0x1d0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c60 <HAL_DFSDM_FilterMspInit+0x1d0>)
 8000bea:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a21      	ldr	r2, [pc, #132]	@ (8000c78 <HAL_DFSDM_FilterMspInit+0x1e8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d130      	bne.n	8000c58 <HAL_DFSDM_FilterMspInit+0x1c8>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <HAL_DFSDM_FilterMspInit+0x1f0>)
 8000bfa:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000bfe:	2256      	movs	r2, #86	@ 0x56
 8000c00:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c10:	2280      	movs	r2, #128	@ 0x80
 8000c12:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c1a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c22:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000c30:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c32:	f001 f8b3 	bl	8001d9c <HAL_DMA_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_DFSDM_FilterMspInit+0x1b0>
    {
      Error_Handler();
 8000c3c:	f7ff fefe 	bl	8000a3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a0e      	ldr	r2, [pc, #56]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c46:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c50:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_DFSDM_FilterMspInit+0x1ec>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8000c58:	bf00      	nop
 8000c5a:	37c0      	adds	r7, #192	@ 0xc0
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000a50 	.word	0x20000a50
 8000c64:	20000a4c 	.word	0x20000a4c
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000400 	.word	0x48000400
 8000c70:	48001000 	.word	0x48001000
 8000c74:	48000c00 	.word	0x48000c00
 8000c78:	40016100 	.word	0x40016100
 8000c7c:	200008b8 	.word	0x200008b8
 8000c80:	40020008 	.word	0x40020008

08000c84 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0b0      	sub	sp, #192	@ 0xc0
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	2294      	movs	r2, #148	@ 0x94
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 fe87 	bl	80059b8 <memset>
  if(DFSDM1_Init == 0)
 8000caa:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd8 <HAL_DFSDM_ChannelMspInit+0x154>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 808e 	bne.w	8000dd0 <HAL_DFSDM_ChannelMspInit+0x14c>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000cb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0318 	add.w	r3, r7, #24
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f002 fd85 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_DFSDM_ChannelMspInit+0x50>
    {
      Error_Handler();
 8000cd0:	f7ff feb4 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000cd4:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <HAL_DFSDM_ChannelMspInit+0x158>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a40      	ldr	r2, [pc, #256]	@ (8000ddc <HAL_DFSDM_ChannelMspInit+0x158>)
 8000cdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000cde:	4b3f      	ldr	r3, [pc, #252]	@ (8000ddc <HAL_DFSDM_ChannelMspInit+0x158>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10b      	bne.n	8000cfe <HAL_DFSDM_ChannelMspInit+0x7a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	4a3d      	ldr	r2, [pc, #244]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000cec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b38      	ldr	r3, [pc, #224]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a37      	ldr	r2, [pc, #220]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a31      	ldr	r2, [pc, #196]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a2b      	ldr	r2, [pc, #172]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <HAL_DFSDM_ChannelMspInit+0x15c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PB2     ------> DFSDM1_CKIN0
    PE9     ------> DFSDM1_CKOUT
    PD3     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d46:	2304      	movs	r3, #4
 8000d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d5e:	2306      	movs	r3, #6
 8000d60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481e      	ldr	r0, [pc, #120]	@ (8000de4 <HAL_DFSDM_ChannelMspInit+0x160>)
 8000d6c:	f001 fa88 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d94:	4619      	mov	r1, r3
 8000d96:	4814      	ldr	r0, [pc, #80]	@ (8000de8 <HAL_DFSDM_ChannelMspInit+0x164>)
 8000d98:	f001 fa72 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000db4:	2306      	movs	r3, #6
 8000db6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	480a      	ldr	r0, [pc, #40]	@ (8000dec <HAL_DFSDM_ChannelMspInit+0x168>)
 8000dc2:	f001 fa5d 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <HAL_DFSDM_ChannelMspInit+0x154>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	4a02      	ldr	r2, [pc, #8]	@ (8000dd8 <HAL_DFSDM_ChannelMspInit+0x154>)
 8000dce:	6013      	str	r3, [r2, #0]
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	37c0      	adds	r7, #192	@ 0xc0
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000a50 	.word	0x20000a50
 8000ddc:	20000a4c 	.word	0x20000a4c
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	48001000 	.word	0x48001000
 8000dec:	48000c00 	.word	0x48000c00

08000df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ae      	sub	sp, #184	@ 0xb8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2294      	movs	r2, #148	@ 0x94
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f004 fdd1 	bl	80059b8 <memset>
  if(hi2c->Instance==I2C2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ea0 <HAL_I2C_MspInit+0xb0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d13b      	bne.n	8000e98 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e20:	2380      	movs	r3, #128	@ 0x80
 8000e22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 fcd1 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e38:	f7ff fe00 	bl	8000a3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <HAL_I2C_MspInit+0xb4>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	4a18      	ldr	r2, [pc, #96]	@ (8000ea4 <HAL_I2C_MspInit+0xb4>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_I2C_MspInit+0xb4>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e54:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <HAL_I2C_MspInit+0xb8>)
 8000e7c:	f001 fa00 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	@ (8000ea4 <HAL_I2C_MspInit+0xb4>)
 8000e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_I2C_MspInit+0xb4>)
 8000e86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_I2C_MspInit+0xb4>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e98:	bf00      	nop
 8000e9a:	37b8      	adds	r7, #184	@ 0xb8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40005800 	.word	0x40005800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ebc:	d113      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <HAL_TIM_Base_MspInit+0x44>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	201c      	movs	r0, #28
 8000edc:	f000 fa49 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f000 fa62 	bl	80013aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	2294      	movs	r2, #148	@ 0x94
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f004 fd4f 	bl	80059b8 <memset>
  if(huart->Instance==USART1)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <HAL_UART_MspInit+0xb0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d13a      	bne.n	8000f9a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fc4f 	bl	80037d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f3c:	f7ff fd7e 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f44:	4a18      	ldr	r2, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5c:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_UART_MspInit+0xb4>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f70:	23c0      	movs	r3, #192	@ 0xc0
 8000f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_UART_MspInit+0xb8>)
 8000f96:	f001 f973 	bl	8002280 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f9a:	bf00      	nop
 8000f9c:	37b8      	adds	r7, #184	@ 0xb8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	48000400 	.word	0x48000400

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f8b9 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <DMA1_Channel1_IRQHandler+0x10>)
 8001016:	f000 ffe4 	bl	8001fe2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200008b8 	.word	0x200008b8

08001024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <TIM2_IRQHandler+0x10>)
 800102a:	f003 fa49 	bl	80044c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000096c 	.word	0x2000096c

08001038 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 800103c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001040:	f001 fae2 	bl	8002608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DFSDM1_FLT0_IRQHandler+0x10>)
 800104e:	f000 fc3d 	bl	80018cc <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000082c 	.word	0x2000082c

0800105c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff ffea 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	@ (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f004 fc8b 	bl	80059c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fa73 	bl	800059c <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c4:	08005aa8 	.word	0x08005aa8
  ldr r2, =_sbss
 80010c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010cc:	20000a7c 	.word	0x20000a7c

080010d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_IRQHandler>

080010d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f93d 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	200f      	movs	r0, #15
 80010e4:	f000 f80e 	bl	8001104 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e001      	b.n	80010f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f4:	f7ff fca8 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <HAL_InitTick+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f949 	bl	80013c6 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f913 	bl	8001372 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_InitTick+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e007      	b.n	8001164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e001      	b.n	8001164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	20000a54 	.word	0x20000a54

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000a54 	.word	0x20000a54

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db0b      	blt.n	800124a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	4907      	ldr	r1, [pc, #28]	@ (8001258 <__NVIC_EnableIRQ+0x38>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	@ (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	@ (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff8e 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff29 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff3e 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff8e 	bl	80012b0 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5d 	bl	800125c <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff31 	bl	8001220 <__NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffa2 	bl	8001318 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0ac      	b.n	800154c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fc2e 	bl	8001c58 <DFSDM_GetChannelFromInstance>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a55      	ldr	r2, [pc, #340]	@ (8001554 <HAL_DFSDM_ChannelInit+0x174>)
 8001400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e09f      	b.n	800154c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fc39 	bl	8000c84 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001412:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <HAL_DFSDM_ChannelInit+0x178>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	4a4f      	ldr	r2, [pc, #316]	@ (8001558 <HAL_DFSDM_ChannelInit+0x178>)
 800141a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800141c:	4b4e      	ldr	r3, [pc, #312]	@ (8001558 <HAL_DFSDM_ChannelInit+0x178>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d125      	bne.n	8001470 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001424:	4b4d      	ldr	r3, [pc, #308]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a4c      	ldr	r2, [pc, #304]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 800142a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800142e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001430:	4b4a      	ldr	r3, [pc, #296]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4948      	ldr	r1, [pc, #288]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800143e:	4b47      	ldr	r3, [pc, #284]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a46      	ldr	r2, [pc, #280]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 8001444:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001448:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001452:	4b42      	ldr	r3, [pc, #264]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3b01      	subs	r3, #1
 800145c:	041b      	lsls	r3, r3, #16
 800145e:	493f      	ldr	r1, [pc, #252]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001464:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a3c      	ldr	r2, [pc, #240]	@ (800155c <HAL_DFSDM_ChannelInit+0x17c>)
 800146a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800146e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800147e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6819      	ldr	r1, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800148e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001494:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 020f 	bic.w	r2, r2, #15
 80014ac:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80014d4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6899      	ldr	r1, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e4:	3b01      	subs	r3, #1
 80014e6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f002 0207 	and.w	r2, r2, #7
 8001500:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800152c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fb8c 	bl	8001c58 <DFSDM_GetChannelFromInstance>
 8001540:	4602      	mov	r2, r0
 8001542:	4904      	ldr	r1, [pc, #16]	@ (8001554 <HAL_DFSDM_ChannelInit+0x174>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000a5c 	.word	0x20000a5c
 8001558:	20000a58 	.word	0x20000a58
 800155c:	40016000 	.word	0x40016000

08001560 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0ca      	b.n	8001730 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a66      	ldr	r2, [pc, #408]	@ (8001738 <HAL_DFSDM_FilterInit+0x1b0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d109      	bne.n	80015b8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d003      	beq.n	80015b4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0bb      	b.n	8001730 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fa5d 	bl	8000a90 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80015e4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7a1b      	ldrb	r3, [r3, #8]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800160e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7a5b      	ldrb	r3, [r3, #9]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e007      	b.n	800163a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001648:	f023 0308 	bic.w	r3, r3, #8
 800164c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d108      	bne.n	8001668 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6819      	ldr	r1, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695a      	ldr	r2, [r3, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7c1b      	ldrb	r3, [r3, #16]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d108      	bne.n	8001682 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0210 	orr.w	r2, r2, #16
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e007      	b.n	8001692 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0210 	bic.w	r2, r2, #16
 8001690:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7c5b      	ldrb	r3, [r3, #17]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d108      	bne.n	80016ac <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0220 	orr.w	r2, r2, #32
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e007      	b.n	80016bc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0220 	bic.w	r2, r2, #32
 80016ba:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80016ca:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80016ce:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6959      	ldr	r1, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016e2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80016ea:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699a      	ldr	r2, [r3, #24]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7c1a      	ldrb	r2, [r3, #16]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40016100 	.word	0x40016100

0800173c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d02e      	beq.n	80017b4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800175c:	2bff      	cmp	r3, #255	@ 0xff
 800175e:	d029      	beq.n	80017b4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800176e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001772:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d10d      	bne.n	8001796 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001788:	431a      	orrs	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e00a      	b.n	80017ac <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6819      	ldr	r1, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80017b2:	e001      	b.n	80017b8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	75fb      	strb	r3, [r7, #23]
 80017e8:	e064      	b.n	80018b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017f8:	d002      	beq.n	8001800 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
 80017fe:	e059      	b.n	80018b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10e      	bne.n	8001826 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10a      	bne.n	8001826 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001814:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d002      	beq.n	8001826 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	75fb      	strb	r3, [r7, #23]
 8001824:	e046      	b.n	80018b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10b      	bne.n	8001846 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001832:	2b00      	cmp	r3, #0
 8001834:	d107      	bne.n	8001846 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800183c:	2b20      	cmp	r3, #32
 800183e:	d102      	bne.n	8001846 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	e036      	b.n	80018b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800184c:	2b01      	cmp	r3, #1
 800184e:	d004      	beq.n	800185a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001856:	2b03      	cmp	r3, #3
 8001858:	d12a      	bne.n	80018b0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185e:	4a18      	ldr	r2, [pc, #96]	@ (80018c0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001860:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001868:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001870:	2b20      	cmp	r3, #32
 8001872:	d101      	bne.n	8001878 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001874:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001876:	e000      	b.n	800187a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001878:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	331c      	adds	r3, #28
 800188a:	4619      	mov	r1, r3
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f000 fb2c 	bl	8001eec <HAL_DMA_Start_IT>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d006      	beq.n	80018a8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	22ff      	movs	r2, #255	@ 0xff
 800189e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80018a6:	e005      	b.n	80018b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 fa21 	bl	8001cf0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80018ae:	e001      	b.n	80018b4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	08001c19 	.word	0x08001c19
 80018c4:	08001c35 	.word	0x08001c35
 80018c8:	08001bfd 	.word	0x08001bfd

080018cc <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	@ 0x30
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00f      	beq.n	800190e <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2208      	movs	r2, #8
 80018fe:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f96e 	bl	8001be8 <HAL_DFSDM_FilterErrorCallback>
 800190c:	e13a      	b.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00f      	beq.n	8001938 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2204      	movs	r2, #4
 8001928:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f959 	bl	8001be8 <HAL_DFSDM_FilterErrorCallback>
 8001936:	e125      	b.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d025      	beq.n	800198e <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f921 	bl	8001b94 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	2b00      	cmp	r3, #0
 8001958:	f040 8113 	bne.w	8001b82 <HAL_DFSDM_IRQHandler+0x2b6>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001960:	2b00      	cmp	r3, #0
 8001962:	f040 810e 	bne.w	8001b82 <HAL_DFSDM_IRQHandler+0x2b6>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0202 	bic.w	r2, r2, #2
 8001974:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800197c:	2b02      	cmp	r3, #2
 800197e:	d101      	bne.n	8001984 <HAL_DFSDM_IRQHandler+0xb8>
 8001980:	2201      	movs	r2, #1
 8001982:	e000      	b.n	8001986 <HAL_DFSDM_IRQHandler+0xba>
 8001984:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800198c:	e0f9      	b.n	8001b82 <HAL_DFSDM_IRQHandler+0x2b6>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d034      	beq.n	8001a02 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d02f      	beq.n	8001a02 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f90a 	bl	8001bbc <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	649a      	str	r2, [r3, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 80e4 	bne.w	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d112      	bne.n	80019ea <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d101      	bne.n	80019e2 <HAL_DFSDM_IRQHandler+0x116>
 80019de:	2201      	movs	r2, #1
 80019e0:	e000      	b.n	80019e4 <HAL_DFSDM_IRQHandler+0x118>
 80019e2:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_DFSDM_IRQHandler+0x12e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f8:	e000      	b.n	80019fc <HAL_DFSDM_IRQHandler+0x130>
 80019fa:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6493      	str	r3, [r2, #72]	@ 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8001a00:	e0c0      	b.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03d      	beq.n	8001a88 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d038      	beq.n	8001a88 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8001a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_DFSDM_IRQHandler+0x162>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_DFSDM_IRQHandler+0x164>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8001a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001a3e:	e005      	b.n	8001a4c <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8001a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a42:	3301      	adds	r3, #1
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
      reg = reg >> 1;
 8001a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <HAL_DFSDM_IRQHandler+0x190>
 8001a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d9f1      	bls.n	8001a40 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_DFSDM_IRQHandler+0x1a2>
 8001a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a64:	3308      	adds	r3, #8
 8001a66:	2201      	movs	r2, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	e003      	b.n	8001a76 <HAL_DFSDM_IRQHandler+0x1aa>
 8001a6e:	2201      	movs	r2, #1
 8001a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8a5 	bl	8001bd0 <HAL_DFSDM_FilterAwdCallback>
  {
 8001a86:	e07d      	b.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8001b8c <HAL_DFSDM_IRQHandler+0x2c0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d141      	bne.n	8001b16 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03c      	beq.n	8001b16 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d037      	beq.n	8001b16 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001ab6:	e02a      	b.n	8001b0e <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01f      	beq.n	8001b02 <HAL_DFSDM_IRQHandler+0x236>
 8001ac2:	4a33      	ldr	r2, [pc, #204]	@ (8001b90 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8001ace:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00f      	beq.n	8001b02 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f103 0210 	add.w	r2, r3, #16
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2101      	movs	r1, #1
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8001af4:	4a26      	ldr	r2, [pc, #152]	@ (8001b90 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fd2f 	bl	8001560 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8001b02:	6a3b      	ldr	r3, [r7, #32]
 8001b04:	3301      	adds	r3, #1
 8001b06:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8001b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	2b07      	cmp	r3, #7
 8001b12:	d9d1      	bls.n	8001ab8 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8001b14:	e036      	b.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_DFSDM_IRQHandler+0x2c0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d131      	bne.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b26:	d32d      	bcc.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d028      	beq.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	0e1b      	lsrs	r3, r3, #24
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001b42:	e005      	b.n	8001b50 <HAL_DFSDM_IRQHandler+0x284>
    {
      channel++;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	3301      	adds	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_DFSDM_IRQHandler+0x294>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b06      	cmp	r3, #6
 8001b5e:	d9f1      	bls.n	8001b44 <HAL_DFSDM_IRQHandler+0x278>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f103 0218 	add.w	r2, r3, #24
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8001b72:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <HAL_DFSDM_IRQHandler+0x2c4>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fcfa 	bl	8001574 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8001b80:	e000      	b.n	8001b84 <HAL_DFSDM_IRQHandler+0x2b8>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001b82:	bf00      	nop
}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	@ 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40016100 	.word	0x40016100
 8001b90:	20000a5c 	.word	0x20000a5c

08001b94 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f7ff ffcc 	bl	8001ba8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f7ff ffb4 	bl	8001b94 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2203      	movs	r2, #3
 8001c46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff ffcd 	bl	8001be8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d102      	bne.n	8001c6e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e02b      	b.n	8001cc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a19      	ldr	r2, [pc, #100]	@ (8001cd8 <DFSDM_GetChannelFromInstance+0x80>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d102      	bne.n	8001c7c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e024      	b.n	8001cc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a17      	ldr	r2, [pc, #92]	@ (8001cdc <DFSDM_GetChannelFromInstance+0x84>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d102      	bne.n	8001c8a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e01d      	b.n	8001cc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ce0 <DFSDM_GetChannelFromInstance+0x88>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d102      	bne.n	8001c98 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001c92:	2304      	movs	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e016      	b.n	8001cc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ce4 <DFSDM_GetChannelFromInstance+0x8c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d102      	bne.n	8001ca6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e00f      	b.n	8001cc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce8 <DFSDM_GetChannelFromInstance+0x90>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d102      	bne.n	8001cb4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001cae:	2306      	movs	r3, #6
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e008      	b.n	8001cc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <DFSDM_GetChannelFromInstance+0x94>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	e001      	b.n	8001cc6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40016000 	.word	0x40016000
 8001cd8:	40016020 	.word	0x40016020
 8001cdc:	40016040 	.word	0x40016040
 8001ce0:	40016080 	.word	0x40016080
 8001ce4:	400160a0 	.word	0x400160a0
 8001ce8:	400160c0 	.word	0x400160c0
 8001cec:	400160e0 	.word	0x400160e0

08001cf0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d108      	bne.n	8001d12 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e033      	b.n	8001d7a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0201 	bic.w	r2, r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001d30:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0201 	orr.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	d116      	bne.n	8001d7a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d107      	bne.n	8001d64 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0202 	orr.w	r2, r2, #2
 8001d62:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <DFSDM_RegConvStart+0x84>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	e000      	b.n	8001d76 <DFSDM_RegConvStart+0x86>
 8001d74:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <DFSDM_RegConvStart+0x98>
 8001d84:	2202      	movs	r2, #2
 8001d86:	e000      	b.n	8001d8a <DFSDM_RegConvStart+0x9a>
 8001d88:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e08d      	b.n	8001eca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b47      	ldr	r3, [pc, #284]	@ (8001ed4 <HAL_DMA_Init+0x138>)
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d80f      	bhi.n	8001dda <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <HAL_DMA_Init+0x13c>)
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a45      	ldr	r2, [pc, #276]	@ (8001edc <HAL_DMA_Init+0x140>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	009a      	lsls	r2, r3, #2
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a42      	ldr	r2, [pc, #264]	@ (8001ee0 <HAL_DMA_Init+0x144>)
 8001dd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dd8:	e00e      	b.n	8001df8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <HAL_DMA_Init+0x148>)
 8001de2:	4413      	add	r3, r2
 8001de4:	4a3d      	ldr	r2, [pc, #244]	@ (8001edc <HAL_DMA_Init+0x140>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	009a      	lsls	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ee8 <HAL_DMA_Init+0x14c>)
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f9b6 	bl	80021bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e58:	d102      	bne.n	8001e60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d010      	beq.n	8001ea0 <HAL_DMA_Init+0x104>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d80c      	bhi.n	8001ea0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f9d6 	bl	8002238 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	e008      	b.n	8001eb2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020407 	.word	0x40020407
 8001ed8:	bffdfff8 	.word	0xbffdfff8
 8001edc:	cccccccd 	.word	0xcccccccd
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	bffdfbf8 	.word	0xbffdfbf8
 8001ee8:	40020400 	.word	0x40020400

08001eec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_DMA_Start_IT+0x20>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e066      	b.n	8001fda <HAL_DMA_Start_IT+0xee>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d155      	bne.n	8001fcc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0201 	bic.w	r2, r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 f8fb 	bl	8002140 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 020e 	orr.w	r2, r2, #14
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e00f      	b.n	8001f84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 020a 	orr.w	r2, r2, #10
 8001f82:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d007      	beq.n	8001fba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fb8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	e005      	b.n	8001fd8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	f003 031c 	and.w	r3, r3, #28
 8002002:	2204      	movs	r2, #4
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d026      	beq.n	800205c <HAL_DMA_IRQHandler+0x7a>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d021      	beq.n	800205c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b00      	cmp	r3, #0
 8002024:	d107      	bne.n	8002036 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0204 	bic.w	r2, r2, #4
 8002034:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f003 021c 	and.w	r2, r3, #28
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	2104      	movs	r1, #4
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	2b00      	cmp	r3, #0
 8002050:	d071      	beq.n	8002136 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800205a:	e06c      	b.n	8002136 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002060:	f003 031c 	and.w	r3, r3, #28
 8002064:	2202      	movs	r2, #2
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4013      	ands	r3, r2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d02e      	beq.n	80020ce <HAL_DMA_IRQHandler+0xec>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d029      	beq.n	80020ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 020a 	bic.w	r2, r2, #10
 8002096:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	f003 021c 	and.w	r2, r3, #28
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	2102      	movs	r1, #2
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d038      	beq.n	8002136 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020cc:	e033      	b.n	8002136 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f003 031c 	and.w	r3, r3, #28
 80020d6:	2208      	movs	r2, #8
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d02a      	beq.n	8002138 <HAL_DMA_IRQHandler+0x156>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d025      	beq.n	8002138 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 020e 	bic.w	r2, r2, #14
 80020fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002100:	f003 021c 	and.w	r2, r3, #28
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002136:	bf00      	nop
 8002138:	bf00      	nop
}
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002156:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002168:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f003 021c 	and.w	r2, r3, #28
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f202 	lsl.w	r2, r1, r2
 800217c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b10      	cmp	r3, #16
 800218c:	d108      	bne.n	80021a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800219e:	e007      	b.n	80021b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d80a      	bhi.n	80021e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021dc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6493      	str	r3, [r2, #72]	@ 0x48
 80021e4:	e007      	b.n	80021f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	009a      	lsls	r2, r3, #2
 80021ee:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80021f0:	4413      	add	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3b08      	subs	r3, #8
 80021fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800220c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2201      	movs	r2, #1
 8002216:	409a      	lsls	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40020407 	.word	0x40020407
 800222c:	4002081c 	.word	0x4002081c
 8002230:	cccccccd 	.word	0xcccccccd
 8002234:	40020880 	.word	0x40020880

08002238 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	461a      	mov	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a08      	ldr	r2, [pc, #32]	@ (800227c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3b01      	subs	r3, #1
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	1000823f 	.word	0x1000823f
 800227c:	40020940 	.word	0x40020940

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	e166      	b.n	800255e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8158 	beq.w	8002558 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d005      	beq.n	80022c0 <HAL_GPIO_Init+0x40>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d130      	bne.n	8002322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022f6:	2201      	movs	r2, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 0201 	and.w	r2, r3, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b03      	cmp	r3, #3
 800232c:	d017      	beq.n	800235e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d123      	bne.n	80023b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	08da      	lsrs	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	6939      	ldr	r1, [r7, #16]
 80023ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0203 	and.w	r2, r3, #3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80b2 	beq.w	8002558 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f4:	4b61      	ldr	r3, [pc, #388]	@ (800257c <HAL_GPIO_Init+0x2fc>)
 80023f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f8:	4a60      	ldr	r2, [pc, #384]	@ (800257c <HAL_GPIO_Init+0x2fc>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002400:	4b5e      	ldr	r3, [pc, #376]	@ (800257c <HAL_GPIO_Init+0x2fc>)
 8002402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800240c:	4a5c      	ldr	r2, [pc, #368]	@ (8002580 <HAL_GPIO_Init+0x300>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002436:	d02b      	beq.n	8002490 <HAL_GPIO_Init+0x210>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_GPIO_Init+0x304>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d025      	beq.n	800248c <HAL_GPIO_Init+0x20c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a51      	ldr	r2, [pc, #324]	@ (8002588 <HAL_GPIO_Init+0x308>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d01f      	beq.n	8002488 <HAL_GPIO_Init+0x208>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a50      	ldr	r2, [pc, #320]	@ (800258c <HAL_GPIO_Init+0x30c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d019      	beq.n	8002484 <HAL_GPIO_Init+0x204>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a4f      	ldr	r2, [pc, #316]	@ (8002590 <HAL_GPIO_Init+0x310>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <HAL_GPIO_Init+0x200>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4e      	ldr	r2, [pc, #312]	@ (8002594 <HAL_GPIO_Init+0x314>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1fc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <HAL_GPIO_Init+0x318>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1f8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4c      	ldr	r2, [pc, #304]	@ (800259c <HAL_GPIO_Init+0x31c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1f4>
 8002470:	2307      	movs	r3, #7
 8002472:	e00e      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002474:	2308      	movs	r3, #8
 8002476:	e00c      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002478:	2306      	movs	r3, #6
 800247a:	e00a      	b.n	8002492 <HAL_GPIO_Init+0x212>
 800247c:	2305      	movs	r3, #5
 800247e:	e008      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002480:	2304      	movs	r3, #4
 8002482:	e006      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002484:	2303      	movs	r3, #3
 8002486:	e004      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002488:	2302      	movs	r3, #2
 800248a:	e002      	b.n	8002492 <HAL_GPIO_Init+0x212>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002490:	2300      	movs	r3, #0
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	f002 0203 	and.w	r2, r2, #3
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	4093      	lsls	r3, r2
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a2:	4937      	ldr	r1, [pc, #220]	@ (8002580 <HAL_GPIO_Init+0x300>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b0:	4b3b      	ldr	r3, [pc, #236]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024d4:	4a32      	ldr	r2, [pc, #200]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024da:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024fe:	4a28      	ldr	r2, [pc, #160]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002504:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002528:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800252e:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002552:	4a13      	ldr	r2, [pc, #76]	@ (80025a0 <HAL_GPIO_Init+0x320>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f ae91 	bne.w	8002290 <HAL_GPIO_Init+0x10>
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000
 8002584:	48000400 	.word	0x48000400
 8002588:	48000800 	.word	0x48000800
 800258c:	48000c00 	.word	0x48000c00
 8002590:	48001000 	.word	0x48001000
 8002594:	48001400 	.word	0x48001400
 8002598:	48001800 	.word	0x48001800
 800259c:	48001c00 	.word	0x48001c00
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4013      	ands	r3, r2
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43d9      	mvns	r1, r3
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	400b      	ands	r3, r1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002612:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800261e:	4a05      	ldr	r2, [pc, #20]	@ (8002634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff7e 	bl	8000528 <HAL_GPIO_EXTI_Callback>
  }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010400 	.word	0x40010400

08002638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e08d      	b.n	8002766 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe fbc6 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2224      	movs	r2, #36	@ 0x24
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002688:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002698:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	e006      	b.n	80026c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d108      	bne.n	80026da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	e007      	b.n	80026ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800270c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69d9      	ldr	r1, [r3, #28]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2220      	movs	r2, #32
 8002752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	d138      	bne.n	80027f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800278e:	2302      	movs	r3, #2
 8002790:	e032      	b.n	80027f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2224      	movs	r2, #36	@ 0x24
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6819      	ldr	r1, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e000      	b.n	80027f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027f6:	2302      	movs	r3, #2
  }
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b20      	cmp	r3, #32
 8002818:	d139      	bne.n	800288e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002824:	2302      	movs	r3, #2
 8002826:	e033      	b.n	8002890 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	@ 0x24
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002856:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2220      	movs	r2, #32
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028a0:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ac:	d102      	bne.n	80028b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80028ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028b2:	e00b      	b.n	80028cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c2:	d102      	bne.n	80028ca <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80028c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028c8:	e000      	b.n	80028cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80028ca:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40007000 	.word	0x40007000

080028dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d141      	bne.n	800296e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f6:	d131      	bne.n	800295c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028f8:	4b47      	ldr	r3, [pc, #284]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028fe:	4a46      	ldr	r2, [pc, #280]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002904:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002908:	4b43      	ldr	r3, [pc, #268]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002910:	4a41      	ldr	r2, [pc, #260]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002918:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2232      	movs	r2, #50	@ 0x32
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	4a3f      	ldr	r2, [pc, #252]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	0c9b      	lsrs	r3, r3, #18
 800292a:	3301      	adds	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800292e:	e002      	b.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3b01      	subs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002936:	4b38      	ldr	r3, [pc, #224]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002942:	d102      	bne.n	800294a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f2      	bne.n	8002930 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800294a:	4b33      	ldr	r3, [pc, #204]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002956:	d158      	bne.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e057      	b.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800295c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002962:	4a2d      	ldr	r2, [pc, #180]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800296c:	e04d      	b.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002974:	d141      	bne.n	80029fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002976:	4b28      	ldr	r3, [pc, #160]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002982:	d131      	bne.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002984:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800298a:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002994:	4b20      	ldr	r3, [pc, #128]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800299c:	4a1e      	ldr	r2, [pc, #120]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2232      	movs	r2, #50	@ 0x32
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	0c9b      	lsrs	r3, r3, #18
 80029b6:	3301      	adds	r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ba:	e002      	b.n	80029c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b01      	subs	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ce:	d102      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f2      	bne.n	80029bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e2:	d112      	bne.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e011      	b.n	8002a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80029f8:	e007      	b.n	8002a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029fa:	4b07      	ldr	r3, [pc, #28]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a02:	4a05      	ldr	r2, [pc, #20]	@ (8002a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a08:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	431bde83 	.word	0x431bde83

08002a24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f000 bc08 	b.w	8003248 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a38:	4b96      	ldr	r3, [pc, #600]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a42:	4b94      	ldr	r3, [pc, #592]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80e4 	beq.w	8002c22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4c>
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	f040 808b 	bne.w	8002b7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 8087 	bne.w	8002b7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a70:	4b88      	ldr	r3, [pc, #544]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x64>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e3df      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	4b81      	ldr	r3, [pc, #516]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x7e>
 8002a98:	4b7e      	ldr	r3, [pc, #504]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa0:	e005      	b.n	8002aae <HAL_RCC_OscConfig+0x8a>
 8002aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d223      	bcs.n	8002afa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fdcc 	bl	8003654 <RCC_SetFlashLatencyFromMSIRange>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e3c0      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac6:	4b73      	ldr	r3, [pc, #460]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a72      	ldr	r2, [pc, #456]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b70      	ldr	r3, [pc, #448]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	496d      	ldr	r1, [pc, #436]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	4968      	ldr	r1, [pc, #416]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e025      	b.n	8002b46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002afa:	4b66      	ldr	r3, [pc, #408]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a65      	ldr	r2, [pc, #404]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b00:	f043 0308 	orr.w	r3, r3, #8
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4960      	ldr	r1, [pc, #384]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b18:	4b5e      	ldr	r3, [pc, #376]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	495b      	ldr	r1, [pc, #364]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fd8c 	bl	8003654 <RCC_SetFlashLatencyFromMSIRange>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e380      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b46:	f000 fcc1 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b51      	ldr	r3, [pc, #324]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4950      	ldr	r1, [pc, #320]	@ (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a4e      	ldr	r2, [pc, #312]	@ (8002c9c <HAL_RCC_OscConfig+0x278>)
 8002b64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b66:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca0 <HAL_RCC_OscConfig+0x27c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe faca 	bl	8001104 <HAL_InitTick>
 8002b70:	4603      	mov	r3, r0
 8002b72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d052      	beq.n	8002c20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	e364      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d032      	beq.n	8002bec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b86:	4b43      	ldr	r3, [pc, #268]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a42      	ldr	r2, [pc, #264]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fb07 	bl	80011a4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fb03 	bl	80011a4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e34d      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bac:	4b39      	ldr	r3, [pc, #228]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb8:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a35      	ldr	r2, [pc, #212]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	f043 0308 	orr.w	r3, r3, #8
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b33      	ldr	r3, [pc, #204]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4930      	ldr	r1, [pc, #192]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	492b      	ldr	r1, [pc, #172]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
 8002bea:	e01a      	b.n	8002c22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bec:	4b29      	ldr	r3, [pc, #164]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a28      	ldr	r2, [pc, #160]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fad4 	bl	80011a4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c00:	f7fe fad0 	bl	80011a4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e31a      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1dc>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d073      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x21c>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d10e      	bne.n	8002c58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d063      	beq.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d15f      	bne.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e2f7      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c60:	d106      	bne.n	8002c70 <HAL_RCC_OscConfig+0x24c>
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a0b      	ldr	r2, [pc, #44]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e025      	b.n	8002cbc <HAL_RCC_OscConfig+0x298>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c78:	d114      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x280>
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a05      	ldr	r2, [pc, #20]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a02      	ldr	r2, [pc, #8]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e013      	b.n	8002cbc <HAL_RCC_OscConfig+0x298>
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08005a28 	.word	0x08005a28
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	20000004 	.word	0x20000004
 8002ca4:	4ba0      	ldr	r3, [pc, #640]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a9f      	ldr	r2, [pc, #636]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b9d      	ldr	r3, [pc, #628]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a9c      	ldr	r2, [pc, #624]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fa6e 	bl	80011a4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe fa6a 	bl	80011a4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e2b4      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cde:	4b92      	ldr	r3, [pc, #584]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0x2a8>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa5a 	bl	80011a4 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fa56 	bl	80011a4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e2a0      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d06:	4b88      	ldr	r3, [pc, #544]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2d0>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d060      	beq.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_OscConfig+0x310>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2b0c      	cmp	r3, #12
 8002d2c:	d119      	bne.n	8002d62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d116      	bne.n	8002d62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d34:	4b7c      	ldr	r3, [pc, #496]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_OscConfig+0x328>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e27d      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b76      	ldr	r3, [pc, #472]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	4973      	ldr	r1, [pc, #460]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d60:	e040      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d023      	beq.n	8002db2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe fa15 	bl	80011a4 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe fa11 	bl	80011a4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e25b      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d90:	4b65      	ldr	r3, [pc, #404]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b62      	ldr	r3, [pc, #392]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	061b      	lsls	r3, r3, #24
 8002daa:	495f      	ldr	r1, [pc, #380]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
 8002db0:	e018      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe f9f1 	bl	80011a4 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc6:	f7fe f9ed 	bl	80011a4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e237      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd8:	4b53      	ldr	r3, [pc, #332]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d03c      	beq.n	8002e6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d01c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfe:	4a4a      	ldr	r2, [pc, #296]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe f9cc 	bl	80011a4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e10:	f7fe f9c8 	bl	80011a4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e212      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e22:	4b41      	ldr	r3, [pc, #260]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ef      	beq.n	8002e10 <HAL_RCC_OscConfig+0x3ec>
 8002e30:	e01b      	b.n	8002e6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e32:	4b3d      	ldr	r3, [pc, #244]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e38:	4a3b      	ldr	r2, [pc, #236]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fe f9af 	bl	80011a4 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e4a:	f7fe f9ab 	bl	80011a4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1f5      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e5c:	4b32      	ldr	r3, [pc, #200]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ef      	bne.n	8002e4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80a6 	beq.w	8002fc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e88:	4b27      	ldr	r3, [pc, #156]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8c:	4a26      	ldr	r2, [pc, #152]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e94:	4b24      	ldr	r3, [pc, #144]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea4:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_RCC_OscConfig+0x508>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d118      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f2c <HAL_RCC_OscConfig+0x508>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f2c <HAL_RCC_OscConfig+0x508>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe f972 	bl	80011a4 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec4:	f7fe f96e 	bl	80011a4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1b8      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <HAL_RCC_OscConfig+0x508>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d108      	bne.n	8002efc <HAL_RCC_OscConfig+0x4d8>
 8002eea:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002efa:	e029      	b.n	8002f50 <HAL_RCC_OscConfig+0x52c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d115      	bne.n	8002f30 <HAL_RCC_OscConfig+0x50c>
 8002f04:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0a:	4a07      	ldr	r2, [pc, #28]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f14:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1a:	4a03      	ldr	r2, [pc, #12]	@ (8002f28 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f24:	e014      	b.n	8002f50 <HAL_RCC_OscConfig+0x52c>
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	4b9d      	ldr	r3, [pc, #628]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f36:	4a9c      	ldr	r2, [pc, #624]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f40:	4b99      	ldr	r3, [pc, #612]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f46:	4a98      	ldr	r2, [pc, #608]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe f924 	bl	80011a4 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe f920 	bl	80011a4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e168      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f76:	4b8c      	ldr	r3, [pc, #560]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0ed      	beq.n	8002f60 <HAL_RCC_OscConfig+0x53c>
 8002f84:	e015      	b.n	8002fb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe f90d 	bl	80011a4 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f8c:	e00a      	b.n	8002fa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fe f909 	bl	80011a4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e151      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa4:	4b80      	ldr	r3, [pc, #512]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ed      	bne.n	8002f8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb8:	4b7b      	ldr	r3, [pc, #492]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbc:	4a7a      	ldr	r2, [pc, #488]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d03c      	beq.n	800304a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01c      	beq.n	8003012 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fd8:	4b73      	ldr	r3, [pc, #460]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fde:	4a72      	ldr	r2, [pc, #456]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe f8dc 	bl	80011a4 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff0:	f7fe f8d8 	bl	80011a4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e122      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003002:	4b69      	ldr	r3, [pc, #420]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003004:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x5cc>
 8003010:	e01b      	b.n	800304a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003012:	4b65      	ldr	r3, [pc, #404]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003014:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003018:	4a63      	ldr	r2, [pc, #396]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe f8bf 	bl	80011a4 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800302a:	f7fe f8bb 	bl	80011a4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e105      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800303c:	4b5a      	ldr	r3, [pc, #360]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 800303e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1ef      	bne.n	800302a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80f9 	beq.w	8003246 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	2b02      	cmp	r3, #2
 800305a:	f040 80cf 	bne.w	80031fc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800305e:	4b52      	ldr	r3, [pc, #328]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0203 	and.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306e:	429a      	cmp	r2, r3
 8003070:	d12c      	bne.n	80030cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	3b01      	subs	r3, #1
 800307e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d123      	bne.n	80030cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d11b      	bne.n	80030cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d113      	bne.n	80030cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d109      	bne.n	80030cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d071      	beq.n	80031b0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b0c      	cmp	r3, #12
 80030d0:	d068      	beq.n	80031a4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030d2:	4b35      	ldr	r3, [pc, #212]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d105      	bne.n	80030ea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030de:	4b32      	ldr	r3, [pc, #200]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0ac      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ee:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2d      	ldr	r2, [pc, #180]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 80030f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030fa:	f7fe f853 	bl	80011a4 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe f84f 	bl	80011a4 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e099      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003114:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	4b21      	ldr	r3, [pc, #132]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <HAL_RCC_OscConfig+0x788>)
 8003126:	4013      	ands	r3, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003130:	3a01      	subs	r2, #1
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800313a:	0212      	lsls	r2, r2, #8
 800313c:	4311      	orrs	r1, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003142:	0852      	lsrs	r2, r2, #1
 8003144:	3a01      	subs	r2, #1
 8003146:	0552      	lsls	r2, r2, #21
 8003148:	4311      	orrs	r1, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800314e:	0852      	lsrs	r2, r2, #1
 8003150:	3a01      	subs	r2, #1
 8003152:	0652      	lsls	r2, r2, #25
 8003154:	4311      	orrs	r1, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800315a:	06d2      	lsls	r2, r2, #27
 800315c:	430a      	orrs	r2, r1
 800315e:	4912      	ldr	r1, [pc, #72]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003160:	4313      	orrs	r3, r2
 8003162:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003164:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a0f      	ldr	r2, [pc, #60]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003170:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a0c      	ldr	r2, [pc, #48]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003176:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800317a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800317c:	f7fe f812 	bl	80011a4 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe f80e 	bl	80011a4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e058      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <HAL_RCC_OscConfig+0x784>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a2:	e050      	b.n	8003246 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e04f      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b0:	4b27      	ldr	r3, [pc, #156]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d144      	bne.n	8003246 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031bc:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a23      	ldr	r2, [pc, #140]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031c8:	4b21      	ldr	r3, [pc, #132]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a20      	ldr	r2, [pc, #128]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031d4:	f7fd ffe6 	bl	80011a4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd ffe2 	bl	80011a4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e02c      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ee:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x7b8>
 80031fa:	e024      	b.n	8003246 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d01f      	beq.n	8003242 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003202:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 8003208:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fd ffc9 	bl	80011a4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fd ffc5 	bl	80011a4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e00f      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003234:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4905      	ldr	r1, [pc, #20]	@ (8003250 <HAL_RCC_OscConfig+0x82c>)
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <HAL_RCC_OscConfig+0x830>)
 800323c:	4013      	ands	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
 8003240:	e001      	b.n	8003246 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	feeefffc 	.word	0xfeeefffc

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e11d      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b90      	ldr	r3, [pc, #576]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b8d      	ldr	r3, [pc, #564]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	498b      	ldr	r1, [pc, #556]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b89      	ldr	r3, [pc, #548]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e105      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	4b81      	ldr	r3, [pc, #516]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d908      	bls.n	80032ce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b7e      	ldr	r3, [pc, #504]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	497b      	ldr	r1, [pc, #492]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d079      	beq.n	80033ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d11e      	bne.n	8003320 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e2:	4b75      	ldr	r3, [pc, #468]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0dc      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80032f2:	f000 fa09 	bl	8003708 <RCC_GetSysClockFreqFromPLLSource>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a70      	ldr	r2, [pc, #448]	@ (80034bc <HAL_RCC_ClockConfig+0x264>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d946      	bls.n	800338c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032fe:	4b6e      	ldr	r3, [pc, #440]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d140      	bne.n	800338c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330a:	4b6b      	ldr	r3, [pc, #428]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003312:	4a69      	ldr	r2, [pc, #420]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003318:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e035      	b.n	800338c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b02      	cmp	r3, #2
 8003326:	d107      	bne.n	8003338 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003328:	4b63      	ldr	r3, [pc, #396]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d115      	bne.n	8003360 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b9      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003340:	4b5d      	ldr	r3, [pc, #372]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0ad      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003350:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0a5      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003360:	f000 f8b4 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8003364:	4603      	mov	r3, r0
 8003366:	4a55      	ldr	r2, [pc, #340]	@ (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d90f      	bls.n	800338c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800336c:	4b52      	ldr	r3, [pc, #328]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d109      	bne.n	800338c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003378:	4b4f      	ldr	r3, [pc, #316]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003380:	4a4d      	ldr	r2, [pc, #308]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003386:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800338c:	4b4a      	ldr	r3, [pc, #296]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 0203 	bic.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	4947      	ldr	r1, [pc, #284]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339e:	f7fd ff01 	bl	80011a4 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a6:	f7fd fefd 	bl	80011a4 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e077      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033bc:	4b3e      	ldr	r3, [pc, #248]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 020c 	and.w	r2, r3, #12
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d1eb      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b80      	cmp	r3, #128	@ 0x80
 80033d2:	d105      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033d4:	4b38      	ldr	r3, [pc, #224]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a37      	ldr	r2, [pc, #220]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80033da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033de:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d010      	beq.n	800340e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d208      	bcs.n	800340e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	492b      	ldr	r1, [pc, #172]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800340e:	4b29      	ldr	r3, [pc, #164]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d210      	bcs.n	800343e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 020f 	bic.w	r2, r3, #15
 8003424:	4923      	ldr	r1, [pc, #140]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342c:	4b21      	ldr	r3, [pc, #132]	@ (80034b4 <HAL_RCC_ClockConfig+0x25c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d001      	beq.n	800343e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e036      	b.n	80034ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344a:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4918      	ldr	r1, [pc, #96]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003468:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4910      	ldr	r1, [pc, #64]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800347c:	f000 f826 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	490c      	ldr	r1, [pc, #48]	@ (80034c0 <HAL_RCC_ClockConfig+0x268>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	f003 031f 	and.w	r3, r3, #31
 8003494:	fa22 f303 	lsr.w	r3, r2, r3
 8003498:	4a0a      	ldr	r2, [pc, #40]	@ (80034c4 <HAL_RCC_ClockConfig+0x26c>)
 800349a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800349c:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <HAL_RCC_ClockConfig+0x270>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd fe2f 	bl	8001104 <HAL_InitTick>
 80034a6:	4603      	mov	r3, r0
 80034a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40022000 	.word	0x40022000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	04c4b400 	.word	0x04c4b400
 80034c0:	08005a28 	.word	0x08005a28
 80034c4:	20000000 	.word	0x20000000
 80034c8:	20000004 	.word	0x20000004

080034cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	@ 0x24
 80034d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034da:	4b3e      	ldr	r3, [pc, #248]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e4:	4b3b      	ldr	r3, [pc, #236]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x34>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d121      	bne.n	800353e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d11e      	bne.n	800353e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003500:	4b34      	ldr	r3, [pc, #208]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d107      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800350c:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	e005      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800351c:	4b2d      	ldr	r3, [pc, #180]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003528:	4a2b      	ldr	r2, [pc, #172]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003530:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b04      	cmp	r3, #4
 8003542:	d102      	bne.n	800354a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003544:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e004      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d101      	bne.n	8003554 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003550:	4b23      	ldr	r3, [pc, #140]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003552:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d134      	bne.n	80035c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800355a:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0xa6>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d003      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0xac>
 8003570:	e005      	b.n	800357e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003574:	617b      	str	r3, [r7, #20]
      break;
 8003576:	e005      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003578:	4b19      	ldr	r3, [pc, #100]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800357a:	617b      	str	r3, [r7, #20]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	617b      	str	r3, [r7, #20]
      break;
 8003582:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003584:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3301      	adds	r3, #1
 8003590:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003592:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	fb03 f202 	mul.w	r2, r3, r2
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	0e5b      	lsrs	r3, r3, #25
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	3301      	adds	r3, #1
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035c4:	69bb      	ldr	r3, [r7, #24]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3724      	adds	r7, #36	@ 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08005a40 	.word	0x08005a40
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	007a1200 	.word	0x007a1200

080035e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003600:	f7ff fff0 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4904      	ldr	r1, [pc, #16]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	08005a38 	.word	0x08005a38

08003628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800362c:	f7ff ffda 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 8003630:	4602      	mov	r2, r0
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0adb      	lsrs	r3, r3, #11
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	4904      	ldr	r1, [pc, #16]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x28>)
 800363e:	5ccb      	ldrb	r3, [r1, r3]
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	08005a38 	.word	0x08005a38

08003654 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800365c:	2300      	movs	r3, #0
 800365e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003660:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800366c:	f7ff f916 	bl	800289c <HAL_PWREx_GetVoltageRange>
 8003670:	6178      	str	r0, [r7, #20]
 8003672:	e014      	b.n	800369e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	4b22      	ldr	r3, [pc, #136]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	4a21      	ldr	r2, [pc, #132]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003680:	4b1f      	ldr	r3, [pc, #124]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800368c:	f7ff f906 	bl	800289c <HAL_PWREx_GetVoltageRange>
 8003690:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003698:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800369c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036a4:	d10b      	bne.n	80036be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b80      	cmp	r3, #128	@ 0x80
 80036aa:	d913      	bls.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80036b0:	d902      	bls.n	80036b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036b2:	2302      	movs	r3, #2
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	e00d      	b.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036b8:	2301      	movs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	e00a      	b.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80036c2:	d902      	bls.n	80036ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80036c4:	2302      	movs	r3, #2
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	e004      	b.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b70      	cmp	r3, #112	@ 0x70
 80036ce:	d101      	bne.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036d0:	2301      	movs	r3, #1
 80036d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 020f 	bic.w	r2, r3, #15
 80036dc:	4909      	ldr	r1, [pc, #36]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036e4:	4b07      	ldr	r3, [pc, #28]	@ (8003704 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d001      	beq.n	80036f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	40022000 	.word	0x40022000

08003708 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800370e:	4b2d      	ldr	r3, [pc, #180]	@ (80037c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b03      	cmp	r3, #3
 800371c:	d00b      	beq.n	8003736 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d825      	bhi.n	8003770 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d008      	beq.n	800373c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d11f      	bne.n	8003770 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003730:	4b25      	ldr	r3, [pc, #148]	@ (80037c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003732:	613b      	str	r3, [r7, #16]
    break;
 8003734:	e01f      	b.n	8003776 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003736:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003738:	613b      	str	r3, [r7, #16]
    break;
 800373a:	e01c      	b.n	8003776 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800373c:	4b21      	ldr	r3, [pc, #132]	@ (80037c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0308 	and.w	r3, r3, #8
 8003744:	2b00      	cmp	r3, #0
 8003746:	d107      	bne.n	8003758 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003748:	4b1e      	ldr	r3, [pc, #120]	@ (80037c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374e:	0a1b      	lsrs	r3, r3, #8
 8003750:	f003 030f 	and.w	r3, r3, #15
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e005      	b.n	8003764 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003758:	4b1a      	ldr	r3, [pc, #104]	@ (80037c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003764:	4a1a      	ldr	r2, [pc, #104]	@ (80037d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376c:	613b      	str	r3, [r7, #16]
    break;
 800376e:	e002      	b.n	8003776 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
    break;
 8003774:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003776:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	3301      	adds	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	fb03 f202 	mul.w	r2, r3, r2
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800379c:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0e5b      	lsrs	r3, r3, #25
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80037b6:	683b      	ldr	r3, [r7, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40021000 	.word	0x40021000
 80037c8:	00f42400 	.word	0x00f42400
 80037cc:	007a1200 	.word	0x007a1200
 80037d0:	08005a40 	.word	0x08005a40

080037d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037dc:	2300      	movs	r3, #0
 80037de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037e0:	2300      	movs	r3, #0
 80037e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d040      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f4:	2b80      	cmp	r3, #128	@ 0x80
 80037f6:	d02a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80037f8:	2b80      	cmp	r3, #128	@ 0x80
 80037fa:	d825      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80037fc:	2b60      	cmp	r3, #96	@ 0x60
 80037fe:	d026      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003800:	2b60      	cmp	r3, #96	@ 0x60
 8003802:	d821      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003804:	2b40      	cmp	r3, #64	@ 0x40
 8003806:	d006      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003808:	2b40      	cmp	r3, #64	@ 0x40
 800380a:	d81d      	bhi.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003810:	2b20      	cmp	r3, #32
 8003812:	d010      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003814:	e018      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003816:	4b89      	ldr	r3, [pc, #548]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4a88      	ldr	r2, [pc, #544]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003822:	e015      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3304      	adds	r3, #4
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fb02 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003834:	e00c      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3320      	adds	r3, #32
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fbed 	bl	800401c <RCCEx_PLLSAI2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003846:	e003      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	74fb      	strb	r3, [r7, #19]
      break;
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800384e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003856:	4b79      	ldr	r3, [pc, #484]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800385c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003864:	4975      	ldr	r1, [pc, #468]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800386c:	e001      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386e:	7cfb      	ldrb	r3, [r7, #19]
 8003870:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d047      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d030      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388c:	d82a      	bhi.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800388e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003892:	d02a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003898:	d824      	bhi.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800389a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a4:	d81e      	bhi.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80038aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038ae:	d010      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038b0:	e018      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038b2:	4b62      	ldr	r3, [pc, #392]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4a61      	ldr	r2, [pc, #388]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038be:	e015      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fab4 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038d0:	e00c      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3320      	adds	r3, #32
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fb9f 	bl	800401c <RCCEx_PLLSAI2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	74fb      	strb	r3, [r7, #19]
      break;
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80038ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038f2:	4b52      	ldr	r3, [pc, #328]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	494e      	ldr	r1, [pc, #312]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003908:	e001      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390a:	7cfb      	ldrb	r3, [r7, #19]
 800390c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 809f 	beq.w	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391c:	2300      	movs	r3, #0
 800391e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003920:	4b46      	ldr	r3, [pc, #280]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b41      	ldr	r3, [pc, #260]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393a:	4a40      	ldr	r2, [pc, #256]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003940:	6593      	str	r3, [r2, #88]	@ 0x58
 8003942:	4b3e      	ldr	r3, [pc, #248]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3a      	ldr	r2, [pc, #232]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800395c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800395e:	f7fd fc21 	bl	80011a4 <HAL_GetTick>
 8003962:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003964:	e009      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fd fc1d 	bl	80011a4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d902      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	74fb      	strb	r3, [r7, #19]
        break;
 8003978:	e005      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800397a:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0ef      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003986:	7cfb      	ldrb	r3, [r7, #19]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d15b      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800398c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003996:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01f      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d019      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039aa:	4b24      	ldr	r3, [pc, #144]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039b6:	4b21      	ldr	r3, [pc, #132]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039bc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039c6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039cc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d6:	4a19      	ldr	r2, [pc, #100]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d016      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fbdc 	bl	80011a4 <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ee:	e00b      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd fbd8 	bl	80011a4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d902      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	74fb      	strb	r3, [r7, #19]
            break;
 8003a06:	e006      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ec      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003a16:	7cfb      	ldrb	r3, [r7, #19]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a1c:	4b07      	ldr	r3, [pc, #28]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	4903      	ldr	r1, [pc, #12]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	74bb      	strb	r3, [r7, #18]
 8003a3a:	e005      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a48:	7c7b      	ldrb	r3, [r7, #17]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d105      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4e:	4ba0      	ldr	r3, [pc, #640]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a52:	4a9f      	ldr	r2, [pc, #636]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a66:	4b9a      	ldr	r3, [pc, #616]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6c:	f023 0203 	bic.w	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	4996      	ldr	r1, [pc, #600]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a88:	4b91      	ldr	r3, [pc, #580]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f023 020c 	bic.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	498e      	ldr	r1, [pc, #568]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aaa:	4b89      	ldr	r3, [pc, #548]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	4985      	ldr	r1, [pc, #532]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003acc:	4b80      	ldr	r3, [pc, #512]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ada:	497d      	ldr	r1, [pc, #500]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003aee:	4b78      	ldr	r3, [pc, #480]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003afc:	4974      	ldr	r1, [pc, #464]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b10:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1e:	496c      	ldr	r1, [pc, #432]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b32:	4b67      	ldr	r3, [pc, #412]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b40:	4963      	ldr	r1, [pc, #396]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b54:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b62:	495b      	ldr	r1, [pc, #364]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b76:	4b56      	ldr	r3, [pc, #344]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	4952      	ldr	r1, [pc, #328]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b98:	4b4d      	ldr	r3, [pc, #308]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba6:	494a      	ldr	r1, [pc, #296]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bba:	4b45      	ldr	r3, [pc, #276]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc8:	4941      	ldr	r1, [pc, #260]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bea:	4939      	ldr	r1, [pc, #228]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d028      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bfe:	4b34      	ldr	r3, [pc, #208]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0c:	4930      	ldr	r1, [pc, #192]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c28:	60d3      	str	r3, [r2, #12]
 8003c2a:	e011      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 f8f9 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c46:	7cfb      	ldrb	r3, [r7, #19]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003c4c:	7cfb      	ldrb	r3, [r7, #19]
 8003c4e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d04d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c64:	d108      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003c66:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c6c:	4a18      	ldr	r2, [pc, #96]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c72:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003c76:	e012      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c78:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c7e:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c84:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c96:	490e      	ldr	r1, [pc, #56]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	60d3      	str	r3, [r2, #12]
 8003cb4:	e020      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cbe:	d109      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cc0:	4b03      	ldr	r3, [pc, #12]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a02      	ldr	r2, [pc, #8]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cca:	60d3      	str	r3, [r2, #12]
 8003ccc:	e014      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f8a5 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cee:	7cfb      	ldrb	r3, [r7, #19]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003cf4:	7cfb      	ldrb	r3, [r7, #19]
 8003cf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d028      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d04:	4b4a      	ldr	r3, [pc, #296]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d12:	4947      	ldr	r1, [pc, #284]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d22:	d106      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d24:	4b42      	ldr	r3, [pc, #264]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	4a41      	ldr	r2, [pc, #260]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2e:	60d3      	str	r3, [r2, #12]
 8003d30:	e011      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d3a:	d10c      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	2101      	movs	r1, #1
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f876 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01e      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d62:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d68:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d72:	492f      	ldr	r1, [pc, #188]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f851 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dac:	4b20      	ldr	r3, [pc, #128]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003db2:	f023 0204 	bic.w	r2, r3, #4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dbc:	491c      	ldr	r1, [pc, #112]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00b      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003dd0:	4b17      	ldr	r3, [pc, #92]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dd6:	f023 0218 	bic.w	r2, r3, #24
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	4913      	ldr	r1, [pc, #76]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d017      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003df4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e04:	490a      	ldr	r1, [pc, #40]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e16:	d105      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40021000 	.word	0x40021000

08003e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e42:	4b72      	ldr	r3, [pc, #456]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0203 	and.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d103      	bne.n	8003e66 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
       ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d142      	bne.n	8003eec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e03f      	b.n	8003eec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d018      	beq.n	8003ea6 <RCCEx_PLLSAI1_Config+0x72>
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d825      	bhi.n	8003ec4 <RCCEx_PLLSAI1_Config+0x90>
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d002      	beq.n	8003e82 <RCCEx_PLLSAI1_Config+0x4e>
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d009      	beq.n	8003e94 <RCCEx_PLLSAI1_Config+0x60>
 8003e80:	e020      	b.n	8003ec4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e82:	4b62      	ldr	r3, [pc, #392]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11d      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e92:	e01a      	b.n	8003eca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e94:	4b5d      	ldr	r3, [pc, #372]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d116      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea4:	e013      	b.n	8003ece <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ea6:	4b59      	ldr	r3, [pc, #356]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eb2:	4b56      	ldr	r3, [pc, #344]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ec2:	e006      	b.n	8003ed2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec8:	e004      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d108      	bne.n	8003eec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003eda:	4b4c      	ldr	r3, [pc, #304]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4949      	ldr	r1, [pc, #292]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 8086 	bne.w	8004000 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ef4:	4b45      	ldr	r3, [pc, #276]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a44      	ldr	r2, [pc, #272]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003efa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd f950 	bl	80011a4 <HAL_GetTick>
 8003f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f06:	e009      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f08:	f7fd f94c 	bl	80011a4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d902      	bls.n	8003f1c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	73fb      	strb	r3, [r7, #15]
        break;
 8003f1a:	e005      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ef      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d168      	bne.n	8004000 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d113      	bne.n	8003f5c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f34:	4b35      	ldr	r3, [pc, #212]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	4b35      	ldr	r3, [pc, #212]	@ (8004010 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68d2      	ldr	r2, [r2, #12]
 8003f46:	06d2      	lsls	r2, r2, #27
 8003f48:	4311      	orrs	r1, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6852      	ldr	r2, [r2, #4]
 8003f4e:	3a01      	subs	r2, #1
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	430a      	orrs	r2, r1
 8003f54:	492d      	ldr	r1, [pc, #180]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	610b      	str	r3, [r1, #16]
 8003f5a:	e02d      	b.n	8003fb8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d115      	bne.n	8003f8e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	0211      	lsls	r1, r2, #8
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6912      	ldr	r2, [r2, #16]
 8003f74:	0852      	lsrs	r2, r2, #1
 8003f76:	3a01      	subs	r2, #1
 8003f78:	0552      	lsls	r2, r2, #21
 8003f7a:	4311      	orrs	r1, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6852      	ldr	r2, [r2, #4]
 8003f80:	3a01      	subs	r2, #1
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	430a      	orrs	r2, r1
 8003f86:	4921      	ldr	r1, [pc, #132]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	610b      	str	r3, [r1, #16]
 8003f8c:	e014      	b.n	8003fb8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	4b21      	ldr	r3, [pc, #132]	@ (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6892      	ldr	r2, [r2, #8]
 8003f9a:	0211      	lsls	r1, r2, #8
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6952      	ldr	r2, [r2, #20]
 8003fa0:	0852      	lsrs	r2, r2, #1
 8003fa2:	3a01      	subs	r2, #1
 8003fa4:	0652      	lsls	r2, r2, #25
 8003fa6:	4311      	orrs	r1, r2
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6852      	ldr	r2, [r2, #4]
 8003fac:	3a01      	subs	r2, #1
 8003fae:	0112      	lsls	r2, r2, #4
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	4916      	ldr	r1, [pc, #88]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fb8:	4b14      	ldr	r3, [pc, #80]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc4:	f7fd f8ee 	bl	80011a4 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fca:	e009      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fcc:	f7fd f8ea 	bl	80011a4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d902      	bls.n	8003fe0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003fde:	e005      	b.n	8003fec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ef      	beq.n	8003fcc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ff2:	4b06      	ldr	r3, [pc, #24]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	4904      	ldr	r1, [pc, #16]	@ (800400c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	07ff800f 	.word	0x07ff800f
 8004014:	ff9f800f 	.word	0xff9f800f
 8004018:	f9ff800f 	.word	0xf9ff800f

0800401c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800402a:	4b72      	ldr	r3, [pc, #456]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004036:	4b6f      	ldr	r3, [pc, #444]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d103      	bne.n	800404e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
       ||
 800404a:	2b00      	cmp	r3, #0
 800404c:	d142      	bne.n	80040d4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e03f      	b.n	80040d4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d018      	beq.n	800408e <RCCEx_PLLSAI2_Config+0x72>
 800405c:	2b03      	cmp	r3, #3
 800405e:	d825      	bhi.n	80040ac <RCCEx_PLLSAI2_Config+0x90>
 8004060:	2b01      	cmp	r3, #1
 8004062:	d002      	beq.n	800406a <RCCEx_PLLSAI2_Config+0x4e>
 8004064:	2b02      	cmp	r3, #2
 8004066:	d009      	beq.n	800407c <RCCEx_PLLSAI2_Config+0x60>
 8004068:	e020      	b.n	80040ac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800406a:	4b62      	ldr	r3, [pc, #392]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11d      	bne.n	80040b2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800407a:	e01a      	b.n	80040b2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800407c:	4b5d      	ldr	r3, [pc, #372]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004084:	2b00      	cmp	r3, #0
 8004086:	d116      	bne.n	80040b6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408c:	e013      	b.n	80040b6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800408e:	4b59      	ldr	r3, [pc, #356]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800409a:	4b56      	ldr	r3, [pc, #344]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040aa:	e006      	b.n	80040ba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
      break;
 80040b0:	e004      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80040c2:	4b4c      	ldr	r3, [pc, #304]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f023 0203 	bic.w	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4949      	ldr	r1, [pc, #292]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 8086 	bne.w	80041e8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040dc:	4b45      	ldr	r3, [pc, #276]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a44      	ldr	r2, [pc, #272]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fd f85c 	bl	80011a4 <HAL_GetTick>
 80040ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040ee:	e009      	b.n	8004104 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040f0:	f7fd f858 	bl	80011a4 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	73fb      	strb	r3, [r7, #15]
        break;
 8004102:	e005      	b.n	8004110 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004104:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ef      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d168      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d113      	bne.n	8004144 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800411c:	4b35      	ldr	r3, [pc, #212]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	4b35      	ldr	r3, [pc, #212]	@ (80041f8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004122:	4013      	ands	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6892      	ldr	r2, [r2, #8]
 8004128:	0211      	lsls	r1, r2, #8
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68d2      	ldr	r2, [r2, #12]
 800412e:	06d2      	lsls	r2, r2, #27
 8004130:	4311      	orrs	r1, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6852      	ldr	r2, [r2, #4]
 8004136:	3a01      	subs	r2, #1
 8004138:	0112      	lsls	r2, r2, #4
 800413a:	430a      	orrs	r2, r1
 800413c:	492d      	ldr	r1, [pc, #180]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800413e:	4313      	orrs	r3, r2
 8004140:	614b      	str	r3, [r1, #20]
 8004142:	e02d      	b.n	80041a0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d115      	bne.n	8004176 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800414a:	4b2a      	ldr	r3, [pc, #168]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <RCCEx_PLLSAI2_Config+0x1e0>)
 8004150:	4013      	ands	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6892      	ldr	r2, [r2, #8]
 8004156:	0211      	lsls	r1, r2, #8
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6912      	ldr	r2, [r2, #16]
 800415c:	0852      	lsrs	r2, r2, #1
 800415e:	3a01      	subs	r2, #1
 8004160:	0552      	lsls	r2, r2, #21
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6852      	ldr	r2, [r2, #4]
 8004168:	3a01      	subs	r2, #1
 800416a:	0112      	lsls	r2, r2, #4
 800416c:	430a      	orrs	r2, r1
 800416e:	4921      	ldr	r1, [pc, #132]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004170:	4313      	orrs	r3, r2
 8004172:	614b      	str	r3, [r1, #20]
 8004174:	e014      	b.n	80041a0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004176:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <RCCEx_PLLSAI2_Config+0x1e4>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6892      	ldr	r2, [r2, #8]
 8004182:	0211      	lsls	r1, r2, #8
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6952      	ldr	r2, [r2, #20]
 8004188:	0852      	lsrs	r2, r2, #1
 800418a:	3a01      	subs	r2, #1
 800418c:	0652      	lsls	r2, r2, #25
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6852      	ldr	r2, [r2, #4]
 8004194:	3a01      	subs	r2, #1
 8004196:	0112      	lsls	r2, r2, #4
 8004198:	430a      	orrs	r2, r1
 800419a:	4916      	ldr	r1, [pc, #88]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800419c:	4313      	orrs	r3, r2
 800419e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041a0:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a13      	ldr	r2, [pc, #76]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fc fffa 	bl	80011a4 <HAL_GetTick>
 80041b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041b2:	e009      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041b4:	f7fc fff6 	bl	80011a4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d902      	bls.n	80041c8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	73fb      	strb	r3, [r7, #15]
          break;
 80041c6:	e005      	b.n	80041d4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041c8:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041da:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	4904      	ldr	r1, [pc, #16]	@ (80041f4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40021000 	.word	0x40021000
 80041f8:	07ff800f 	.word	0x07ff800f
 80041fc:	ff9f800f 	.word	0xff9f800f
 8004200:	f9ff800f 	.word	0xf9ff800f

08004204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e049      	b.n	80042aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d106      	bne.n	8004230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc fe3e 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f000 fb3e 	bl	80048c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <HAL_TIM_PWM_Start+0x24>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e03c      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d109      	bne.n	80042f2 <HAL_TIM_PWM_Start+0x3e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	e02f      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d109      	bne.n	800430c <HAL_TIM_PWM_Start+0x58>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e022      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b0c      	cmp	r3, #12
 8004310:	d109      	bne.n	8004326 <HAL_TIM_PWM_Start+0x72>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e015      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b10      	cmp	r3, #16
 800432a:	d109      	bne.n	8004340 <HAL_TIM_PWM_Start+0x8c>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e008      	b.n	8004352 <HAL_TIM_PWM_Start+0x9e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e09c      	b.n	8004494 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <HAL_TIM_PWM_Start+0xb6>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004368:	e023      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b04      	cmp	r3, #4
 800436e:	d104      	bne.n	800437a <HAL_TIM_PWM_Start+0xc6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004378:	e01b      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d104      	bne.n	800438a <HAL_TIM_PWM_Start+0xd6>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004388:	e013      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0xe6>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004398:	e00b      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b10      	cmp	r3, #16
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start+0xf6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043a8:	e003      	b.n	80043b2 <HAL_TIM_PWM_Start+0xfe>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2201      	movs	r2, #1
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fbc2 	bl	8004b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a35      	ldr	r2, [pc, #212]	@ (800449c <HAL_TIM_PWM_Start+0x1e8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x13e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a34      	ldr	r2, [pc, #208]	@ (80044a0 <HAL_TIM_PWM_Start+0x1ec>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x13e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a32      	ldr	r2, [pc, #200]	@ (80044a4 <HAL_TIM_PWM_Start+0x1f0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x13e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a31      	ldr	r2, [pc, #196]	@ (80044a8 <HAL_TIM_PWM_Start+0x1f4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x13e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a2f      	ldr	r2, [pc, #188]	@ (80044ac <HAL_TIM_PWM_Start+0x1f8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_PWM_Start+0x142>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_TIM_PWM_Start+0x144>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800440a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a22      	ldr	r2, [pc, #136]	@ (800449c <HAL_TIM_PWM_Start+0x1e8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d018      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a22      	ldr	r2, [pc, #136]	@ (80044b0 <HAL_TIM_PWM_Start+0x1fc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a21      	ldr	r2, [pc, #132]	@ (80044b4 <HAL_TIM_PWM_Start+0x200>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1f      	ldr	r2, [pc, #124]	@ (80044b8 <HAL_TIM_PWM_Start+0x204>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a17      	ldr	r2, [pc, #92]	@ (80044a0 <HAL_TIM_PWM_Start+0x1ec>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a15      	ldr	r2, [pc, #84]	@ (80044a4 <HAL_TIM_PWM_Start+0x1f0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d115      	bne.n	800447e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	4b18      	ldr	r3, [pc, #96]	@ (80044bc <HAL_TIM_PWM_Start+0x208>)
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b06      	cmp	r3, #6
 8004462:	d015      	beq.n	8004490 <HAL_TIM_PWM_Start+0x1dc>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446a:	d011      	beq.n	8004490 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	e008      	b.n	8004490 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e000      	b.n	8004492 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40013400 	.word	0x40013400
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40000c00 	.word	0x40000c00
 80044bc:	00010007 	.word	0x00010007

080044c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0202 	mvn.w	r2, #2
 80044f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f9bc 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 8004510:	e005      	b.n	800451e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9ae 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f9bf 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d020      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01b      	beq.n	8004570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0204 	mvn.w	r2, #4
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2202      	movs	r2, #2
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f996 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f988 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f999 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d020      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0208 	mvn.w	r2, #8
 800458c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2204      	movs	r2, #4
 8004592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f970 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 80045a8:	e005      	b.n	80045b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f962 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f973 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d020      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01b      	beq.n	8004608 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0210 	mvn.w	r2, #16
 80045d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2208      	movs	r2, #8
 80045de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f94a 	bl	8004888 <HAL_TIM_IC_CaptureCallback>
 80045f4:	e005      	b.n	8004602 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f93c 	bl	8004874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f94d 	bl	800489c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00c      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0201 	mvn.w	r2, #1
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f91a 	bl	8004860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fb2d 	bl	8004cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00c      	beq.n	800467e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb25 	bl	8004cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00c      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800469a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f907 	bl	80048b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f06f 0220 	mvn.w	r2, #32
 80046be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 faed 	bl	8004ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_ConfigClockSource+0x1c>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e0b6      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x18a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004708:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800470c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004714:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004726:	d03e      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0xd8>
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800472c:	f200 8087 	bhi.w	800483e <HAL_TIM_ConfigClockSource+0x170>
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004734:	f000 8086 	beq.w	8004844 <HAL_TIM_ConfigClockSource+0x176>
 8004738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473c:	d87f      	bhi.n	800483e <HAL_TIM_ConfigClockSource+0x170>
 800473e:	2b70      	cmp	r3, #112	@ 0x70
 8004740:	d01a      	beq.n	8004778 <HAL_TIM_ConfigClockSource+0xaa>
 8004742:	2b70      	cmp	r3, #112	@ 0x70
 8004744:	d87b      	bhi.n	800483e <HAL_TIM_ConfigClockSource+0x170>
 8004746:	2b60      	cmp	r3, #96	@ 0x60
 8004748:	d050      	beq.n	80047ec <HAL_TIM_ConfigClockSource+0x11e>
 800474a:	2b60      	cmp	r3, #96	@ 0x60
 800474c:	d877      	bhi.n	800483e <HAL_TIM_ConfigClockSource+0x170>
 800474e:	2b50      	cmp	r3, #80	@ 0x50
 8004750:	d03c      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0xfe>
 8004752:	2b50      	cmp	r3, #80	@ 0x50
 8004754:	d873      	bhi.n	800483e <HAL_TIM_ConfigClockSource+0x170>
 8004756:	2b40      	cmp	r3, #64	@ 0x40
 8004758:	d058      	beq.n	800480c <HAL_TIM_ConfigClockSource+0x13e>
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d86f      	bhi.n	800483e <HAL_TIM_ConfigClockSource+0x170>
 800475e:	2b30      	cmp	r3, #48	@ 0x30
 8004760:	d064      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x15e>
 8004762:	2b30      	cmp	r3, #48	@ 0x30
 8004764:	d86b      	bhi.n	800483e <HAL_TIM_ConfigClockSource+0x170>
 8004766:	2b20      	cmp	r3, #32
 8004768:	d060      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x15e>
 800476a:	2b20      	cmp	r3, #32
 800476c:	d867      	bhi.n	800483e <HAL_TIM_ConfigClockSource+0x170>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d05c      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x15e>
 8004772:	2b10      	cmp	r3, #16
 8004774:	d05a      	beq.n	800482c <HAL_TIM_ConfigClockSource+0x15e>
 8004776:	e062      	b.n	800483e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	f000 f9bc 	bl	8004b04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800479a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	609a      	str	r2, [r3, #8]
      break;
 80047a4:	e04f      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b6:	f000 f9a5 	bl	8004b04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047c8:	609a      	str	r2, [r3, #8]
      break;
 80047ca:	e03c      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d8:	461a      	mov	r2, r3
 80047da:	f000 f919 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2150      	movs	r1, #80	@ 0x50
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f972 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 80047ea:	e02c      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f8:	461a      	mov	r2, r3
 80047fa:	f000 f938 	bl	8004a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2160      	movs	r1, #96	@ 0x60
 8004804:	4618      	mov	r0, r3
 8004806:	f000 f962 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 800480a:	e01c      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004818:	461a      	mov	r2, r3
 800481a:	f000 f8f9 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2140      	movs	r1, #64	@ 0x40
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f952 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 800482a:	e00c      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4619      	mov	r1, r3
 8004836:	4610      	mov	r0, r2
 8004838:	f000 f949 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 800483c:	e003      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
      break;
 8004842:	e000      	b.n	8004846 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004844:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a46      	ldr	r2, [pc, #280]	@ (80049f0 <TIM_Base_SetConfig+0x12c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e2:	d00f      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a43      	ldr	r2, [pc, #268]	@ (80049f4 <TIM_Base_SetConfig+0x130>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a42      	ldr	r2, [pc, #264]	@ (80049f8 <TIM_Base_SetConfig+0x134>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a41      	ldr	r2, [pc, #260]	@ (80049fc <TIM_Base_SetConfig+0x138>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a40      	ldr	r2, [pc, #256]	@ (8004a00 <TIM_Base_SetConfig+0x13c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d108      	bne.n	8004916 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a35      	ldr	r2, [pc, #212]	@ (80049f0 <TIM_Base_SetConfig+0x12c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01f      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004924:	d01b      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a32      	ldr	r2, [pc, #200]	@ (80049f4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d017      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a31      	ldr	r2, [pc, #196]	@ (80049f8 <TIM_Base_SetConfig+0x134>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d013      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a30      	ldr	r2, [pc, #192]	@ (80049fc <TIM_Base_SetConfig+0x138>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00f      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a2f      	ldr	r2, [pc, #188]	@ (8004a00 <TIM_Base_SetConfig+0x13c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00b      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2e      	ldr	r2, [pc, #184]	@ (8004a04 <TIM_Base_SetConfig+0x140>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2d      	ldr	r2, [pc, #180]	@ (8004a08 <TIM_Base_SetConfig+0x144>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_Base_SetConfig+0x9a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2c      	ldr	r2, [pc, #176]	@ (8004a0c <TIM_Base_SetConfig+0x148>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d108      	bne.n	8004970 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	4313      	orrs	r3, r2
 800496e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a16      	ldr	r2, [pc, #88]	@ (80049f0 <TIM_Base_SetConfig+0x12c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a18      	ldr	r2, [pc, #96]	@ (8004a00 <TIM_Base_SetConfig+0x13c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a17      	ldr	r2, [pc, #92]	@ (8004a04 <TIM_Base_SetConfig+0x140>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d007      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a16      	ldr	r2, [pc, #88]	@ (8004a08 <TIM_Base_SetConfig+0x144>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d003      	beq.n	80049bc <TIM_Base_SetConfig+0xf8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a15      	ldr	r2, [pc, #84]	@ (8004a0c <TIM_Base_SetConfig+0x148>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d105      	bne.n	80049e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f023 0201 	bic.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	611a      	str	r2, [r3, #16]
  }
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40013400 	.word	0x40013400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 030a 	bic.w	r3, r3, #10
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f023 0210 	bic.w	r2, r3, #16
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	031b      	lsls	r3, r3, #12
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004aaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f043 0307 	orr.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	021a      	lsls	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2201      	movs	r2, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e068      	b.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d108      	bne.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004be2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1a:	d018      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a18      	ldr	r2, [pc, #96]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a13      	ldr	r2, [pc, #76]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d10c      	bne.n	8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40013400 	.word	0x40013400
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40014000 	.word	0x40014000

08004ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e042      	b.n	8004d74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fc f8f7 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2224      	movs	r2, #36	@ 0x24
 8004d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fb24 	bl	8005374 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f825 	bl	8004d7c <UART_SetConfig>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e01b      	b.n	8004d74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fba3 	bl	80054b8 <UART_CheckIdleState>
 8004d72:	4603      	mov	r3, r0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d80:	b08c      	sub	sp, #48	@ 0x30
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4baa      	ldr	r3, [pc, #680]	@ (8005054 <UART_SetConfig+0x2d8>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a9f      	ldr	r2, [pc, #636]	@ (8005058 <UART_SetConfig+0x2dc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de4:	4313      	orrs	r3, r2
 8004de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004df2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	f023 010f 	bic.w	r1, r3, #15
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a90      	ldr	r2, [pc, #576]	@ (800505c <UART_SetConfig+0x2e0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d125      	bne.n	8004e6c <UART_SetConfig+0xf0>
 8004e20:	4b8f      	ldr	r3, [pc, #572]	@ (8005060 <UART_SetConfig+0x2e4>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d81a      	bhi.n	8004e64 <UART_SetConfig+0xe8>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <UART_SetConfig+0xb8>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e55 	.word	0x08004e55
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e4a:	e116      	b.n	800507a <UART_SetConfig+0x2fe>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e52:	e112      	b.n	800507a <UART_SetConfig+0x2fe>
 8004e54:	2304      	movs	r3, #4
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5a:	e10e      	b.n	800507a <UART_SetConfig+0x2fe>
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e62:	e10a      	b.n	800507a <UART_SetConfig+0x2fe>
 8004e64:	2310      	movs	r3, #16
 8004e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6a:	e106      	b.n	800507a <UART_SetConfig+0x2fe>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a7c      	ldr	r2, [pc, #496]	@ (8005064 <UART_SetConfig+0x2e8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d138      	bne.n	8004ee8 <UART_SetConfig+0x16c>
 8004e76:	4b7a      	ldr	r3, [pc, #488]	@ (8005060 <UART_SetConfig+0x2e4>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	d82d      	bhi.n	8004ee0 <UART_SetConfig+0x164>
 8004e84:	a201      	add	r2, pc, #4	@ (adr r2, 8004e8c <UART_SetConfig+0x110>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ec1 	.word	0x08004ec1
 8004e90:	08004ee1 	.word	0x08004ee1
 8004e94:	08004ee1 	.word	0x08004ee1
 8004e98:	08004ee1 	.word	0x08004ee1
 8004e9c:	08004ed1 	.word	0x08004ed1
 8004ea0:	08004ee1 	.word	0x08004ee1
 8004ea4:	08004ee1 	.word	0x08004ee1
 8004ea8:	08004ee1 	.word	0x08004ee1
 8004eac:	08004ec9 	.word	0x08004ec9
 8004eb0:	08004ee1 	.word	0x08004ee1
 8004eb4:	08004ee1 	.word	0x08004ee1
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ed9 	.word	0x08004ed9
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec6:	e0d8      	b.n	800507a <UART_SetConfig+0x2fe>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ece:	e0d4      	b.n	800507a <UART_SetConfig+0x2fe>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed6:	e0d0      	b.n	800507a <UART_SetConfig+0x2fe>
 8004ed8:	2308      	movs	r3, #8
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ede:	e0cc      	b.n	800507a <UART_SetConfig+0x2fe>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee6:	e0c8      	b.n	800507a <UART_SetConfig+0x2fe>
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a5e      	ldr	r2, [pc, #376]	@ (8005068 <UART_SetConfig+0x2ec>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d125      	bne.n	8004f3e <UART_SetConfig+0x1c2>
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8005060 <UART_SetConfig+0x2e4>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004efc:	2b30      	cmp	r3, #48	@ 0x30
 8004efe:	d016      	beq.n	8004f2e <UART_SetConfig+0x1b2>
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d818      	bhi.n	8004f36 <UART_SetConfig+0x1ba>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d00a      	beq.n	8004f1e <UART_SetConfig+0x1a2>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d814      	bhi.n	8004f36 <UART_SetConfig+0x1ba>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <UART_SetConfig+0x19a>
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d008      	beq.n	8004f26 <UART_SetConfig+0x1aa>
 8004f14:	e00f      	b.n	8004f36 <UART_SetConfig+0x1ba>
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f1c:	e0ad      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f24:	e0a9      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f26:	2304      	movs	r3, #4
 8004f28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2c:	e0a5      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f2e:	2308      	movs	r3, #8
 8004f30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f34:	e0a1      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f36:	2310      	movs	r3, #16
 8004f38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3c:	e09d      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a4a      	ldr	r2, [pc, #296]	@ (800506c <UART_SetConfig+0x2f0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d125      	bne.n	8004f94 <UART_SetConfig+0x218>
 8004f48:	4b45      	ldr	r3, [pc, #276]	@ (8005060 <UART_SetConfig+0x2e4>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f52:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f54:	d016      	beq.n	8004f84 <UART_SetConfig+0x208>
 8004f56:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f58:	d818      	bhi.n	8004f8c <UART_SetConfig+0x210>
 8004f5a:	2b80      	cmp	r3, #128	@ 0x80
 8004f5c:	d00a      	beq.n	8004f74 <UART_SetConfig+0x1f8>
 8004f5e:	2b80      	cmp	r3, #128	@ 0x80
 8004f60:	d814      	bhi.n	8004f8c <UART_SetConfig+0x210>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <UART_SetConfig+0x1f0>
 8004f66:	2b40      	cmp	r3, #64	@ 0x40
 8004f68:	d008      	beq.n	8004f7c <UART_SetConfig+0x200>
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x210>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f72:	e082      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f7a:	e07e      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f82:	e07a      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f8a:	e076      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f92:	e072      	b.n	800507a <UART_SetConfig+0x2fe>
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a35      	ldr	r2, [pc, #212]	@ (8005070 <UART_SetConfig+0x2f4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d12a      	bne.n	8004ff4 <UART_SetConfig+0x278>
 8004f9e:	4b30      	ldr	r3, [pc, #192]	@ (8005060 <UART_SetConfig+0x2e4>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fac:	d01a      	beq.n	8004fe4 <UART_SetConfig+0x268>
 8004fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb2:	d81b      	bhi.n	8004fec <UART_SetConfig+0x270>
 8004fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb8:	d00c      	beq.n	8004fd4 <UART_SetConfig+0x258>
 8004fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fbe:	d815      	bhi.n	8004fec <UART_SetConfig+0x270>
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <UART_SetConfig+0x250>
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc8:	d008      	beq.n	8004fdc <UART_SetConfig+0x260>
 8004fca:	e00f      	b.n	8004fec <UART_SetConfig+0x270>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd2:	e052      	b.n	800507a <UART_SetConfig+0x2fe>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fda:	e04e      	b.n	800507a <UART_SetConfig+0x2fe>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe2:	e04a      	b.n	800507a <UART_SetConfig+0x2fe>
 8004fe4:	2308      	movs	r3, #8
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fea:	e046      	b.n	800507a <UART_SetConfig+0x2fe>
 8004fec:	2310      	movs	r3, #16
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ff2:	e042      	b.n	800507a <UART_SetConfig+0x2fe>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <UART_SetConfig+0x2dc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d13a      	bne.n	8005074 <UART_SetConfig+0x2f8>
 8004ffe:	4b18      	ldr	r3, [pc, #96]	@ (8005060 <UART_SetConfig+0x2e4>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005004:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005008:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800500c:	d01a      	beq.n	8005044 <UART_SetConfig+0x2c8>
 800500e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005012:	d81b      	bhi.n	800504c <UART_SetConfig+0x2d0>
 8005014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005018:	d00c      	beq.n	8005034 <UART_SetConfig+0x2b8>
 800501a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800501e:	d815      	bhi.n	800504c <UART_SetConfig+0x2d0>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <UART_SetConfig+0x2b0>
 8005024:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005028:	d008      	beq.n	800503c <UART_SetConfig+0x2c0>
 800502a:	e00f      	b.n	800504c <UART_SetConfig+0x2d0>
 800502c:	2300      	movs	r3, #0
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005032:	e022      	b.n	800507a <UART_SetConfig+0x2fe>
 8005034:	2302      	movs	r3, #2
 8005036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503a:	e01e      	b.n	800507a <UART_SetConfig+0x2fe>
 800503c:	2304      	movs	r3, #4
 800503e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005042:	e01a      	b.n	800507a <UART_SetConfig+0x2fe>
 8005044:	2308      	movs	r3, #8
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e016      	b.n	800507a <UART_SetConfig+0x2fe>
 800504c:	2310      	movs	r3, #16
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e012      	b.n	800507a <UART_SetConfig+0x2fe>
 8005054:	cfff69f3 	.word	0xcfff69f3
 8005058:	40008000 	.word	0x40008000
 800505c:	40013800 	.word	0x40013800
 8005060:	40021000 	.word	0x40021000
 8005064:	40004400 	.word	0x40004400
 8005068:	40004800 	.word	0x40004800
 800506c:	40004c00 	.word	0x40004c00
 8005070:	40005000 	.word	0x40005000
 8005074:	2310      	movs	r3, #16
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4aae      	ldr	r2, [pc, #696]	@ (8005338 <UART_SetConfig+0x5bc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	f040 8097 	bne.w	80051b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005086:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800508a:	2b08      	cmp	r3, #8
 800508c:	d823      	bhi.n	80050d6 <UART_SetConfig+0x35a>
 800508e:	a201      	add	r2, pc, #4	@ (adr r2, 8005094 <UART_SetConfig+0x318>)
 8005090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050d7 	.word	0x080050d7
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050d7 	.word	0x080050d7
 80050a4:	080050c7 	.word	0x080050c7
 80050a8:	080050d7 	.word	0x080050d7
 80050ac:	080050d7 	.word	0x080050d7
 80050b0:	080050d7 	.word	0x080050d7
 80050b4:	080050cf 	.word	0x080050cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b8:	f7fe faa0 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050be:	e010      	b.n	80050e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c0:	4b9e      	ldr	r3, [pc, #632]	@ (800533c <UART_SetConfig+0x5c0>)
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050c4:	e00d      	b.n	80050e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c6:	f7fe fa01 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 80050ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050cc:	e009      	b.n	80050e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050d4:	e005      	b.n	80050e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8130 	beq.w	800534a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	4a94      	ldr	r2, [pc, #592]	@ (8005340 <UART_SetConfig+0x5c4>)
 80050f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050f4:	461a      	mov	r2, r3
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	429a      	cmp	r2, r3
 800510c:	d305      	bcc.n	800511a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	429a      	cmp	r2, r3
 8005118:	d903      	bls.n	8005122 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005120:	e113      	b.n	800534a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2200      	movs	r2, #0
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	60fa      	str	r2, [r7, #12]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	4a84      	ldr	r2, [pc, #528]	@ (8005340 <UART_SetConfig+0x5c4>)
 8005130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005134:	b29b      	uxth	r3, r3
 8005136:	2200      	movs	r2, #0
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005140:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005144:	f7fb f85a 	bl	80001fc <__aeabi_uldivmod>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	f04f 0200 	mov.w	r2, #0
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	020b      	lsls	r3, r1, #8
 800515a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800515e:	0202      	lsls	r2, r0, #8
 8005160:	6979      	ldr	r1, [r7, #20]
 8005162:	6849      	ldr	r1, [r1, #4]
 8005164:	0849      	lsrs	r1, r1, #1
 8005166:	2000      	movs	r0, #0
 8005168:	460c      	mov	r4, r1
 800516a:	4605      	mov	r5, r0
 800516c:	eb12 0804 	adds.w	r8, r2, r4
 8005170:	eb43 0905 	adc.w	r9, r3, r5
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	469a      	mov	sl, r3
 800517c:	4693      	mov	fp, r2
 800517e:	4652      	mov	r2, sl
 8005180:	465b      	mov	r3, fp
 8005182:	4640      	mov	r0, r8
 8005184:	4649      	mov	r1, r9
 8005186:	f7fb f839 	bl	80001fc <__aeabi_uldivmod>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4613      	mov	r3, r2
 8005190:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005198:	d308      	bcc.n	80051ac <UART_SetConfig+0x430>
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051a0:	d204      	bcs.n	80051ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	60da      	str	r2, [r3, #12]
 80051aa:	e0ce      	b.n	800534a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051b2:	e0ca      	b.n	800534a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051bc:	d166      	bne.n	800528c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80051be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d827      	bhi.n	8005216 <UART_SetConfig+0x49a>
 80051c6:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <UART_SetConfig+0x450>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051f1 	.word	0x080051f1
 80051d0:	080051f9 	.word	0x080051f9
 80051d4:	08005201 	.word	0x08005201
 80051d8:	08005217 	.word	0x08005217
 80051dc:	08005207 	.word	0x08005207
 80051e0:	08005217 	.word	0x08005217
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005217 	.word	0x08005217
 80051ec:	0800520f 	.word	0x0800520f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f0:	f7fe fa04 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80051f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051f6:	e014      	b.n	8005222 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f8:	f7fe fa16 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 80051fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051fe:	e010      	b.n	8005222 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005200:	4b4e      	ldr	r3, [pc, #312]	@ (800533c <UART_SetConfig+0x5c0>)
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005204:	e00d      	b.n	8005222 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005206:	f7fe f961 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 800520a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800520c:	e009      	b.n	8005222 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800520e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005214:	e005      	b.n	8005222 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8090 	beq.w	800534a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	4a44      	ldr	r2, [pc, #272]	@ (8005340 <UART_SetConfig+0x5c4>)
 8005230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005234:	461a      	mov	r2, r3
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	fbb3 f3f2 	udiv	r3, r3, r2
 800523c:	005a      	lsls	r2, r3, #1
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	085b      	lsrs	r3, r3, #1
 8005244:	441a      	add	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	fbb2 f3f3 	udiv	r3, r2, r3
 800524e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	2b0f      	cmp	r3, #15
 8005254:	d916      	bls.n	8005284 <UART_SetConfig+0x508>
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525c:	d212      	bcs.n	8005284 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	b29b      	uxth	r3, r3
 8005262:	f023 030f 	bic.w	r3, r3, #15
 8005266:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	085b      	lsrs	r3, r3, #1
 800526c:	b29b      	uxth	r3, r3
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	b29a      	uxth	r2, r3
 8005274:	8bfb      	ldrh	r3, [r7, #30]
 8005276:	4313      	orrs	r3, r2
 8005278:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	8bfa      	ldrh	r2, [r7, #30]
 8005280:	60da      	str	r2, [r3, #12]
 8005282:	e062      	b.n	800534a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800528a:	e05e      	b.n	800534a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800528c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005290:	2b08      	cmp	r3, #8
 8005292:	d828      	bhi.n	80052e6 <UART_SetConfig+0x56a>
 8005294:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <UART_SetConfig+0x520>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	080052e7 	.word	0x080052e7
 80052ac:	080052d7 	.word	0x080052d7
 80052b0:	080052e7 	.word	0x080052e7
 80052b4:	080052e7 	.word	0x080052e7
 80052b8:	080052e7 	.word	0x080052e7
 80052bc:	080052df 	.word	0x080052df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c0:	f7fe f99c 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80052c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052c6:	e014      	b.n	80052f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c8:	f7fe f9ae 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 80052cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052ce:	e010      	b.n	80052f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d0:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <UART_SetConfig+0x5c0>)
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052d4:	e00d      	b.n	80052f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d6:	f7fe f8f9 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 80052da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80052dc:	e009      	b.n	80052f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80052e4:	e005      	b.n	80052f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052f0:	bf00      	nop
    }

    if (pclk != 0U)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d028      	beq.n	800534a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	4a10      	ldr	r2, [pc, #64]	@ (8005340 <UART_SetConfig+0x5c4>)
 80052fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005302:	461a      	mov	r2, r3
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	fbb3 f2f2 	udiv	r2, r3, r2
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	441a      	add	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b0f      	cmp	r3, #15
 8005320:	d910      	bls.n	8005344 <UART_SetConfig+0x5c8>
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005328:	d20c      	bcs.n	8005344 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	b29a      	uxth	r2, r3
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60da      	str	r2, [r3, #12]
 8005334:	e009      	b.n	800534a <UART_SetConfig+0x5ce>
 8005336:	bf00      	nop
 8005338:	40008000 	.word	0x40008000
 800533c:	00f42400 	.word	0x00f42400
 8005340:	08005a70 	.word	0x08005a70
      }
      else
      {
        ret = HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2201      	movs	r2, #1
 800534e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	2201      	movs	r2, #1
 8005356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2200      	movs	r2, #0
 8005364:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005366:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800536a:	4618      	mov	r0, r3
 800536c:	3730      	adds	r7, #48	@ 0x30
 800536e:	46bd      	mov	sp, r7
 8005370:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005374 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01a      	beq.n	800548a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005472:	d10a      	bne.n	800548a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	605a      	str	r2, [r3, #4]
  }
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b098      	sub	sp, #96	@ 0x60
 80054bc:	af02      	add	r7, sp, #8
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054c8:	f7fb fe6c 	bl	80011a4 <HAL_GetTick>
 80054cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d12f      	bne.n	800553c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e4:	2200      	movs	r2, #0
 80054e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f88e 	bl	800560c <UART_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d022      	beq.n	800553c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800550a:	653b      	str	r3, [r7, #80]	@ 0x50
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005514:	647b      	str	r3, [r7, #68]	@ 0x44
 8005516:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800551a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e6      	bne.n	80054f6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2220      	movs	r2, #32
 800552c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e063      	b.n	8005604 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d149      	bne.n	80055de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800554a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005552:	2200      	movs	r2, #0
 8005554:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f857 	bl	800560c <UART_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d03c      	beq.n	80055de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	623b      	str	r3, [r7, #32]
   return(result);
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005578:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005582:	633b      	str	r3, [r7, #48]	@ 0x30
 8005584:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055b6:	61fa      	str	r2, [r7, #28]
 80055b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	617b      	str	r3, [r7, #20]
   return(result);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e012      	b.n	8005604 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3758      	adds	r7, #88	@ 0x58
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800561c:	e04f      	b.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d04b      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005626:	f7fb fdbd 	bl	80011a4 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	429a      	cmp	r2, r3
 8005634:	d302      	bcc.n	800563c <UART_WaitOnFlagUntilTimeout+0x30>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e04e      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d037      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b80      	cmp	r3, #128	@ 0x80
 8005652:	d034      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d031      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69db      	ldr	r3, [r3, #28]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b08      	cmp	r3, #8
 8005666:	d110      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2208      	movs	r2, #8
 800566e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f838 	bl	80056e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2208      	movs	r2, #8
 800567a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e029      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005698:	d111      	bne.n	80056be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f81e 	bl	80056e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e00f      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d0a0      	beq.n	800561e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b095      	sub	sp, #84	@ 0x54
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800570c:	643b      	str	r3, [r7, #64]	@ 0x40
 800570e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005712:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e6      	bne.n	80056ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3308      	adds	r3, #8
 8005726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3308      	adds	r3, #8
 8005742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e3      	bne.n	8005720 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d118      	bne.n	8005792 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	60bb      	str	r3, [r7, #8]
   return(result);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 0310 	bic.w	r3, r3, #16
 8005774:	647b      	str	r3, [r7, #68]	@ 0x44
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	6979      	ldr	r1, [r7, #20]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	e841 2300 	strex	r3, r2, [r1]
 800578a:	613b      	str	r3, [r7, #16]
   return(result);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1e6      	bne.n	8005760 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80057a6:	bf00      	nop
 80057a8:	3754      	adds	r7, #84	@ 0x54
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e027      	b.n	8005818 <HAL_UARTEx_DisableFifoMode+0x66>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2224      	movs	r2, #36	@ 0x24
 80057d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005838:	2302      	movs	r3, #2
 800583a:	e02d      	b.n	8005898 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2224      	movs	r2, #36	@ 0x24
 8005848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f84f 	bl	800591c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e02d      	b.n	8005914 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	@ 0x24
 80058c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0201 	bic.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f811 	bl	800591c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005928:	2b00      	cmp	r3, #0
 800592a:	d108      	bne.n	800593e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800593c:	e031      	b.n	80059a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800593e:	2308      	movs	r3, #8
 8005940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005942:	2308      	movs	r3, #8
 8005944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	0e5b      	lsrs	r3, r3, #25
 800594e:	b2db      	uxtb	r3, r3
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	0f5b      	lsrs	r3, r3, #29
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	7b3a      	ldrb	r2, [r7, #12]
 800596a:	4911      	ldr	r1, [pc, #68]	@ (80059b0 <UARTEx_SetNbDataToProcess+0x94>)
 800596c:	5c8a      	ldrb	r2, [r1, r2]
 800596e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005972:	7b3a      	ldrb	r2, [r7, #12]
 8005974:	490f      	ldr	r1, [pc, #60]	@ (80059b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005978:	fb93 f3f2 	sdiv	r3, r3, r2
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	7b7a      	ldrb	r2, [r7, #13]
 8005988:	4909      	ldr	r1, [pc, #36]	@ (80059b0 <UARTEx_SetNbDataToProcess+0x94>)
 800598a:	5c8a      	ldrb	r2, [r1, r2]
 800598c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005990:	7b7a      	ldrb	r2, [r7, #13]
 8005992:	4908      	ldr	r1, [pc, #32]	@ (80059b4 <UARTEx_SetNbDataToProcess+0x98>)
 8005994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005996:	fb93 f3f2 	sdiv	r3, r3, r2
 800599a:	b29a      	uxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	08005a88 	.word	0x08005a88
 80059b4:	08005a90 	.word	0x08005a90

080059b8 <memset>:
 80059b8:	4402      	add	r2, r0
 80059ba:	4603      	mov	r3, r0
 80059bc:	4293      	cmp	r3, r2
 80059be:	d100      	bne.n	80059c2 <memset+0xa>
 80059c0:	4770      	bx	lr
 80059c2:	f803 1b01 	strb.w	r1, [r3], #1
 80059c6:	e7f9      	b.n	80059bc <memset+0x4>

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005a00 <__libc_init_array+0x38>)
 80059cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005a04 <__libc_init_array+0x3c>)
 80059ce:	1b64      	subs	r4, r4, r5
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	2600      	movs	r6, #0
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005a08 <__libc_init_array+0x40>)
 80059da:	4c0c      	ldr	r4, [pc, #48]	@ (8005a0c <__libc_init_array+0x44>)
 80059dc:	f000 f818 	bl	8005a10 <_init>
 80059e0:	1b64      	subs	r4, r4, r5
 80059e2:	10a4      	asrs	r4, r4, #2
 80059e4:	2600      	movs	r6, #0
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f0:	4798      	blx	r3
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fa:	4798      	blx	r3
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	08005aa0 	.word	0x08005aa0
 8005a04:	08005aa0 	.word	0x08005aa0
 8005a08:	08005aa0 	.word	0x08005aa0
 8005a0c:	08005aa4 	.word	0x08005aa4

08005a10 <_init>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr

08005a1c <_fini>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr
