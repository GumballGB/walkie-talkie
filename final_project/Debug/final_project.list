
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b0c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d38  08005d38  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d40  08005d40  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d44  08005d44  00006d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002270  2000000c  08005d54  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  08005d54  0000727c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018630  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a39  00000000  00000000  0001f66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  000220a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001101  00000000  00000000  00023638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af7b  00000000  00000000  00024739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019741  00000000  00000000  0004f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c201  00000000  00000000  00068df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d28  00000000  00000000  0017503c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0017ad64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005cb0 	.word	0x08005cb0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005cb0 	.word	0x08005cb0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B_BUTTON_Pin) {
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004fc:	d104      	bne.n	8000508 <HAL_GPIO_EXTI_Callback+0x1c>

			// Toggle LED for debug
			HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);
 80004fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x24>)
 8000504:	f001 fe96 	bl	8002234 <HAL_GPIO_TogglePin>
		}

}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	48000400 	.word	0x48000400

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t i = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fdaa 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f853 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fa35 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f000 fa09 	bl	8000940 <MX_DMA_Init>
  MX_I2C2_Init();
 800052e:	f000 f905 	bl	800073c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f9b9 	bl	80008a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000536:	f000 f941 	bl	80007bc <MX_TIM2_Init>
  MX_DFSDM1_Init();
 800053a:	f000 f899 	bl	8000670 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE);
 800053e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000542:	491d      	ldr	r1, [pc, #116]	@ (80005b8 <main+0xa4>)
 8000544:	481d      	ldr	r0, [pc, #116]	@ (80005bc <main+0xa8>)
 8000546:	f001 f8fd 	bl	8001744 <HAL_DFSDM_FilterRegularStart_DMA>

    /* USER CODE BEGIN 3 */



		if (DmaRecHalfBuffCplt == 1) {
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <main+0xac>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d115      	bne.n	800057e <main+0x6a>

			for(i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	80fb      	strh	r3, [r7, #6]
 8000556:	e00b      	b.n	8000570 <main+0x5c>
				PlayBuf[i] = RecBuf[i]>>8;
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <main+0xa4>)
 800055c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	1212      	asrs	r2, r2, #8
 8000564:	4917      	ldr	r1, [pc, #92]	@ (80005c4 <main+0xb0>)
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	3301      	adds	r3, #1
 800056e:	80fb      	strh	r3, [r7, #6]
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000576:	d3ef      	bcc.n	8000558 <main+0x44>


			DmaRecHalfBuffCplt=0;
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <main+0xac>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
		}

		if (DmaRecBuffCplt == 1) {
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <main+0xb4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d1e1      	bne.n	800054a <main+0x36>


			for(i=AUDIO_BUFFER_SIZE/2; i<AUDIO_BUFFER_SIZE; i++)
 8000586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800058a:	80fb      	strh	r3, [r7, #6]
 800058c:	e00b      	b.n	80005a6 <main+0x92>
				PlayBuf[i] = RecBuf[i]>>8;
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <main+0xa4>)
 8000592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1212      	asrs	r2, r2, #8
 800059a:	490a      	ldr	r1, [pc, #40]	@ (80005c4 <main+0xb0>)
 800059c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i=AUDIO_BUFFER_SIZE/2; i<AUDIO_BUFFER_SIZE; i++)
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	3301      	adds	r3, #1
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005ac:	d3ef      	bcc.n	800058e <main+0x7a>


			DmaRecBuffCplt=0;
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <main+0xb4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
		if (DmaRecHalfBuffCplt == 1) {
 80005b4:	e7c9      	b.n	800054a <main+0x36>
 80005b6:	bf00      	nop
 80005b8:	20000248 	.word	0x20000248
 80005bc:	20000028 	.word	0x20000028
 80005c0:	20002248 	.word	0x20002248
 80005c4:	20001248 	.word	0x20001248
 80005c8:	20002249 	.word	0x20002249

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fb3c 	bl	8005c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ee:	2000      	movs	r0, #0
 80005f0:	f001 ffa4 	bl	800253c <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005fa:	f000 fa5b 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005fe:	2310      	movs	r3, #16
 8000600:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000602:	2301      	movs	r3, #1
 8000604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060a:	2360      	movs	r3, #96	@ 0x60
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000612:	2301      	movs	r3, #1
 8000614:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800061a:	233c      	movs	r3, #60	@ 0x3c
 800061c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061e:	2302      	movs	r3, #2
 8000620:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f828 	bl	8002684 <HAL_RCC_OscConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063a:	f000 fa3b 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	230f      	movs	r3, #15
 8000640:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000642:	2303      	movs	r3, #3
 8000644:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fc2e 	bl	8002eb8 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000662:	f000 fa27 	bl	8000ab4 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3758      	adds	r7, #88	@ 0x58
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000674:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000676:	4a2d      	ldr	r2, [pc, #180]	@ (800072c <MX_DFSDM1_Init+0xbc>)
 8000678:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800067a:	4b2b      	ldr	r3, [pc, #172]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000682:	2201      	movs	r2, #1
 8000684:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000688:	2201      	movs	r2, #1
 800068a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 800068e:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000692:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000696:	22fa      	movs	r2, #250	@ 0xfa
 8000698:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800069a:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 800069c:	2201      	movs	r2, #1
 800069e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80006a0:	4821      	ldr	r0, [pc, #132]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 80006a2:	f000 ff2f 	bl	8001504 <HAL_DFSDM_FilterInit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80006ac:	f000 fa02 	bl	8000ab4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <MX_DFSDM1_Init+0xc4>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 60;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006c4:	223c      	movs	r2, #60	@ 0x3c
 80006c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 8000700:	f000 fe40 	bl	8001384 <HAL_DFSDM_ChannelInit>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800070a:	f000 f9d3 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800070e:	2201      	movs	r2, #1
 8000710:	4909      	ldr	r1, [pc, #36]	@ (8000738 <MX_DFSDM1_Init+0xc8>)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000714:	f000 ffd0 	bl	80016b8 <HAL_DFSDM_FilterConfigRegChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 f9c9 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000028 	.word	0x20000028
 800072c:	40016100 	.word	0x40016100
 8000730:	2000007c 	.word	0x2000007c
 8000734:	40016040 	.word	0x40016040
 8000738:	00020004 	.word	0x00020004

0800073c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_I2C2_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <MX_I2C2_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000778:	f001 fd8e 	bl	8002298 <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f997 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800078a:	f001 fe20 	bl	80023ce <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f98e 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800079c:	f001 fe62 	bl	8002464 <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f985 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000114 	.word	0x20000114
 80007b4:	40005800 	.word	0x40005800
 80007b8:	30a175ab 	.word	0x30a175ab

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	@ 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000802:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000816:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000818:	f003 fb24 	bl	8003e64 <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f947 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000830:	4619      	mov	r1, r3
 8000832:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000834:	f003 fdea 	bl	800440c <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800083e:	f000 f939 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000842:	4818      	ldr	r0, [pc, #96]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000844:	f003 fb65 	bl	8003f12 <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800084e:	f000 f931 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000852:	2320      	movs	r3, #32
 8000854:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000862:	f004 fae5 	bl	8004e30 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800086c:	f000 f922 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	@ 0x60
 8000872:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000888:	f003 fcac 	bl	80041e4 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000892:	f000 f90f 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000896:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000898:	f000 fad4 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 800089c:	bf00      	nop
 800089e:	3738      	adds	r7, #56	@ 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000168 	.word	0x20000168

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_USART1_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008f2:	f004 fb43 	bl	8004f7c <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f8da 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000904:	f005 f8de 	bl	8005ac4 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800090e:	f000 f8d1 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000916:	f005 f913 	bl	8005b40 <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f8c8 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000926:	f005 f894 	bl	8005a52 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f8c0 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001b4 	.word	0x200001b4
 800093c:	40013800 	.word	0x40013800

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_DMA_Init+0x50>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <MX_DMA_Init+0x50>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6493      	str	r3, [r2, #72]	@ 0x48
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DMA_Init+0x50>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_DMA_Init+0x50>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <MX_DMA_Init+0x50>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6493      	str	r3, [r2, #72]	@ 0x48
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_DMA_Init+0x50>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	200b      	movs	r0, #11
 800097c:	f000 fccb 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000980:	200b      	movs	r0, #11
 8000982:	f000 fce4 	bl	800134e <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a10:	4816      	ldr	r0, [pc, #88]	@ (8000a6c <MX_GPIO_Init+0xd8>)
 8000a12:	f001 fbf7 	bl	8002204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8000a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4810      	ldr	r0, [pc, #64]	@ (8000a70 <MX_GPIO_Init+0xdc>)
 8000a2e:	f001 fa57 	bl	8001ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 8000a32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <MX_GPIO_Init+0xd8>)
 8000a4c:	f001 fa48 	bl	8001ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2028      	movs	r0, #40	@ 0x28
 8000a56:	f000 fc5e 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5a:	2028      	movs	r0, #40	@ 0x28
 8000a5c:	f000 fc77 	bl	800134e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800

08000a74 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);

	DmaRecHalfBuffCplt=1;
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20002248 	.word	0x20002248

08000a94 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);

	DmaRecBuffCplt=1;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20002249 	.word	0x20002249

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	2294      	movs	r2, #148	@ 0x94
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f005 f895 	bl	8005c58 <memset>
  if(DFSDM1_Init == 0)
 8000b2e:	4b45      	ldr	r3, [pc, #276]	@ (8000c44 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d14b      	bne.n	8000bce <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000b36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fc74 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000b52:	f7ff ffaf 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000b56:	4b3c      	ldr	r3, [pc, #240]	@ (8000c48 <HAL_DFSDM_FilterMspInit+0x140>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c48 <HAL_DFSDM_FilterMspInit+0x140>)
 8000b5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b60:	4b39      	ldr	r3, [pc, #228]	@ (8000c48 <HAL_DFSDM_FilterMspInit+0x140>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d10b      	bne.n	8000b80 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b68:	4b38      	ldr	r3, [pc, #224]	@ (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b6c:	4a37      	ldr	r2, [pc, #220]	@ (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b72:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b74:	4b35      	ldr	r3, [pc, #212]	@ (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b80:	4b32      	ldr	r3, [pc, #200]	@ (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b84:	4a31      	ldr	r2, [pc, #196]	@ (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <HAL_DFSDM_FilterMspInit+0x144>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b90:	f003 0310 	and.w	r3, r3, #16
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000b98:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <HAL_DFSDM_FilterMspInit+0x148>)
 8000bc0:	f001 f98e 	bl	8001ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a1e      	ldr	r2, [pc, #120]	@ (8000c44 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000bcc:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a20      	ldr	r2, [pc, #128]	@ (8000c54 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d130      	bne.n	8000c3a <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bda:	4a20      	ldr	r2, [pc, #128]	@ (8000c5c <HAL_DFSDM_FilterMspInit+0x154>)
 8000bdc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000be0:	2256      	movs	r2, #86	@ 0x56
 8000be2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000bf0:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000bf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bfc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000c06:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c08:	2220      	movs	r2, #32
 8000c0a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000c12:	4811      	ldr	r0, [pc, #68]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c14:	f000 fef2 	bl	80019fc <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8000c1e:	f7ff ff49 	bl	8000ab4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a0c      	ldr	r2, [pc, #48]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c28:	4a0b      	ldr	r2, [pc, #44]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c34:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_DFSDM_FilterMspInit+0x150>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	37b8      	adds	r7, #184	@ 0xb8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20002250 	.word	0x20002250
 8000c48:	2000224c 	.word	0x2000224c
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48001000 	.word	0x48001000
 8000c54:	40016100 	.word	0x40016100
 8000c58:	200000b4 	.word	0x200000b4
 8000c5c:	40020008 	.word	0x40020008

08000c60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ae      	sub	sp, #184	@ 0xb8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2294      	movs	r2, #148	@ 0x94
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 ffe9 	bl	8005c58 <memset>
  if(DFSDM1_Init == 0)
 8000c86:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d14b      	bne.n	8000d26 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fbc8 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000caa:	f7ff ff03 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000cb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cca:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cdc:	4a16      	ldr	r2, [pc, #88]	@ (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000cf0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d14:	4619      	mov	r1, r3
 8000d16:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <HAL_DFSDM_ChannelMspInit+0xdc>)
 8000d18:	f001 f8e2 	bl	8001ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3301      	adds	r3, #1
 8000d22:	4a03      	ldr	r2, [pc, #12]	@ (8000d30 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000d24:	6013      	str	r3, [r2, #0]
  }

}
 8000d26:	bf00      	nop
 8000d28:	37b8      	adds	r7, #184	@ 0xb8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20002250 	.word	0x20002250
 8000d34:	2000224c 	.word	0x2000224c
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48001000 	.word	0x48001000

08000d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0ae      	sub	sp, #184	@ 0xb8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2294      	movs	r2, #148	@ 0x94
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 ff79 	bl	8005c58 <memset>
  if(hi2c->Instance==I2C2)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <HAL_I2C_MspInit+0xb0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d13b      	bne.n	8000de8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 fb59 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d88:	f7ff fe94 	bl	8000ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_I2C_MspInit+0xb4>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a18      	ldr	r2, [pc, #96]	@ (8000df4 <HAL_I2C_MspInit+0xb4>)
 8000d92:	f043 0302 	orr.w	r3, r3, #2
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <HAL_I2C_MspInit+0xb4>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dac:	2312      	movs	r3, #18
 8000dae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <HAL_I2C_MspInit+0xb8>)
 8000dcc:	f001 f888 	bl	8001ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_I2C_MspInit+0xb4>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_I2C_MspInit+0xb4>)
 8000dd6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_I2C_MspInit+0xb4>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000de8:	bf00      	nop
 8000dea:	37b8      	adds	r7, #184	@ 0xb8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005800 	.word	0x40005800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e0c:	d113      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <HAL_TIM_Base_MspInit+0x44>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e12:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <HAL_TIM_Base_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_TIM_Base_MspInit+0x44>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	201c      	movs	r0, #28
 8000e2c:	f000 fa73 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e30:	201c      	movs	r0, #28
 8000e32:	f000 fa8c 	bl	800134e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e64:	d11c      	bne.n	8000ea0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <HAL_TIM_MspPostInit+0x64>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <HAL_TIM_MspPostInit+0x64>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <HAL_TIM_MspPostInit+0x64>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f001 f820 	bl	8001ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b0ae      	sub	sp, #184	@ 0xb8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2294      	movs	r2, #148	@ 0x94
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f004 fec3 	bl	8005c58 <memset>
  if(huart->Instance==USART1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <HAL_UART_MspInit+0xb0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d13a      	bne.n	8000f52 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 faa3 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef4:	f7ff fdde 	bl	8000ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000efc:	4a18      	ldr	r2, [pc, #96]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f14:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_UART_MspInit+0xb4>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f28:	23c0      	movs	r3, #192	@ 0xc0
 8000f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f40:	2307      	movs	r3, #7
 8000f42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <HAL_UART_MspInit+0xb8>)
 8000f4e:	f000 ffc7 	bl	8001ee0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f52:	bf00      	nop
 8000f54:	37b8      	adds	r7, #184	@ 0xb8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40013800 	.word	0x40013800
 8000f60:	40021000 	.word	0x40021000
 8000f64:	48000400 	.word	0x48000400

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbe:	f000 f8af 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000fcc:	4802      	ldr	r0, [pc, #8]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x10>)
 8000fce:	f000 fe38 	bl	8001c42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000b4 	.word	0x200000b4

08000fdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <TIM2_IRQHandler+0x10>)
 8000fe2:	f002 fff7 	bl	8003fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000168 	.word	0x20000168

08000ff0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8000ff4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ff8:	f001 f936 	bl	8002268 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800105c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001028:	f7ff ffea 	bl	8001000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LoopForever+0x6>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <LoopForever+0xe>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	@ (8001070 <LoopForever+0x16>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f004 fe09 	bl	8005c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fa5d 	bl	8000514 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001068:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 800106c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001070:	2000227c 	.word	0x2000227c

08001074 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_IRQHandler>

08001076 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f93d 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	200f      	movs	r0, #15
 8001088:	f000 f80e 	bl	80010a8 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e001      	b.n	800109c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001098:	f7ff fd12 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109c:	79fb      	ldrb	r3, [r7, #7]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_InitTick+0x6c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d023      	beq.n	8001104 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <HAL_InitTick+0x70>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f949 	bl	800136a <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d809      	bhi.n	80010f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010ec:	f000 f913 	bl	8001316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f0:	4a0a      	ldr	r2, [pc, #40]	@ (800111c <HAL_InitTick+0x74>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e007      	b.n	8001108 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e004      	b.n	8001108 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	73fb      	strb	r3, [r7, #15]
 8001102:	e001      	b.n	8001108 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	20000000 	.word	0x20000000
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	20002254 	.word	0x20002254

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20002254 	.word	0x20002254

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	@ (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	@ (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0ac      	b.n	80014f0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fa8c 	bl	80018b8 <DFSDM_GetChannelFromInstance>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a55      	ldr	r2, [pc, #340]	@ (80014f8 <HAL_DFSDM_ChannelInit+0x174>)
 80013a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e09f      	b.n	80014f0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fc55 	bl	8000c60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <HAL_DFSDM_ChannelInit+0x178>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a4f      	ldr	r2, [pc, #316]	@ (80014fc <HAL_DFSDM_ChannelInit+0x178>)
 80013be:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80013c0:	4b4e      	ldr	r3, [pc, #312]	@ (80014fc <HAL_DFSDM_ChannelInit+0x178>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d125      	bne.n	8001414 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80013c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 80013ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80013d2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80013d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4948      	ldr	r1, [pc, #288]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80013e2:	4b47      	ldr	r3, [pc, #284]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a46      	ldr	r2, [pc, #280]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 80013e8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80013ec:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	791b      	ldrb	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80013f6:	4b42      	ldr	r3, [pc, #264]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	3b01      	subs	r3, #1
 8001400:	041b      	lsls	r3, r3, #16
 8001402:	493f      	ldr	r1, [pc, #252]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001408:	4b3d      	ldr	r3, [pc, #244]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a3c      	ldr	r2, [pc, #240]	@ (8001500 <HAL_DFSDM_ChannelInit+0x17c>)
 800140e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001412:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001422:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001432:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001438:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 020f 	bic.w	r2, r2, #15
 8001450:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6819      	ldr	r1, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001478:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001488:	3b01      	subs	r3, #1
 800148a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f002 0207 	and.w	r2, r2, #7
 80014a4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f9ea 	bl	80018b8 <DFSDM_GetChannelFromInstance>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4904      	ldr	r1, [pc, #16]	@ (80014f8 <HAL_DFSDM_ChannelInit+0x174>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000225c 	.word	0x2000225c
 80014fc:	20002258 	.word	0x20002258
 8001500:	40016000 	.word	0x40016000

08001504 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e0ca      	b.n	80016ac <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a66      	ldr	r2, [pc, #408]	@ (80016b4 <HAL_DFSDM_FilterInit+0x1b0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d109      	bne.n	8001534 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001524:	2b01      	cmp	r3, #1
 8001526:	d003      	beq.n	8001530 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0bb      	b.n	80016ac <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff fadb 	bl	8000b08 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001560:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7a1b      	ldrb	r3, [r3, #8]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d108      	bne.n	800157c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e007      	b.n	800158c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800158a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7a5b      	ldrb	r3, [r3, #9]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e007      	b.n	80015b6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80015b4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80015c4:	f023 0308 	bic.w	r3, r3, #8
 80015c8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d108      	bne.n	80015e4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6819      	ldr	r1, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7c1b      	ldrb	r3, [r3, #16]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0210 	orr.w	r2, r2, #16
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0210 	bic.w	r2, r2, #16
 800160c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7c5b      	ldrb	r3, [r3, #17]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0220 	orr.w	r2, r2, #32
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0220 	bic.w	r2, r2, #32
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8001646:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800164a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6959      	ldr	r1, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	3b01      	subs	r3, #1
 800165c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800165e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001664:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001666:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7c1a      	ldrb	r2, [r3, #16]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40016100 	.word	0x40016100

080016b8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d02e      	beq.n	8001730 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80016d8:	2bff      	cmp	r3, #255	@ 0xff
 80016da:	d029      	beq.n	8001730 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ee:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10d      	bne.n	8001712 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001704:	431a      	orrs	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e00a      	b.n	8001728 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6819      	ldr	r1, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	631a      	str	r2, [r3, #48]	@ 0x30
 800172e:	e001      	b.n	8001734 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001734:	7dfb      	ldrb	r3, [r7, #23]
}
 8001736:	4618      	mov	r0, r3
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	e064      	b.n	8001830 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001770:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001774:	d002      	beq.n	800177c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
 800177a:	e059      	b.n	8001830 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10e      	bne.n	80017a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10a      	bne.n	80017a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001792:	2b00      	cmp	r3, #0
 8001794:	d105      	bne.n	80017a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d002      	beq.n	80017a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
 80017a0:	e046      	b.n	8001830 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10b      	bne.n	80017c2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b6:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80017b8:	2b20      	cmp	r3, #32
 80017ba:	d102      	bne.n	80017c2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
 80017c0:	e036      	b.n	8001830 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d004      	beq.n	80017d6 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d12a      	bne.n	800182c <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	4a18      	ldr	r2, [pc, #96]	@ (800183c <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e2:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80017e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80017ec:	2b20      	cmp	r3, #32
 80017ee:	d101      	bne.n	80017f4 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80017f0:	4a14      	ldr	r2, [pc, #80]	@ (8001844 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80017f2:	e000      	b.n	80017f6 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80017f4:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	331c      	adds	r3, #28
 8001806:	4619      	mov	r1, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f000 f99e 	bl	8001b4c <HAL_DMA_Start_IT>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	22ff      	movs	r2, #255	@ 0xff
 800181a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001822:	e005      	b.n	8001830 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 f893 	bl	8001950 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800182a:	e001      	b.n	8001830 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001830:	7dfb      	ldrb	r3, [r7, #23]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	08001879 	.word	0x08001879
 8001840:	08001895 	.word	0x08001895
 8001844:	0800185d 	.word	0x0800185d

08001848 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff f902 	bl	8000a74 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff f904 	bl	8000a94 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2203      	movs	r2, #3
 80018a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7ff ffcd 	bl	8001848 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001934 <DFSDM_GetChannelFromInstance+0x7c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d102      	bne.n	80018ce <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	e02b      	b.n	8001926 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a19      	ldr	r2, [pc, #100]	@ (8001938 <DFSDM_GetChannelFromInstance+0x80>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d102      	bne.n	80018dc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e024      	b.n	8001926 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a17      	ldr	r2, [pc, #92]	@ (800193c <DFSDM_GetChannelFromInstance+0x84>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d102      	bne.n	80018ea <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80018e4:	2302      	movs	r3, #2
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e01d      	b.n	8001926 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <DFSDM_GetChannelFromInstance+0x88>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d102      	bne.n	80018f8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80018f2:	2304      	movs	r3, #4
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e016      	b.n	8001926 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a12      	ldr	r2, [pc, #72]	@ (8001944 <DFSDM_GetChannelFromInstance+0x8c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d102      	bne.n	8001906 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001900:	2305      	movs	r3, #5
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e00f      	b.n	8001926 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a0f      	ldr	r2, [pc, #60]	@ (8001948 <DFSDM_GetChannelFromInstance+0x90>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d102      	bne.n	8001914 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800190e:	2306      	movs	r3, #6
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	e008      	b.n	8001926 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <DFSDM_GetChannelFromInstance+0x94>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d102      	bne.n	8001922 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800191c:	2307      	movs	r3, #7
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e001      	b.n	8001926 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001922:	2303      	movs	r3, #3
 8001924:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40016000 	.word	0x40016000
 8001938:	40016020 	.word	0x40016020
 800193c:	40016040 	.word	0x40016040
 8001940:	40016080 	.word	0x40016080
 8001944:	400160a0 	.word	0x400160a0
 8001948:	400160c0 	.word	0x400160c0
 800194c:	400160e0 	.word	0x400160e0

08001950 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195c:	2b00      	cmp	r3, #0
 800195e:	d108      	bne.n	8001972 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	e033      	b.n	80019da <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001990:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d116      	bne.n	80019da <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0202 	orr.w	r2, r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d102      	bne.n	80019d4 <DFSDM_RegConvStart+0x84>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	e000      	b.n	80019d6 <DFSDM_RegConvStart+0x86>
 80019d4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <DFSDM_RegConvStart+0x98>
 80019e4:	2202      	movs	r2, #2
 80019e6:	e000      	b.n	80019ea <DFSDM_RegConvStart+0x9a>
 80019e8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e08d      	b.n	8001b2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b47      	ldr	r3, [pc, #284]	@ (8001b34 <HAL_DMA_Init+0x138>)
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d80f      	bhi.n	8001a3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <HAL_DMA_Init+0x13c>)
 8001a22:	4413      	add	r3, r2
 8001a24:	4a45      	ldr	r2, [pc, #276]	@ (8001b3c <HAL_DMA_Init+0x140>)
 8001a26:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	009a      	lsls	r2, r3, #2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a42      	ldr	r2, [pc, #264]	@ (8001b40 <HAL_DMA_Init+0x144>)
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a38:	e00e      	b.n	8001a58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b40      	ldr	r3, [pc, #256]	@ (8001b44 <HAL_DMA_Init+0x148>)
 8001a42:	4413      	add	r3, r2
 8001a44:	4a3d      	ldr	r2, [pc, #244]	@ (8001b3c <HAL_DMA_Init+0x140>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	009a      	lsls	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a3c      	ldr	r2, [pc, #240]	@ (8001b48 <HAL_DMA_Init+0x14c>)
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1b      	ldr	r3, [r3, #32]
 8001a9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f9b6 	bl	8001e1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ab8:	d102      	bne.n	8001ac0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ad4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d010      	beq.n	8001b00 <HAL_DMA_Init+0x104>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d80c      	bhi.n	8001b00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f9d6 	bl	8001e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	e008      	b.n	8001b12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40020407 	.word	0x40020407
 8001b38:	bffdfff8 	.word	0xbffdfff8
 8001b3c:	cccccccd 	.word	0xcccccccd
 8001b40:	40020000 	.word	0x40020000
 8001b44:	bffdfbf8 	.word	0xbffdfbf8
 8001b48:	40020400 	.word	0x40020400

08001b4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_DMA_Start_IT+0x20>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e066      	b.n	8001c3a <HAL_DMA_Start_IT+0xee>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d155      	bne.n	8001c2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f8fb 	bl	8001da0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 020e 	orr.w	r2, r2, #14
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e00f      	b.n	8001be4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f042 020a 	orr.w	r2, r2, #10
 8001be2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c18:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e005      	b.n	8001c38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
 8001c36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	f003 031c 	and.w	r3, r3, #28
 8001c62:	2204      	movs	r2, #4
 8001c64:	409a      	lsls	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d026      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x7a>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d021      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d107      	bne.n	8001c96 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0204 	bic.w	r2, r2, #4
 8001c94:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f003 021c 	and.w	r2, r3, #28
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d071      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001cba:	e06c      	b.n	8001d96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc0:	f003 031c 	and.w	r3, r3, #28
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d02e      	beq.n	8001d2e <HAL_DMA_IRQHandler+0xec>
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d029      	beq.n	8001d2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10b      	bne.n	8001d00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020a 	bic.w	r2, r2, #10
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d04:	f003 021c 	and.w	r2, r3, #28
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d038      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d2c:	e033      	b.n	8001d96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f003 031c 	and.w	r3, r3, #28
 8001d36:	2208      	movs	r2, #8
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d02a      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x156>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d025      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 020e 	bic.w	r2, r2, #14
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	f003 021c 	and.w	r2, r3, #28
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
}
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001db6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001dc8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f003 021c 	and.w	r2, r3, #28
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ddc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d108      	bne.n	8001e00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001dfe:	e007      	b.n	8001e10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	60da      	str	r2, [r3, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d80a      	bhi.n	8001e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	089b      	lsrs	r3, r3, #2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001e3c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e44:	e007      	b.n	8001e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	009a      	lsls	r2, r3, #2
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001e50:	4413      	add	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3b08      	subs	r3, #8
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	091b      	lsrs	r3, r3, #4
 8001e66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2201      	movs	r2, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40020407 	.word	0x40020407
 8001e8c:	4002081c 	.word	0x4002081c
 8001e90:	cccccccd 	.word	0xcccccccd
 8001e94:	40020880 	.word	0x40020880

08001e98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a08      	ldr	r2, [pc, #32]	@ (8001edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001eba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	1000823f 	.word	0x1000823f
 8001edc:	40020940 	.word	0x40020940

08001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eee:	e166      	b.n	80021be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8158 	beq.w	80021b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d005      	beq.n	8001f20 <HAL_GPIO_Init+0x40>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d130      	bne.n	8001f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f56:	2201      	movs	r2, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0201 	and.w	r2, r3, #1
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d017      	beq.n	8001fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d123      	bne.n	8002012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	08da      	lsrs	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3208      	adds	r2, #8
 800200c:	6939      	ldr	r1, [r7, #16]
 800200e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0203 	and.w	r2, r3, #3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 80b2 	beq.w	80021b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002054:	4b61      	ldr	r3, [pc, #388]	@ (80021dc <HAL_GPIO_Init+0x2fc>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002058:	4a60      	ldr	r2, [pc, #384]	@ (80021dc <HAL_GPIO_Init+0x2fc>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002060:	4b5e      	ldr	r3, [pc, #376]	@ (80021dc <HAL_GPIO_Init+0x2fc>)
 8002062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800206c:	4a5c      	ldr	r2, [pc, #368]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	220f      	movs	r2, #15
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002096:	d02b      	beq.n	80020f0 <HAL_GPIO_Init+0x210>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a52      	ldr	r2, [pc, #328]	@ (80021e4 <HAL_GPIO_Init+0x304>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d025      	beq.n	80020ec <HAL_GPIO_Init+0x20c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a51      	ldr	r2, [pc, #324]	@ (80021e8 <HAL_GPIO_Init+0x308>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01f      	beq.n	80020e8 <HAL_GPIO_Init+0x208>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a50      	ldr	r2, [pc, #320]	@ (80021ec <HAL_GPIO_Init+0x30c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d019      	beq.n	80020e4 <HAL_GPIO_Init+0x204>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a4f      	ldr	r2, [pc, #316]	@ (80021f0 <HAL_GPIO_Init+0x310>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_GPIO_Init+0x200>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a4e      	ldr	r2, [pc, #312]	@ (80021f4 <HAL_GPIO_Init+0x314>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_GPIO_Init+0x1fc>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a4d      	ldr	r2, [pc, #308]	@ (80021f8 <HAL_GPIO_Init+0x318>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <HAL_GPIO_Init+0x1f8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a4c      	ldr	r2, [pc, #304]	@ (80021fc <HAL_GPIO_Init+0x31c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_GPIO_Init+0x1f4>
 80020d0:	2307      	movs	r3, #7
 80020d2:	e00e      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020d4:	2308      	movs	r3, #8
 80020d6:	e00c      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020d8:	2306      	movs	r3, #6
 80020da:	e00a      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020dc:	2305      	movs	r3, #5
 80020de:	e008      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020e0:	2304      	movs	r3, #4
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x212>
 80020f0:	2300      	movs	r3, #0
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002102:	4937      	ldr	r1, [pc, #220]	@ (80021e0 <HAL_GPIO_Init+0x300>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002110:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <HAL_GPIO_Init+0x320>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002134:	4a32      	ldr	r2, [pc, #200]	@ (8002200 <HAL_GPIO_Init+0x320>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800213a:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <HAL_GPIO_Init+0x320>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800215e:	4a28      	ldr	r2, [pc, #160]	@ (8002200 <HAL_GPIO_Init+0x320>)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002164:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_GPIO_Init+0x320>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002188:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <HAL_GPIO_Init+0x320>)
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <HAL_GPIO_Init+0x320>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4013      	ands	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021b2:	4a13      	ldr	r2, [pc, #76]	@ (8002200 <HAL_GPIO_Init+0x320>)
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f ae91 	bne.w	8001ef0 <HAL_GPIO_Init+0x10>
  }
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000
 80021e4:	48000400 	.word	0x48000400
 80021e8:	48000800 	.word	0x48000800
 80021ec:	48000c00 	.word	0x48000c00
 80021f0:	48001000 	.word	0x48001000
 80021f4:	48001400 	.word	0x48001400
 80021f8:	48001800 	.word	0x48001800
 80021fc:	48001c00 	.word	0x48001c00
 8002200:	40010400 	.word	0x40010400

08002204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	807b      	strh	r3, [r7, #2]
 8002210:	4613      	mov	r3, r2
 8002212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002214:	787b      	ldrb	r3, [r7, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800221a:	887a      	ldrh	r2, [r7, #2]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002220:	e002      	b.n	8002228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4013      	ands	r3, r2
 800224c:	041a      	lsls	r2, r3, #16
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	43d9      	mvns	r1, r3
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	400b      	ands	r3, r1
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	619a      	str	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800227e:	4a05      	ldr	r2, [pc, #20]	@ (8002294 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002284:	88fb      	ldrh	r3, [r7, #6]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f930 	bl	80004ec <HAL_GPIO_EXTI_Callback>
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010400 	.word	0x40010400

08002298 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e08d      	b.n	80023c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fd3e 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	@ 0x24
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d107      	bne.n	8002312 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e006      	b.n	8002320 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800231e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d108      	bne.n	800233a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	e007      	b.n	800234a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002348:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800236c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69d9      	ldr	r1, [r3, #28]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d138      	bne.n	8002456 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e032      	b.n	8002458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2224      	movs	r2, #36	@ 0x24
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002420:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6819      	ldr	r1, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d139      	bne.n	80024ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002484:	2302      	movs	r3, #2
 8002486:	e033      	b.n	80024f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	@ 0x24
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024ee:	2302      	movs	r3, #2
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002500:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800250c:	d102      	bne.n	8002514 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800250e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002512:	e00b      	b.n	800252c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002514:	4b08      	ldr	r3, [pc, #32]	@ (8002538 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800251a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002522:	d102      	bne.n	800252a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002528:	e000      	b.n	800252c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800252a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40007000 	.word	0x40007000

0800253c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d141      	bne.n	80025ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800254a:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002556:	d131      	bne.n	80025bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002558:	4b47      	ldr	r3, [pc, #284]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800255a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800255e:	4a46      	ldr	r2, [pc, #280]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002568:	4b43      	ldr	r3, [pc, #268]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002570:	4a41      	ldr	r2, [pc, #260]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002572:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002576:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002578:	4b40      	ldr	r3, [pc, #256]	@ (800267c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2232      	movs	r2, #50	@ 0x32
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	4a3f      	ldr	r2, [pc, #252]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	0c9b      	lsrs	r3, r3, #18
 800258a:	3301      	adds	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800258e:	e002      	b.n	8002596 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3b01      	subs	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002596:	4b38      	ldr	r3, [pc, #224]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a2:	d102      	bne.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f2      	bne.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025aa:	4b33      	ldr	r3, [pc, #204]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b6:	d158      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e057      	b.n	800266c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80025cc:	e04d      	b.n	800266a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025d4:	d141      	bne.n	800265a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025e2:	d131      	bne.n	8002648 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ea:	4a23      	ldr	r2, [pc, #140]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002602:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2232      	movs	r2, #50	@ 0x32
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	4a1c      	ldr	r2, [pc, #112]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9b      	lsrs	r3, r3, #18
 8002616:	3301      	adds	r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800261a:	e002      	b.n	8002622 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3b01      	subs	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262e:	d102      	bne.n	8002636 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f2      	bne.n	800261c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002636:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002642:	d112      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e011      	b.n	800266c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002658:	e007      	b.n	800266a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002662:	4a05      	ldr	r2, [pc, #20]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002668:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40007000 	.word	0x40007000
 800267c:	20000000 	.word	0x20000000
 8002680:	431bde83 	.word	0x431bde83

08002684 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	f000 bc08 	b.w	8002ea8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002698:	4b96      	ldr	r3, [pc, #600]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a2:	4b94      	ldr	r3, [pc, #592]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80e4 	beq.w	8002882 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4c>
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	f040 808b 	bne.w	80027de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	f040 8087 	bne.w	80027de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d0:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_OscConfig+0x64>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e3df      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1a      	ldr	r2, [r3, #32]
 80026ec:	4b81      	ldr	r3, [pc, #516]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <HAL_RCC_OscConfig+0x7e>
 80026f8:	4b7e      	ldr	r3, [pc, #504]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002700:	e005      	b.n	800270e <HAL_RCC_OscConfig+0x8a>
 8002702:	4b7c      	ldr	r3, [pc, #496]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800270e:	4293      	cmp	r3, r2
 8002710:	d223      	bcs.n	800275a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fdcc 	bl	80032b4 <RCC_SetFlashLatencyFromMSIRange>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e3c0      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002726:	4b73      	ldr	r3, [pc, #460]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a72      	ldr	r2, [pc, #456]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b70      	ldr	r3, [pc, #448]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	496d      	ldr	r1, [pc, #436]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002744:	4b6b      	ldr	r3, [pc, #428]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	4968      	ldr	r1, [pc, #416]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
 8002758:	e025      	b.n	80027a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275a:	4b66      	ldr	r3, [pc, #408]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a65      	ldr	r2, [pc, #404]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b63      	ldr	r3, [pc, #396]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4960      	ldr	r1, [pc, #384]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002778:	4b5e      	ldr	r3, [pc, #376]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	495b      	ldr	r1, [pc, #364]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fd8c 	bl	80032b4 <RCC_SetFlashLatencyFromMSIRange>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e380      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027a6:	f000 fcc1 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80027aa:	4602      	mov	r2, r0
 80027ac:	4b51      	ldr	r3, [pc, #324]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4950      	ldr	r1, [pc, #320]	@ (80028f8 <HAL_RCC_OscConfig+0x274>)
 80027b8:	5ccb      	ldrb	r3, [r1, r3]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a4e      	ldr	r2, [pc, #312]	@ (80028fc <HAL_RCC_OscConfig+0x278>)
 80027c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002900 <HAL_RCC_OscConfig+0x27c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fc6c 	bl	80010a8 <HAL_InitTick>
 80027d0:	4603      	mov	r3, r0
 80027d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d052      	beq.n	8002880 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	e364      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d032      	beq.n	800284c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027e6:	4b43      	ldr	r3, [pc, #268]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a42      	ldr	r2, [pc, #264]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027f2:	f7fe fca9 	bl	8001148 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027fa:	f7fe fca5 	bl	8001148 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e34d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280c:	4b39      	ldr	r3, [pc, #228]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002818:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a35      	ldr	r2, [pc, #212]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	4b33      	ldr	r3, [pc, #204]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4930      	ldr	r1, [pc, #192]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	492b      	ldr	r1, [pc, #172]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
 800284a:	e01a      	b.n	8002882 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800284c:	4b29      	ldr	r3, [pc, #164]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a28      	ldr	r2, [pc, #160]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002858:	f7fe fc76 	bl	8001148 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002860:	f7fe fc72 	bl	8001148 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e31a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002872:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x1dc>
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002880:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d073      	beq.n	8002976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_OscConfig+0x21c>
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d10e      	bne.n	80028b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d10b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d063      	beq.n	8002974 <HAL_RCC_OscConfig+0x2f0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d15f      	bne.n	8002974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e2f7      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x24c>
 80028c2:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a0b      	ldr	r2, [pc, #44]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e025      	b.n	800291c <HAL_RCC_OscConfig+0x298>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028d8:	d114      	bne.n	8002904 <HAL_RCC_OscConfig+0x280>
 80028da:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a05      	ldr	r2, [pc, #20]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a02      	ldr	r2, [pc, #8]	@ (80028f4 <HAL_RCC_OscConfig+0x270>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e013      	b.n	800291c <HAL_RCC_OscConfig+0x298>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08005cc8 	.word	0x08005cc8
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000004 	.word	0x20000004
 8002904:	4ba0      	ldr	r3, [pc, #640]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a9f      	ldr	r2, [pc, #636]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b9d      	ldr	r3, [pc, #628]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a9c      	ldr	r2, [pc, #624]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fc10 	bl	8001148 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fc0c 	bl	8001148 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	@ 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e2b4      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293e:	4b92      	ldr	r3, [pc, #584]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x2a8>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fbfc 	bl	8001148 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe fbf8 	bl	8001148 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e2a0      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002966:	4b88      	ldr	r3, [pc, #544]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x2d0>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d060      	beq.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d005      	beq.n	8002994 <HAL_RCC_OscConfig+0x310>
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d119      	bne.n	80029c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d116      	bne.n	80029c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002994:	4b7c      	ldr	r3, [pc, #496]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_OscConfig+0x328>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e27d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ac:	4b76      	ldr	r3, [pc, #472]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	4973      	ldr	r1, [pc, #460]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c0:	e040      	b.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d023      	beq.n	8002a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fbb7 	bl	8001148 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fbb3 	bl	8001148 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e25b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f0:	4b65      	ldr	r3, [pc, #404]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b62      	ldr	r3, [pc, #392]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	495f      	ldr	r1, [pc, #380]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b5d      	ldr	r3, [pc, #372]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a5c      	ldr	r2, [pc, #368]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fb93 	bl	8001148 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fb8f 	bl	8001148 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e237      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a38:	4b53      	ldr	r3, [pc, #332]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d03c      	beq.n	8002aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d01c      	beq.n	8002a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a58:	4b4b      	ldr	r3, [pc, #300]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7fe fb6e 	bl	8001148 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7fe fb6a 	bl	8001148 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e212      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a82:	4b41      	ldr	r3, [pc, #260]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ef      	beq.n	8002a70 <HAL_RCC_OscConfig+0x3ec>
 8002a90:	e01b      	b.n	8002aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a92:	4b3d      	ldr	r3, [pc, #244]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a98:	4a3b      	ldr	r2, [pc, #236]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fb51 	bl	8001148 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fb4d 	bl	8001148 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1f5      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002abc:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1ef      	bne.n	8002aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80a6 	beq.w	8002c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002adc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10d      	bne.n	8002b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	4a26      	ldr	r2, [pc, #152]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af4:	4b24      	ldr	r3, [pc, #144]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b04:	4b21      	ldr	r3, [pc, #132]	@ (8002b8c <HAL_RCC_OscConfig+0x508>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d118      	bne.n	8002b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b10:	4b1e      	ldr	r3, [pc, #120]	@ (8002b8c <HAL_RCC_OscConfig+0x508>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	@ (8002b8c <HAL_RCC_OscConfig+0x508>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fb14 	bl	8001148 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b24:	f7fe fb10 	bl	8001148 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1b8      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_RCC_OscConfig+0x508>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4d8>
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b50:	4a0d      	ldr	r2, [pc, #52]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002b52:	f043 0301 	orr.w	r3, r3, #1
 8002b56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b5a:	e029      	b.n	8002bb0 <HAL_RCC_OscConfig+0x52c>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d115      	bne.n	8002b90 <HAL_RCC_OscConfig+0x50c>
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	4a07      	ldr	r2, [pc, #28]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b74:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	4a03      	ldr	r2, [pc, #12]	@ (8002b88 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_OscConfig+0x52c>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	4b9d      	ldr	r3, [pc, #628]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b96:	4a9c      	ldr	r2, [pc, #624]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba0:	4b99      	ldr	r3, [pc, #612]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba6:	4a98      	ldr	r2, [pc, #608]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002ba8:	f023 0304 	bic.w	r3, r3, #4
 8002bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d016      	beq.n	8002be6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe fac6 	bl	8001148 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fac2 	bl	8001148 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e168      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd6:	4b8c      	ldr	r3, [pc, #560]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ed      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x53c>
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe faaf 	bl	8001148 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe faab 	bl	8001148 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e151      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c04:	4b80      	ldr	r3, [pc, #512]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ed      	bne.n	8002bee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c12:	7ffb      	ldrb	r3, [r7, #31]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c18:	4b7b      	ldr	r3, [pc, #492]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d03c      	beq.n	8002caa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01c      	beq.n	8002c72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c38:	4b73      	ldr	r3, [pc, #460]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c3e:	4a72      	ldr	r2, [pc, #456]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fa7e 	bl	8001148 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c50:	f7fe fa7a 	bl	8001148 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e122      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c62:	4b69      	ldr	r3, [pc, #420]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <HAL_RCC_OscConfig+0x5cc>
 8002c70:	e01b      	b.n	8002caa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c72:	4b65      	ldr	r3, [pc, #404]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c78:	4a63      	ldr	r2, [pc, #396]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fa61 	bl	8001148 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c8a:	f7fe fa5d 	bl	8001148 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e105      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c9c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1ef      	bne.n	8002c8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80f9 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	f040 80cf 	bne.w	8002e5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cbe:	4b52      	ldr	r3, [pc, #328]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 0203 	and.w	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d12c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d123      	bne.n	8002d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d11b      	bne.n	8002d2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d113      	bne.n	8002d2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	085b      	lsrs	r3, r3, #1
 8002d10:	3b01      	subs	r3, #1
 8002d12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d109      	bne.n	8002d2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	085b      	lsrs	r3, r3, #1
 8002d24:	3b01      	subs	r3, #1
 8002d26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d071      	beq.n	8002e10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d068      	beq.n	8002e04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d32:	4b35      	ldr	r3, [pc, #212]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d3e:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0ac      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2d      	ldr	r2, [pc, #180]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d5a:	f7fe f9f5 	bl	8001148 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d62:	f7fe f9f1 	bl	8001148 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e099      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <HAL_RCC_OscConfig+0x788>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d9a:	0212      	lsls	r2, r2, #8
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002da2:	0852      	lsrs	r2, r2, #1
 8002da4:	3a01      	subs	r2, #1
 8002da6:	0552      	lsls	r2, r2, #21
 8002da8:	4311      	orrs	r1, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dae:	0852      	lsrs	r2, r2, #1
 8002db0:	3a01      	subs	r2, #1
 8002db2:	0652      	lsls	r2, r2, #25
 8002db4:	4311      	orrs	r1, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dba:	06d2      	lsls	r2, r2, #27
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4912      	ldr	r1, [pc, #72]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ddc:	f7fe f9b4 	bl	8001148 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe f9b0 	bl	8001148 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <HAL_RCC_OscConfig+0x784>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e02:	e050      	b.n	8002ea6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e04f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e10:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d144      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e28:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e34:	f7fe f988 	bl	8001148 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe f984 	bl	8001148 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e02c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x7b8>
 8002e5a:	e024      	b.n	8002ea6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d01f      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f96b 	bl	8001148 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f967 	bl	8001148 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4905      	ldr	r1, [pc, #20]	@ (8002eb0 <HAL_RCC_OscConfig+0x82c>)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_RCC_OscConfig+0x830>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60cb      	str	r3, [r1, #12]
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	feeefffc 	.word	0xfeeefffc

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e11d      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b90      	ldr	r3, [pc, #576]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d910      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b8d      	ldr	r3, [pc, #564]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 020f 	bic.w	r2, r3, #15
 8002ee6:	498b      	ldr	r1, [pc, #556]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b89      	ldr	r3, [pc, #548]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e105      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	4b81      	ldr	r3, [pc, #516]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d908      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	497b      	ldr	r1, [pc, #492]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d079      	beq.n	800302e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d11e      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f42:	4b75      	ldr	r3, [pc, #468]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e0dc      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002f52:	f000 fa09 	bl	8003368 <RCC_GetSysClockFreqFromPLLSource>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4a70      	ldr	r2, [pc, #448]	@ (800311c <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d946      	bls.n	8002fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d140      	bne.n	8002fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f72:	4a69      	ldr	r2, [pc, #420]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	e035      	b.n	8002fec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f88:	4b63      	ldr	r3, [pc, #396]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d115      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b9      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa0:	4b5d      	ldr	r3, [pc, #372]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0ad      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0a5      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002fc0:	f000 f8b4 	bl	800312c <HAL_RCC_GetSysClockFreq>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a55      	ldr	r2, [pc, #340]	@ (800311c <HAL_RCC_ClockConfig+0x264>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d90f      	bls.n	8002fec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002fcc:	4b52      	ldr	r3, [pc, #328]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fe8:	2380      	movs	r3, #128	@ 0x80
 8002fea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fec:	4b4a      	ldr	r3, [pc, #296]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 0203 	bic.w	r2, r3, #3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4947      	ldr	r1, [pc, #284]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffe:	f7fe f8a3 	bl	8001148 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003004:	e00a      	b.n	800301c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003006:	f7fe f89f 	bl	8001148 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e077      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301c:	4b3e      	ldr	r3, [pc, #248]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 020c 	and.w	r2, r3, #12
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	429a      	cmp	r2, r3
 800302c:	d1eb      	bne.n	8003006 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b80      	cmp	r3, #128	@ 0x80
 8003032:	d105      	bne.n	8003040 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003034:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a37      	ldr	r2, [pc, #220]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 800303a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800303e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	4b31      	ldr	r3, [pc, #196]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003058:	429a      	cmp	r2, r3
 800305a:	d208      	bcs.n	800306e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305c:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	492b      	ldr	r1, [pc, #172]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306e:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d210      	bcs.n	800309e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307c:	4b25      	ldr	r3, [pc, #148]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 020f 	bic.w	r2, r3, #15
 8003084:	4923      	ldr	r1, [pc, #140]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308c:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <HAL_RCC_ClockConfig+0x25c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d001      	beq.n	800309e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e036      	b.n	800310c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	4918      	ldr	r1, [pc, #96]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c8:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	00db      	lsls	r3, r3, #3
 80030d6:	4910      	ldr	r1, [pc, #64]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030dc:	f000 f826 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003118 <HAL_RCC_ClockConfig+0x260>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	091b      	lsrs	r3, r3, #4
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	490c      	ldr	r1, [pc, #48]	@ (8003120 <HAL_RCC_ClockConfig+0x268>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
 80030f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <HAL_RCC_ClockConfig+0x26c>)
 80030fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <HAL_RCC_ClockConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd ffd1 	bl	80010a8 <HAL_InitTick>
 8003106:	4603      	mov	r3, r0
 8003108:	73fb      	strb	r3, [r7, #15]

  return status;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40022000 	.word	0x40022000
 8003118:	40021000 	.word	0x40021000
 800311c:	04c4b400 	.word	0x04c4b400
 8003120:	08005cc8 	.word	0x08005cc8
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	@ 0x24
 8003130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313a:	4b3e      	ldr	r3, [pc, #248]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003144:	4b3b      	ldr	r3, [pc, #236]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x34>
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d121      	bne.n	800319e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d11e      	bne.n	800319e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003160:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800316c:	4b31      	ldr	r3, [pc, #196]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800316e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e005      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800317c:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003188:	4a2b      	ldr	r2, [pc, #172]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x10c>)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10d      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d102      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <HAL_RCC_GetSysClockFreq+0x110>)
 80031a6:	61bb      	str	r3, [r7, #24]
 80031a8:	e004      	b.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031b0:	4b23      	ldr	r3, [pc, #140]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x114>)
 80031b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d134      	bne.n	8003224 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d003      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0xac>
 80031d0:	e005      	b.n	80031de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <HAL_RCC_GetSysClockFreq+0x110>)
 80031d4:	617b      	str	r3, [r7, #20]
      break;
 80031d6:	e005      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031d8:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x114>)
 80031da:	617b      	str	r3, [r7, #20]
      break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	617b      	str	r3, [r7, #20]
      break;
 80031e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e4:	4b13      	ldr	r3, [pc, #76]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3301      	adds	r3, #1
 80031f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031f2:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	fb03 f202 	mul.w	r2, r3, r2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800320a:	4b0a      	ldr	r3, [pc, #40]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x108>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	0e5b      	lsrs	r3, r3, #25
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	3301      	adds	r3, #1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003224:	69bb      	ldr	r3, [r7, #24]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	@ 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	08005ce0 	.word	0x08005ce0
 800323c:	00f42400 	.word	0x00f42400
 8003240:	007a1200 	.word	0x007a1200

08003244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_RCC_GetHCLKFreq+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000000 	.word	0x20000000

0800325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003260:	f7ff fff0 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	4904      	ldr	r1, [pc, #16]	@ (8003284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	08005cd8 	.word	0x08005cd8

08003288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800328c:	f7ff ffda 	bl	8003244 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0adb      	lsrs	r3, r3, #11
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4904      	ldr	r1, [pc, #16]	@ (80032b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	08005cd8 	.word	0x08005cd8

080032b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032c0:	4b27      	ldr	r3, [pc, #156]	@ (8003360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032cc:	f7ff f916 	bl	80024fc <HAL_PWREx_GetVoltageRange>
 80032d0:	6178      	str	r0, [r7, #20]
 80032d2:	e014      	b.n	80032fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032d4:	4b22      	ldr	r3, [pc, #136]	@ (8003360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	4a21      	ldr	r2, [pc, #132]	@ (8003360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032de:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032ec:	f7ff f906 	bl	80024fc <HAL_PWREx_GetVoltageRange>
 80032f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003360 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003304:	d10b      	bne.n	800331e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b80      	cmp	r3, #128	@ 0x80
 800330a:	d913      	bls.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003310:	d902      	bls.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003312:	2302      	movs	r3, #2
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e00d      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003318:	2301      	movs	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e00a      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b7f      	cmp	r3, #127	@ 0x7f
 8003322:	d902      	bls.n	800332a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003324:	2302      	movs	r3, #2
 8003326:	613b      	str	r3, [r7, #16]
 8003328:	e004      	b.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b70      	cmp	r3, #112	@ 0x70
 800332e:	d101      	bne.n	8003334 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003330:	2301      	movs	r3, #1
 8003332:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003334:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 020f 	bic.w	r2, r3, #15
 800333c:	4909      	ldr	r1, [pc, #36]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003344:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	429a      	cmp	r2, r3
 8003350:	d001      	beq.n	8003356 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	40022000 	.word	0x40022000

08003368 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800336e:	4b2d      	ldr	r3, [pc, #180]	@ (8003424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d00b      	beq.n	8003396 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d825      	bhi.n	80033d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d008      	beq.n	800339c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11f      	bne.n	80033d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003390:	4b25      	ldr	r3, [pc, #148]	@ (8003428 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003392:	613b      	str	r3, [r7, #16]
    break;
 8003394:	e01f      	b.n	80033d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003396:	4b25      	ldr	r3, [pc, #148]	@ (800342c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003398:	613b      	str	r3, [r7, #16]
    break;
 800339a:	e01c      	b.n	80033d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e005      	b.n	80033c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	091b      	lsrs	r3, r3, #4
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80033c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	613b      	str	r3, [r7, #16]
    break;
 80033ce:	e002      	b.n	80033d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
    break;
 80033d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033d6:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	3301      	adds	r3, #1
 80033e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	fb03 f202 	mul.w	r2, r3, r2
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	0e5b      	lsrs	r3, r3, #25
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	3301      	adds	r3, #1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003416:	683b      	ldr	r3, [r7, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40021000 	.word	0x40021000
 8003428:	00f42400 	.word	0x00f42400
 800342c:	007a1200 	.word	0x007a1200
 8003430:	08005ce0 	.word	0x08005ce0

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800343c:	2300      	movs	r3, #0
 800343e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003440:	2300      	movs	r3, #0
 8003442:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800344c:	2b00      	cmp	r3, #0
 800344e:	d040      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003454:	2b80      	cmp	r3, #128	@ 0x80
 8003456:	d02a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003458:	2b80      	cmp	r3, #128	@ 0x80
 800345a:	d825      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800345c:	2b60      	cmp	r3, #96	@ 0x60
 800345e:	d026      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003460:	2b60      	cmp	r3, #96	@ 0x60
 8003462:	d821      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003464:	2b40      	cmp	r3, #64	@ 0x40
 8003466:	d006      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d81d      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d010      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003474:	e018      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003476:	4b89      	ldr	r3, [pc, #548]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4a88      	ldr	r2, [pc, #544]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003480:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003482:	e015      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3304      	adds	r3, #4
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fb02 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003494:	e00c      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3320      	adds	r3, #32
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fbed 	bl	8003c7c <RCCEx_PLLSAI2_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034a6:	e003      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	74fb      	strb	r3, [r7, #19]
      break;
 80034ac:	e000      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80034ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b6:	4b79      	ldr	r3, [pc, #484]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034bc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034c4:	4975      	ldr	r1, [pc, #468]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80034cc:	e001      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d047      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e6:	d030      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80034e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ec:	d82a      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80034ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034f2:	d02a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80034f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034f8:	d824      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80034fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003504:	d81e      	bhi.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800350a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350e:	d010      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003510:	e018      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003512:	4b62      	ldr	r3, [pc, #392]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	4a61      	ldr	r2, [pc, #388]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800351e:	e015      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3304      	adds	r3, #4
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fab4 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 800352c:	4603      	mov	r3, r0
 800352e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003530:	e00c      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3320      	adds	r3, #32
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fb9f 	bl	8003c7c <RCCEx_PLLSAI2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003542:	e003      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	74fb      	strb	r3, [r7, #19]
      break;
 8003548:	e000      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800354a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003552:	4b52      	ldr	r3, [pc, #328]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003560:	494e      	ldr	r1, [pc, #312]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003568:	e001      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 809f 	beq.w	80036ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357c:	2300      	movs	r3, #0
 800357e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003580:	4b46      	ldr	r3, [pc, #280]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	4b41      	ldr	r3, [pc, #260]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359a:	4a40      	ldr	r2, [pc, #256]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800359c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a2:	4b3e      	ldr	r3, [pc, #248]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ae:	2301      	movs	r3, #1
 80035b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b2:	4b3b      	ldr	r3, [pc, #236]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a3a      	ldr	r2, [pc, #232]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035be:	f7fd fdc3 	bl	8001148 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c4:	e009      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c6:	f7fd fdbf 	bl	8001148 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d902      	bls.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	74fb      	strb	r3, [r7, #19]
        break;
 80035d8:	e005      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035da:	4b31      	ldr	r3, [pc, #196]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0ef      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80035e6:	7cfb      	ldrb	r3, [r7, #19]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d15b      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ec:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01f      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	429a      	cmp	r2, r3
 8003608:	d019      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360a:	4b24      	ldr	r3, [pc, #144]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003610:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003614:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003616:	4b21      	ldr	r3, [pc, #132]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361c:	4a1f      	ldr	r2, [pc, #124]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800361e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003626:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362c:	4a1b      	ldr	r2, [pc, #108]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800362e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003636:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d016      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fd7e 	bl	8001148 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364e:	e00b      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fd fd7a 	bl	8001148 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d902      	bls.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	74fb      	strb	r3, [r7, #19]
            break;
 8003666:	e006      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003668:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0ec      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10c      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367c:	4b07      	ldr	r3, [pc, #28]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368c:	4903      	ldr	r1, [pc, #12]	@ (800369c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003694:	e008      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	74bb      	strb	r3, [r7, #18]
 800369a:	e005      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a8:	7c7b      	ldrb	r3, [r7, #17]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4ba0      	ldr	r3, [pc, #640]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	4a9f      	ldr	r2, [pc, #636]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036c6:	4b9a      	ldr	r3, [pc, #616]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	f023 0203 	bic.w	r2, r3, #3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	4996      	ldr	r1, [pc, #600]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036e8:	4b91      	ldr	r3, [pc, #580]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ee:	f023 020c 	bic.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	498e      	ldr	r1, [pc, #568]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800370a:	4b89      	ldr	r3, [pc, #548]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003710:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003718:	4985      	ldr	r1, [pc, #532]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00a      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800372c:	4b80      	ldr	r3, [pc, #512]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373a:	497d      	ldr	r1, [pc, #500]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800374e:	4b78      	ldr	r3, [pc, #480]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003754:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375c:	4974      	ldr	r1, [pc, #464]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003770:	4b6f      	ldr	r3, [pc, #444]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003776:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377e:	496c      	ldr	r1, [pc, #432]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003792:	4b67      	ldr	r3, [pc, #412]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003798:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037a0:	4963      	ldr	r1, [pc, #396]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c2:	495b      	ldr	r1, [pc, #364]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037d6:	4b56      	ldr	r3, [pc, #344]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	4952      	ldr	r1, [pc, #328]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	494a      	ldr	r1, [pc, #296]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800381a:	4b45      	ldr	r3, [pc, #276]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003820:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003828:	4941      	ldr	r1, [pc, #260]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800383c:	4b3c      	ldr	r3, [pc, #240]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800383e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384a:	4939      	ldr	r1, [pc, #228]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003864:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	4930      	ldr	r1, [pc, #192]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800387c:	d106      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800387e:	4b2c      	ldr	r3, [pc, #176]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	4a2b      	ldr	r2, [pc, #172]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003884:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003888:	60d3      	str	r3, [r2, #12]
 800388a:	e011      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003890:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003894:	d10c      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f8f9 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80038ac:	7cfb      	ldrb	r3, [r7, #19]
 80038ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d04d      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038c4:	d108      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80038c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038cc:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038d2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80038d6:	e012      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80038d8:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038de:	4a14      	ldr	r2, [pc, #80]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038e4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038f6:	490e      	ldr	r1, [pc, #56]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003902:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003906:	d106      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003908:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a08      	ldr	r2, [pc, #32]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003912:	60d3      	str	r3, [r2, #12]
 8003914:	e020      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391e:	d109      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003920:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a02      	ldr	r2, [pc, #8]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800392a:	60d3      	str	r3, [r2, #12]
 800392c:	e014      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f8a5 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d028      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003964:	4b4a      	ldr	r3, [pc, #296]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003972:	4947      	ldr	r1, [pc, #284]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800397e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003982:	d106      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003984:	4b42      	ldr	r3, [pc, #264]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a41      	ldr	r2, [pc, #260]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800398a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800398e:	60d3      	str	r3, [r2, #12]
 8003990:	e011      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003996:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800399a:	d10c      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	2101      	movs	r1, #1
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f876 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ac:	7cfb      	ldrb	r3, [r7, #19]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80039b2:	7cfb      	ldrb	r3, [r7, #19]
 80039b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039c2:	4b33      	ldr	r3, [pc, #204]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d2:	492f      	ldr	r1, [pc, #188]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2102      	movs	r1, #2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f851 	bl	8003a94 <RCCEx_PLLSAI1_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a0c:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a12:	f023 0204 	bic.w	r2, r3, #4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a1c:	491c      	ldr	r1, [pc, #112]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a30:	4b17      	ldr	r3, [pc, #92]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a36:	f023 0218 	bic.w	r2, r3, #24
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a40:	4913      	ldr	r1, [pc, #76]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d017      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a54:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a64:	490a      	ldr	r1, [pc, #40]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a76:	d105      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a04      	ldr	r2, [pc, #16]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a84:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000

08003a94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aa2:	4b72      	ldr	r3, [pc, #456]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aae:	4b6f      	ldr	r3, [pc, #444]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0203 	and.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d103      	bne.n	8003ac6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d142      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
 8003aca:	e03f      	b.n	8003b4c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d018      	beq.n	8003b06 <RCCEx_PLLSAI1_Config+0x72>
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d825      	bhi.n	8003b24 <RCCEx_PLLSAI1_Config+0x90>
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d002      	beq.n	8003ae2 <RCCEx_PLLSAI1_Config+0x4e>
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d009      	beq.n	8003af4 <RCCEx_PLLSAI1_Config+0x60>
 8003ae0:	e020      	b.n	8003b24 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ae2:	4b62      	ldr	r3, [pc, #392]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d11d      	bne.n	8003b2a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af2:	e01a      	b.n	8003b2a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af4:	4b5d      	ldr	r3, [pc, #372]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d116      	bne.n	8003b2e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b04:	e013      	b.n	8003b2e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b06:	4b59      	ldr	r3, [pc, #356]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b12:	4b56      	ldr	r3, [pc, #344]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b22:	e006      	b.n	8003b32 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      break;
 8003b28:	e004      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e002      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e000      	b.n	8003b34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d108      	bne.n	8003b4c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	f023 0203 	bic.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4949      	ldr	r1, [pc, #292]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f040 8086 	bne.w	8003c60 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b54:	4b45      	ldr	r3, [pc, #276]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a44      	ldr	r2, [pc, #272]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b60:	f7fd faf2 	bl	8001148 <HAL_GetTick>
 8003b64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b66:	e009      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b68:	f7fd faee 	bl	8001148 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d902      	bls.n	8003b7c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	73fb      	strb	r3, [r7, #15]
        break;
 8003b7a:	e005      	b.n	8003b88 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ef      	bne.n	8003b68 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d168      	bne.n	8003c60 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d113      	bne.n	8003bbc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b94:	4b35      	ldr	r3, [pc, #212]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	4b35      	ldr	r3, [pc, #212]	@ (8003c70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6892      	ldr	r2, [r2, #8]
 8003ba0:	0211      	lsls	r1, r2, #8
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	06d2      	lsls	r2, r2, #27
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6852      	ldr	r2, [r2, #4]
 8003bae:	3a01      	subs	r2, #1
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	492d      	ldr	r1, [pc, #180]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	610b      	str	r3, [r1, #16]
 8003bba:	e02d      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d115      	bne.n	8003bee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	0211      	lsls	r1, r2, #8
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6912      	ldr	r2, [r2, #16]
 8003bd4:	0852      	lsrs	r2, r2, #1
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	0552      	lsls	r2, r2, #21
 8003bda:	4311      	orrs	r1, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6852      	ldr	r2, [r2, #4]
 8003be0:	3a01      	subs	r2, #1
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	430a      	orrs	r2, r1
 8003be6:	4921      	ldr	r1, [pc, #132]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	610b      	str	r3, [r1, #16]
 8003bec:	e014      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bee:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	4b21      	ldr	r3, [pc, #132]	@ (8003c78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6892      	ldr	r2, [r2, #8]
 8003bfa:	0211      	lsls	r1, r2, #8
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6952      	ldr	r2, [r2, #20]
 8003c00:	0852      	lsrs	r2, r2, #1
 8003c02:	3a01      	subs	r2, #1
 8003c04:	0652      	lsls	r2, r2, #25
 8003c06:	4311      	orrs	r1, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6852      	ldr	r2, [r2, #4]
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	430a      	orrs	r2, r1
 8003c12:	4916      	ldr	r1, [pc, #88]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c18:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fd fa90 	bl	8001148 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c2a:	e009      	b.n	8003c40 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c2c:	f7fd fa8c 	bl	8001148 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d902      	bls.n	8003c40 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c3e:	e005      	b.n	8003c4c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c40:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ef      	beq.n	8003c2c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c52:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4904      	ldr	r1, [pc, #16]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	07ff800f 	.word	0x07ff800f
 8003c74:	ff9f800f 	.word	0xff9f800f
 8003c78:	f9ff800f 	.word	0xf9ff800f

08003c7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c8a:	4b72      	ldr	r3, [pc, #456]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00e      	beq.n	8003cb4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c96:	4b6f      	ldr	r3, [pc, #444]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0203 	and.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d103      	bne.n	8003cae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
       ||
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d142      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e03f      	b.n	8003d34 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d018      	beq.n	8003cee <RCCEx_PLLSAI2_Config+0x72>
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d825      	bhi.n	8003d0c <RCCEx_PLLSAI2_Config+0x90>
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d002      	beq.n	8003cca <RCCEx_PLLSAI2_Config+0x4e>
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d009      	beq.n	8003cdc <RCCEx_PLLSAI2_Config+0x60>
 8003cc8:	e020      	b.n	8003d0c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cca:	4b62      	ldr	r3, [pc, #392]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d11d      	bne.n	8003d12 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cda:	e01a      	b.n	8003d12 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d116      	bne.n	8003d16 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cec:	e013      	b.n	8003d16 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cee:	4b59      	ldr	r3, [pc, #356]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cfa:	4b56      	ldr	r3, [pc, #344]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d0a:	e006      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d10:	e004      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003d22:	4b4c      	ldr	r3, [pc, #304]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f023 0203 	bic.w	r2, r3, #3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4949      	ldr	r1, [pc, #292]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 8086 	bne.w	8003e48 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d3c:	4b45      	ldr	r3, [pc, #276]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a44      	ldr	r2, [pc, #272]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d48:	f7fd f9fe 	bl	8001148 <HAL_GetTick>
 8003d4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d4e:	e009      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d50:	f7fd f9fa 	bl	8001148 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d902      	bls.n	8003d64 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	73fb      	strb	r3, [r7, #15]
        break;
 8003d62:	e005      	b.n	8003d70 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d64:	4b3b      	ldr	r3, [pc, #236]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1ef      	bne.n	8003d50 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d168      	bne.n	8003e48 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d7c:	4b35      	ldr	r3, [pc, #212]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6892      	ldr	r2, [r2, #8]
 8003d88:	0211      	lsls	r1, r2, #8
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68d2      	ldr	r2, [r2, #12]
 8003d8e:	06d2      	lsls	r2, r2, #27
 8003d90:	4311      	orrs	r1, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6852      	ldr	r2, [r2, #4]
 8003d96:	3a01      	subs	r2, #1
 8003d98:	0112      	lsls	r2, r2, #4
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	492d      	ldr	r1, [pc, #180]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	614b      	str	r3, [r1, #20]
 8003da2:	e02d      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d115      	bne.n	8003dd6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003daa:	4b2a      	ldr	r3, [pc, #168]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6892      	ldr	r2, [r2, #8]
 8003db6:	0211      	lsls	r1, r2, #8
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6912      	ldr	r2, [r2, #16]
 8003dbc:	0852      	lsrs	r2, r2, #1
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	0552      	lsls	r2, r2, #21
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6852      	ldr	r2, [r2, #4]
 8003dc8:	3a01      	subs	r2, #1
 8003dca:	0112      	lsls	r2, r2, #4
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	4921      	ldr	r1, [pc, #132]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	614b      	str	r3, [r1, #20]
 8003dd4:	e014      	b.n	8003e00 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	4b21      	ldr	r3, [pc, #132]	@ (8003e60 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6892      	ldr	r2, [r2, #8]
 8003de2:	0211      	lsls	r1, r2, #8
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6952      	ldr	r2, [r2, #20]
 8003de8:	0852      	lsrs	r2, r2, #1
 8003dea:	3a01      	subs	r2, #1
 8003dec:	0652      	lsls	r2, r2, #25
 8003dee:	4311      	orrs	r1, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6852      	ldr	r2, [r2, #4]
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0112      	lsls	r2, r2, #4
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	4916      	ldr	r1, [pc, #88]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e00:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd f99c 	bl	8001148 <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e12:	e009      	b.n	8003e28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e14:	f7fd f998 	bl	8001148 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d902      	bls.n	8003e28 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]
          break;
 8003e26:	e005      	b.n	8003e34 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4904      	ldr	r1, [pc, #16]	@ (8003e54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	07ff800f 	.word	0x07ff800f
 8003e5c:	ff9f800f 	.word	0xff9f800f
 8003e60:	f9ff800f 	.word	0xf9ff800f

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e049      	b.n	8003f0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fc ffb6 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fbae 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e049      	b.n	8003fb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f841 	bl	8003fc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4610      	mov	r0, r2
 8003f52:	f000 fb57 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0202 	mvn.w	r2, #2
 8004008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fad1 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fac3 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fad4 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0204 	mvn.w	r2, #4
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 faab 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa9d 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 faae 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d020      	beq.n	80040d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01b      	beq.n	80040d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0208 	mvn.w	r2, #8
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2204      	movs	r2, #4
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa85 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa77 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fa88 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d020      	beq.n	800411c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0210 	mvn.w	r2, #16
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2208      	movs	r2, #8
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa5f 	bl	80045c6 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa51 	bl	80045b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa62 	bl	80045da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00c      	beq.n	8004140 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0201 	mvn.w	r2, #1
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fa2f 	bl	800459e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004146:	2b00      	cmp	r3, #0
 8004148:	d104      	bne.n	8004154 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00c      	beq.n	800416e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d007      	beq.n	800416e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fef3 	bl	8004f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00c      	beq.n	8004192 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800418a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 feeb 	bl	8004f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa1c 	bl	80045ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f06f 0220 	mvn.w	r2, #32
 80041d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 feb3 	bl	8004f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041fe:	2302      	movs	r3, #2
 8004200:	e0ff      	b.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b14      	cmp	r3, #20
 800420e:	f200 80f0 	bhi.w	80043f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004212:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800426d 	.word	0x0800426d
 800421c:	080043f3 	.word	0x080043f3
 8004220:	080043f3 	.word	0x080043f3
 8004224:	080043f3 	.word	0x080043f3
 8004228:	080042ad 	.word	0x080042ad
 800422c:	080043f3 	.word	0x080043f3
 8004230:	080043f3 	.word	0x080043f3
 8004234:	080043f3 	.word	0x080043f3
 8004238:	080042ef 	.word	0x080042ef
 800423c:	080043f3 	.word	0x080043f3
 8004240:	080043f3 	.word	0x080043f3
 8004244:	080043f3 	.word	0x080043f3
 8004248:	0800432f 	.word	0x0800432f
 800424c:	080043f3 	.word	0x080043f3
 8004250:	080043f3 	.word	0x080043f3
 8004254:	080043f3 	.word	0x080043f3
 8004258:	08004371 	.word	0x08004371
 800425c:	080043f3 	.word	0x080043f3
 8004260:	080043f3 	.word	0x080043f3
 8004264:	080043f3 	.word	0x080043f3
 8004268:	080043b1 	.word	0x080043b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fa6c 	bl	8004750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6999      	ldr	r1, [r3, #24]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	619a      	str	r2, [r3, #24]
      break;
 80042aa:	e0a5      	b.n	80043f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fadc 	bl	8004870 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	619a      	str	r2, [r3, #24]
      break;
 80042ec:	e084      	b.n	80043f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fb45 	bl	8004984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0208 	orr.w	r2, r2, #8
 8004308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0204 	bic.w	r2, r2, #4
 8004318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	61da      	str	r2, [r3, #28]
      break;
 800432c:	e064      	b.n	80043f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fbad 	bl	8004a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	021a      	lsls	r2, r3, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	61da      	str	r2, [r3, #28]
      break;
 800436e:	e043      	b.n	80043f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fbf6 	bl	8004b68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0208 	orr.w	r2, r2, #8
 800438a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043ae:	e023      	b.n	80043f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fc3a 	bl	8004c30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	021a      	lsls	r2, r3, #8
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043f0:	e002      	b.n	80043f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	75fb      	strb	r3, [r7, #23]
      break;
 80043f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop

0800440c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIM_ConfigClockSource+0x1c>
 8004424:	2302      	movs	r3, #2
 8004426:	e0b6      	b.n	8004596 <HAL_TIM_ConfigClockSource+0x18a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004446:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800444a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004452:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004464:	d03e      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0xd8>
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446a:	f200 8087 	bhi.w	800457c <HAL_TIM_ConfigClockSource+0x170>
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004472:	f000 8086 	beq.w	8004582 <HAL_TIM_ConfigClockSource+0x176>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447a:	d87f      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x170>
 800447c:	2b70      	cmp	r3, #112	@ 0x70
 800447e:	d01a      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0xaa>
 8004480:	2b70      	cmp	r3, #112	@ 0x70
 8004482:	d87b      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x170>
 8004484:	2b60      	cmp	r3, #96	@ 0x60
 8004486:	d050      	beq.n	800452a <HAL_TIM_ConfigClockSource+0x11e>
 8004488:	2b60      	cmp	r3, #96	@ 0x60
 800448a:	d877      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x170>
 800448c:	2b50      	cmp	r3, #80	@ 0x50
 800448e:	d03c      	beq.n	800450a <HAL_TIM_ConfigClockSource+0xfe>
 8004490:	2b50      	cmp	r3, #80	@ 0x50
 8004492:	d873      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x170>
 8004494:	2b40      	cmp	r3, #64	@ 0x40
 8004496:	d058      	beq.n	800454a <HAL_TIM_ConfigClockSource+0x13e>
 8004498:	2b40      	cmp	r3, #64	@ 0x40
 800449a:	d86f      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x170>
 800449c:	2b30      	cmp	r3, #48	@ 0x30
 800449e:	d064      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15e>
 80044a0:	2b30      	cmp	r3, #48	@ 0x30
 80044a2:	d86b      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x170>
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d060      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15e>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d867      	bhi.n	800457c <HAL_TIM_ConfigClockSource+0x170>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d05c      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15e>
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d05a      	beq.n	800456a <HAL_TIM_ConfigClockSource+0x15e>
 80044b4:	e062      	b.n	800457c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044c6:	f000 fc93 	bl	8004df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	609a      	str	r2, [r3, #8]
      break;
 80044e2:	e04f      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044f4:	f000 fc7c 	bl	8004df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004506:	609a      	str	r2, [r3, #8]
      break;
 8004508:	e03c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004516:	461a      	mov	r2, r3
 8004518:	f000 fbf0 	bl	8004cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2150      	movs	r1, #80	@ 0x50
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fc49 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 8004528:	e02c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004536:	461a      	mov	r2, r3
 8004538:	f000 fc0f 	bl	8004d5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2160      	movs	r1, #96	@ 0x60
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fc39 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 8004548:	e01c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004556:	461a      	mov	r2, r3
 8004558:	f000 fbd0 	bl	8004cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2140      	movs	r1, #64	@ 0x40
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fc29 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 8004568:	e00c      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f000 fc20 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800457a:	e003      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
      break;
 8004580:	e000      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a46      	ldr	r2, [pc, #280]	@ (8004730 <TIM_Base_SetConfig+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004622:	d00f      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a43      	ldr	r2, [pc, #268]	@ (8004734 <TIM_Base_SetConfig+0x130>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00b      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a42      	ldr	r2, [pc, #264]	@ (8004738 <TIM_Base_SetConfig+0x134>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a41      	ldr	r2, [pc, #260]	@ (800473c <TIM_Base_SetConfig+0x138>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d003      	beq.n	8004644 <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a40      	ldr	r2, [pc, #256]	@ (8004740 <TIM_Base_SetConfig+0x13c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a35      	ldr	r2, [pc, #212]	@ (8004730 <TIM_Base_SetConfig+0x12c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d01f      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004664:	d01b      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a32      	ldr	r2, [pc, #200]	@ (8004734 <TIM_Base_SetConfig+0x130>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d017      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a31      	ldr	r2, [pc, #196]	@ (8004738 <TIM_Base_SetConfig+0x134>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a30      	ldr	r2, [pc, #192]	@ (800473c <TIM_Base_SetConfig+0x138>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00f      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2f      	ldr	r2, [pc, #188]	@ (8004740 <TIM_Base_SetConfig+0x13c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00b      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a2e      	ldr	r2, [pc, #184]	@ (8004744 <TIM_Base_SetConfig+0x140>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d007      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a2d      	ldr	r2, [pc, #180]	@ (8004748 <TIM_Base_SetConfig+0x144>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d003      	beq.n	800469e <TIM_Base_SetConfig+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a2c      	ldr	r2, [pc, #176]	@ (800474c <TIM_Base_SetConfig+0x148>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d108      	bne.n	80046b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <TIM_Base_SetConfig+0x12c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00f      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a18      	ldr	r2, [pc, #96]	@ (8004740 <TIM_Base_SetConfig+0x13c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00b      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a17      	ldr	r2, [pc, #92]	@ (8004744 <TIM_Base_SetConfig+0x140>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a16      	ldr	r2, [pc, #88]	@ (8004748 <TIM_Base_SetConfig+0x144>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0xf8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a15      	ldr	r2, [pc, #84]	@ (800474c <TIM_Base_SetConfig+0x148>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d105      	bne.n	8004722 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]
  }
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40013400 	.word	0x40013400
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800

08004750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 0201 	bic.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 0302 	bic.w	r3, r3, #2
 800479c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2c      	ldr	r2, [pc, #176]	@ (800485c <TIM_OC1_SetConfig+0x10c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00f      	beq.n	80047d0 <TIM_OC1_SetConfig+0x80>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004860 <TIM_OC1_SetConfig+0x110>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00b      	beq.n	80047d0 <TIM_OC1_SetConfig+0x80>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004864 <TIM_OC1_SetConfig+0x114>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d007      	beq.n	80047d0 <TIM_OC1_SetConfig+0x80>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <TIM_OC1_SetConfig+0x118>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_OC1_SetConfig+0x80>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a28      	ldr	r2, [pc, #160]	@ (800486c <TIM_OC1_SetConfig+0x11c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d10c      	bne.n	80047ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0308 	bic.w	r3, r3, #8
 80047d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f023 0304 	bic.w	r3, r3, #4
 80047e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1b      	ldr	r2, [pc, #108]	@ (800485c <TIM_OC1_SetConfig+0x10c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00f      	beq.n	8004812 <TIM_OC1_SetConfig+0xc2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004860 <TIM_OC1_SetConfig+0x110>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00b      	beq.n	8004812 <TIM_OC1_SetConfig+0xc2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a19      	ldr	r2, [pc, #100]	@ (8004864 <TIM_OC1_SetConfig+0x114>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <TIM_OC1_SetConfig+0xc2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <TIM_OC1_SetConfig+0x118>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_OC1_SetConfig+0xc2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a17      	ldr	r2, [pc, #92]	@ (800486c <TIM_OC1_SetConfig+0x11c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d111      	bne.n	8004836 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	621a      	str	r2, [r3, #32]
}
 8004850:	bf00      	nop
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40012c00 	.word	0x40012c00
 8004860:	40013400 	.word	0x40013400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f023 0210 	bic.w	r2, r3, #16
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800489e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0320 	bic.w	r3, r3, #32
 80048be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <TIM_OC2_SetConfig+0x100>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC2_SetConfig+0x6c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a27      	ldr	r2, [pc, #156]	@ (8004974 <TIM_OC2_SetConfig+0x104>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10d      	bne.n	80048f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <TIM_OC2_SetConfig+0x100>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_OC2_SetConfig+0xb0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <TIM_OC2_SetConfig+0x104>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_OC2_SetConfig+0xb0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1b      	ldr	r2, [pc, #108]	@ (8004978 <TIM_OC2_SetConfig+0x108>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_OC2_SetConfig+0xb0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a1a      	ldr	r2, [pc, #104]	@ (800497c <TIM_OC2_SetConfig+0x10c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_OC2_SetConfig+0xb0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a19      	ldr	r2, [pc, #100]	@ (8004980 <TIM_OC2_SetConfig+0x110>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d113      	bne.n	8004948 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800492e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40013400 	.word	0x40013400
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800

08004984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a27      	ldr	r2, [pc, #156]	@ (8004a80 <TIM_OC3_SetConfig+0xfc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_OC3_SetConfig+0x6a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a26      	ldr	r2, [pc, #152]	@ (8004a84 <TIM_OC3_SetConfig+0x100>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d10d      	bne.n	8004a0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a80 <TIM_OC3_SetConfig+0xfc>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00f      	beq.n	8004a32 <TIM_OC3_SetConfig+0xae>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a1b      	ldr	r2, [pc, #108]	@ (8004a84 <TIM_OC3_SetConfig+0x100>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00b      	beq.n	8004a32 <TIM_OC3_SetConfig+0xae>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a88 <TIM_OC3_SetConfig+0x104>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d007      	beq.n	8004a32 <TIM_OC3_SetConfig+0xae>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a19      	ldr	r2, [pc, #100]	@ (8004a8c <TIM_OC3_SetConfig+0x108>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d003      	beq.n	8004a32 <TIM_OC3_SetConfig+0xae>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <TIM_OC3_SetConfig+0x10c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d113      	bne.n	8004a5a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40013400 	.word	0x40013400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <TIM_OC4_SetConfig+0xc0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00f      	beq.n	8004b18 <TIM_OC4_SetConfig+0x84>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a17      	ldr	r2, [pc, #92]	@ (8004b58 <TIM_OC4_SetConfig+0xc4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d00b      	beq.n	8004b18 <TIM_OC4_SetConfig+0x84>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a16      	ldr	r2, [pc, #88]	@ (8004b5c <TIM_OC4_SetConfig+0xc8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d007      	beq.n	8004b18 <TIM_OC4_SetConfig+0x84>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <TIM_OC4_SetConfig+0xcc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d003      	beq.n	8004b18 <TIM_OC4_SetConfig+0x84>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a14      	ldr	r2, [pc, #80]	@ (8004b64 <TIM_OC4_SetConfig+0xd0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d109      	bne.n	8004b2c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40013400 	.word	0x40013400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40014400 	.word	0x40014400
 8004b64:	40014800 	.word	0x40014800

08004b68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004bac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a17      	ldr	r2, [pc, #92]	@ (8004c1c <TIM_OC5_SetConfig+0xb4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00f      	beq.n	8004be2 <TIM_OC5_SetConfig+0x7a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a16      	ldr	r2, [pc, #88]	@ (8004c20 <TIM_OC5_SetConfig+0xb8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00b      	beq.n	8004be2 <TIM_OC5_SetConfig+0x7a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a15      	ldr	r2, [pc, #84]	@ (8004c24 <TIM_OC5_SetConfig+0xbc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d007      	beq.n	8004be2 <TIM_OC5_SetConfig+0x7a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a14      	ldr	r2, [pc, #80]	@ (8004c28 <TIM_OC5_SetConfig+0xc0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d003      	beq.n	8004be2 <TIM_OC5_SetConfig+0x7a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a13      	ldr	r2, [pc, #76]	@ (8004c2c <TIM_OC5_SetConfig+0xc4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d109      	bne.n	8004bf6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40013400 	.word	0x40013400
 8004c24:	40014000 	.word	0x40014000
 8004c28:	40014400 	.word	0x40014400
 8004c2c:	40014800 	.word	0x40014800

08004c30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b087      	sub	sp, #28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	021b      	lsls	r3, r3, #8
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	051b      	lsls	r3, r3, #20
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a18      	ldr	r2, [pc, #96]	@ (8004ce8 <TIM_OC6_SetConfig+0xb8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00f      	beq.n	8004cac <TIM_OC6_SetConfig+0x7c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a17      	ldr	r2, [pc, #92]	@ (8004cec <TIM_OC6_SetConfig+0xbc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00b      	beq.n	8004cac <TIM_OC6_SetConfig+0x7c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a16      	ldr	r2, [pc, #88]	@ (8004cf0 <TIM_OC6_SetConfig+0xc0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <TIM_OC6_SetConfig+0x7c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	@ (8004cf4 <TIM_OC6_SetConfig+0xc4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_OC6_SetConfig+0x7c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <TIM_OC6_SetConfig+0xc8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d109      	bne.n	8004cc0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	029b      	lsls	r3, r3, #10
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	693a      	ldr	r2, [r7, #16]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800

08004cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 030a 	bic.w	r3, r3, #10
 8004d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b087      	sub	sp, #28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f023 0210 	bic.w	r2, r3, #16
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f043 0307 	orr.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e068      	b.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2d      	ldr	r2, [pc, #180]	@ (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1e      	ldr	r2, [pc, #120]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01d      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eba:	d018      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a18      	ldr	r2, [pc, #96]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a13      	ldr	r2, [pc, #76]	@ (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a14      	ldr	r2, [pc, #80]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40013400 	.word	0x40013400
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40014000 	.word	0x40014000

08004f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e042      	b.n	8005014 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fb ff83 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2224      	movs	r2, #36	@ 0x24
 8004faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0201 	bic.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb24 	bl	8005614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f825 	bl	800501c <UART_SetConfig>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e01b      	b.n	8005014 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fba3 	bl	8005758 <UART_CheckIdleState>
 8005012:	4603      	mov	r3, r0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800501c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005020:	b08c      	sub	sp, #48	@ 0x30
 8005022:	af00      	add	r7, sp, #0
 8005024:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	431a      	orrs	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	431a      	orrs	r2, r3
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	4313      	orrs	r3, r2
 8005042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	4baa      	ldr	r3, [pc, #680]	@ (80052f4 <UART_SetConfig+0x2d8>)
 800504c:	4013      	ands	r3, r2
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005054:	430b      	orrs	r3, r1
 8005056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a9f      	ldr	r2, [pc, #636]	@ (80052f8 <UART_SetConfig+0x2dc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d004      	beq.n	8005088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005084:	4313      	orrs	r3, r2
 8005086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005092:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800509c:	430b      	orrs	r3, r1
 800509e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	f023 010f 	bic.w	r1, r3, #15
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a90      	ldr	r2, [pc, #576]	@ (80052fc <UART_SetConfig+0x2e0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d125      	bne.n	800510c <UART_SetConfig+0xf0>
 80050c0:	4b8f      	ldr	r3, [pc, #572]	@ (8005300 <UART_SetConfig+0x2e4>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d81a      	bhi.n	8005104 <UART_SetConfig+0xe8>
 80050ce:	a201      	add	r2, pc, #4	@ (adr r2, 80050d4 <UART_SetConfig+0xb8>)
 80050d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d4:	080050e5 	.word	0x080050e5
 80050d8:	080050f5 	.word	0x080050f5
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	2301      	movs	r3, #1
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e116      	b.n	800531a <UART_SetConfig+0x2fe>
 80050ec:	2302      	movs	r3, #2
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	e112      	b.n	800531a <UART_SetConfig+0x2fe>
 80050f4:	2304      	movs	r3, #4
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fa:	e10e      	b.n	800531a <UART_SetConfig+0x2fe>
 80050fc:	2308      	movs	r3, #8
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e10a      	b.n	800531a <UART_SetConfig+0x2fe>
 8005104:	2310      	movs	r3, #16
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510a:	e106      	b.n	800531a <UART_SetConfig+0x2fe>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a7c      	ldr	r2, [pc, #496]	@ (8005304 <UART_SetConfig+0x2e8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d138      	bne.n	8005188 <UART_SetConfig+0x16c>
 8005116:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <UART_SetConfig+0x2e4>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511c:	f003 030c 	and.w	r3, r3, #12
 8005120:	2b0c      	cmp	r3, #12
 8005122:	d82d      	bhi.n	8005180 <UART_SetConfig+0x164>
 8005124:	a201      	add	r2, pc, #4	@ (adr r2, 800512c <UART_SetConfig+0x110>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	08005161 	.word	0x08005161
 8005130:	08005181 	.word	0x08005181
 8005134:	08005181 	.word	0x08005181
 8005138:	08005181 	.word	0x08005181
 800513c:	08005171 	.word	0x08005171
 8005140:	08005181 	.word	0x08005181
 8005144:	08005181 	.word	0x08005181
 8005148:	08005181 	.word	0x08005181
 800514c:	08005169 	.word	0x08005169
 8005150:	08005181 	.word	0x08005181
 8005154:	08005181 	.word	0x08005181
 8005158:	08005181 	.word	0x08005181
 800515c:	08005179 	.word	0x08005179
 8005160:	2300      	movs	r3, #0
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005166:	e0d8      	b.n	800531a <UART_SetConfig+0x2fe>
 8005168:	2302      	movs	r3, #2
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516e:	e0d4      	b.n	800531a <UART_SetConfig+0x2fe>
 8005170:	2304      	movs	r3, #4
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005176:	e0d0      	b.n	800531a <UART_SetConfig+0x2fe>
 8005178:	2308      	movs	r3, #8
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800517e:	e0cc      	b.n	800531a <UART_SetConfig+0x2fe>
 8005180:	2310      	movs	r3, #16
 8005182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005186:	e0c8      	b.n	800531a <UART_SetConfig+0x2fe>
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a5e      	ldr	r2, [pc, #376]	@ (8005308 <UART_SetConfig+0x2ec>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d125      	bne.n	80051de <UART_SetConfig+0x1c2>
 8005192:	4b5b      	ldr	r3, [pc, #364]	@ (8005300 <UART_SetConfig+0x2e4>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005198:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800519c:	2b30      	cmp	r3, #48	@ 0x30
 800519e:	d016      	beq.n	80051ce <UART_SetConfig+0x1b2>
 80051a0:	2b30      	cmp	r3, #48	@ 0x30
 80051a2:	d818      	bhi.n	80051d6 <UART_SetConfig+0x1ba>
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d00a      	beq.n	80051be <UART_SetConfig+0x1a2>
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d814      	bhi.n	80051d6 <UART_SetConfig+0x1ba>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <UART_SetConfig+0x19a>
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d008      	beq.n	80051c6 <UART_SetConfig+0x1aa>
 80051b4:	e00f      	b.n	80051d6 <UART_SetConfig+0x1ba>
 80051b6:	2300      	movs	r3, #0
 80051b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051bc:	e0ad      	b.n	800531a <UART_SetConfig+0x2fe>
 80051be:	2302      	movs	r3, #2
 80051c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c4:	e0a9      	b.n	800531a <UART_SetConfig+0x2fe>
 80051c6:	2304      	movs	r3, #4
 80051c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051cc:	e0a5      	b.n	800531a <UART_SetConfig+0x2fe>
 80051ce:	2308      	movs	r3, #8
 80051d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d4:	e0a1      	b.n	800531a <UART_SetConfig+0x2fe>
 80051d6:	2310      	movs	r3, #16
 80051d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051dc:	e09d      	b.n	800531a <UART_SetConfig+0x2fe>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a4a      	ldr	r2, [pc, #296]	@ (800530c <UART_SetConfig+0x2f0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d125      	bne.n	8005234 <UART_SetConfig+0x218>
 80051e8:	4b45      	ldr	r3, [pc, #276]	@ (8005300 <UART_SetConfig+0x2e4>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051f4:	d016      	beq.n	8005224 <UART_SetConfig+0x208>
 80051f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051f8:	d818      	bhi.n	800522c <UART_SetConfig+0x210>
 80051fa:	2b80      	cmp	r3, #128	@ 0x80
 80051fc:	d00a      	beq.n	8005214 <UART_SetConfig+0x1f8>
 80051fe:	2b80      	cmp	r3, #128	@ 0x80
 8005200:	d814      	bhi.n	800522c <UART_SetConfig+0x210>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <UART_SetConfig+0x1f0>
 8005206:	2b40      	cmp	r3, #64	@ 0x40
 8005208:	d008      	beq.n	800521c <UART_SetConfig+0x200>
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x210>
 800520c:	2300      	movs	r3, #0
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005212:	e082      	b.n	800531a <UART_SetConfig+0x2fe>
 8005214:	2302      	movs	r3, #2
 8005216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800521a:	e07e      	b.n	800531a <UART_SetConfig+0x2fe>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005222:	e07a      	b.n	800531a <UART_SetConfig+0x2fe>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800522a:	e076      	b.n	800531a <UART_SetConfig+0x2fe>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005232:	e072      	b.n	800531a <UART_SetConfig+0x2fe>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a35      	ldr	r2, [pc, #212]	@ (8005310 <UART_SetConfig+0x2f4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d12a      	bne.n	8005294 <UART_SetConfig+0x278>
 800523e:	4b30      	ldr	r3, [pc, #192]	@ (8005300 <UART_SetConfig+0x2e4>)
 8005240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800524c:	d01a      	beq.n	8005284 <UART_SetConfig+0x268>
 800524e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005252:	d81b      	bhi.n	800528c <UART_SetConfig+0x270>
 8005254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005258:	d00c      	beq.n	8005274 <UART_SetConfig+0x258>
 800525a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525e:	d815      	bhi.n	800528c <UART_SetConfig+0x270>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <UART_SetConfig+0x250>
 8005264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005268:	d008      	beq.n	800527c <UART_SetConfig+0x260>
 800526a:	e00f      	b.n	800528c <UART_SetConfig+0x270>
 800526c:	2300      	movs	r3, #0
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005272:	e052      	b.n	800531a <UART_SetConfig+0x2fe>
 8005274:	2302      	movs	r3, #2
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527a:	e04e      	b.n	800531a <UART_SetConfig+0x2fe>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005282:	e04a      	b.n	800531a <UART_SetConfig+0x2fe>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800528a:	e046      	b.n	800531a <UART_SetConfig+0x2fe>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005292:	e042      	b.n	800531a <UART_SetConfig+0x2fe>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <UART_SetConfig+0x2dc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d13a      	bne.n	8005314 <UART_SetConfig+0x2f8>
 800529e:	4b18      	ldr	r3, [pc, #96]	@ (8005300 <UART_SetConfig+0x2e4>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ac:	d01a      	beq.n	80052e4 <UART_SetConfig+0x2c8>
 80052ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052b2:	d81b      	bhi.n	80052ec <UART_SetConfig+0x2d0>
 80052b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052b8:	d00c      	beq.n	80052d4 <UART_SetConfig+0x2b8>
 80052ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052be:	d815      	bhi.n	80052ec <UART_SetConfig+0x2d0>
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <UART_SetConfig+0x2b0>
 80052c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c8:	d008      	beq.n	80052dc <UART_SetConfig+0x2c0>
 80052ca:	e00f      	b.n	80052ec <UART_SetConfig+0x2d0>
 80052cc:	2300      	movs	r3, #0
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e022      	b.n	800531a <UART_SetConfig+0x2fe>
 80052d4:	2302      	movs	r3, #2
 80052d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052da:	e01e      	b.n	800531a <UART_SetConfig+0x2fe>
 80052dc:	2304      	movs	r3, #4
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e2:	e01a      	b.n	800531a <UART_SetConfig+0x2fe>
 80052e4:	2308      	movs	r3, #8
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ea:	e016      	b.n	800531a <UART_SetConfig+0x2fe>
 80052ec:	2310      	movs	r3, #16
 80052ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f2:	e012      	b.n	800531a <UART_SetConfig+0x2fe>
 80052f4:	cfff69f3 	.word	0xcfff69f3
 80052f8:	40008000 	.word	0x40008000
 80052fc:	40013800 	.word	0x40013800
 8005300:	40021000 	.word	0x40021000
 8005304:	40004400 	.word	0x40004400
 8005308:	40004800 	.word	0x40004800
 800530c:	40004c00 	.word	0x40004c00
 8005310:	40005000 	.word	0x40005000
 8005314:	2310      	movs	r3, #16
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4aae      	ldr	r2, [pc, #696]	@ (80055d8 <UART_SetConfig+0x5bc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	f040 8097 	bne.w	8005454 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005326:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800532a:	2b08      	cmp	r3, #8
 800532c:	d823      	bhi.n	8005376 <UART_SetConfig+0x35a>
 800532e:	a201      	add	r2, pc, #4	@ (adr r2, 8005334 <UART_SetConfig+0x318>)
 8005330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005334:	08005359 	.word	0x08005359
 8005338:	08005377 	.word	0x08005377
 800533c:	08005361 	.word	0x08005361
 8005340:	08005377 	.word	0x08005377
 8005344:	08005367 	.word	0x08005367
 8005348:	08005377 	.word	0x08005377
 800534c:	08005377 	.word	0x08005377
 8005350:	08005377 	.word	0x08005377
 8005354:	0800536f 	.word	0x0800536f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005358:	f7fd ff80 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 800535c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800535e:	e010      	b.n	8005382 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005360:	4b9e      	ldr	r3, [pc, #632]	@ (80055dc <UART_SetConfig+0x5c0>)
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005364:	e00d      	b.n	8005382 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005366:	f7fd fee1 	bl	800312c <HAL_RCC_GetSysClockFreq>
 800536a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800536c:	e009      	b.n	8005382 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005374:	e005      	b.n	8005382 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8130 	beq.w	80055ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538e:	4a94      	ldr	r2, [pc, #592]	@ (80055e0 <UART_SetConfig+0x5c4>)
 8005390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005394:	461a      	mov	r2, r3
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	fbb3 f3f2 	udiv	r3, r3, r2
 800539c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4413      	add	r3, r2
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d305      	bcc.n	80053ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d903      	bls.n	80053c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80053c0:	e113      	b.n	80055ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	2200      	movs	r2, #0
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	60fa      	str	r2, [r7, #12]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	4a84      	ldr	r2, [pc, #528]	@ (80055e0 <UART_SetConfig+0x5c4>)
 80053d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2200      	movs	r2, #0
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053e4:	f7fa ff0a 	bl	80001fc <__aeabi_uldivmod>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	020b      	lsls	r3, r1, #8
 80053fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053fe:	0202      	lsls	r2, r0, #8
 8005400:	6979      	ldr	r1, [r7, #20]
 8005402:	6849      	ldr	r1, [r1, #4]
 8005404:	0849      	lsrs	r1, r1, #1
 8005406:	2000      	movs	r0, #0
 8005408:	460c      	mov	r4, r1
 800540a:	4605      	mov	r5, r0
 800540c:	eb12 0804 	adds.w	r8, r2, r4
 8005410:	eb43 0905 	adc.w	r9, r3, r5
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	469a      	mov	sl, r3
 800541c:	4693      	mov	fp, r2
 800541e:	4652      	mov	r2, sl
 8005420:	465b      	mov	r3, fp
 8005422:	4640      	mov	r0, r8
 8005424:	4649      	mov	r1, r9
 8005426:	f7fa fee9 	bl	80001fc <__aeabi_uldivmod>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4613      	mov	r3, r2
 8005430:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005438:	d308      	bcc.n	800544c <UART_SetConfig+0x430>
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005440:	d204      	bcs.n	800544c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	e0ce      	b.n	80055ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005452:	e0ca      	b.n	80055ea <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800545c:	d166      	bne.n	800552c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800545e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005462:	2b08      	cmp	r3, #8
 8005464:	d827      	bhi.n	80054b6 <UART_SetConfig+0x49a>
 8005466:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <UART_SetConfig+0x450>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	08005491 	.word	0x08005491
 8005470:	08005499 	.word	0x08005499
 8005474:	080054a1 	.word	0x080054a1
 8005478:	080054b7 	.word	0x080054b7
 800547c:	080054a7 	.word	0x080054a7
 8005480:	080054b7 	.word	0x080054b7
 8005484:	080054b7 	.word	0x080054b7
 8005488:	080054b7 	.word	0x080054b7
 800548c:	080054af 	.word	0x080054af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005490:	f7fd fee4 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8005494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005496:	e014      	b.n	80054c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005498:	f7fd fef6 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 800549c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800549e:	e010      	b.n	80054c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054a0:	4b4e      	ldr	r3, [pc, #312]	@ (80055dc <UART_SetConfig+0x5c0>)
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054a4:	e00d      	b.n	80054c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a6:	f7fd fe41 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80054aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054ac:	e009      	b.n	80054c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80054b4:	e005      	b.n	80054c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80054c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 8090 	beq.w	80055ea <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	4a44      	ldr	r2, [pc, #272]	@ (80055e0 <UART_SetConfig+0x5c4>)
 80054d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054d4:	461a      	mov	r2, r3
 80054d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80054dc:	005a      	lsls	r2, r3, #1
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	441a      	add	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	2b0f      	cmp	r3, #15
 80054f4:	d916      	bls.n	8005524 <UART_SetConfig+0x508>
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054fc:	d212      	bcs.n	8005524 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f023 030f 	bic.w	r3, r3, #15
 8005506:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	b29a      	uxth	r2, r3
 8005514:	8bfb      	ldrh	r3, [r7, #30]
 8005516:	4313      	orrs	r3, r2
 8005518:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	8bfa      	ldrh	r2, [r7, #30]
 8005520:	60da      	str	r2, [r3, #12]
 8005522:	e062      	b.n	80055ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800552a:	e05e      	b.n	80055ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800552c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005530:	2b08      	cmp	r3, #8
 8005532:	d828      	bhi.n	8005586 <UART_SetConfig+0x56a>
 8005534:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <UART_SetConfig+0x520>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005561 	.word	0x08005561
 8005540:	08005569 	.word	0x08005569
 8005544:	08005571 	.word	0x08005571
 8005548:	08005587 	.word	0x08005587
 800554c:	08005577 	.word	0x08005577
 8005550:	08005587 	.word	0x08005587
 8005554:	08005587 	.word	0x08005587
 8005558:	08005587 	.word	0x08005587
 800555c:	0800557f 	.word	0x0800557f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fd fe7c 	bl	800325c <HAL_RCC_GetPCLK1Freq>
 8005564:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005566:	e014      	b.n	8005592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005568:	f7fd fe8e 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 800556c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800556e:	e010      	b.n	8005592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005570:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <UART_SetConfig+0x5c0>)
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005574:	e00d      	b.n	8005592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005576:	f7fd fdd9 	bl	800312c <HAL_RCC_GetSysClockFreq>
 800557a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800557c:	e009      	b.n	8005592 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005584:	e005      	b.n	8005592 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005586:	2300      	movs	r3, #0
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005590:	bf00      	nop
    }

    if (pclk != 0U)
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d028      	beq.n	80055ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	4a10      	ldr	r2, [pc, #64]	@ (80055e0 <UART_SetConfig+0x5c4>)
 800559e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	441a      	add	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	2b0f      	cmp	r3, #15
 80055c0:	d910      	bls.n	80055e4 <UART_SetConfig+0x5c8>
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c8:	d20c      	bcs.n	80055e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60da      	str	r2, [r3, #12]
 80055d4:	e009      	b.n	80055ea <UART_SetConfig+0x5ce>
 80055d6:	bf00      	nop
 80055d8:	40008000 	.word	0x40008000
 80055dc:	00f42400 	.word	0x00f42400
 80055e0:	08005d10 	.word	0x08005d10
      }
      else
      {
        ret = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2200      	movs	r2, #0
 80055fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	2200      	movs	r2, #0
 8005604:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005606:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800560a:	4618      	mov	r0, r3
 800560c:	3730      	adds	r7, #48	@ 0x30
 800560e:	46bd      	mov	sp, r7
 8005610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005712:	d10a      	bne.n	800572a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b098      	sub	sp, #96	@ 0x60
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005768:	f7fb fcee 	bl	8001148 <HAL_GetTick>
 800576c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d12f      	bne.n	80057dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005784:	2200      	movs	r2, #0
 8005786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f88e 	bl	80058ac <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d022      	beq.n	80057dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e6      	bne.n	8005796 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e063      	b.n	80058a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d149      	bne.n	800587e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f2:	2200      	movs	r2, #0
 80057f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f857 	bl	80058ac <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d03c      	beq.n	800587e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	623b      	str	r3, [r7, #32]
   return(result);
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005822:	633b      	str	r3, [r7, #48]	@ 0x30
 8005824:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e6      	bne.n	8005804 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3308      	adds	r3, #8
 800583c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	60fb      	str	r3, [r7, #12]
   return(result);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005856:	61fa      	str	r2, [r7, #28]
 8005858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	69b9      	ldr	r1, [r7, #24]
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	617b      	str	r3, [r7, #20]
   return(result);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e012      	b.n	80058a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3758      	adds	r7, #88	@ 0x58
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058bc:	e04f      	b.n	800595e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058c4:	d04b      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c6:	f7fb fc3f 	bl	8001148 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <UART_WaitOnFlagUntilTimeout+0x30>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e04e      	b.n	800597e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d037      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b80      	cmp	r3, #128	@ 0x80
 80058f2:	d034      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b40      	cmp	r3, #64	@ 0x40
 80058f8:	d031      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d110      	bne.n	800592a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2208      	movs	r2, #8
 800590e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f838 	bl	8005986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2208      	movs	r2, #8
 800591a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e029      	b.n	800597e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005938:	d111      	bne.n	800595e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f81e 	bl	8005986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e00f      	b.n	800597e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	bf0c      	ite	eq
 800596e:	2301      	moveq	r3, #1
 8005970:	2300      	movne	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	429a      	cmp	r2, r3
 800597a:	d0a0      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005986:	b480      	push	{r7}
 8005988:	b095      	sub	sp, #84	@ 0x54
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	461a      	mov	r2, r3
 80059aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80059ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e6      	bne.n	800598e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059ec:	e841 2300 	strex	r3, r2, [r1]
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1e3      	bne.n	80059c0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d118      	bne.n	8005a32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	e853 3f00 	ldrex	r3, [r3]
 8005a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f023 0310 	bic.w	r3, r3, #16
 8005a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a1e:	61bb      	str	r3, [r7, #24]
 8005a20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6979      	ldr	r1, [r7, #20]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e6      	bne.n	8005a00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a46:	bf00      	nop
 8005a48:	3754      	adds	r7, #84	@ 0x54
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d101      	bne.n	8005a68 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a64:	2302      	movs	r3, #2
 8005a66:	e027      	b.n	8005ab8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2224      	movs	r2, #36	@ 0x24
 8005a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e02d      	b.n	8005b38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	@ 0x24
 8005ae8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f84f 	bl	8005bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e02d      	b.n	8005bb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	@ 0x24
 8005b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f811 	bl	8005bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d108      	bne.n	8005bde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bdc:	e031      	b.n	8005c42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bde:	2308      	movs	r3, #8
 8005be0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005be2:	2308      	movs	r3, #8
 8005be4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	0e5b      	lsrs	r3, r3, #25
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	0f5b      	lsrs	r3, r3, #29
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c06:	7bbb      	ldrb	r3, [r7, #14]
 8005c08:	7b3a      	ldrb	r2, [r7, #12]
 8005c0a:	4911      	ldr	r1, [pc, #68]	@ (8005c50 <UARTEx_SetNbDataToProcess+0x94>)
 8005c0c:	5c8a      	ldrb	r2, [r1, r2]
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c12:	7b3a      	ldrb	r2, [r7, #12]
 8005c14:	490f      	ldr	r1, [pc, #60]	@ (8005c54 <UARTEx_SetNbDataToProcess+0x98>)
 8005c16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c18:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	7b7a      	ldrb	r2, [r7, #13]
 8005c28:	4909      	ldr	r1, [pc, #36]	@ (8005c50 <UARTEx_SetNbDataToProcess+0x94>)
 8005c2a:	5c8a      	ldrb	r2, [r1, r2]
 8005c2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c30:	7b7a      	ldrb	r2, [r7, #13]
 8005c32:	4908      	ldr	r1, [pc, #32]	@ (8005c54 <UARTEx_SetNbDataToProcess+0x98>)
 8005c34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c36:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	08005d28 	.word	0x08005d28
 8005c54:	08005d30 	.word	0x08005d30

08005c58 <memset>:
 8005c58:	4402      	add	r2, r0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d100      	bne.n	8005c62 <memset+0xa>
 8005c60:	4770      	bx	lr
 8005c62:	f803 1b01 	strb.w	r1, [r3], #1
 8005c66:	e7f9      	b.n	8005c5c <memset+0x4>

08005c68 <__libc_init_array>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ca0 <__libc_init_array+0x38>)
 8005c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ca4 <__libc_init_array+0x3c>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	2600      	movs	r6, #0
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	d109      	bne.n	8005c8c <__libc_init_array+0x24>
 8005c78:	4d0b      	ldr	r5, [pc, #44]	@ (8005ca8 <__libc_init_array+0x40>)
 8005c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8005cac <__libc_init_array+0x44>)
 8005c7c:	f000 f818 	bl	8005cb0 <_init>
 8005c80:	1b64      	subs	r4, r4, r5
 8005c82:	10a4      	asrs	r4, r4, #2
 8005c84:	2600      	movs	r6, #0
 8005c86:	42a6      	cmp	r6, r4
 8005c88:	d105      	bne.n	8005c96 <__libc_init_array+0x2e>
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c90:	4798      	blx	r3
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7ee      	b.n	8005c74 <__libc_init_array+0xc>
 8005c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9a:	4798      	blx	r3
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	e7f2      	b.n	8005c86 <__libc_init_array+0x1e>
 8005ca0:	08005d40 	.word	0x08005d40
 8005ca4:	08005d40 	.word	0x08005d40
 8005ca8:	08005d40 	.word	0x08005d40
 8005cac:	08005d44 	.word	0x08005d44

08005cb0 <_init>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr

08005cbc <_fini>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	bf00      	nop
 8005cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc2:	bc08      	pop	{r3}
 8005cc4:	469e      	mov	lr, r3
 8005cc6:	4770      	bx	lr
