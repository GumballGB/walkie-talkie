
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a3c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006bf8  08006bf8  00007bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c68  08006c68  00007c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c70  08006c70  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c74  08006c74  00007c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006c78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00096ee8  2000000c  08006c84  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20096ef4  08006c84  00008ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a412  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed1  00000000  00000000  0002244e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00025320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001222  00000000  00000000  00026a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c559  00000000  00000000  00027c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b233  00000000  00000000  000541ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001129b5  00000000  00000000  0006f3de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181d93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006384  00000000  00000000  00181dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0018815c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006be0 	.word	0x08006be0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006be0 	.word	0x08006be0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_GPIO_EXTI_Callback>:




//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	@ 0x28
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]

	// if button is 0 -> NOT on recording mode, ready to record
	// if button is 1 -> Recording


	if (GPIO_Pin == B_BUTTON_Pin) {
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000538:	f040 808b 	bne.w	8000652 <HAL_GPIO_EXTI_Callback+0x12a>


        // Check if the button is pressed
        if (HAL_GPIO_ReadPin(B_BUTTON_GPIO_Port, B_BUTTON_Pin) == GPIO_PIN_SET) {
 800053c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000540:	4846      	ldr	r0, [pc, #280]	@ (800065c <HAL_GPIO_EXTI_Callback+0x134>)
 8000542:	f002 fd03 	bl	8002f4c <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	f040 8082 	bne.w	8000652 <HAL_GPIO_EXTI_Callback+0x12a>

        	//ready to record. It also means we need to wipe out any recBuf
        	if (button_state == 0) {
 800054e:	4b44      	ldr	r3, [pc, #272]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d127      	bne.n	80005a6 <HAL_GPIO_EXTI_Callback+0x7e>


                //just in case stop DMA
                //stop the timer now
                HAL_TIM_Base_Stop(&htim2);
 8000556:	4843      	ldr	r0, [pc, #268]	@ (8000664 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000558:	f004 fbe6 	bl	8004d28 <HAL_TIM_Base_Stop>
                HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Ensure DAC DMA is stopped first
 800055c:	2100      	movs	r1, #0
 800055e:	4842      	ldr	r0, [pc, #264]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x140>)
 8000560:	f001 fa96 	bl	8001a90 <HAL_DAC_Stop_DMA>
                HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);  // Ensure DFSDM DMA is stopped
 8000564:	4841      	ldr	r0, [pc, #260]	@ (800066c <HAL_GPIO_EXTI_Callback+0x144>)
 8000566:	f001 ff49 	bl	80023fc <HAL_DFSDM_FilterRegularStop_DMA>


                memset(RecBuf, 0, sizeof(RecBuf));  // Uncomment if needed
 800056a:	4a41      	ldr	r2, [pc, #260]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x148>)
 800056c:	2100      	movs	r1, #0
 800056e:	4841      	ldr	r0, [pc, #260]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000570:	f006 fb0a 	bl	8006b88 <memset>
                memset(speakerWave, 2048, sizeof(speakerWave));  // Reset to silence (mid-scale)
 8000574:	4a40      	ldr	r2, [pc, #256]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x150>)
 8000576:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800057a:	4840      	ldr	r0, [pc, #256]	@ (800067c <HAL_GPIO_EXTI_Callback+0x154>)
 800057c:	f006 fb04 	bl	8006b88 <memset>

                //lit the LED
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000586:	483e      	ldr	r0, [pc, #248]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x158>)
 8000588:	f002 fcf8 	bl	8002f7c <HAL_GPIO_WritePin>

                //start the microphone DMA

                HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE);
 800058c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000590:	4938      	ldr	r1, [pc, #224]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000592:	4836      	ldr	r0, [pc, #216]	@ (800066c <HAL_GPIO_EXTI_Callback+0x144>)
 8000594:	f001 feb0 	bl	80022f8 <HAL_DFSDM_FilterRegularStart_DMA>
                HAL_TIM_Base_Start(&htim2); // Start DAC trigger timer
 8000598:	4832      	ldr	r0, [pc, #200]	@ (8000664 <HAL_GPIO_EXTI_Callback+0x13c>)
 800059a:	f004 fb5d 	bl	8004c58 <HAL_TIM_Base_Start>




        		button_state = 1;
 800059e:	4b30      	ldr	r3, [pc, #192]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]

        }


	}
}
 80005a4:	e055      	b.n	8000652 <HAL_GPIO_EXTI_Callback+0x12a>
        	else if (button_state == 1) {
 80005a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d151      	bne.n	8000652 <HAL_GPIO_EXTI_Callback+0x12a>
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b4:	4832      	ldr	r0, [pc, #200]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x158>)
 80005b6:	f002 fce1 	bl	8002f7c <HAL_GPIO_WritePin>
                HAL_DFSDM_FilterRegularStop(&hdfsdm1_filter0);
 80005ba:	482c      	ldr	r0, [pc, #176]	@ (800066c <HAL_GPIO_EXTI_Callback+0x144>)
 80005bc:	f001 fe81 	bl	80022c2 <HAL_DFSDM_FilterRegularStop>
                HAL_TIM_Base_Stop(&htim2);
 80005c0:	4828      	ldr	r0, [pc, #160]	@ (8000664 <HAL_GPIO_EXTI_Callback+0x13c>)
 80005c2:	f004 fbb1 	bl	8004d28 <HAL_TIM_Base_Stop>
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 80005c6:	2300      	movs	r3, #0
 80005c8:	83fb      	strh	r3, [r7, #30]
 80005ca:	e02e      	b.n	800062a <HAL_GPIO_EXTI_Callback+0x102>
                	    int32_t sample24 = RecBuf[i] >> 8;
 80005cc:	8bfb      	ldrh	r3, [r7, #30]
 80005ce:	4a29      	ldr	r2, [pc, #164]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x14c>)
 80005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d4:	121b      	asrs	r3, r3, #8
 80005d6:	613b      	str	r3, [r7, #16]
                	    int16_t sample12 = sample24 >> 12;
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	131b      	asrs	r3, r3, #12
 80005dc:	81fb      	strh	r3, [r7, #14]
                	    int32_t boostedSample = sample12 * BOOST_FACTOR;
 80005de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
                	    if (boostedSample > 2047) {
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005ec:	db03      	blt.n	80005f6 <HAL_GPIO_EXTI_Callback+0xce>
                	        boostedSample = 2047;  // Max positive value for 12-bit DAC
 80005ee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	e005      	b.n	8000602 <HAL_GPIO_EXTI_Callback+0xda>
                	    } else if (boostedSample < -2048) {
 80005f6:	69bb      	ldr	r3, [r7, #24]
 80005f8:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80005fc:	da01      	bge.n	8000602 <HAL_GPIO_EXTI_Callback+0xda>
                	        boostedSample = -2048; // Max negative value for 12-bit DAC
 80005fe:	4b21      	ldr	r3, [pc, #132]	@ (8000684 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000600:	61bb      	str	r3, [r7, #24]
                	    uint16_t dacValue = (uint16_t)(boostedSample + 2048);
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	b29b      	uxth	r3, r3
 8000606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800060a:	82fb      	strh	r3, [r7, #22]
                	    if (dacValue > 4095) {
 800060c:	8afb      	ldrh	r3, [r7, #22]
 800060e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000612:	d302      	bcc.n	800061a <HAL_GPIO_EXTI_Callback+0xf2>
                	        dacValue = 4095; // Maximum value for 12-bit DAC
 8000614:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000618:	82fb      	strh	r3, [r7, #22]
                	    speakerWave[i] = dacValue;
 800061a:	8bfb      	ldrh	r3, [r7, #30]
 800061c:	4917      	ldr	r1, [pc, #92]	@ (800067c <HAL_GPIO_EXTI_Callback+0x154>)
 800061e:	8afa      	ldrh	r2, [r7, #22]
 8000620:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 8000624:	8bfb      	ldrh	r3, [r7, #30]
 8000626:	3301      	adds	r3, #1
 8000628:	83fb      	strh	r3, [r7, #30]
 800062a:	8bfb      	ldrh	r3, [r7, #30]
 800062c:	f64a 4243 	movw	r2, #44099	@ 0xac43
 8000630:	4293      	cmp	r3, r2
 8000632:	d9cb      	bls.n	80005cc <HAL_GPIO_EXTI_Callback+0xa4>
                HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint16_t*)speakerWave, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000634:	2300      	movs	r3, #0
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800063c:	4a0f      	ldr	r2, [pc, #60]	@ (800067c <HAL_GPIO_EXTI_Callback+0x154>)
 800063e:	2100      	movs	r1, #0
 8000640:	4809      	ldr	r0, [pc, #36]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x140>)
 8000642:	f001 f959 	bl	80018f8 <HAL_DAC_Start_DMA>
                HAL_TIM_Base_Start(&htim2); // Start DAC trigger timer
 8000646:	4807      	ldr	r0, [pc, #28]	@ (8000664 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000648:	f004 fb06 	bl	8004c58 <HAL_TIM_Base_Start>
                button_state = 0;
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	48000800 	.word	0x48000800
 8000660:	2000030a 	.word	0x2000030a
 8000664:	200001dc 	.word	0x200001dc
 8000668:	20000028 	.word	0x20000028
 800066c:	2000009c 	.word	0x2000009c
 8000670:	0002b110 	.word	0x0002b110
 8000674:	2000030c 	.word	0x2000030c
 8000678:	0006baa8 	.word	0x0006baa8
 800067c:	2002b41c 	.word	0x2002b41c
 8000680:	48000400 	.word	0x48000400
 8000684:	fffff800 	.word	0xfffff800

08000688 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]


}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 ff0b 	bl	80014ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f830 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 fad2 	bl	8000c50 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ac:	f000 fa9e 	bl	8000bec <MX_DMA_Init>
  MX_I2C2_Init();
 80006b0:	f000 f922 	bl	80008f8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80006b4:	f000 fa4e 	bl	8000b54 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006b8:	f000 f95e 	bl	8000978 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 80006bc:	f000 f8b6 	bl	800082c <MX_DFSDM1_Init>
  MX_DAC1_Init();
 80006c0:	f000 f874 	bl	80007ac <MX_DAC1_Init>
  MX_TIM3_Init();
 80006c4:	f000 f9ce 	bl	8000a64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) speakerWave, SAMPLE_COUNT, DAC_ALIGN_12B_R);

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC channel 1
 80006c8:	2100      	movs	r1, #0
 80006ca:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <main+0x54>)
 80006cc:	f001 f8c1 	bl	8001852 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80006d0:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <main+0x58>)
 80006d2:	f004 fb51 	bl	8004d78 <HAL_TIM_Base_Start_IT>


  memset(RecBuf, 0, sizeof(RecBuf));  // Uncomment if needed
 80006d6:	4a08      	ldr	r2, [pc, #32]	@ (80006f8 <main+0x5c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4808      	ldr	r0, [pc, #32]	@ (80006fc <main+0x60>)
 80006dc:	f006 fa54 	bl	8006b88 <memset>
  memset(speakerWave, 2048, sizeof(speakerWave));  // Reset to silence (mid-scale)
 80006e0:	4a07      	ldr	r2, [pc, #28]	@ (8000700 <main+0x64>)
 80006e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <main+0x68>)
 80006e8:	f006 fa4e 	bl	8006b88 <memset>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <main+0x50>
 80006f0:	20000028 	.word	0x20000028
 80006f4:	200001dc 	.word	0x200001dc
 80006f8:	0002b110 	.word	0x0002b110
 80006fc:	2000030c 	.word	0x2000030c
 8000700:	0006baa8 	.word	0x0006baa8
 8000704:	2002b41c 	.word	0x2002b41c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b096      	sub	sp, #88	@ 0x58
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2244      	movs	r2, #68	@ 0x44
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f006 fa36 	bl	8006b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800072e:	f002 fda7 	bl	8003280 <HAL_PWREx_ControlVoltageScaling>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000738:	f000 fb1a 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800073c:	2310      	movs	r3, #16
 800073e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000748:	2360      	movs	r3, #96	@ 0x60
 800074a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074c:	2302      	movs	r3, #2
 800074e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000750:	2301      	movs	r3, #1
 8000752:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000754:	2301      	movs	r3, #1
 8000756:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000758:	2328      	movs	r3, #40	@ 0x28
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000764:	2302      	movs	r3, #2
 8000766:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4618      	mov	r0, r3
 800076e:	f002 fe2b 	bl	80033c8 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000778:	f000 fafa 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2303      	movs	r3, #3
 8000782:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	2103      	movs	r1, #3
 8000794:	4618      	mov	r0, r3
 8000796:	f003 fa31 	bl	8003bfc <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a0:	f000 fae6 	bl	8000d70 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3758      	adds	r7, #88	@ 0x58
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2228      	movs	r2, #40	@ 0x28
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f006 f9e5 	bl	8006b88 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_DAC1_Init+0x78>)
 80007c0:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <MX_DAC1_Init+0x7c>)
 80007c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007c4:	4817      	ldr	r0, [pc, #92]	@ (8000824 <MX_DAC1_Init+0x78>)
 80007c6:	f001 f822 	bl	800180e <HAL_DAC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007d0:	f000 face 	bl	8000d70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80007d8:	230a      	movs	r3, #10
 80007da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80007dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007e0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	@ (8000824 <MX_DAC1_Init+0x78>)
 80007f6:	f001 f9af 	bl	8001b58 <HAL_DAC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 fab6 	bl	8000d70 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2210      	movs	r2, #16
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_DAC1_Init+0x78>)
 800080c:	f001 f9a4 	bl	8001b58 <HAL_DAC_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 faab 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	@ 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000028 	.word	0x20000028
 8000828:	40007400 	.word	0x40007400

0800082c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000830:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 8000832:	4a2d      	ldr	r2, [pc, #180]	@ (80008e8 <MX_DFSDM1_Init+0xbc>)
 8000834:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000836:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 800083e:	2201      	movs	r2, #1
 8000840:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 8000844:	2201      	movs	r2, #1
 8000846:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 800084a:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800084e:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 8000852:	22fa      	movs	r2, #250	@ 0xfa
 8000854:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000856:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 8000858:	2201      	movs	r2, #1
 800085a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800085c:	4821      	ldr	r0, [pc, #132]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 800085e:	f001 fc11 	bl	8002084 <HAL_DFSDM_FilterInit>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000868:	f000 fa82 	bl	8000d70 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 800086e:	4a20      	ldr	r2, [pc, #128]	@ (80008f0 <MX_DFSDM1_Init+0xc4>)
 8000870:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000872:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 8000874:	2201      	movs	r2, #1
 8000876:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000878:	4b1c      	ldr	r3, [pc, #112]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 800087e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 8000880:	2228      	movs	r2, #40	@ 0x28
 8000882:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000884:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 800089e:	2204      	movs	r2, #4
 80008a0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80008a8:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80008b4:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80008ba:	480c      	ldr	r0, [pc, #48]	@ (80008ec <MX_DFSDM1_Init+0xc0>)
 80008bc:	f001 fb22 	bl	8001f04 <HAL_DFSDM_ChannelInit>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80008c6:	f000 fa53 	bl	8000d70 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80008ca:	2201      	movs	r2, #1
 80008cc:	4909      	ldr	r1, [pc, #36]	@ (80008f4 <MX_DFSDM1_Init+0xc8>)
 80008ce:	4805      	ldr	r0, [pc, #20]	@ (80008e4 <MX_DFSDM1_Init+0xb8>)
 80008d0:	f001 fcb2 	bl	8002238 <HAL_DFSDM_FilterConfigRegChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80008da:	f000 fa49 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	40016100 	.word	0x40016100
 80008ec:	200000f0 	.word	0x200000f0
 80008f0:	40016040 	.word	0x40016040
 80008f4:	00020004 	.word	0x00020004

080008f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <MX_I2C2_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <MX_I2C2_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_I2C2_Init+0x74>)
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <MX_I2C2_Init+0x7c>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_I2C2_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_I2C2_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_I2C2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_I2C2_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_I2C2_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000932:	480e      	ldr	r0, [pc, #56]	@ (800096c <MX_I2C2_Init+0x74>)
 8000934:	f002 fb52 	bl	8002fdc <HAL_I2C_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800093e:	f000 fa17 	bl	8000d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <MX_I2C2_Init+0x74>)
 8000946:	f002 fbe4 	bl	8003112 <HAL_I2CEx_ConfigAnalogFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000950:	f000 fa0e 	bl	8000d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_I2C2_Init+0x74>)
 8000958:	f002 fc26 	bl	80031a8 <HAL_I2CEx_ConfigDigitalFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 fa05 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000188 	.word	0x20000188
 8000970:	40005800 	.word	0x40005800
 8000974:	10d19ce4 	.word	0x10d19ce4

08000978 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	@ 0x38
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TIMER_PERIOD - 1) * 4;
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009c0:	f641 4254 	movw	r2, #7252	@ 0x1c54
 80009c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d2:	4823      	ldr	r0, [pc, #140]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009d4:	f004 f8e8 	bl	8004ba8 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009de:	f000 f9c7 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ec:	4619      	mov	r1, r3
 80009ee:	481c      	ldr	r0, [pc, #112]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 80009f0:	f004 fcae 	bl	8005350 <HAL_TIM_ConfigClockSource>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009fa:	f000 f9b9 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009fe:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 8000a00:	f004 fa2a 	bl	8004e58 <HAL_TIM_PWM_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a0a:	f000 f9b1 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4810      	ldr	r0, [pc, #64]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 8000a1e:	f005 f99f 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a28:	f000 f9a2 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2c:	2360      	movs	r3, #96	@ 0x60
 8000a2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 8000a44:	f004 fb70 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a4e:	f000 f98f 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a52:	4803      	ldr	r0, [pc, #12]	@ (8000a60 <MX_TIM2_Init+0xe8>)
 8000a54:	f000 fbde 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000a58:	bf00      	nop
 8000a5a:	3738      	adds	r7, #56	@ 0x38
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200001dc 	.word	0x200001dc

08000a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	@ 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000a98:	4a2d      	ldr	r2, [pc, #180]	@ (8000b50 <MX_TIM3_Init+0xec>)
 8000a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000a9e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000aaa:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000aac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000abe:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000ac0:	f004 f872 	bl	8004ba8 <HAL_TIM_Base_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000aca:	f000 f951 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ad4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000adc:	f004 fc38 	bl	8005350 <HAL_TIM_ConfigClockSource>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000ae6:	f000 f943 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aea:	4818      	ldr	r0, [pc, #96]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000aec:	f004 f9b4 	bl	8004e58 <HAL_TIM_PWM_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000af6:	f000 f93b 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4810      	ldr	r0, [pc, #64]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000b0a:	f005 f929 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b14:	f000 f92c 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b18:	2360      	movs	r3, #96	@ 0x60
 8000b1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4807      	ldr	r0, [pc, #28]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000b30:	f004 fafa 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b3a:	f000 f919 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b3e:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <MX_TIM3_Init+0xe8>)
 8000b40:	f000 fb68 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000b44:	bf00      	nop
 8000b46:	3738      	adds	r7, #56	@ 0x38
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000228 	.word	0x20000228
 8000b50:	40000400 	.word	0x40000400

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b5a:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <MX_USART1_UART_Init+0x94>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b9c:	4811      	ldr	r0, [pc, #68]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000b9e:	f005 f985 	bl	8005eac <HAL_UART_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f8e2 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000bb0:	f005 ff20 	bl	80069f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f8d9 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000bc2:	f005 ff55 	bl	8006a70 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f000 f8d0 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_USART1_UART_Init+0x90>)
 8000bd2:	f005 fed6 	bl	8006982 <HAL_UARTEx_DisableFifoMode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f8c8 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000274 	.word	0x20000274
 8000be8:	40013800 	.word	0x40013800

08000bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bf2:	4b16      	ldr	r3, [pc, #88]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bf6:	4a15      	ldr	r2, [pc, #84]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c16:	4b0d      	ldr	r3, [pc, #52]	@ (8000c4c <MX_DMA_Init+0x60>)
 8000c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	200b      	movs	r0, #11
 8000c28:	f000 fdbb 	bl	80017a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c2c:	200b      	movs	r0, #11
 8000c2e:	f000 fdd4 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	200c      	movs	r0, #12
 8000c38:	f000 fdb3 	bl	80017a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c3c:	200c      	movs	r0, #12
 8000c3e:	f000 fdcc 	bl	80017da <HAL_NVIC_EnableIRQ>

}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c66:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b2c      	ldr	r3, [pc, #176]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b23      	ldr	r3, [pc, #140]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <MX_GPIO_Init+0xd4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ccc:	4816      	ldr	r0, [pc, #88]	@ (8000d28 <MX_GPIO_Init+0xd8>)
 8000cce:	f002 f955 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8000cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4810      	ldr	r0, [pc, #64]	@ (8000d2c <MX_GPIO_Init+0xdc>)
 8000cea:	f001 ff9d 	bl	8002c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 8000cee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4808      	ldr	r0, [pc, #32]	@ (8000d28 <MX_GPIO_Init+0xd8>)
 8000d08:	f001 ff8e 	bl	8002c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2028      	movs	r0, #40	@ 0x28
 8000d12:	f000 fd46 	bl	80017a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d16:	2028      	movs	r0, #40	@ 0x28
 8000d18:	f000 fd5f 	bl	80017da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	@ 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000
 8000d28:	48000400 	.word	0x48000400
 8000d2c:	48000800 	.word	0x48000800

08000d30 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

	DmaRecHalfBuffCplt=1;
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]

}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000308 	.word	0x20000308

08000d50 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

	DmaRecBuffCplt=1;
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]


}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000309 	.word	0x20000309

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d86:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e90 <HAL_DAC_MspInit+0xcc>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d14f      	bne.n	8000e86 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_DAC_MspInit+0xd0>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	4a2a      	ldr	r2, [pc, #168]	@ (8000e94 <HAL_DAC_MspInit+0xd0>)
 8000dec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df2:	4b28      	ldr	r3, [pc, #160]	@ (8000e94 <HAL_DAC_MspInit+0xd0>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b25      	ldr	r3, [pc, #148]	@ (8000e94 <HAL_DAC_MspInit+0xd0>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	4a24      	ldr	r2, [pc, #144]	@ (8000e94 <HAL_DAC_MspInit+0xd0>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0a:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <HAL_DAC_MspInit+0xd0>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e16:	2330      	movs	r3, #48	@ 0x30
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e2c:	f001 fefc 	bl	8002c28 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e32:	4a1a      	ldr	r2, [pc, #104]	@ (8000e9c <HAL_DAC_MspInit+0xd8>)
 8000e34:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e38:	2206      	movs	r2, #6
 8000e3a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e3e:	2210      	movs	r2, #16
 8000e40:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e4a:	2280      	movs	r2, #128	@ 0x80
 8000e4c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e54:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e5c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e60:	2220      	movs	r2, #32
 8000e62:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000e6a:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e6c:	f001 fc0e 	bl	800268c <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000e76:	f7ff ff7b 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	4a05      	ldr	r2, [pc, #20]	@ (8000e98 <HAL_DAC_MspInit+0xd4>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40007400 	.word	0x40007400
 8000e94:	40021000 	.word	0x40021000
 8000e98:	2000003c 	.word	0x2000003c
 8000e9c:	4002001c 	.word	0x4002001c

08000ea0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2294      	movs	r2, #148	@ 0x94
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f005 fe61 	bl	8006b88 <memset>
  if(DFSDM1_Init == 0)
 8000ec6:	4b45      	ldr	r3, [pc, #276]	@ (8000fdc <HAL_DFSDM_FilterMspInit+0x13c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d14b      	bne.n	8000f66 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ece:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eda:	f107 0310 	add.w	r3, r7, #16
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f94a 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000eea:	f7ff ff41 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000eee:	4b3c      	ldr	r3, [pc, #240]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x140>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x140>)
 8000ef6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000ef8:	4b39      	ldr	r3, [pc, #228]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x140>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d10b      	bne.n	8000f18 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f00:	4b38      	ldr	r3, [pc, #224]	@ (8000fe4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f04:	4a37      	ldr	r2, [pc, #220]	@ (8000fe4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0c:	4b35      	ldr	r3, [pc, #212]	@ (8000fe4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f18:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1c:	4a31      	ldr	r2, [pc, #196]	@ (8000fe4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f24:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f30:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f4a:	2306      	movs	r3, #6
 8000f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <HAL_DFSDM_FilterMspInit+0x148>)
 8000f58:	f001 fe66 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <HAL_DFSDM_FilterMspInit+0x13c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	4a1e      	ldr	r2, [pc, #120]	@ (8000fdc <HAL_DFSDM_FilterMspInit+0x13c>)
 8000f64:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a20      	ldr	r2, [pc, #128]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d130      	bne.n	8000fd2 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f72:	4a20      	ldr	r2, [pc, #128]	@ (8000ff4 <HAL_DFSDM_FilterMspInit+0x154>)
 8000f74:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000f76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f78:	2256      	movs	r2, #86	@ 0x56
 8000f7a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000f88:	4b19      	ldr	r3, [pc, #100]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f8a:	2280      	movs	r2, #128	@ 0x80
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f94:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f9c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000faa:	4811      	ldr	r0, [pc, #68]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fac:	f001 fb6e 	bl	800268c <HAL_DMA_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8000fb6:	f7ff fedb 	bl	8000d70 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fcc:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	37b8      	adds	r7, #184	@ 0xb8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20096ec8 	.word	0x20096ec8
 8000fe0:	20096ec4 	.word	0x20096ec4
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48001000 	.word	0x48001000
 8000fec:	40016100 	.word	0x40016100
 8000ff0:	20000128 	.word	0x20000128
 8000ff4:	40020008 	.word	0x40020008

08000ff8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ae      	sub	sp, #184	@ 0xb8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	2294      	movs	r2, #148	@ 0x94
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f005 fdb5 	bl	8006b88 <memset>
  if(DFSDM1_Init == 0)
 800101e:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d14b      	bne.n	80010be <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001026:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800102a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	4618      	mov	r0, r3
 8001038:	f003 f89e 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001042:	f7ff fe95 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	3301      	adds	r3, #1
 800104c:	4a1f      	ldr	r2, [pc, #124]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd4>)
 800104e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001050:	4b1e      	ldr	r3, [pc, #120]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10b      	bne.n	8001070 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800105a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105c:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800105e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001062:	6613      	str	r3, [r2, #96]	@ 0x60
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001068:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	4a16      	ldr	r2, [pc, #88]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001088:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800108c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010a2:	2306      	movs	r3, #6
 80010a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4809      	ldr	r0, [pc, #36]	@ (80010d4 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80010b0:	f001 fdba 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a03      	ldr	r2, [pc, #12]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010bc:	6013      	str	r3, [r2, #0]
  }

}
 80010be:	bf00      	nop
 80010c0:	37b8      	adds	r7, #184	@ 0xb8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20096ec8 	.word	0x20096ec8
 80010cc:	20096ec4 	.word	0x20096ec4
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48001000 	.word	0x48001000

080010d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0ae      	sub	sp, #184	@ 0xb8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2294      	movs	r2, #148	@ 0x94
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 fd45 	bl	8006b88 <memset>
  if(hi2c->Instance==I2C2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <HAL_I2C_MspInit+0xb0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d13b      	bne.n	8001180 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4618      	mov	r0, r3
 8001116:	f003 f82f 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001120:	f7ff fe26 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_I2C_MspInit+0xb4>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001128:	4a18      	ldr	r2, [pc, #96]	@ (800118c <HAL_I2C_MspInit+0xb4>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_I2C_MspInit+0xb4>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800113c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001140:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001156:	2304      	movs	r3, #4
 8001158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001160:	4619      	mov	r1, r3
 8001162:	480b      	ldr	r0, [pc, #44]	@ (8001190 <HAL_I2C_MspInit+0xb8>)
 8001164:	f001 fd60 	bl	8002c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_I2C_MspInit+0xb4>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116c:	4a07      	ldr	r2, [pc, #28]	@ (800118c <HAL_I2C_MspInit+0xb4>)
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001172:	6593      	str	r3, [r2, #88]	@ 0x58
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_I2C_MspInit+0xb4>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001180:	bf00      	nop
 8001182:	37b8      	adds	r7, #184	@ 0xb8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40005800 	.word	0x40005800
 800118c:	40021000 	.word	0x40021000
 8001190:	48000400 	.word	0x48000400

08001194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011a4:	d114      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_TIM_Base_MspInit+0x78>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011aa:	4a18      	ldr	r2, [pc, #96]	@ (800120c <HAL_TIM_Base_MspInit+0x78>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <HAL_TIM_Base_MspInit+0x78>)
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	201c      	movs	r0, #28
 80011c4:	f000 faed 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c8:	201c      	movs	r0, #28
 80011ca:	f000 fb06 	bl	80017da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011ce:	e018      	b.n	8001202 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001210 <HAL_TIM_Base_MspInit+0x7c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d113      	bne.n	8001202 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <HAL_TIM_Base_MspInit+0x78>)
 80011dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011de:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <HAL_TIM_Base_MspInit+0x78>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_TIM_Base_MspInit+0x78>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	201d      	movs	r0, #29
 80011f8:	f000 fad3 	bl	80017a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011fc:	201d      	movs	r0, #29
 80011fe:	f000 faec 	bl	80017da <HAL_NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40000400 	.word	0x40000400

08001214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001234:	d11d      	bne.n	8001272 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <HAL_TIM_MspPostInit+0xa8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	4a20      	ldr	r2, [pc, #128]	@ (80012bc <HAL_TIM_MspPostInit+0xa8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001242:	4b1e      	ldr	r3, [pc, #120]	@ (80012bc <HAL_TIM_MspPostInit+0xa8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124e:	2301      	movs	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125e:	2301      	movs	r3, #1
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126c:	f001 fcdc 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001270:	e020      	b.n	80012b4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <HAL_TIM_MspPostInit+0xac>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d11b      	bne.n	80012b4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_TIM_MspPostInit+0xa8>)
 800127e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001280:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <HAL_TIM_MspPostInit+0xa8>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_TIM_MspPostInit+0xa8>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001294:	2310      	movs	r3, #16
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a4:	2302      	movs	r3, #2
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <HAL_TIM_MspPostInit+0xb0>)
 80012b0:	f001 fcba 	bl	8002c28 <HAL_GPIO_Init>
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40000400 	.word	0x40000400
 80012c4:	48001000 	.word	0x48001000

080012c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0ae      	sub	sp, #184	@ 0xb8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2294      	movs	r2, #148	@ 0x94
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f005 fc4d 	bl	8006b88 <memset>
  if(huart->Instance==USART1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a21      	ldr	r2, [pc, #132]	@ (8001378 <HAL_UART_MspInit+0xb0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d13a      	bne.n	800136e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012fc:	2300      	movs	r3, #0
 80012fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	4618      	mov	r0, r3
 8001306:	f002 ff37 	bl	8004178 <HAL_RCCEx_PeriphCLKConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001310:	f7ff fd2e 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_UART_MspInit+0xb4>)
 8001316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001318:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_UART_MspInit+0xb4>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_UART_MspInit+0xb4>)
 8001322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <HAL_UART_MspInit+0xb4>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a12      	ldr	r2, [pc, #72]	@ (800137c <HAL_UART_MspInit+0xb4>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_UART_MspInit+0xb4>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001344:	23c0      	movs	r3, #192	@ 0xc0
 8001346:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800135c:	2307      	movs	r3, #7
 800135e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	@ (8001380 <HAL_UART_MspInit+0xb8>)
 800136a:	f001 fc5d 	bl	8002c28 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800136e:	bf00      	nop
 8001370:	37b8      	adds	r7, #184	@ 0xb8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013800 	.word	0x40013800
 800137c:	40021000 	.word	0x40021000
 8001380:	48000400 	.word	0x48000400

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <NMI_Handler+0x4>

0800138c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <HardFault_Handler+0x4>

08001394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <MemManage_Handler+0x4>

0800139c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <UsageFault_Handler+0x4>

080013ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013da:	f000 f8c3 	bl	8001564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <DMA1_Channel1_IRQHandler+0x10>)
 80013ea:	f001 face 	bl	800298a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000128 	.word	0x20000128

080013f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <DMA1_Channel2_IRQHandler+0x10>)
 80013fe:	f001 fac4 	bl	800298a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000003c 	.word	0x2000003c

0800140c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <TIM2_IRQHandler+0x10>)
 8001412:	f003 fd82 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001dc 	.word	0x200001dc

08001420 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <TIM3_IRQHandler+0x10>)
 8001426:	f003 fd78 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000228 	.word	0x20000228

08001434 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8001438:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800143c:	f001 fdb6 	bl	8002fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f005 fb7f 	bl	8006b98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff f8ff 	bl	800069c <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014ac:	08006c78 	.word	0x08006c78
  ldr r2, =_sbss
 80014b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b4:	20096ef4 	.word	0x20096ef4

080014b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_IRQHandler>

080014ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f961 	bl	800178c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	200f      	movs	r0, #15
 80014cc:	f000 f80e 	bl	80014ec <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e001      	b.n	80014e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014dc:	f7ff fc4e 	bl	8000d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <HAL_InitTick+0x6c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d023      	beq.n	8001548 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <HAL_InitTick+0x70>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_InitTick+0x6c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f96d 	bl	80017f6 <HAL_SYSTICK_Config>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d809      	bhi.n	800153c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f937 	bl	80017a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001534:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <HAL_InitTick+0x74>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e007      	b.n	800154c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e004      	b.n	800154c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e001      	b.n	800154c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_IncTick+0x20>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	461a      	mov	r2, r3
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_IncTick+0x24>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4413      	add	r3, r2
 8001574:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <HAL_IncTick+0x24>)
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000008 	.word	0x20000008
 8001588:	20096ecc 	.word	0x20096ecc

0800158c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return uwTick;
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <HAL_GetTick+0x14>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20096ecc 	.word	0x20096ecc

080015a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ac:	f7ff ffee 	bl	800158c <HAL_GetTick>
 80015b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d005      	beq.n	80015ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_Delay+0x44>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ca:	bf00      	nop
 80015cc:	f7ff ffde 	bl	800158c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d8f7      	bhi.n	80015cc <HAL_Delay+0x28>
  {
  }
}
 80015dc:	bf00      	nop
 80015de:	bf00      	nop
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000008 	.word	0x20000008

080015ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <__NVIC_SetPriorityGrouping+0x44>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <__NVIC_GetPriorityGrouping+0x18>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f003 0307 	and.w	r3, r3, #7
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db0b      	blt.n	800167a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f003 021f 	and.w	r2, r3, #31
 8001668:	4907      	ldr	r1, [pc, #28]	@ (8001688 <__NVIC_EnableIRQ+0x38>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2001      	movs	r0, #1
 8001672:	fa00 f202 	lsl.w	r2, r0, r2
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100

0800168c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	6039      	str	r1, [r7, #0]
 8001696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db0a      	blt.n	80016b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	490c      	ldr	r1, [pc, #48]	@ (80016d8 <__NVIC_SetPriority+0x4c>)
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	0112      	lsls	r2, r2, #4
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	440b      	add	r3, r1
 80016b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b4:	e00a      	b.n	80016cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4908      	ldr	r1, [pc, #32]	@ (80016dc <__NVIC_SetPriority+0x50>)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3b04      	subs	r3, #4
 80016c4:	0112      	lsls	r2, r2, #4
 80016c6:	b2d2      	uxtb	r2, r2
 80016c8:	440b      	add	r3, r1
 80016ca:	761a      	strb	r2, [r3, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	@ 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f1c3 0307 	rsb	r3, r3, #7
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	bf28      	it	cs
 80016fe:	2304      	movcs	r3, #4
 8001700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3304      	adds	r3, #4
 8001706:	2b06      	cmp	r3, #6
 8001708:	d902      	bls.n	8001710 <NVIC_EncodePriority+0x30>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3b03      	subs	r3, #3
 800170e:	e000      	b.n	8001712 <NVIC_EncodePriority+0x32>
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	401a      	ands	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001728:	f04f 31ff 	mov.w	r1, #4294967295
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43d9      	mvns	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	4313      	orrs	r3, r2
         );
}
 800173a:	4618      	mov	r0, r3
 800173c:	3724      	adds	r7, #36	@ 0x24
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001758:	d301      	bcc.n	800175e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175a:	2301      	movs	r3, #1
 800175c:	e00f      	b.n	800177e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <SysTick_Config+0x40>)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001766:	210f      	movs	r1, #15
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7ff ff8e 	bl	800168c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <SysTick_Config+0x40>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	4b04      	ldr	r3, [pc, #16]	@ (8001788 <SysTick_Config+0x40>)
 8001778:	2207      	movs	r2, #7
 800177a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	e000e010 	.word	0xe000e010

0800178c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff29 	bl	80015ec <__NVIC_SetPriorityGrouping>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b086      	sub	sp, #24
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b4:	f7ff ff3e 	bl	8001634 <__NVIC_GetPriorityGrouping>
 80017b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	6978      	ldr	r0, [r7, #20]
 80017c0:	f7ff ff8e 	bl	80016e0 <NVIC_EncodePriority>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff5d 	bl	800168c <__NVIC_SetPriority>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff31 	bl	8001650 <__NVIC_EnableIRQ>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ffa2 	bl	8001748 <SysTick_Config>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e014      	b.n	800184a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fac7 	bl	8000dc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2202      	movs	r2, #2
 800183a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	795b      	ldrb	r3, [r3, #5]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_DAC_Start+0x16>
 8001864:	2302      	movs	r3, #2
 8001866:	e040      	b.n	80018ea <HAL_DAC_Start+0x98>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2202      	movs	r2, #2
 8001872:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2201      	movs	r2, #1
 8001882:	409a      	lsls	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10f      	bne.n	80018b2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800189c:	2b02      	cmp	r3, #2
 800189e:	d11d      	bne.n	80018dc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	e014      	b.n	80018dc <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2102      	movs	r1, #2
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 0202 	orr.w	r2, r2, #2
 80018da:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	795b      	ldrb	r3, [r3, #5]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_DAC_Start_DMA+0x1e>
 8001912:	2302      	movs	r3, #2
 8001914:	e0ab      	b.n	8001a6e <HAL_DAC_Start_DMA+0x176>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2201      	movs	r2, #1
 800191a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2202      	movs	r2, #2
 8001920:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d12f      	bne.n	8001988 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_DAC_Start_DMA+0x180>)
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a51      	ldr	r2, [pc, #324]	@ (8001a7c <HAL_DAC_Start_DMA+0x184>)
 8001936:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a50      	ldr	r2, [pc, #320]	@ (8001a80 <HAL_DAC_Start_DMA+0x188>)
 800193e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800194e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	2b08      	cmp	r3, #8
 8001954:	d013      	beq.n	800197e <HAL_DAC_Start_DMA+0x86>
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2b08      	cmp	r3, #8
 800195a:	d845      	bhi.n	80019e8 <HAL_DAC_Start_DMA+0xf0>
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_DAC_Start_DMA+0x72>
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d005      	beq.n	8001974 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001968:	e03e      	b.n	80019e8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3308      	adds	r3, #8
 8001970:	613b      	str	r3, [r7, #16]
        break;
 8001972:	e03c      	b.n	80019ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	330c      	adds	r3, #12
 800197a:	613b      	str	r3, [r7, #16]
        break;
 800197c:	e037      	b.n	80019ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3310      	adds	r3, #16
 8001984:	613b      	str	r3, [r7, #16]
        break;
 8001986:	e032      	b.n	80019ee <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a84 <HAL_DAC_Start_DMA+0x18c>)
 800198e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a3c      	ldr	r2, [pc, #240]	@ (8001a88 <HAL_DAC_Start_DMA+0x190>)
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a8c <HAL_DAC_Start_DMA+0x194>)
 800199e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80019ae:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d013      	beq.n	80019de <HAL_DAC_Start_DMA+0xe6>
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d817      	bhi.n	80019ec <HAL_DAC_Start_DMA+0xf4>
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_DAC_Start_DMA+0xd2>
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d005      	beq.n	80019d4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80019c8:	e010      	b.n	80019ec <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3314      	adds	r3, #20
 80019d0:	613b      	str	r3, [r7, #16]
        break;
 80019d2:	e00c      	b.n	80019ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3318      	adds	r3, #24
 80019da:	613b      	str	r3, [r7, #16]
        break;
 80019dc:	e007      	b.n	80019ee <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	331c      	adds	r3, #28
 80019e4:	613b      	str	r3, [r7, #16]
        break;
 80019e6:	e002      	b.n	80019ee <HAL_DAC_Start_DMA+0xf6>
        break;
 80019e8:	bf00      	nop
 80019ea:	e000      	b.n	80019ee <HAL_DAC_Start_DMA+0xf6>
        break;
 80019ec:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d111      	bne.n	8001a18 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a02:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6898      	ldr	r0, [r3, #8]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	f000 fee5 	bl	80027dc <HAL_DMA_Start_IT>
 8001a12:	4603      	mov	r3, r0
 8001a14:	75fb      	strb	r3, [r7, #23]
 8001a16:	e010      	b.n	8001a3a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001a26:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68d8      	ldr	r0, [r3, #12]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	f000 fed3 	bl	80027dc <HAL_DMA_Start_IT>
 8001a36:	4603      	mov	r3, r0
 8001a38:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10c      	bne.n	8001a60 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2201      	movs	r2, #1
 8001a54:	409a      	lsls	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e005      	b.n	8001a6c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f043 0204 	orr.w	r2, r3, #4
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	08001df1 	.word	0x08001df1
 8001a7c:	08001e13 	.word	0x08001e13
 8001a80:	08001e2f 	.word	0x08001e2f
 8001a84:	08001e99 	.word	0x08001e99
 8001a88:	08001ebb 	.word	0x08001ebb
 8001a8c:	08001ed7 	.word	0x08001ed7

08001a90 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6819      	ldr	r1, [r3, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10d      	bne.n	8001af6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fef7 	bl	80028d2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e00c      	b.n	8001b10 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 fee9 	bl	80028d2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001b0e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	795b      	ldrb	r3, [r3, #5]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <HAL_DAC_ConfigChannel+0x1c>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e137      	b.n	8001de4 <HAL_DAC_ConfigChannel+0x28c>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2202      	movs	r2, #2
 8001b7e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	f040 8081 	bne.w	8001c8c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b8a:	f7ff fcff 	bl	800158c <HAL_GetTick>
 8001b8e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d140      	bne.n	8001c18 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001b96:	e018      	b.n	8001bca <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001b98:	f7ff fcf8 	bl	800158c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d911      	bls.n	8001bca <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00a      	beq.n	8001bca <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f043 0208 	orr.w	r2, r3, #8
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e10c      	b.n	8001de4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1df      	bne.n	8001b98 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff fce3 	bl	80015a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	69d2      	ldr	r2, [r2, #28]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001be8:	e023      	b.n	8001c32 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bea:	f7ff fccf 	bl	800158c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d90f      	bls.n	8001c18 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da0a      	bge.n	8001c18 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f043 0208 	orr.w	r2, r3, #8
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2203      	movs	r2, #3
 8001c12:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0e5      	b.n	8001de4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	dbe3      	blt.n	8001bea <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fcbe 	bl	80015a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	69d2      	ldr	r2, [r2, #28]
 8001c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	ea02 0103 	and.w	r1, r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f003 0310 	and.w	r3, r3, #16
 8001c6c:	21ff      	movs	r1, #255	@ 0xff
 8001c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	ea02 0103 	and.w	r1, r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d11d      	bne.n	8001cd0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	221f      	movs	r2, #31
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd6:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2207      	movs	r2, #7
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	400a      	ands	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d74:	d104      	bne.n	8001d80 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d7c:	61fb      	str	r3, [r7, #28]
 8001d7e:	e018      	b.n	8001db2 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d104      	bne.n	8001d92 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	e00f      	b.n	8001db2 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001d92:	f002 f8f9 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8001d96:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <HAL_DAC_ConfigChannel+0x294>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d904      	bls.n	8001daa <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	e003      	b.n	8001db2 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001db0:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6819      	ldr	r1, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	22c0      	movs	r2, #192	@ 0xc0
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	04c4b400 	.word	0x04c4b400

08001df0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fe8b 	bl	8001b1a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	711a      	strb	r2, [r3, #4]
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fe84 	bl	8001b2e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff fe7a 	bl	8001b42 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	711a      	strb	r2, [r3, #4]
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f7ff ffd8 	bl	8001e5c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	711a      	strb	r2, [r3, #4]
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff ffd1 	bl	8001e70 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f043 0204 	orr.w	r2, r3, #4
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff ffc7 	bl	8001e84 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	711a      	strb	r2, [r3, #4]
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0ac      	b.n	8002070 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fac6 	bl	80024ac <DFSDM_GetChannelFromInstance>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a55      	ldr	r2, [pc, #340]	@ (8002078 <HAL_DFSDM_ChannelInit+0x174>)
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e09f      	b.n	8002070 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff f861 	bl	8000ff8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001f36:	4b51      	ldr	r3, [pc, #324]	@ (800207c <HAL_DFSDM_ChannelInit+0x178>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800207c <HAL_DFSDM_ChannelInit+0x178>)
 8001f3e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001f40:	4b4e      	ldr	r3, [pc, #312]	@ (800207c <HAL_DFSDM_ChannelInit+0x178>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d125      	bne.n	8001f94 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001f48:	4b4d      	ldr	r3, [pc, #308]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001f52:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001f54:	4b4a      	ldr	r3, [pc, #296]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4948      	ldr	r1, [pc, #288]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001f62:	4b47      	ldr	r3, [pc, #284]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a46      	ldr	r2, [pc, #280]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f68:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001f6c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	791b      	ldrb	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d108      	bne.n	8001f88 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001f76:	4b42      	ldr	r3, [pc, #264]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	493f      	ldr	r1, [pc, #252]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001f88:	4b3d      	ldr	r3, [pc, #244]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8002080 <HAL_DFSDM_ChannelInit+0x17c>)
 8001f8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f92:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001fa2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fb2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001fb8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 020f 	bic.w	r2, r2, #15
 8001fd0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6819      	ldr	r1, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001ff8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6899      	ldr	r1, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f002 0207 	and.w	r2, r2, #7
 8002024:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002030:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002050:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fa24 	bl	80024ac <DFSDM_GetChannelFromInstance>
 8002064:	4602      	mov	r2, r0
 8002066:	4904      	ldr	r1, [pc, #16]	@ (8002078 <HAL_DFSDM_ChannelInit+0x174>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20096ed4 	.word	0x20096ed4
 800207c:	20096ed0 	.word	0x20096ed0
 8002080:	40016000 	.word	0x40016000

08002084 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0ca      	b.n	800222c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a66      	ldr	r2, [pc, #408]	@ (8002234 <HAL_DFSDM_FilterInit+0x1b0>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d109      	bne.n	80020b4 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d003      	beq.n	80020b0 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0bb      	b.n	800222c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7fe fee7 	bl	8000ea0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80020e0:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7a1b      	ldrb	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d108      	bne.n	80020fc <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e007      	b.n	800210c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800210a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7a5b      	ldrb	r3, [r3, #9]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d108      	bne.n	8002126 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	e007      	b.n	8002136 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002144:	f023 0308 	bic.w	r3, r3, #8
 8002148:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d108      	bne.n	8002164 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6819      	ldr	r1, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	7c1b      	ldrb	r3, [r3, #16]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d108      	bne.n	800217e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0210 	orr.w	r2, r2, #16
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e007      	b.n	800218e <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0210 	bic.w	r2, r2, #16
 800218c:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7c5b      	ldrb	r3, [r3, #17]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d108      	bne.n	80021a8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0220 	orr.w	r2, r2, #32
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	e007      	b.n	80021b8 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0220 	bic.w	r2, r2, #32
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80021c6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80021ca:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6959      	ldr	r1, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	3b01      	subs	r3, #1
 80021dc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021de:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80021e6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7c1a      	ldrb	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40016100 	.word	0x40016100

08002238 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800224e:	2b00      	cmp	r3, #0
 8002250:	d02e      	beq.n	80022b0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002258:	2bff      	cmp	r3, #255	@ 0xff
 800225a:	d029      	beq.n	80022b0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800226a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10d      	bne.n	8002292 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002284:	431a      	orrs	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e00a      	b.n	80022a8 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80022ae:	e001      	b.n	80022b4 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_DFSDM_FilterRegularStop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d007      	beq.n	80022e8 <HAL_DFSDM_FilterRegularStop+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d002      	beq.n	80022e8 <HAL_DFSDM_FilterRegularStop+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e002      	b.n	80022ee <HAL_DFSDM_FilterRegularStop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f981 	bl	80025f0 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	75fb      	strb	r3, [r7, #23]
 8002318:	e064      	b.n	80023e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002324:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002328:	d002      	beq.n	8002330 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	75fb      	strb	r3, [r7, #23]
 800232e:	e059      	b.n	80023e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10e      	bne.n	8002356 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10a      	bne.n	8002356 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d002      	beq.n	8002356 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	75fb      	strb	r3, [r7, #23]
 8002354:	e046      	b.n	80023e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10b      	bne.n	8002376 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800236c:	2b20      	cmp	r3, #32
 800236e:	d102      	bne.n	8002376 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
 8002374:	e036      	b.n	80023e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d004      	beq.n	800238a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002386:	2b03      	cmp	r3, #3
 8002388:	d12a      	bne.n	80023e0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	4a18      	ldr	r2, [pc, #96]	@ (80023f0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002390:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002396:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d101      	bne.n	80023a8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80023a4:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80023a6:	e000      	b.n	80023aa <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80023a8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	331c      	adds	r3, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f000 fa0c 	bl	80027dc <HAL_DMA_Start_IT>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	22ff      	movs	r2, #255	@ 0xff
 80023ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80023d6:	e005      	b.n	80023e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f8b3 	bl	8002544 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80023de:	e001      	b.n	80023e4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	0800246d 	.word	0x0800246d
 80023f4:	08002489 	.word	0x08002489
 80023f8:	08002451 	.word	0x08002451

080023fc <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800240e:	2b02      	cmp	r3, #2
 8002410:	d007      	beq.n	8002422 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002418:	2b04      	cmp	r3, #4
 800241a:	d002      	beq.n	8002422 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e007      	b.n	8002432 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fa53 	bl	80028d2 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f8df 	bl	80025f0 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f7fe fc66 	bl	8000d30 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7fe fc68 	bl	8000d50 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2203      	movs	r2, #3
 800249a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff ffcd 	bl	800243c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <DFSDM_GetChannelFromInstance+0x7c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e02b      	b.n	800251a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a19      	ldr	r2, [pc, #100]	@ (800252c <DFSDM_GetChannelFromInstance+0x80>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d102      	bne.n	80024d0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e024      	b.n	800251a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <DFSDM_GetChannelFromInstance+0x84>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d102      	bne.n	80024de <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80024d8:	2302      	movs	r3, #2
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e01d      	b.n	800251a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <DFSDM_GetChannelFromInstance+0x88>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d102      	bne.n	80024ec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80024e6:	2304      	movs	r3, #4
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	e016      	b.n	800251a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <DFSDM_GetChannelFromInstance+0x8c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d102      	bne.n	80024fa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80024f4:	2305      	movs	r3, #5
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e00f      	b.n	800251a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <DFSDM_GetChannelFromInstance+0x90>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d102      	bne.n	8002508 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002502:	2306      	movs	r3, #6
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e008      	b.n	800251a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <DFSDM_GetChannelFromInstance+0x94>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d102      	bne.n	8002516 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002510:	2307      	movs	r3, #7
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e001      	b.n	800251a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002516:	2303      	movs	r3, #3
 8002518:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800251a:	68fb      	ldr	r3, [r7, #12]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40016000 	.word	0x40016000
 800252c:	40016020 	.word	0x40016020
 8002530:	40016040 	.word	0x40016040
 8002534:	40016080 	.word	0x40016080
 8002538:	400160a0 	.word	0x400160a0
 800253c:	400160c0 	.word	0x400160c0
 8002540:	400160e0 	.word	0x400160e0

08002544 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002550:	2b00      	cmp	r3, #0
 8002552:	d108      	bne.n	8002566 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	e033      	b.n	80025ce <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002584:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800259c:	2b03      	cmp	r3, #3
 800259e:	d116      	bne.n	80025ce <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0202 	orr.w	r2, r2, #2
 80025b6:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d102      	bne.n	80025c8 <DFSDM_RegConvStart+0x84>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	e000      	b.n	80025ca <DFSDM_RegConvStart+0x86>
 80025c8:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <DFSDM_RegConvStart+0x98>
 80025d8:	2202      	movs	r2, #2
 80025da:	e000      	b.n	80025de <DFSDM_RegConvStart+0x9a>
 80025dc:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002636:	2b04      	cmp	r3, #4
 8002638:	d116      	bne.n	8002668 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263e:	2b00      	cmp	r3, #0
 8002640:	d107      	bne.n	8002652 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0202 	orr.w	r2, r2, #2
 8002650:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002658:	2b01      	cmp	r3, #1
 800265a:	d102      	bne.n	8002662 <DFSDM_RegConvStop+0x72>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002660:	e000      	b.n	8002664 <DFSDM_RegConvStop+0x74>
 8002662:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 800266e:	2b02      	cmp	r3, #2
 8002670:	d101      	bne.n	8002676 <DFSDM_RegConvStop+0x86>
 8002672:	2201      	movs	r2, #1
 8002674:	e000      	b.n	8002678 <DFSDM_RegConvStop+0x88>
 8002676:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e08d      	b.n	80027ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b47      	ldr	r3, [pc, #284]	@ (80027c4 <HAL_DMA_Init+0x138>)
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d80f      	bhi.n	80026ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b45      	ldr	r3, [pc, #276]	@ (80027c8 <HAL_DMA_Init+0x13c>)
 80026b2:	4413      	add	r3, r2
 80026b4:	4a45      	ldr	r2, [pc, #276]	@ (80027cc <HAL_DMA_Init+0x140>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a42      	ldr	r2, [pc, #264]	@ (80027d0 <HAL_DMA_Init+0x144>)
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c8:	e00e      	b.n	80026e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <HAL_DMA_Init+0x148>)
 80026d2:	4413      	add	r3, r2
 80026d4:	4a3d      	ldr	r2, [pc, #244]	@ (80027cc <HAL_DMA_Init+0x140>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	009a      	lsls	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a3c      	ldr	r2, [pc, #240]	@ (80027d8 <HAL_DMA_Init+0x14c>)
 80026e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 fa12 	bl	8002b64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002748:	d102      	bne.n	8002750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002764:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_DMA_Init+0x104>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d80c      	bhi.n	8002790 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa32 	bl	8002be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	e008      	b.n	80027a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40020407 	.word	0x40020407
 80027c8:	bffdfff8 	.word	0xbffdfff8
 80027cc:	cccccccd 	.word	0xcccccccd
 80027d0:	40020000 	.word	0x40020000
 80027d4:	bffdfbf8 	.word	0xbffdfbf8
 80027d8:	40020400 	.word	0x40020400

080027dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_DMA_Start_IT+0x20>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e066      	b.n	80028ca <HAL_DMA_Start_IT+0xee>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d155      	bne.n	80028bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f957 	bl	8002ae8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 020e 	orr.w	r2, r2, #14
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e00f      	b.n	8002874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 020a 	orr.w	r2, r2, #10
 8002872:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002890:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028a8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e005      	b.n	80028c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
 80028c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d008      	beq.n	80028fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2204      	movs	r2, #4
 80028ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e040      	b.n	800297e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 020e 	bic.w	r2, r2, #14
 800290a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002916:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800291a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002930:	f003 021c 	and.w	r2, r3, #28
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	2101      	movs	r1, #1
 800293a:	fa01 f202 	lsl.w	r2, r1, r2
 800293e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002948:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002960:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800296a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f003 031c 	and.w	r3, r3, #28
 80029aa:	2204      	movs	r2, #4
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d026      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x7a>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d021      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0204 	bic.w	r2, r2, #4
 80029dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	f003 021c 	and.w	r2, r3, #28
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	2104      	movs	r1, #4
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d071      	beq.n	8002ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a02:	e06c      	b.n	8002ade <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	f003 031c 	and.w	r3, r3, #28
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d02e      	beq.n	8002a76 <HAL_DMA_IRQHandler+0xec>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d029      	beq.n	8002a76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 020a 	bic.w	r2, r2, #10
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	f003 021c 	and.w	r2, r3, #28
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	2102      	movs	r1, #2
 8002a56:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d038      	beq.n	8002ade <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a74:	e033      	b.n	8002ade <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f003 031c 	and.w	r3, r3, #28
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d02a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x156>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d025      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 020e 	bic.w	r2, r2, #14
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa8:	f003 021c 	and.w	r2, r3, #28
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
}
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002afe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d004      	beq.n	8002b12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b10:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f003 021c 	and.w	r2, r3, #28
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f202 	lsl.w	r2, r1, r2
 8002b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d108      	bne.n	8002b48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b46:	e007      	b.n	8002b58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	60da      	str	r2, [r3, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b17      	ldr	r3, [pc, #92]	@ (8002bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d80a      	bhi.n	8002b8e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b84:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b8c:	e007      	b.n	8002b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002b98:	4413      	add	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002bb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40020407 	.word	0x40020407
 8002bd4:	4002081c 	.word	0x4002081c
 8002bd8:	cccccccd 	.word	0xcccccccd
 8002bdc:	40020880 	.word	0x40020880

08002be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c02:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	409a      	lsls	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	1000823f 	.word	0x1000823f
 8002c24:	40020940 	.word	0x40020940

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c36:	e166      	b.n	8002f06 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8158 	beq.w	8002f00 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d005      	beq.n	8002c68 <HAL_GPIO_Init+0x40>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d130      	bne.n	8002cca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	091b      	lsrs	r3, r3, #4
 8002cb4:	f003 0201 	and.w	r2, r3, #1
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d017      	beq.n	8002d06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d123      	bne.n	8002d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	08da      	lsrs	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3208      	adds	r2, #8
 8002d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	08da      	lsrs	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3208      	adds	r2, #8
 8002d54:	6939      	ldr	r1, [r7, #16]
 8002d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0203 	and.w	r2, r3, #3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80b2 	beq.w	8002f00 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9c:	4b61      	ldr	r3, [pc, #388]	@ (8002f24 <HAL_GPIO_Init+0x2fc>)
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da0:	4a60      	ldr	r2, [pc, #384]	@ (8002f24 <HAL_GPIO_Init+0x2fc>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002da8:	4b5e      	ldr	r3, [pc, #376]	@ (8002f24 <HAL_GPIO_Init+0x2fc>)
 8002daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002db4:	4a5c      	ldr	r2, [pc, #368]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dde:	d02b      	beq.n	8002e38 <HAL_GPIO_Init+0x210>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_GPIO_Init+0x304>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d025      	beq.n	8002e34 <HAL_GPIO_Init+0x20c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a51      	ldr	r2, [pc, #324]	@ (8002f30 <HAL_GPIO_Init+0x308>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d01f      	beq.n	8002e30 <HAL_GPIO_Init+0x208>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a50      	ldr	r2, [pc, #320]	@ (8002f34 <HAL_GPIO_Init+0x30c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d019      	beq.n	8002e2c <HAL_GPIO_Init+0x204>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a4f      	ldr	r2, [pc, #316]	@ (8002f38 <HAL_GPIO_Init+0x310>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_GPIO_Init+0x200>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a4e      	ldr	r2, [pc, #312]	@ (8002f3c <HAL_GPIO_Init+0x314>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00d      	beq.n	8002e24 <HAL_GPIO_Init+0x1fc>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f40 <HAL_GPIO_Init+0x318>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <HAL_GPIO_Init+0x1f8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a4c      	ldr	r2, [pc, #304]	@ (8002f44 <HAL_GPIO_Init+0x31c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_GPIO_Init+0x1f4>
 8002e18:	2307      	movs	r3, #7
 8002e1a:	e00e      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	e00c      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e20:	2306      	movs	r3, #6
 8002e22:	e00a      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e24:	2305      	movs	r3, #5
 8002e26:	e008      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e006      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e004      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e002      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_GPIO_Init+0x212>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	f002 0203 	and.w	r2, r2, #3
 8002e40:	0092      	lsls	r2, r2, #2
 8002e42:	4093      	lsls	r3, r2
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e4a:	4937      	ldr	r1, [pc, #220]	@ (8002f28 <HAL_GPIO_Init+0x300>)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	089b      	lsrs	r3, r3, #2
 8002e50:	3302      	adds	r3, #2
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e58:	4b3b      	ldr	r3, [pc, #236]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e7c:	4a32      	ldr	r2, [pc, #200]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e82:	4b31      	ldr	r3, [pc, #196]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ea6:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002eac:	4b26      	ldr	r3, [pc, #152]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002efa:	4a13      	ldr	r2, [pc, #76]	@ (8002f48 <HAL_GPIO_Init+0x320>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f47f ae91 	bne.w	8002c38 <HAL_GPIO_Init+0x10>
  }
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	48000400 	.word	0x48000400
 8002f30:	48000800 	.word	0x48000800
 8002f34:	48000c00 	.word	0x48000c00
 8002f38:	48001000 	.word	0x48001000
 8002f3c:	48001400 	.word	0x48001400
 8002f40:	48001800 	.word	0x48001800
 8002f44:	48001c00 	.word	0x48001c00
 8002f48:	40010400 	.word	0x40010400

08002f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e001      	b.n	8002f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f98:	e002      	b.n	8002fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f9a:	887a      	ldrh	r2, [r7, #2]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fb6:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc2:	4a05      	ldr	r2, [pc, #20]	@ (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd faac 	bl	8000528 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e08d      	b.n	800310a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fe f868 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	@ 0x24
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800302c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800303c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d107      	bne.n	8003056 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	e006      	b.n	8003064 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003062:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d108      	bne.n	800307e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	e007      	b.n	800308e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800309c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69d9      	ldr	r1, [r3, #28]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1a      	ldr	r2, [r3, #32]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b20      	cmp	r3, #32
 8003126:	d138      	bne.n	800319a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003132:	2302      	movs	r3, #2
 8003134:	e032      	b.n	800319c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2224      	movs	r2, #36	@ 0x24
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003164:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6819      	ldr	r1, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e000      	b.n	800319c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800319a:	2302      	movs	r3, #2
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d139      	bne.n	8003232 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e033      	b.n	8003234 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	@ 0x24
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003244:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003250:	d102      	bne.n	8003258 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003252:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003256:	e00b      	b.n	8003270 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003258:	4b08      	ldr	r3, [pc, #32]	@ (800327c <HAL_PWREx_GetVoltageRange+0x3c>)
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800325e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003266:	d102      	bne.n	800326e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800326c:	e000      	b.n	8003270 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800326e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40007000 	.word	0x40007000

08003280 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d141      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800328e:	4b4b      	ldr	r3, [pc, #300]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329a:	d131      	bne.n	8003300 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800329c:	4b47      	ldr	r3, [pc, #284]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a2:	4a46      	ldr	r2, [pc, #280]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ac:	4b43      	ldr	r3, [pc, #268]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032b4:	4a41      	ldr	r2, [pc, #260]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032bc:	4b40      	ldr	r3, [pc, #256]	@ (80033c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2232      	movs	r2, #50	@ 0x32
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	4a3f      	ldr	r2, [pc, #252]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	0c9b      	lsrs	r3, r3, #18
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d2:	e002      	b.n	80032da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032da:	4b38      	ldr	r3, [pc, #224]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e6:	d102      	bne.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f2      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ee:	4b33      	ldr	r3, [pc, #204]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fa:	d158      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e057      	b.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003300:	4b2e      	ldr	r3, [pc, #184]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003306:	4a2d      	ldr	r2, [pc, #180]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800330c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003310:	e04d      	b.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003318:	d141      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800331a:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003326:	d131      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003328:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332e:	4a23      	ldr	r2, [pc, #140]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003334:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003338:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003340:	4a1e      	ldr	r2, [pc, #120]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003346:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003348:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2232      	movs	r2, #50	@ 0x32
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a1c      	ldr	r2, [pc, #112]	@ (80033c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	0c9b      	lsrs	r3, r3, #18
 800335a:	3301      	adds	r3, #1
 800335c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335e:	e002      	b.n	8003366 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3b01      	subs	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003366:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003372:	d102      	bne.n	800337a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f2      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800337a:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003386:	d112      	bne.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e011      	b.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800339c:	e007      	b.n	80033ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800339e:	4b07      	ldr	r3, [pc, #28]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033a6:	4a05      	ldr	r2, [pc, #20]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	40007000 	.word	0x40007000
 80033c0:	20000000 	.word	0x20000000
 80033c4:	431bde83 	.word	0x431bde83

080033c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f000 bc08 	b.w	8003bec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033dc:	4b96      	ldr	r3, [pc, #600]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e6:	4b94      	ldr	r3, [pc, #592]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80e4 	beq.w	80035c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_RCC_OscConfig+0x4c>
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b0c      	cmp	r3, #12
 8003408:	f040 808b 	bne.w	8003522 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b01      	cmp	r3, #1
 8003410:	f040 8087 	bne.w	8003522 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003414:	4b88      	ldr	r3, [pc, #544]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_OscConfig+0x64>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e3df      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	4b81      	ldr	r3, [pc, #516]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_RCC_OscConfig+0x7e>
 800343c:	4b7e      	ldr	r3, [pc, #504]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003444:	e005      	b.n	8003452 <HAL_RCC_OscConfig+0x8a>
 8003446:	4b7c      	ldr	r3, [pc, #496]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003452:	4293      	cmp	r3, r2
 8003454:	d223      	bcs.n	800349e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fdcc 	bl	8003ff8 <RCC_SetFlashLatencyFromMSIRange>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e3c0      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800346a:	4b73      	ldr	r3, [pc, #460]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003470:	f043 0308 	orr.w	r3, r3, #8
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4b70      	ldr	r3, [pc, #448]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	496d      	ldr	r1, [pc, #436]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003488:	4b6b      	ldr	r3, [pc, #428]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	4968      	ldr	r1, [pc, #416]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
 800349c:	e025      	b.n	80034ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800349e:	4b66      	ldr	r3, [pc, #408]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a65      	ldr	r2, [pc, #404]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b63      	ldr	r3, [pc, #396]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4960      	ldr	r1, [pc, #384]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	495b      	ldr	r1, [pc, #364]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fd8c 	bl	8003ff8 <RCC_SetFlashLatencyFromMSIRange>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e380      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034ea:	f000 fcc1 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b51      	ldr	r3, [pc, #324]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	4950      	ldr	r1, [pc, #320]	@ (800363c <HAL_RCC_OscConfig+0x274>)
 80034fc:	5ccb      	ldrb	r3, [r1, r3]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	4a4e      	ldr	r2, [pc, #312]	@ (8003640 <HAL_RCC_OscConfig+0x278>)
 8003508:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800350a:	4b4e      	ldr	r3, [pc, #312]	@ (8003644 <HAL_RCC_OscConfig+0x27c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd ffec 	bl	80014ec <HAL_InitTick>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d052      	beq.n	80035c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	e364      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d032      	beq.n	8003590 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800352a:	4b43      	ldr	r3, [pc, #268]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a42      	ldr	r2, [pc, #264]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003536:	f7fe f829 	bl	800158c <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800353e:	f7fe f825 	bl	800158c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e34d      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f0      	beq.n	800353e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355c:	4b36      	ldr	r3, [pc, #216]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a35      	ldr	r2, [pc, #212]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003562:	f043 0308 	orr.w	r3, r3, #8
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4930      	ldr	r1, [pc, #192]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357a:	4b2f      	ldr	r3, [pc, #188]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	492b      	ldr	r1, [pc, #172]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
 800358e:	e01a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003590:	4b29      	ldr	r3, [pc, #164]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a28      	ldr	r2, [pc, #160]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800359c:	f7fd fff6 	bl	800158c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035a4:	f7fd fff2 	bl	800158c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e31a      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b6:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1dc>
 80035c2:	e000      	b.n	80035c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d073      	beq.n	80036ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x21c>
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d10e      	bne.n	80035fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d063      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2f0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d15f      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e2f7      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x24c>
 8003606:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a0b      	ldr	r2, [pc, #44]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e025      	b.n	8003660 <HAL_RCC_OscConfig+0x298>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800361c:	d114      	bne.n	8003648 <HAL_RCC_OscConfig+0x280>
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b03      	ldr	r3, [pc, #12]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a02      	ldr	r2, [pc, #8]	@ (8003638 <HAL_RCC_OscConfig+0x270>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e013      	b.n	8003660 <HAL_RCC_OscConfig+0x298>
 8003638:	40021000 	.word	0x40021000
 800363c:	08006bf8 	.word	0x08006bf8
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004
 8003648:	4ba0      	ldr	r3, [pc, #640]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a9f      	ldr	r2, [pc, #636]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	4b9d      	ldr	r3, [pc, #628]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a9c      	ldr	r2, [pc, #624]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800365a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd ff90 	bl	800158c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003670:	f7fd ff8c 	bl	800158c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	@ 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e2b4      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003682:	4b92      	ldr	r3, [pc, #584]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f0      	beq.n	8003670 <HAL_RCC_OscConfig+0x2a8>
 800368e:	e014      	b.n	80036ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd ff7c 	bl	800158c <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fd ff78 	bl	800158c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	@ 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e2a0      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036aa:	4b88      	ldr	r3, [pc, #544]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x2d0>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d060      	beq.n	8003788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_OscConfig+0x310>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d116      	bne.n	8003706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d8:	4b7c      	ldr	r3, [pc, #496]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_OscConfig+0x328>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e27d      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b76      	ldr	r3, [pc, #472]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	4973      	ldr	r1, [pc, #460]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003704:	e040      	b.n	8003788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d023      	beq.n	8003756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370e:	4b6f      	ldr	r3, [pc, #444]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6e      	ldr	r2, [pc, #440]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fd ff37 	bl	800158c <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003722:	f7fd ff33 	bl	800158c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e25b      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003734:	4b65      	ldr	r3, [pc, #404]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003740:	4b62      	ldr	r3, [pc, #392]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	061b      	lsls	r3, r3, #24
 800374e:	495f      	ldr	r1, [pc, #380]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	e018      	b.n	8003788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003756:	4b5d      	ldr	r3, [pc, #372]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a5c      	ldr	r2, [pc, #368]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800375c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd ff13 	bl	800158c <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800376a:	f7fd ff0f 	bl	800158c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e237      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800377c:	4b53      	ldr	r3, [pc, #332]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d03c      	beq.n	800380e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01c      	beq.n	80037d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800379c:	4b4b      	ldr	r3, [pc, #300]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037a2:	4a4a      	ldr	r2, [pc, #296]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fd feee 	bl	800158c <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b4:	f7fd feea 	bl	800158c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e212      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80037c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0ef      	beq.n	80037b4 <HAL_RCC_OscConfig+0x3ec>
 80037d4:	e01b      	b.n	800380e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d6:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037dc:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e6:	f7fd fed1 	bl	800158c <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ee:	f7fd fecd 	bl	800158c <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e1f5      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003800:	4b32      	ldr	r3, [pc, #200]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ef      	bne.n	80037ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80a6 	beq.w	8003968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003820:	4b2a      	ldr	r3, [pc, #168]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10d      	bne.n	8003848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382c:	4b27      	ldr	r3, [pc, #156]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	4a26      	ldr	r2, [pc, #152]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003836:	6593      	str	r3, [r2, #88]	@ 0x58
 8003838:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003844:	2301      	movs	r3, #1
 8003846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003848:	4b21      	ldr	r3, [pc, #132]	@ (80038d0 <HAL_RCC_OscConfig+0x508>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d118      	bne.n	8003886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003854:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <HAL_RCC_OscConfig+0x508>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <HAL_RCC_OscConfig+0x508>)
 800385a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003860:	f7fd fe94 	bl	800158c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003868:	f7fd fe90 	bl	800158c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1b8      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800387a:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <HAL_RCC_OscConfig+0x508>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d108      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4d8>
 800388e:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003894:	4a0d      	ldr	r2, [pc, #52]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800389e:	e029      	b.n	80038f4 <HAL_RCC_OscConfig+0x52c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	d115      	bne.n	80038d4 <HAL_RCC_OscConfig+0x50c>
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ae:	4a07      	ldr	r2, [pc, #28]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038b8:	4b04      	ldr	r3, [pc, #16]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	4a03      	ldr	r2, [pc, #12]	@ (80038cc <HAL_RCC_OscConfig+0x504>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x52c>
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038da:	4a9c      	ldr	r2, [pc, #624]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038e4:	4b99      	ldr	r3, [pc, #612]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	4a98      	ldr	r2, [pc, #608]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d016      	beq.n	800392a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fe46 	bl	800158c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fd fe42 	bl	800158c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e168      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391a:	4b8c      	ldr	r3, [pc, #560]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 800391c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0ed      	beq.n	8003904 <HAL_RCC_OscConfig+0x53c>
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fd fe2f 	bl	800158c <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fd fe2b 	bl	800158c <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e151      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003948:	4b80      	ldr	r3, [pc, #512]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ed      	bne.n	8003932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003956:	7ffb      	ldrb	r3, [r7, #31]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b7b      	ldr	r3, [pc, #492]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003960:	4a7a      	ldr	r2, [pc, #488]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003966:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03c      	beq.n	80039ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800397c:	4b73      	ldr	r3, [pc, #460]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 800397e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003982:	4a72      	ldr	r2, [pc, #456]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fdfe 	bl	800158c <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003994:	f7fd fdfa 	bl	800158c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e122      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039a6:	4b69      	ldr	r3, [pc, #420]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ef      	beq.n	8003994 <HAL_RCC_OscConfig+0x5cc>
 80039b4:	e01b      	b.n	80039ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039b6:	4b65      	ldr	r3, [pc, #404]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039bc:	4a63      	ldr	r2, [pc, #396]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7fd fde1 	bl	800158c <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039ce:	f7fd fddd 	bl	800158c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e105      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039e0:	4b5a      	ldr	r3, [pc, #360]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 80039e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80f9 	beq.w	8003bea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	f040 80cf 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a02:	4b52      	ldr	r3, [pc, #328]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d12c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	3b01      	subs	r3, #1
 8003a22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d123      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d11b      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d113      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	3b01      	subs	r3, #1
 8003a56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d071      	beq.n	8003b54 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d068      	beq.n	8003b48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a76:	4b35      	ldr	r3, [pc, #212]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a82:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0ac      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a92:	4b2e      	ldr	r3, [pc, #184]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2d      	ldr	r2, [pc, #180]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a9e:	f7fd fd75 	bl	800158c <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fd fd71 	bl	800158c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e099      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ab8:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac4:	4b21      	ldr	r3, [pc, #132]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	4b21      	ldr	r3, [pc, #132]	@ (8003b50 <HAL_RCC_OscConfig+0x788>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ad4:	3a01      	subs	r2, #1
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	4311      	orrs	r1, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ade:	0212      	lsls	r2, r2, #8
 8003ae0:	4311      	orrs	r1, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ae6:	0852      	lsrs	r2, r2, #1
 8003ae8:	3a01      	subs	r2, #1
 8003aea:	0552      	lsls	r2, r2, #21
 8003aec:	4311      	orrs	r1, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003af2:	0852      	lsrs	r2, r2, #1
 8003af4:	3a01      	subs	r2, #1
 8003af6:	0652      	lsls	r2, r2, #25
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003afe:	06d2      	lsls	r2, r2, #27
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4912      	ldr	r1, [pc, #72]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b08:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b14:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a0c      	ldr	r2, [pc, #48]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b20:	f7fd fd34 	bl	800158c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fd fd30 	bl	800158c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e058      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b04      	ldr	r3, [pc, #16]	@ (8003b4c <HAL_RCC_OscConfig+0x784>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b46:	e050      	b.n	8003bea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e04f      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d144      	bne.n	8003bea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b60:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a23      	ldr	r2, [pc, #140]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a20      	ldr	r2, [pc, #128]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b78:	f7fd fd08 	bl	800158c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd fd04 	bl	800158c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e02c      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x7b8>
 8003b9e:	e024      	b.n	8003bea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d01f      	beq.n	8003be6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fceb 	bl	800158c <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fce7 	bl	800158c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bcc:	4b09      	ldr	r3, [pc, #36]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bd8:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	4905      	ldr	r1, [pc, #20]	@ (8003bf4 <HAL_RCC_OscConfig+0x82c>)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCC_OscConfig+0x830>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
 8003be4:	e001      	b.n	8003bea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	feeefffc 	.word	0xfeeefffc

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e11d      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c14:	4b90      	ldr	r3, [pc, #576]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d910      	bls.n	8003c44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b8d      	ldr	r3, [pc, #564]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 020f 	bic.w	r2, r3, #15
 8003c2a:	498b      	ldr	r1, [pc, #556]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c32:	4b89      	ldr	r3, [pc, #548]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e105      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d010      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	4b81      	ldr	r3, [pc, #516]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d908      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c60:	4b7e      	ldr	r3, [pc, #504]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	497b      	ldr	r1, [pc, #492]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d079      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d11e      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	4b75      	ldr	r3, [pc, #468]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0dc      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c96:	f000 fa09 	bl	80040ac <RCC_GetSysClockFreqFromPLLSource>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4a70      	ldr	r2, [pc, #448]	@ (8003e60 <HAL_RCC_ClockConfig+0x264>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d946      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d140      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cae:	4b6b      	ldr	r3, [pc, #428]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb6:	4a69      	ldr	r2, [pc, #420]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cbe:	2380      	movs	r3, #128	@ 0x80
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e035      	b.n	8003d30 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ccc:	4b63      	ldr	r3, [pc, #396]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d115      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b9      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0ad      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0a5      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d04:	f000 f8b4 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4a55      	ldr	r2, [pc, #340]	@ (8003e60 <HAL_RCC_ClockConfig+0x264>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d90f      	bls.n	8003d30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d10:	4b52      	ldr	r3, [pc, #328]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d109      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d24:	4a4d      	ldr	r2, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d30:	4b4a      	ldr	r3, [pc, #296]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 0203 	bic.w	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4947      	ldr	r1, [pc, #284]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d42:	f7fd fc23 	bl	800158c <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4a:	f7fd fc1f 	bl	800158c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e077      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d60:	4b3e      	ldr	r3, [pc, #248]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 020c 	and.w	r2, r3, #12
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d1eb      	bne.n	8003d4a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b80      	cmp	r3, #128	@ 0x80
 8003d76:	d105      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d78:	4b38      	ldr	r3, [pc, #224]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a37      	ldr	r2, [pc, #220]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d82:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d208      	bcs.n	8003db2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	492b      	ldr	r1, [pc, #172]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db2:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d210      	bcs.n	8003de2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 020f 	bic.w	r2, r3, #15
 8003dc8:	4923      	ldr	r1, [pc, #140]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd0:	4b21      	ldr	r3, [pc, #132]	@ (8003e58 <HAL_RCC_ClockConfig+0x25c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d001      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e036      	b.n	8003e50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dee:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	4918      	ldr	r1, [pc, #96]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0c:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4910      	ldr	r1, [pc, #64]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e20:	f000 f826 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e24:	4602      	mov	r2, r0
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <HAL_RCC_ClockConfig+0x260>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	490c      	ldr	r1, [pc, #48]	@ (8003e64 <HAL_RCC_ClockConfig+0x268>)
 8003e32:	5ccb      	ldrb	r3, [r1, r3]
 8003e34:	f003 031f 	and.w	r3, r3, #31
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e68 <HAL_RCC_ClockConfig+0x26c>)
 8003e3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e40:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <HAL_RCC_ClockConfig+0x270>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd fb51 	bl	80014ec <HAL_InitTick>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40022000 	.word	0x40022000
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	04c4b400 	.word	0x04c4b400
 8003e64:	08006bf8 	.word	0x08006bf8
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	20000004 	.word	0x20000004

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	@ 0x24
 8003e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d121      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d11e      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ea4:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eb0:	4b31      	ldr	r3, [pc, #196]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e005      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d102      	bne.n	8003eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ee8:	4b25      	ldr	r3, [pc, #148]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e004      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ef4:	4b23      	ldr	r3, [pc, #140]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d134      	bne.n	8003f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003efe:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d003      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0xac>
 8003f14:	e005      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f16:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f18:	617b      	str	r3, [r7, #20]
      break;
 8003f1a:	e005      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f1c:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f1e:	617b      	str	r3, [r7, #20]
      break;
 8003f20:	e002      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	617b      	str	r3, [r7, #20]
      break;
 8003f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	3301      	adds	r3, #1
 8003f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f36:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	fb03 f202 	mul.w	r2, r3, r2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	0e5b      	lsrs	r3, r3, #25
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f68:	69bb      	ldr	r3, [r7, #24]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	08006c10 	.word	0x08006c10
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	007a1200 	.word	0x007a1200

08003f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	@ (8003f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000000 	.word	0x20000000

08003fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fa4:	f7ff fff0 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4904      	ldr	r1, [pc, #16]	@ (8003fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	08006c08 	.word	0x08006c08

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fd0:	f7ff ffda 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0adb      	lsrs	r3, r3, #11
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4904      	ldr	r1, [pc, #16]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	08006c08 	.word	0x08006c08

08003ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004004:	4b27      	ldr	r3, [pc, #156]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004010:	f7ff f916 	bl	8003240 <HAL_PWREx_GetVoltageRange>
 8004014:	6178      	str	r0, [r7, #20]
 8004016:	e014      	b.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b22      	ldr	r3, [pc, #136]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004022:	6593      	str	r3, [r2, #88]	@ 0x58
 8004024:	4b1f      	ldr	r3, [pc, #124]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004030:	f7ff f906 	bl	8003240 <HAL_PWREx_GetVoltageRange>
 8004034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4b1b      	ldr	r3, [pc, #108]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403a:	4a1a      	ldr	r2, [pc, #104]	@ (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004040:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004048:	d10b      	bne.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b80      	cmp	r3, #128	@ 0x80
 800404e:	d913      	bls.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2ba0      	cmp	r3, #160	@ 0xa0
 8004054:	d902      	bls.n	800405c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004056:	2302      	movs	r3, #2
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e00d      	b.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800405c:	2301      	movs	r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	e00a      	b.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b7f      	cmp	r3, #127	@ 0x7f
 8004066:	d902      	bls.n	800406e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004068:	2302      	movs	r3, #2
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e004      	b.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b70      	cmp	r3, #112	@ 0x70
 8004072:	d101      	bne.n	8004078 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004074:	2301      	movs	r3, #1
 8004076:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004078:	4b0b      	ldr	r3, [pc, #44]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 020f 	bic.w	r2, r3, #15
 8004080:	4909      	ldr	r1, [pc, #36]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004088:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40022000 	.word	0x40022000

080040ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d00b      	beq.n	80040da <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d825      	bhi.n	8004114 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d008      	beq.n	80040e0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d11f      	bne.n	8004114 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80040d4:	4b25      	ldr	r3, [pc, #148]	@ (800416c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040d6:	613b      	str	r3, [r7, #16]
    break;
 80040d8:	e01f      	b.n	800411a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80040da:	4b25      	ldr	r3, [pc, #148]	@ (8004170 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80040dc:	613b      	str	r3, [r7, #16]
    break;
 80040de:	e01c      	b.n	800411a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040e0:	4b21      	ldr	r3, [pc, #132]	@ (8004168 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004168 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e005      	b.n	8004108 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004108:	4a1a      	ldr	r2, [pc, #104]	@ (8004174 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	613b      	str	r3, [r7, #16]
    break;
 8004112:	e002      	b.n	800411a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
    break;
 8004118:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800411a:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	3301      	adds	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004128:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	fb03 f202 	mul.w	r2, r3, r2
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	fbb2 f3f3 	udiv	r3, r2, r3
 800413e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004140:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	0e5b      	lsrs	r3, r3, #25
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	3301      	adds	r3, #1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800415a:	683b      	ldr	r3, [r7, #0]
}
 800415c:	4618      	mov	r0, r3
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40021000 	.word	0x40021000
 800416c:	00f42400 	.word	0x00f42400
 8004170:	007a1200 	.word	0x007a1200
 8004174:	08006c10 	.word	0x08006c10

08004178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004180:	2300      	movs	r3, #0
 8004182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004184:	2300      	movs	r3, #0
 8004186:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004190:	2b00      	cmp	r3, #0
 8004192:	d040      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004198:	2b80      	cmp	r3, #128	@ 0x80
 800419a:	d02a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800419c:	2b80      	cmp	r3, #128	@ 0x80
 800419e:	d825      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80041a0:	2b60      	cmp	r3, #96	@ 0x60
 80041a2:	d026      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041a4:	2b60      	cmp	r3, #96	@ 0x60
 80041a6:	d821      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80041a8:	2b40      	cmp	r3, #64	@ 0x40
 80041aa:	d006      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	d81d      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d010      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80041b8:	e018      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041ba:	4b89      	ldr	r3, [pc, #548]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4a88      	ldr	r2, [pc, #544]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c6:	e015      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fb02 	bl	80047d8 <RCCEx_PLLSAI1_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d8:	e00c      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3320      	adds	r3, #32
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fbed 	bl	80049c0 <RCCEx_PLLSAI2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	74fb      	strb	r3, [r7, #19]
      break;
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80041f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041fa:	4b79      	ldr	r3, [pc, #484]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004200:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004208:	4975      	ldr	r1, [pc, #468]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004210:	e001      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d047      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d030      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004230:	d82a      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004236:	d02a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004238:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800423c:	d824      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800423e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004242:	d008      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004248:	d81e      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800424e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004252:	d010      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004254:	e018      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004256:	4b62      	ldr	r3, [pc, #392]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	4a61      	ldr	r2, [pc, #388]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004260:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004262:	e015      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fab4 	bl	80047d8 <RCCEx_PLLSAI1_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004274:	e00c      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3320      	adds	r3, #32
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fb9f 	bl	80049c0 <RCCEx_PLLSAI2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	74fb      	strb	r3, [r7, #19]
      break;
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800428e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004296:	4b52      	ldr	r3, [pc, #328]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800429c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a4:	494e      	ldr	r1, [pc, #312]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80042ac:	e001      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	7cfb      	ldrb	r3, [r7, #19]
 80042b0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 809f 	beq.w	80043fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c0:	2300      	movs	r3, #0
 80042c2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042c4:	4b46      	ldr	r3, [pc, #280]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80042d4:	2300      	movs	r3, #0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00d      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	4a40      	ldr	r2, [pc, #256]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e6:	4b3e      	ldr	r3, [pc, #248]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042f2:	2301      	movs	r3, #1
 80042f4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f6:	4b3b      	ldr	r3, [pc, #236]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3a      	ldr	r2, [pc, #232]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004300:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004302:	f7fd f943 	bl	800158c <HAL_GetTick>
 8004306:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004308:	e009      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430a:	f7fd f93f 	bl	800158c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d902      	bls.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	74fb      	strb	r3, [r7, #19]
        break;
 800431c:	e005      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800431e:	4b31      	ldr	r3, [pc, #196]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ef      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800432a:	7cfb      	ldrb	r3, [r7, #19]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d15b      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004330:	4b2b      	ldr	r3, [pc, #172]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01f      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	429a      	cmp	r2, r3
 800434c:	d019      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800434e:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004358:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800435a:	4b21      	ldr	r3, [pc, #132]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004360:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800436a:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004370:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800437a:	4a19      	ldr	r2, [pc, #100]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d016      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd f8fe 	bl	800158c <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004392:	e00b      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fd f8fa 	bl	800158c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d902      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	74fb      	strb	r3, [r7, #19]
            break;
 80043aa:	e006      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ec      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10c      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c0:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d0:	4903      	ldr	r1, [pc, #12]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043d8:	e008      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	74bb      	strb	r3, [r7, #18]
 80043de:	e005      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ec:	7c7b      	ldrb	r3, [r7, #17]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f2:	4ba0      	ldr	r3, [pc, #640]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	4a9f      	ldr	r2, [pc, #636]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800440a:	4b9a      	ldr	r3, [pc, #616]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f023 0203 	bic.w	r2, r3, #3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	4996      	ldr	r1, [pc, #600]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800442c:	4b91      	ldr	r3, [pc, #580]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f023 020c 	bic.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	498e      	ldr	r1, [pc, #568]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800444e:	4b89      	ldr	r3, [pc, #548]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	4985      	ldr	r1, [pc, #532]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004470:	4b80      	ldr	r3, [pc, #512]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800447e:	497d      	ldr	r1, [pc, #500]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004492:	4b78      	ldr	r3, [pc, #480]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a0:	4974      	ldr	r1, [pc, #464]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c2:	496c      	ldr	r1, [pc, #432]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d6:	4b67      	ldr	r3, [pc, #412]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044e4:	4963      	ldr	r1, [pc, #396]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004506:	495b      	ldr	r1, [pc, #364]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800451a:	4b56      	ldr	r3, [pc, #344]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004520:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004528:	4952      	ldr	r1, [pc, #328]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453c:	4b4d      	ldr	r3, [pc, #308]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004542:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454a:	494a      	ldr	r1, [pc, #296]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800455e:	4b45      	ldr	r3, [pc, #276]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004564:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800456c:	4941      	ldr	r1, [pc, #260]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004580:	4b3c      	ldr	r3, [pc, #240]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004586:	f023 0203 	bic.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458e:	4939      	ldr	r1, [pc, #228]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d028      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a2:	4b34      	ldr	r3, [pc, #208]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b0:	4930      	ldr	r1, [pc, #192]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045c0:	d106      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045cc:	60d3      	str	r3, [r2, #12]
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f8f9 	bl	80047d8 <RCCEx_PLLSAI1_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d04d      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004608:	d108      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800460a:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004610:	4a18      	ldr	r2, [pc, #96]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004616:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800461a:	e012      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800461c:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004622:	4a14      	ldr	r2, [pc, #80]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004624:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004628:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800462c:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800463a:	490e      	ldr	r1, [pc, #56]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800464a:	d106      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800464c:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a08      	ldr	r2, [pc, #32]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004656:	60d3      	str	r3, [r2, #12]
 8004658:	e020      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004662:	d109      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004664:	4b03      	ldr	r3, [pc, #12]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a02      	ldr	r2, [pc, #8]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800466a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800466e:	60d3      	str	r3, [r2, #12]
 8004670:	e014      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800467c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004680:	d10c      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2101      	movs	r1, #1
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f8a5 	bl	80047d8 <RCCEx_PLLSAI1_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d028      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a8:	4b4a      	ldr	r3, [pc, #296]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046b6:	4947      	ldr	r1, [pc, #284]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046c6:	d106      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c8:	4b42      	ldr	r3, [pc, #264]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4a41      	ldr	r2, [pc, #260]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046d2:	60d3      	str	r3, [r2, #12]
 80046d4:	e011      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046de:	d10c      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	2101      	movs	r1, #1
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 f876 	bl	80047d8 <RCCEx_PLLSAI1_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01e      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004706:	4b33      	ldr	r3, [pc, #204]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004716:	492f      	ldr	r1, [pc, #188]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004724:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004728:	d10c      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3304      	adds	r3, #4
 800472e:	2102      	movs	r1, #2
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f851 	bl	80047d8 <RCCEx_PLLSAI1_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004750:	4b20      	ldr	r3, [pc, #128]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004752:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004756:	f023 0204 	bic.w	r2, r3, #4
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004760:	491c      	ldr	r1, [pc, #112]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004774:	4b17      	ldr	r3, [pc, #92]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800477a:	f023 0218 	bic.w	r2, r3, #24
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004784:	4913      	ldr	r1, [pc, #76]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d017      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004798:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800479e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a8:	490a      	ldr	r1, [pc, #40]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ba:	d105      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a04      	ldr	r2, [pc, #16]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000

080047d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047e6:	4b72      	ldr	r3, [pc, #456]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00e      	beq.n	8004810 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047f2:	4b6f      	ldr	r3, [pc, #444]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0203 	and.w	r2, r3, #3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d103      	bne.n	800480a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
       ||
 8004806:	2b00      	cmp	r3, #0
 8004808:	d142      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e03f      	b.n	8004890 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d018      	beq.n	800484a <RCCEx_PLLSAI1_Config+0x72>
 8004818:	2b03      	cmp	r3, #3
 800481a:	d825      	bhi.n	8004868 <RCCEx_PLLSAI1_Config+0x90>
 800481c:	2b01      	cmp	r3, #1
 800481e:	d002      	beq.n	8004826 <RCCEx_PLLSAI1_Config+0x4e>
 8004820:	2b02      	cmp	r3, #2
 8004822:	d009      	beq.n	8004838 <RCCEx_PLLSAI1_Config+0x60>
 8004824:	e020      	b.n	8004868 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004826:	4b62      	ldr	r3, [pc, #392]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d11d      	bne.n	800486e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004836:	e01a      	b.n	800486e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004838:	4b5d      	ldr	r3, [pc, #372]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d116      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004848:	e013      	b.n	8004872 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800484a:	4b59      	ldr	r3, [pc, #356]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004856:	4b56      	ldr	r3, [pc, #344]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004866:	e006      	b.n	8004876 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e004      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004876:	bf00      	nop
    }

    if(status == HAL_OK)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800487e:	4b4c      	ldr	r3, [pc, #304]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4949      	ldr	r1, [pc, #292]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 8086 	bne.w	80049a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004898:	4b45      	ldr	r3, [pc, #276]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a44      	ldr	r2, [pc, #272]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800489e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a4:	f7fc fe72 	bl	800158c <HAL_GetTick>
 80048a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048aa:	e009      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ac:	f7fc fe6e 	bl	800158c <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d902      	bls.n	80048c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	73fb      	strb	r3, [r7, #15]
        break;
 80048be:	e005      	b.n	80048cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c0:	4b3b      	ldr	r3, [pc, #236]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1ef      	bne.n	80048ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d168      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d113      	bne.n	8004900 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d8:	4b35      	ldr	r3, [pc, #212]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	4b35      	ldr	r3, [pc, #212]	@ (80049b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048de:	4013      	ands	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68d2      	ldr	r2, [r2, #12]
 80048ea:	06d2      	lsls	r2, r2, #27
 80048ec:	4311      	orrs	r1, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6852      	ldr	r2, [r2, #4]
 80048f2:	3a01      	subs	r2, #1
 80048f4:	0112      	lsls	r2, r2, #4
 80048f6:	430a      	orrs	r2, r1
 80048f8:	492d      	ldr	r1, [pc, #180]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]
 80048fe:	e02d      	b.n	800495c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d115      	bne.n	8004932 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004906:	4b2a      	ldr	r3, [pc, #168]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	4b2b      	ldr	r3, [pc, #172]	@ (80049b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6892      	ldr	r2, [r2, #8]
 8004912:	0211      	lsls	r1, r2, #8
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6912      	ldr	r2, [r2, #16]
 8004918:	0852      	lsrs	r2, r2, #1
 800491a:	3a01      	subs	r2, #1
 800491c:	0552      	lsls	r2, r2, #21
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6852      	ldr	r2, [r2, #4]
 8004924:	3a01      	subs	r2, #1
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	430a      	orrs	r2, r1
 800492a:	4921      	ldr	r1, [pc, #132]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800492c:	4313      	orrs	r3, r2
 800492e:	610b      	str	r3, [r1, #16]
 8004930:	e014      	b.n	800495c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004932:	4b1f      	ldr	r3, [pc, #124]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	4b21      	ldr	r3, [pc, #132]	@ (80049bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004938:	4013      	ands	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6892      	ldr	r2, [r2, #8]
 800493e:	0211      	lsls	r1, r2, #8
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6952      	ldr	r2, [r2, #20]
 8004944:	0852      	lsrs	r2, r2, #1
 8004946:	3a01      	subs	r2, #1
 8004948:	0652      	lsls	r2, r2, #25
 800494a:	4311      	orrs	r1, r2
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6852      	ldr	r2, [r2, #4]
 8004950:	3a01      	subs	r2, #1
 8004952:	0112      	lsls	r2, r2, #4
 8004954:	430a      	orrs	r2, r1
 8004956:	4916      	ldr	r1, [pc, #88]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004958:	4313      	orrs	r3, r2
 800495a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800495c:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a13      	ldr	r2, [pc, #76]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004962:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004966:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004968:	f7fc fe10 	bl	800158c <HAL_GetTick>
 800496c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496e:	e009      	b.n	8004984 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004970:	f7fc fe0c 	bl	800158c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d902      	bls.n	8004984 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	73fb      	strb	r3, [r7, #15]
          break;
 8004982:	e005      	b.n	8004990 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004984:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ef      	beq.n	8004970 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004996:	4b06      	ldr	r3, [pc, #24]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	4904      	ldr	r1, [pc, #16]	@ (80049b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40021000 	.word	0x40021000
 80049b4:	07ff800f 	.word	0x07ff800f
 80049b8:	ff9f800f 	.word	0xff9f800f
 80049bc:	f9ff800f 	.word	0xf9ff800f

080049c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ce:	4b72      	ldr	r3, [pc, #456]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00e      	beq.n	80049f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049da:	4b6f      	ldr	r3, [pc, #444]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0203 	and.w	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d103      	bne.n	80049f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
       ||
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d142      	bne.n	8004a78 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e03f      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d018      	beq.n	8004a32 <RCCEx_PLLSAI2_Config+0x72>
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d825      	bhi.n	8004a50 <RCCEx_PLLSAI2_Config+0x90>
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d002      	beq.n	8004a0e <RCCEx_PLLSAI2_Config+0x4e>
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d009      	beq.n	8004a20 <RCCEx_PLLSAI2_Config+0x60>
 8004a0c:	e020      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a0e:	4b62      	ldr	r3, [pc, #392]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1e:	e01a      	b.n	8004a56 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a20:	4b5d      	ldr	r3, [pc, #372]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d116      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a30:	e013      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a32:	4b59      	ldr	r3, [pc, #356]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a3e:	4b56      	ldr	r3, [pc, #344]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a4e:	e006      	b.n	8004a5e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e004      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a66:	4b4c      	ldr	r3, [pc, #304]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4949      	ldr	r1, [pc, #292]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 8086 	bne.w	8004b8c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a80:	4b45      	ldr	r3, [pc, #276]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a44      	ldr	r2, [pc, #272]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a8c:	f7fc fd7e 	bl	800158c <HAL_GetTick>
 8004a90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a92:	e009      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a94:	f7fc fd7a 	bl	800158c <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa6:	e005      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ef      	bne.n	8004a94 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d168      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d113      	bne.n	8004ae8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ac0:	4b35      	ldr	r3, [pc, #212]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	4b35      	ldr	r3, [pc, #212]	@ (8004b9c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6892      	ldr	r2, [r2, #8]
 8004acc:	0211      	lsls	r1, r2, #8
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68d2      	ldr	r2, [r2, #12]
 8004ad2:	06d2      	lsls	r2, r2, #27
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6852      	ldr	r2, [r2, #4]
 8004ada:	3a01      	subs	r2, #1
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	492d      	ldr	r1, [pc, #180]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	614b      	str	r3, [r1, #20]
 8004ae6:	e02d      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d115      	bne.n	8004b1a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aee:	4b2a      	ldr	r3, [pc, #168]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	4b2b      	ldr	r3, [pc, #172]	@ (8004ba0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6892      	ldr	r2, [r2, #8]
 8004afa:	0211      	lsls	r1, r2, #8
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6912      	ldr	r2, [r2, #16]
 8004b00:	0852      	lsrs	r2, r2, #1
 8004b02:	3a01      	subs	r2, #1
 8004b04:	0552      	lsls	r2, r2, #21
 8004b06:	4311      	orrs	r1, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6852      	ldr	r2, [r2, #4]
 8004b0c:	3a01      	subs	r2, #1
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	430a      	orrs	r2, r1
 8004b12:	4921      	ldr	r1, [pc, #132]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	614b      	str	r3, [r1, #20]
 8004b18:	e014      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ba4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6892      	ldr	r2, [r2, #8]
 8004b26:	0211      	lsls	r1, r2, #8
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6952      	ldr	r2, [r2, #20]
 8004b2c:	0852      	lsrs	r2, r2, #1
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	0652      	lsls	r2, r2, #25
 8004b32:	4311      	orrs	r1, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6852      	ldr	r2, [r2, #4]
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	0112      	lsls	r2, r2, #4
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	4916      	ldr	r1, [pc, #88]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b44:	4b14      	ldr	r3, [pc, #80]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a13      	ldr	r2, [pc, #76]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fc fd1c 	bl	800158c <HAL_GetTick>
 8004b54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b56:	e009      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b58:	f7fc fd18 	bl	800158c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	73fb      	strb	r3, [r7, #15]
          break;
 8004b6a:	e005      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b7e:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	4904      	ldr	r1, [pc, #16]	@ (8004b98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	07ff800f 	.word	0x07ff800f
 8004ba0:	ff9f800f 	.word	0xff9f800f
 8004ba4:	f9ff800f 	.word	0xf9ff800f

08004ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e049      	b.n	8004c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fc fae0 	bl	8001194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4610      	mov	r0, r2
 8004be8:	f000 fca4 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d001      	beq.n	8004c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e047      	b.n	8004d00 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a23      	ldr	r2, [pc, #140]	@ (8004d0c <HAL_TIM_Base_Start+0xb4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_TIM_Base_Start+0x66>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIM_Base_Start+0x66>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	@ (8004d10 <HAL_TIM_Base_Start+0xb8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_TIM_Base_Start+0x66>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d14 <HAL_TIM_Base_Start+0xbc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIM_Base_Start+0x66>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d18 <HAL_TIM_Base_Start+0xc0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIM_Base_Start+0x66>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	@ (8004d1c <HAL_TIM_Base_Start+0xc4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIM_Base_Start+0x66>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <HAL_TIM_Base_Start+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d115      	bne.n	8004cea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	4b17      	ldr	r3, [pc, #92]	@ (8004d24 <HAL_TIM_Base_Start+0xcc>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d015      	beq.n	8004cfc <HAL_TIM_Base_Start+0xa4>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd6:	d011      	beq.n	8004cfc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	e008      	b.n	8004cfc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e000      	b.n	8004cfe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40013400 	.word	0x40013400
 8004d20:	40014000 	.word	0x40014000
 8004d24:	00010007 	.word	0x00010007

08004d28 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a1a      	ldr	r2, [r3, #32]
 8004d36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10f      	bne.n	8004d60 <HAL_TIM_Base_Stop+0x38>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d107      	bne.n	8004d60 <HAL_TIM_Base_Stop+0x38>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d001      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e04f      	b.n	8004e30 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a23      	ldr	r2, [pc, #140]	@ (8004e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01d      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x76>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dba:	d018      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x76>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x76>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1e      	ldr	r2, [pc, #120]	@ (8004e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d00e      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x76>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d009      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x76>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1b      	ldr	r2, [pc, #108]	@ (8004e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d004      	beq.n	8004dee <HAL_TIM_Base_Start_IT+0x76>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a19      	ldr	r2, [pc, #100]	@ (8004e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d115      	bne.n	8004e1a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	4b17      	ldr	r3, [pc, #92]	@ (8004e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b06      	cmp	r3, #6
 8004dfe:	d015      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0xb4>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e06:	d011      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	e008      	b.n	8004e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e000      	b.n	8004e2e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40013400 	.word	0x40013400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	00010007 	.word	0x00010007

08004e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e049      	b.n	8004efe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f841 	bl	8004f06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f000 fb4c 	bl	8005534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01b      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0202 	mvn.w	r2, #2
 8004f4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fac6 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8004f6a:	e005      	b.n	8004f78 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fab8 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fac9 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d020      	beq.n	8004fca <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01b      	beq.n	8004fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0204 	mvn.w	r2, #4
 8004f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 faa0 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8004fb6:	e005      	b.n	8004fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 fa92 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 faa3 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d01b      	beq.n	8005016 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f06f 0208 	mvn.w	r2, #8
 8004fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2204      	movs	r2, #4
 8004fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fa7a 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 8005002:	e005      	b.n	8005010 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fa6c 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa7d 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01b      	beq.n	8005062 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0210 	mvn.w	r2, #16
 8005032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2208      	movs	r2, #8
 8005038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa54 	bl	80054f6 <HAL_TIM_IC_CaptureCallback>
 800504e:	e005      	b.n	800505c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa46 	bl	80054e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa57 	bl	800550a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f06f 0201 	mvn.w	r2, #1
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fb fb01 	bl	8000688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508c:	2b00      	cmp	r3, #0
 800508e:	d104      	bne.n	800509a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fee8 	bl	8005e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fee0 	bl	8005e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d007      	beq.n	80050fc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa11 	bl	800551e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00c      	beq.n	8005120 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0220 	mvn.w	r2, #32
 8005118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fea8 	bl	8005e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005142:	2302      	movs	r3, #2
 8005144:	e0ff      	b.n	8005346 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b14      	cmp	r3, #20
 8005152:	f200 80f0 	bhi.w	8005336 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005156:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	080051b1 	.word	0x080051b1
 8005160:	08005337 	.word	0x08005337
 8005164:	08005337 	.word	0x08005337
 8005168:	08005337 	.word	0x08005337
 800516c:	080051f1 	.word	0x080051f1
 8005170:	08005337 	.word	0x08005337
 8005174:	08005337 	.word	0x08005337
 8005178:	08005337 	.word	0x08005337
 800517c:	08005233 	.word	0x08005233
 8005180:	08005337 	.word	0x08005337
 8005184:	08005337 	.word	0x08005337
 8005188:	08005337 	.word	0x08005337
 800518c:	08005273 	.word	0x08005273
 8005190:	08005337 	.word	0x08005337
 8005194:	08005337 	.word	0x08005337
 8005198:	08005337 	.word	0x08005337
 800519c:	080052b5 	.word	0x080052b5
 80051a0:	08005337 	.word	0x08005337
 80051a4:	08005337 	.word	0x08005337
 80051a8:	08005337 	.word	0x08005337
 80051ac:	080052f5 	.word	0x080052f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fa62 	bl	8005680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0208 	orr.w	r2, r2, #8
 80051ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0204 	bic.w	r2, r2, #4
 80051da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6999      	ldr	r1, [r3, #24]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	619a      	str	r2, [r3, #24]
      break;
 80051ee:	e0a5      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fad2 	bl	80057a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	619a      	str	r2, [r3, #24]
      break;
 8005230:	e084      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68b9      	ldr	r1, [r7, #8]
 8005238:	4618      	mov	r0, r3
 800523a:	f000 fb3b 	bl	80058b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0208 	orr.w	r2, r2, #8
 800524c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0204 	bic.w	r2, r2, #4
 800525c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69d9      	ldr	r1, [r3, #28]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	61da      	str	r2, [r3, #28]
      break;
 8005270:	e064      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68b9      	ldr	r1, [r7, #8]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fba3 	bl	80059c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800528c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69da      	ldr	r2, [r3, #28]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69d9      	ldr	r1, [r3, #28]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	021a      	lsls	r2, r3, #8
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	61da      	str	r2, [r3, #28]
      break;
 80052b2:	e043      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fbec 	bl	8005a98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0208 	orr.w	r2, r2, #8
 80052ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0204 	bic.w	r2, r2, #4
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052f2:	e023      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fc30 	bl	8005b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800530e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	021a      	lsls	r2, r3, #8
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005334:	e002      	b.n	800533c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	75fb      	strb	r3, [r7, #23]
      break;
 800533a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005344:	7dfb      	ldrb	r3, [r7, #23]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop

08005350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_TIM_ConfigClockSource+0x1c>
 8005368:	2302      	movs	r3, #2
 800536a:	e0b6      	b.n	80054da <HAL_TIM_ConfigClockSource+0x18a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800538a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800538e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053a8:	d03e      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0xd8>
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ae:	f200 8087 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053b6:	f000 8086 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x176>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053be:	d87f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053c0:	2b70      	cmp	r3, #112	@ 0x70
 80053c2:	d01a      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xaa>
 80053c4:	2b70      	cmp	r3, #112	@ 0x70
 80053c6:	d87b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053c8:	2b60      	cmp	r3, #96	@ 0x60
 80053ca:	d050      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x11e>
 80053cc:	2b60      	cmp	r3, #96	@ 0x60
 80053ce:	d877      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053d0:	2b50      	cmp	r3, #80	@ 0x50
 80053d2:	d03c      	beq.n	800544e <HAL_TIM_ConfigClockSource+0xfe>
 80053d4:	2b50      	cmp	r3, #80	@ 0x50
 80053d6:	d873      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	d058      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x13e>
 80053dc:	2b40      	cmp	r3, #64	@ 0x40
 80053de:	d86f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053e0:	2b30      	cmp	r3, #48	@ 0x30
 80053e2:	d064      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053e4:	2b30      	cmp	r3, #48	@ 0x30
 80053e6:	d86b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d060      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d867      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05c      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d05a      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15e>
 80053f8:	e062      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800540a:	f000 fc89 	bl	8005d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800541c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	609a      	str	r2, [r3, #8]
      break;
 8005426:	e04f      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005438:	f000 fc72 	bl	8005d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800544a:	609a      	str	r2, [r3, #8]
      break;
 800544c:	e03c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fbe6 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2150      	movs	r1, #80	@ 0x50
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fc3f 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 800546c:	e02c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fc05 	bl	8005c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2160      	movs	r1, #96	@ 0x60
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fc2f 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 800548c:	e01c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fbc6 	bl	8005c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2140      	movs	r1, #64	@ 0x40
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fc1f 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 80054ac:	e00c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 fc16 	bl	8005cea <TIM_ITRx_SetConfig>
      break;
 80054be:	e003      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a46      	ldr	r2, [pc, #280]	@ (8005660 <TIM_Base_SetConfig+0x12c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005552:	d00f      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a43      	ldr	r2, [pc, #268]	@ (8005664 <TIM_Base_SetConfig+0x130>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00b      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a42      	ldr	r2, [pc, #264]	@ (8005668 <TIM_Base_SetConfig+0x134>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a41      	ldr	r2, [pc, #260]	@ (800566c <TIM_Base_SetConfig+0x138>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a40      	ldr	r2, [pc, #256]	@ (8005670 <TIM_Base_SetConfig+0x13c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d108      	bne.n	8005586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a35      	ldr	r2, [pc, #212]	@ (8005660 <TIM_Base_SetConfig+0x12c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d01f      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005594:	d01b      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a32      	ldr	r2, [pc, #200]	@ (8005664 <TIM_Base_SetConfig+0x130>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d017      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a31      	ldr	r2, [pc, #196]	@ (8005668 <TIM_Base_SetConfig+0x134>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a30      	ldr	r2, [pc, #192]	@ (800566c <TIM_Base_SetConfig+0x138>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005670 <TIM_Base_SetConfig+0x13c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005674 <TIM_Base_SetConfig+0x140>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005678 <TIM_Base_SetConfig+0x144>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_Base_SetConfig+0x9a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a2c      	ldr	r2, [pc, #176]	@ (800567c <TIM_Base_SetConfig+0x148>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d108      	bne.n	80055e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a16      	ldr	r2, [pc, #88]	@ (8005660 <TIM_Base_SetConfig+0x12c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00f      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a18      	ldr	r2, [pc, #96]	@ (8005670 <TIM_Base_SetConfig+0x13c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00b      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <TIM_Base_SetConfig+0x140>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d007      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a16      	ldr	r2, [pc, #88]	@ (8005678 <TIM_Base_SetConfig+0x144>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d003      	beq.n	800562c <TIM_Base_SetConfig+0xf8>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a15      	ldr	r2, [pc, #84]	@ (800567c <TIM_Base_SetConfig+0x148>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d103      	bne.n	8005634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]
  }
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800

08005680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 0201 	bic.w	r2, r3, #1
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 0302 	bic.w	r3, r3, #2
 80056cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a2c      	ldr	r2, [pc, #176]	@ (800578c <TIM_OC1_SetConfig+0x10c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00f      	beq.n	8005700 <TIM_OC1_SetConfig+0x80>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005790 <TIM_OC1_SetConfig+0x110>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00b      	beq.n	8005700 <TIM_OC1_SetConfig+0x80>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005794 <TIM_OC1_SetConfig+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_OC1_SetConfig+0x80>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a29      	ldr	r2, [pc, #164]	@ (8005798 <TIM_OC1_SetConfig+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC1_SetConfig+0x80>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a28      	ldr	r2, [pc, #160]	@ (800579c <TIM_OC1_SetConfig+0x11c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10c      	bne.n	800571a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0308 	bic.w	r3, r3, #8
 8005706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f023 0304 	bic.w	r3, r3, #4
 8005718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1b      	ldr	r2, [pc, #108]	@ (800578c <TIM_OC1_SetConfig+0x10c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00f      	beq.n	8005742 <TIM_OC1_SetConfig+0xc2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1a      	ldr	r2, [pc, #104]	@ (8005790 <TIM_OC1_SetConfig+0x110>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <TIM_OC1_SetConfig+0xc2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a19      	ldr	r2, [pc, #100]	@ (8005794 <TIM_OC1_SetConfig+0x114>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <TIM_OC1_SetConfig+0xc2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a18      	ldr	r2, [pc, #96]	@ (8005798 <TIM_OC1_SetConfig+0x118>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_OC1_SetConfig+0xc2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a17      	ldr	r2, [pc, #92]	@ (800579c <TIM_OC1_SetConfig+0x11c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d111      	bne.n	8005766 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	621a      	str	r2, [r3, #32]
}
 8005780:	bf00      	nop
 8005782:	371c      	adds	r7, #28
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40013400 	.word	0x40013400
 8005794:	40014000 	.word	0x40014000
 8005798:	40014400 	.word	0x40014400
 800579c:	40014800 	.word	0x40014800

080057a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	f023 0210 	bic.w	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0320 	bic.w	r3, r3, #32
 80057ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a28      	ldr	r2, [pc, #160]	@ (80058a0 <TIM_OC2_SetConfig+0x100>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC2_SetConfig+0x6c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a27      	ldr	r2, [pc, #156]	@ (80058a4 <TIM_OC2_SetConfig+0x104>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d10d      	bne.n	8005828 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005826:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1d      	ldr	r2, [pc, #116]	@ (80058a0 <TIM_OC2_SetConfig+0x100>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00f      	beq.n	8005850 <TIM_OC2_SetConfig+0xb0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <TIM_OC2_SetConfig+0x104>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_OC2_SetConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a1b      	ldr	r2, [pc, #108]	@ (80058a8 <TIM_OC2_SetConfig+0x108>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_OC2_SetConfig+0xb0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a1a      	ldr	r2, [pc, #104]	@ (80058ac <TIM_OC2_SetConfig+0x10c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC2_SetConfig+0xb0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a19      	ldr	r2, [pc, #100]	@ (80058b0 <TIM_OC2_SetConfig+0x110>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d113      	bne.n	8005878 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40014000 	.word	0x40014000
 80058ac:	40014400 	.word	0x40014400
 80058b0:	40014800 	.word	0x40014800

080058b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a27      	ldr	r2, [pc, #156]	@ (80059b0 <TIM_OC3_SetConfig+0xfc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d003      	beq.n	800591e <TIM_OC3_SetConfig+0x6a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a26      	ldr	r2, [pc, #152]	@ (80059b4 <TIM_OC3_SetConfig+0x100>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10d      	bne.n	800593a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005924:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1c      	ldr	r2, [pc, #112]	@ (80059b0 <TIM_OC3_SetConfig+0xfc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_OC3_SetConfig+0xae>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1b      	ldr	r2, [pc, #108]	@ (80059b4 <TIM_OC3_SetConfig+0x100>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_OC3_SetConfig+0xae>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1a      	ldr	r2, [pc, #104]	@ (80059b8 <TIM_OC3_SetConfig+0x104>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_OC3_SetConfig+0xae>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a19      	ldr	r2, [pc, #100]	@ (80059bc <TIM_OC3_SetConfig+0x108>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_OC3_SetConfig+0xae>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <TIM_OC3_SetConfig+0x10c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d113      	bne.n	800598a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	621a      	str	r2, [r3, #32]
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40013400 	.word	0x40013400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800

080059c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	031b      	lsls	r3, r3, #12
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <TIM_OC4_SetConfig+0xc0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00f      	beq.n	8005a48 <TIM_OC4_SetConfig+0x84>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a17      	ldr	r2, [pc, #92]	@ (8005a88 <TIM_OC4_SetConfig+0xc4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00b      	beq.n	8005a48 <TIM_OC4_SetConfig+0x84>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <TIM_OC4_SetConfig+0xc8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <TIM_OC4_SetConfig+0x84>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <TIM_OC4_SetConfig+0xcc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_OC4_SetConfig+0x84>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a14      	ldr	r2, [pc, #80]	@ (8005a94 <TIM_OC4_SetConfig+0xd0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d109      	bne.n	8005a5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	019b      	lsls	r3, r3, #6
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005adc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	041b      	lsls	r3, r3, #16
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a17      	ldr	r2, [pc, #92]	@ (8005b4c <TIM_OC5_SetConfig+0xb4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00f      	beq.n	8005b12 <TIM_OC5_SetConfig+0x7a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <TIM_OC5_SetConfig+0xb8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <TIM_OC5_SetConfig+0x7a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <TIM_OC5_SetConfig+0xbc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <TIM_OC5_SetConfig+0x7a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a14      	ldr	r2, [pc, #80]	@ (8005b58 <TIM_OC5_SetConfig+0xc0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_OC5_SetConfig+0x7a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a13      	ldr	r2, [pc, #76]	@ (8005b5c <TIM_OC5_SetConfig+0xc4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d109      	bne.n	8005b26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	40013400 	.word	0x40013400
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800

08005b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	051b      	lsls	r3, r3, #20
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <TIM_OC6_SetConfig+0xb8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00f      	beq.n	8005bdc <TIM_OC6_SetConfig+0x7c>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a17      	ldr	r2, [pc, #92]	@ (8005c1c <TIM_OC6_SetConfig+0xbc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <TIM_OC6_SetConfig+0x7c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a16      	ldr	r2, [pc, #88]	@ (8005c20 <TIM_OC6_SetConfig+0xc0>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC6_SetConfig+0x7c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <TIM_OC6_SetConfig+0xc4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC6_SetConfig+0x7c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a14      	ldr	r2, [pc, #80]	@ (8005c28 <TIM_OC6_SetConfig+0xc8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f023 030a 	bic.w	r3, r3, #10
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	621a      	str	r2, [r3, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	f023 0210 	bic.w	r2, r3, #16
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	031b      	lsls	r3, r3, #12
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f043 0307 	orr.w	r3, r3, #7
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	609a      	str	r2, [r3, #8]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	609a      	str	r2, [r3, #8]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e068      	b.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2d      	ldr	r2, [pc, #180]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005db2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dea:	d018      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a18      	ldr	r2, [pc, #96]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a14      	ldr	r2, [pc, #80]	@ (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d10c      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40000c00 	.word	0x40000c00
 8005e6c:	40014000 	.word	0x40014000

08005e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e042      	b.n	8005f44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d106      	bne.n	8005ed6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fb f9f9 	bl	80012c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2224      	movs	r2, #36	@ 0x24
 8005eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fb24 	bl	8006544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f825 	bl	8005f4c <UART_SetConfig>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e01b      	b.n	8005f44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fba3 	bl	8006688 <UART_CheckIdleState>
 8005f42:	4603      	mov	r3, r0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f50:	b08c      	sub	sp, #48	@ 0x30
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	4baa      	ldr	r3, [pc, #680]	@ (8006224 <UART_SetConfig+0x2d8>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f84:	430b      	orrs	r3, r1
 8005f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a9f      	ldr	r2, [pc, #636]	@ (8006228 <UART_SetConfig+0x2dc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005fc2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	f023 010f 	bic.w	r1, r3, #15
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a90      	ldr	r2, [pc, #576]	@ (800622c <UART_SetConfig+0x2e0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d125      	bne.n	800603c <UART_SetConfig+0xf0>
 8005ff0:	4b8f      	ldr	r3, [pc, #572]	@ (8006230 <UART_SetConfig+0x2e4>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d81a      	bhi.n	8006034 <UART_SetConfig+0xe8>
 8005ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8006004 <UART_SetConfig+0xb8>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	08006025 	.word	0x08006025
 800600c:	0800601d 	.word	0x0800601d
 8006010:	0800602d 	.word	0x0800602d
 8006014:	2301      	movs	r3, #1
 8006016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800601a:	e116      	b.n	800624a <UART_SetConfig+0x2fe>
 800601c:	2302      	movs	r3, #2
 800601e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006022:	e112      	b.n	800624a <UART_SetConfig+0x2fe>
 8006024:	2304      	movs	r3, #4
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602a:	e10e      	b.n	800624a <UART_SetConfig+0x2fe>
 800602c:	2308      	movs	r3, #8
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006032:	e10a      	b.n	800624a <UART_SetConfig+0x2fe>
 8006034:	2310      	movs	r3, #16
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800603a:	e106      	b.n	800624a <UART_SetConfig+0x2fe>
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a7c      	ldr	r2, [pc, #496]	@ (8006234 <UART_SetConfig+0x2e8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d138      	bne.n	80060b8 <UART_SetConfig+0x16c>
 8006046:	4b7a      	ldr	r3, [pc, #488]	@ (8006230 <UART_SetConfig+0x2e4>)
 8006048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604c:	f003 030c 	and.w	r3, r3, #12
 8006050:	2b0c      	cmp	r3, #12
 8006052:	d82d      	bhi.n	80060b0 <UART_SetConfig+0x164>
 8006054:	a201      	add	r2, pc, #4	@ (adr r2, 800605c <UART_SetConfig+0x110>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006091 	.word	0x08006091
 8006060:	080060b1 	.word	0x080060b1
 8006064:	080060b1 	.word	0x080060b1
 8006068:	080060b1 	.word	0x080060b1
 800606c:	080060a1 	.word	0x080060a1
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060b1 	.word	0x080060b1
 8006078:	080060b1 	.word	0x080060b1
 800607c:	08006099 	.word	0x08006099
 8006080:	080060b1 	.word	0x080060b1
 8006084:	080060b1 	.word	0x080060b1
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060a9 	.word	0x080060a9
 8006090:	2300      	movs	r3, #0
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006096:	e0d8      	b.n	800624a <UART_SetConfig+0x2fe>
 8006098:	2302      	movs	r3, #2
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e0d4      	b.n	800624a <UART_SetConfig+0x2fe>
 80060a0:	2304      	movs	r3, #4
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e0d0      	b.n	800624a <UART_SetConfig+0x2fe>
 80060a8:	2308      	movs	r3, #8
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	e0cc      	b.n	800624a <UART_SetConfig+0x2fe>
 80060b0:	2310      	movs	r3, #16
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	e0c8      	b.n	800624a <UART_SetConfig+0x2fe>
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a5e      	ldr	r2, [pc, #376]	@ (8006238 <UART_SetConfig+0x2ec>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d125      	bne.n	800610e <UART_SetConfig+0x1c2>
 80060c2:	4b5b      	ldr	r3, [pc, #364]	@ (8006230 <UART_SetConfig+0x2e4>)
 80060c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060cc:	2b30      	cmp	r3, #48	@ 0x30
 80060ce:	d016      	beq.n	80060fe <UART_SetConfig+0x1b2>
 80060d0:	2b30      	cmp	r3, #48	@ 0x30
 80060d2:	d818      	bhi.n	8006106 <UART_SetConfig+0x1ba>
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d00a      	beq.n	80060ee <UART_SetConfig+0x1a2>
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d814      	bhi.n	8006106 <UART_SetConfig+0x1ba>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <UART_SetConfig+0x19a>
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d008      	beq.n	80060f6 <UART_SetConfig+0x1aa>
 80060e4:	e00f      	b.n	8006106 <UART_SetConfig+0x1ba>
 80060e6:	2300      	movs	r3, #0
 80060e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ec:	e0ad      	b.n	800624a <UART_SetConfig+0x2fe>
 80060ee:	2302      	movs	r3, #2
 80060f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f4:	e0a9      	b.n	800624a <UART_SetConfig+0x2fe>
 80060f6:	2304      	movs	r3, #4
 80060f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060fc:	e0a5      	b.n	800624a <UART_SetConfig+0x2fe>
 80060fe:	2308      	movs	r3, #8
 8006100:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006104:	e0a1      	b.n	800624a <UART_SetConfig+0x2fe>
 8006106:	2310      	movs	r3, #16
 8006108:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800610c:	e09d      	b.n	800624a <UART_SetConfig+0x2fe>
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a4a      	ldr	r2, [pc, #296]	@ (800623c <UART_SetConfig+0x2f0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d125      	bne.n	8006164 <UART_SetConfig+0x218>
 8006118:	4b45      	ldr	r3, [pc, #276]	@ (8006230 <UART_SetConfig+0x2e4>)
 800611a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006122:	2bc0      	cmp	r3, #192	@ 0xc0
 8006124:	d016      	beq.n	8006154 <UART_SetConfig+0x208>
 8006126:	2bc0      	cmp	r3, #192	@ 0xc0
 8006128:	d818      	bhi.n	800615c <UART_SetConfig+0x210>
 800612a:	2b80      	cmp	r3, #128	@ 0x80
 800612c:	d00a      	beq.n	8006144 <UART_SetConfig+0x1f8>
 800612e:	2b80      	cmp	r3, #128	@ 0x80
 8006130:	d814      	bhi.n	800615c <UART_SetConfig+0x210>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <UART_SetConfig+0x1f0>
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	d008      	beq.n	800614c <UART_SetConfig+0x200>
 800613a:	e00f      	b.n	800615c <UART_SetConfig+0x210>
 800613c:	2300      	movs	r3, #0
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006142:	e082      	b.n	800624a <UART_SetConfig+0x2fe>
 8006144:	2302      	movs	r3, #2
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614a:	e07e      	b.n	800624a <UART_SetConfig+0x2fe>
 800614c:	2304      	movs	r3, #4
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006152:	e07a      	b.n	800624a <UART_SetConfig+0x2fe>
 8006154:	2308      	movs	r3, #8
 8006156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800615a:	e076      	b.n	800624a <UART_SetConfig+0x2fe>
 800615c:	2310      	movs	r3, #16
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006162:	e072      	b.n	800624a <UART_SetConfig+0x2fe>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a35      	ldr	r2, [pc, #212]	@ (8006240 <UART_SetConfig+0x2f4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d12a      	bne.n	80061c4 <UART_SetConfig+0x278>
 800616e:	4b30      	ldr	r3, [pc, #192]	@ (8006230 <UART_SetConfig+0x2e4>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800617c:	d01a      	beq.n	80061b4 <UART_SetConfig+0x268>
 800617e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006182:	d81b      	bhi.n	80061bc <UART_SetConfig+0x270>
 8006184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006188:	d00c      	beq.n	80061a4 <UART_SetConfig+0x258>
 800618a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800618e:	d815      	bhi.n	80061bc <UART_SetConfig+0x270>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <UART_SetConfig+0x250>
 8006194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006198:	d008      	beq.n	80061ac <UART_SetConfig+0x260>
 800619a:	e00f      	b.n	80061bc <UART_SetConfig+0x270>
 800619c:	2300      	movs	r3, #0
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a2:	e052      	b.n	800624a <UART_SetConfig+0x2fe>
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061aa:	e04e      	b.n	800624a <UART_SetConfig+0x2fe>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b2:	e04a      	b.n	800624a <UART_SetConfig+0x2fe>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	e046      	b.n	800624a <UART_SetConfig+0x2fe>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c2:	e042      	b.n	800624a <UART_SetConfig+0x2fe>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <UART_SetConfig+0x2dc>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d13a      	bne.n	8006244 <UART_SetConfig+0x2f8>
 80061ce:	4b18      	ldr	r3, [pc, #96]	@ (8006230 <UART_SetConfig+0x2e4>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061dc:	d01a      	beq.n	8006214 <UART_SetConfig+0x2c8>
 80061de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061e2:	d81b      	bhi.n	800621c <UART_SetConfig+0x2d0>
 80061e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e8:	d00c      	beq.n	8006204 <UART_SetConfig+0x2b8>
 80061ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ee:	d815      	bhi.n	800621c <UART_SetConfig+0x2d0>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <UART_SetConfig+0x2b0>
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f8:	d008      	beq.n	800620c <UART_SetConfig+0x2c0>
 80061fa:	e00f      	b.n	800621c <UART_SetConfig+0x2d0>
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006202:	e022      	b.n	800624a <UART_SetConfig+0x2fe>
 8006204:	2302      	movs	r3, #2
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800620a:	e01e      	b.n	800624a <UART_SetConfig+0x2fe>
 800620c:	2304      	movs	r3, #4
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006212:	e01a      	b.n	800624a <UART_SetConfig+0x2fe>
 8006214:	2308      	movs	r3, #8
 8006216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621a:	e016      	b.n	800624a <UART_SetConfig+0x2fe>
 800621c:	2310      	movs	r3, #16
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006222:	e012      	b.n	800624a <UART_SetConfig+0x2fe>
 8006224:	cfff69f3 	.word	0xcfff69f3
 8006228:	40008000 	.word	0x40008000
 800622c:	40013800 	.word	0x40013800
 8006230:	40021000 	.word	0x40021000
 8006234:	40004400 	.word	0x40004400
 8006238:	40004800 	.word	0x40004800
 800623c:	40004c00 	.word	0x40004c00
 8006240:	40005000 	.word	0x40005000
 8006244:	2310      	movs	r3, #16
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4aae      	ldr	r2, [pc, #696]	@ (8006508 <UART_SetConfig+0x5bc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	f040 8097 	bne.w	8006384 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006256:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800625a:	2b08      	cmp	r3, #8
 800625c:	d823      	bhi.n	80062a6 <UART_SetConfig+0x35a>
 800625e:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <UART_SetConfig+0x318>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006289 	.word	0x08006289
 8006268:	080062a7 	.word	0x080062a7
 800626c:	08006291 	.word	0x08006291
 8006270:	080062a7 	.word	0x080062a7
 8006274:	08006297 	.word	0x08006297
 8006278:	080062a7 	.word	0x080062a7
 800627c:	080062a7 	.word	0x080062a7
 8006280:	080062a7 	.word	0x080062a7
 8006284:	0800629f 	.word	0x0800629f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006288:	f7fd fe8a 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 800628c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800628e:	e010      	b.n	80062b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006290:	4b9e      	ldr	r3, [pc, #632]	@ (800650c <UART_SetConfig+0x5c0>)
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006294:	e00d      	b.n	80062b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006296:	f7fd fdeb 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 800629a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800629c:	e009      	b.n	80062b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80062a4:	e005      	b.n	80062b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80062b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8130 	beq.w	800651a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062be:	4a94      	ldr	r2, [pc, #592]	@ (8006510 <UART_SetConfig+0x5c4>)
 80062c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d305      	bcc.n	80062ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d903      	bls.n	80062f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80062f0:	e113      	b.n	800651a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	2200      	movs	r2, #0
 80062f6:	60bb      	str	r3, [r7, #8]
 80062f8:	60fa      	str	r2, [r7, #12]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	4a84      	ldr	r2, [pc, #528]	@ (8006510 <UART_SetConfig+0x5c4>)
 8006300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006304:	b29b      	uxth	r3, r3
 8006306:	2200      	movs	r2, #0
 8006308:	603b      	str	r3, [r7, #0]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006310:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006314:	f7f9 ff72 	bl	80001fc <__aeabi_uldivmod>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4610      	mov	r0, r2
 800631e:	4619      	mov	r1, r3
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	020b      	lsls	r3, r1, #8
 800632a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800632e:	0202      	lsls	r2, r0, #8
 8006330:	6979      	ldr	r1, [r7, #20]
 8006332:	6849      	ldr	r1, [r1, #4]
 8006334:	0849      	lsrs	r1, r1, #1
 8006336:	2000      	movs	r0, #0
 8006338:	460c      	mov	r4, r1
 800633a:	4605      	mov	r5, r0
 800633c:	eb12 0804 	adds.w	r8, r2, r4
 8006340:	eb43 0905 	adc.w	r9, r3, r5
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	469a      	mov	sl, r3
 800634c:	4693      	mov	fp, r2
 800634e:	4652      	mov	r2, sl
 8006350:	465b      	mov	r3, fp
 8006352:	4640      	mov	r0, r8
 8006354:	4649      	mov	r1, r9
 8006356:	f7f9 ff51 	bl	80001fc <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4613      	mov	r3, r2
 8006360:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006368:	d308      	bcc.n	800637c <UART_SetConfig+0x430>
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006370:	d204      	bcs.n	800637c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a3a      	ldr	r2, [r7, #32]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e0ce      	b.n	800651a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006382:	e0ca      	b.n	800651a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800638c:	d166      	bne.n	800645c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800638e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006392:	2b08      	cmp	r3, #8
 8006394:	d827      	bhi.n	80063e6 <UART_SetConfig+0x49a>
 8006396:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <UART_SetConfig+0x450>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063c1 	.word	0x080063c1
 80063a0:	080063c9 	.word	0x080063c9
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063e7 	.word	0x080063e7
 80063ac:	080063d7 	.word	0x080063d7
 80063b0:	080063e7 	.word	0x080063e7
 80063b4:	080063e7 	.word	0x080063e7
 80063b8:	080063e7 	.word	0x080063e7
 80063bc:	080063df 	.word	0x080063df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c0:	f7fd fdee 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 80063c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063c6:	e014      	b.n	80063f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063c8:	f7fd fe00 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 80063cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063ce:	e010      	b.n	80063f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d0:	4b4e      	ldr	r3, [pc, #312]	@ (800650c <UART_SetConfig+0x5c0>)
 80063d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063d4:	e00d      	b.n	80063f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063d6:	f7fd fd4b 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 80063da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063dc:	e009      	b.n	80063f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063e4:	e005      	b.n	80063f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8090 	beq.w	800651a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	4a44      	ldr	r2, [pc, #272]	@ (8006510 <UART_SetConfig+0x5c4>)
 8006400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006404:	461a      	mov	r2, r3
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	fbb3 f3f2 	udiv	r3, r3, r2
 800640c:	005a      	lsls	r2, r3, #1
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	441a      	add	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d916      	bls.n	8006454 <UART_SetConfig+0x508>
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800642c:	d212      	bcs.n	8006454 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	b29b      	uxth	r3, r3
 8006432:	f023 030f 	bic.w	r3, r3, #15
 8006436:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	085b      	lsrs	r3, r3, #1
 800643c:	b29b      	uxth	r3, r3
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	b29a      	uxth	r2, r3
 8006444:	8bfb      	ldrh	r3, [r7, #30]
 8006446:	4313      	orrs	r3, r2
 8006448:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	8bfa      	ldrh	r2, [r7, #30]
 8006450:	60da      	str	r2, [r3, #12]
 8006452:	e062      	b.n	800651a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800645a:	e05e      	b.n	800651a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800645c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006460:	2b08      	cmp	r3, #8
 8006462:	d828      	bhi.n	80064b6 <UART_SetConfig+0x56a>
 8006464:	a201      	add	r2, pc, #4	@ (adr r2, 800646c <UART_SetConfig+0x520>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	080064b7 	.word	0x080064b7
 800647c:	080064a7 	.word	0x080064a7
 8006480:	080064b7 	.word	0x080064b7
 8006484:	080064b7 	.word	0x080064b7
 8006488:	080064b7 	.word	0x080064b7
 800648c:	080064af 	.word	0x080064af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006490:	f7fd fd86 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 8006494:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006496:	e014      	b.n	80064c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006498:	f7fd fd98 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800649e:	e010      	b.n	80064c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a0:	4b1a      	ldr	r3, [pc, #104]	@ (800650c <UART_SetConfig+0x5c0>)
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064a4:	e00d      	b.n	80064c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064a6:	f7fd fce3 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 80064aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064ac:	e009      	b.n	80064c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064b4:	e005      	b.n	80064c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064c0:	bf00      	nop
    }

    if (pclk != 0U)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d028      	beq.n	800651a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	4a10      	ldr	r2, [pc, #64]	@ (8006510 <UART_SetConfig+0x5c4>)
 80064ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d2:	461a      	mov	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	441a      	add	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b0f      	cmp	r3, #15
 80064f0:	d910      	bls.n	8006514 <UART_SetConfig+0x5c8>
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f8:	d20c      	bcs.n	8006514 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	e009      	b.n	800651a <UART_SetConfig+0x5ce>
 8006506:	bf00      	nop
 8006508:	40008000 	.word	0x40008000
 800650c:	00f42400 	.word	0x00f42400
 8006510:	08006c40 	.word	0x08006c40
      }
      else
      {
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2201      	movs	r2, #1
 800651e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2201      	movs	r2, #1
 8006526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2200      	movs	r2, #0
 800652e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2200      	movs	r2, #0
 8006534:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006536:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800653a:	4618      	mov	r0, r3
 800653c:	3730      	adds	r7, #48	@ 0x30
 800653e:	46bd      	mov	sp, r7
 8006540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00a      	beq.n	800656e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01a      	beq.n	800665a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800663e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006642:	d10a      	bne.n	800665a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b098      	sub	sp, #96	@ 0x60
 800668c:	af02      	add	r7, sp, #8
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006698:	f7fa ff78 	bl	800158c <HAL_GetTick>
 800669c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d12f      	bne.n	800670c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b4:	2200      	movs	r2, #0
 80066b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f88e 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d022      	beq.n	800670c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	e853 3f00 	ldrex	r3, [r3]
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066da:	653b      	str	r3, [r7, #80]	@ 0x50
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e6      	bne.n	80066c6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e063      	b.n	80067d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d149      	bne.n	80067ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800671a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006722:	2200      	movs	r2, #0
 8006724:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f857 	bl	80067dc <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d03c      	beq.n	80067ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	623b      	str	r3, [r7, #32]
   return(result);
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006752:	633b      	str	r3, [r7, #48]	@ 0x30
 8006754:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e6      	bne.n	8006734 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	60fb      	str	r3, [r7, #12]
   return(result);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3308      	adds	r3, #8
 8006784:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006786:	61fa      	str	r2, [r7, #28]
 8006788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	69b9      	ldr	r1, [r7, #24]
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	617b      	str	r3, [r7, #20]
   return(result);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e5      	bne.n	8006766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e012      	b.n	80067d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3758      	adds	r7, #88	@ 0x58
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ec:	e04f      	b.n	800688e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d04b      	beq.n	800688e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f6:	f7fa fec9 	bl	800158c <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	429a      	cmp	r2, r3
 8006804:	d302      	bcc.n	800680c <UART_WaitOnFlagUntilTimeout+0x30>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e04e      	b.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	d037      	beq.n	800688e <UART_WaitOnFlagUntilTimeout+0xb2>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b80      	cmp	r3, #128	@ 0x80
 8006822:	d034      	beq.n	800688e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b40      	cmp	r3, #64	@ 0x40
 8006828:	d031      	beq.n	800688e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b08      	cmp	r3, #8
 8006836:	d110      	bne.n	800685a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2208      	movs	r2, #8
 800683e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f838 	bl	80068b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2208      	movs	r2, #8
 800684a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e029      	b.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006868:	d111      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f81e 	bl	80068b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e00f      	b.n	80068ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69da      	ldr	r2, [r3, #28]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	bf0c      	ite	eq
 800689e:	2301      	moveq	r3, #1
 80068a0:	2300      	movne	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d0a0      	beq.n	80067ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b095      	sub	sp, #84	@ 0x54
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80068de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3308      	adds	r3, #8
 8006912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800691a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e3      	bne.n	80068f0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d118      	bne.n	8006962 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	60bb      	str	r3, [r7, #8]
   return(result);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f023 0310 	bic.w	r3, r3, #16
 8006944:	647b      	str	r3, [r7, #68]	@ 0x44
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6979      	ldr	r1, [r7, #20]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	613b      	str	r3, [r7, #16]
   return(result);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e6      	bne.n	8006930 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006976:	bf00      	nop
 8006978:	3754      	adds	r7, #84	@ 0x54
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_UARTEx_DisableFifoMode+0x16>
 8006994:	2302      	movs	r3, #2
 8006996:	e027      	b.n	80069e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2224      	movs	r2, #36	@ 0x24
 80069a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80069c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e02d      	b.n	8006a68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2224      	movs	r2, #36	@ 0x24
 8006a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0201 	bic.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f84f 	bl	8006aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e02d      	b.n	8006ae4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2224      	movs	r2, #36	@ 0x24
 8006a94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f811 	bl	8006aec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d108      	bne.n	8006b0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b0c:	e031      	b.n	8006b72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b0e:	2308      	movs	r3, #8
 8006b10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b12:	2308      	movs	r3, #8
 8006b14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	0e5b      	lsrs	r3, r3, #25
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	0f5b      	lsrs	r3, r3, #29
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	7b3a      	ldrb	r2, [r7, #12]
 8006b3a:	4911      	ldr	r1, [pc, #68]	@ (8006b80 <UARTEx_SetNbDataToProcess+0x94>)
 8006b3c:	5c8a      	ldrb	r2, [r1, r2]
 8006b3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b42:	7b3a      	ldrb	r2, [r7, #12]
 8006b44:	490f      	ldr	r1, [pc, #60]	@ (8006b84 <UARTEx_SetNbDataToProcess+0x98>)
 8006b46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b48:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	7b7a      	ldrb	r2, [r7, #13]
 8006b58:	4909      	ldr	r1, [pc, #36]	@ (8006b80 <UARTEx_SetNbDataToProcess+0x94>)
 8006b5a:	5c8a      	ldrb	r2, [r1, r2]
 8006b5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b60:	7b7a      	ldrb	r2, [r7, #13]
 8006b62:	4908      	ldr	r1, [pc, #32]	@ (8006b84 <UARTEx_SetNbDataToProcess+0x98>)
 8006b64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b66:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	08006c58 	.word	0x08006c58
 8006b84:	08006c60 	.word	0x08006c60

08006b88 <memset>:
 8006b88:	4402      	add	r2, r0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d100      	bne.n	8006b92 <memset+0xa>
 8006b90:	4770      	bx	lr
 8006b92:	f803 1b01 	strb.w	r1, [r3], #1
 8006b96:	e7f9      	b.n	8006b8c <memset+0x4>

08006b98 <__libc_init_array>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006bd0 <__libc_init_array+0x38>)
 8006b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006bd4 <__libc_init_array+0x3c>)
 8006b9e:	1b64      	subs	r4, r4, r5
 8006ba0:	10a4      	asrs	r4, r4, #2
 8006ba2:	2600      	movs	r6, #0
 8006ba4:	42a6      	cmp	r6, r4
 8006ba6:	d109      	bne.n	8006bbc <__libc_init_array+0x24>
 8006ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8006bd8 <__libc_init_array+0x40>)
 8006baa:	4c0c      	ldr	r4, [pc, #48]	@ (8006bdc <__libc_init_array+0x44>)
 8006bac:	f000 f818 	bl	8006be0 <_init>
 8006bb0:	1b64      	subs	r4, r4, r5
 8006bb2:	10a4      	asrs	r4, r4, #2
 8006bb4:	2600      	movs	r6, #0
 8006bb6:	42a6      	cmp	r6, r4
 8006bb8:	d105      	bne.n	8006bc6 <__libc_init_array+0x2e>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bc0:	4798      	blx	r3
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7ee      	b.n	8006ba4 <__libc_init_array+0xc>
 8006bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bca:	4798      	blx	r3
 8006bcc:	3601      	adds	r6, #1
 8006bce:	e7f2      	b.n	8006bb6 <__libc_init_array+0x1e>
 8006bd0:	08006c70 	.word	0x08006c70
 8006bd4:	08006c70 	.word	0x08006c70
 8006bd8:	08006c70 	.word	0x08006c70
 8006bdc:	08006c74 	.word	0x08006c74

08006be0 <_init>:
 8006be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be2:	bf00      	nop
 8006be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006be6:	bc08      	pop	{r3}
 8006be8:	469e      	mov	lr, r3
 8006bea:	4770      	bx	lr

08006bec <_fini>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr
