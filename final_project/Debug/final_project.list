
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080068ac  080068ac  000078ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800691c  0800691c  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800691c  0800691c  0000791c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006924  08006924  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006924  08006924  00007924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006928  08006928  00007928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800692c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016bc0  2000000c  08006938  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016bcc  08006938  00008bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a43b  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ece  00000000  00000000  00022477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00025348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001229  00000000  00000000  00026a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c54d  00000000  00000000  00027c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2ab  00000000  00000000  000541d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112970  00000000  00000000  0006f481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181df1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063a4  00000000  00000000  00181e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001881d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006894 	.word	0x08006894

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006894 	.word	0x08006894

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_GPIO_EXTI_Callback>:




//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == B_BUTTON_Pin) {
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000538:	d12e      	bne.n	8000598 <HAL_GPIO_EXTI_Callback+0x70>
        // Check if the button is pressed
        if (HAL_GPIO_ReadPin(B_BUTTON_GPIO_Port, B_BUTTON_Pin) == GPIO_PIN_SET) {
 800053a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053e:	4818      	ldr	r0, [pc, #96]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000540:	f002 fbee 	bl	8002d20 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b01      	cmp	r3, #1
 8000548:	d126      	bne.n	8000598 <HAL_GPIO_EXTI_Callback+0x70>

            if (isRecording) {
 800054a:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d00b      	beq.n	800056a <HAL_GPIO_EXTI_Callback+0x42>
                // Stop the current recording before starting a new one
                HAL_DFSDM_FilterRegularStop(&hdfsdm1_filter0);
 8000552:	4815      	ldr	r0, [pc, #84]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000554:	f001 fe1b 	bl	800218e <HAL_DFSDM_FilterRegularStop>
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800055e:	4813      	ldr	r0, [pc, #76]	@ (80005ac <HAL_GPIO_EXTI_Callback+0x84>)
 8000560:	f002 fbf6 	bl	8002d50 <HAL_GPIO_WritePin>
                isRecording = 0;
 8000564:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
            }



            // Start a new recording
            HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE);
 800056a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800056e:	4910      	ldr	r1, [pc, #64]	@ (80005b0 <HAL_GPIO_EXTI_Callback+0x88>)
 8000570:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000572:	f001 fe27 	bl	80021c4 <HAL_DFSDM_FilterRegularStart_DMA>
            HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_SET); // Indicate recording is in progress
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057c:	480b      	ldr	r0, [pc, #44]	@ (80005ac <HAL_GPIO_EXTI_Callback+0x84>)
 800057e:	f002 fbe7 	bl	8002d50 <HAL_GPIO_WritePin>
            recordingStartTime = HAL_GetTick();  // Record the time the recording started
 8000582:	f001 f801 	bl	8001588 <HAL_GetTick>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0a      	ldr	r2, [pc, #40]	@ (80005b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800058a:	6013      	str	r3, [r2, #0]
            isRecording = 1;
 800058c:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]

            HAL_TIM_Base_Start_IT(&htim2);  // Start the timer interrupt
 8000592:	4809      	ldr	r0, [pc, #36]	@ (80005b8 <HAL_GPIO_EXTI_Callback+0x90>)
 8000594:	f004 fa4a 	bl	8004a2c <HAL_TIM_Base_Start_IT>
//        HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint16_t*)sineWave, SAMPLE_COUNT, DAC_ALIGN_12B_R);


	}
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	48000800 	.word	0x48000800
 80005a4:	20001310 	.word	0x20001310
 80005a8:	2000009c 	.word	0x2000009c
 80005ac:	48000400 	.word	0x48000400
 80005b0:	20000308 	.word	0x20000308
 80005b4:	2000130c 	.word	0x2000130c
 80005b8:	200001dc 	.word	0x200001dc

080005bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    // Check if 5 seconds have passed
    if (isRecording && (HAL_GetTick() - recordingStartTime) >= RECORDING_TIME) {
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d015      	beq.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
 80005cc:	f000 ffdc 	bl	8001588 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80005dc:	4293      	cmp	r3, r2
 80005de:	d90b      	bls.n	80005f8 <HAL_TIM_PeriodElapsedCallback+0x3c>
        // Stop recording after 5 seconds
        HAL_DFSDM_FilterRegularStop(&hdfsdm1_filter0);
 80005e0:	4809      	ldr	r0, [pc, #36]	@ (8000608 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005e2:	f001 fdd4 	bl	800218e <HAL_DFSDM_FilterRegularStop>
        // Toggle LED to indicate recording has stopped
        HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ec:	4807      	ldr	r0, [pc, #28]	@ (800060c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005ee:	f002 fbaf 	bl	8002d50 <HAL_GPIO_WritePin>
        isRecording = 0;
 80005f2:	4b03      	ldr	r3, [pc, #12]	@ (8000600 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
    }
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20001310 	.word	0x20001310
 8000604:	2000130c 	.word	0x2000130c
 8000608:	2000009c 	.word	0x2000009c
 800060c:	48000400 	.word	0x48000400

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	uint16_t i = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 ff4c 	bl	80014b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f871 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 fb13 	bl	8000c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000626:	f000 fadf 	bl	8000be8 <MX_DMA_Init>
  MX_I2C2_Init();
 800062a:	f000 f963 	bl	80008f4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800062e:	f000 fa8f 	bl	8000b50 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000632:	f000 f99f 	bl	8000974 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000636:	f000 f8f7 	bl	8000828 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 800063a:	f000 f8b5 	bl	80007a8 <MX_DAC1_Init>
  MX_TIM3_Init();
 800063e:	f000 fa0f 	bl	8000a60 <MX_TIM3_Init>


  //HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE);
//  generateSineWave(1975.53f);
//
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) speakerWave, SAMPLE_COUNT, DAC_ALIGN_12B_R);
 8000642:	2300      	movs	r3, #0
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800064a:	4a28      	ldr	r2, [pc, #160]	@ (80006ec <main+0xdc>)
 800064c:	2100      	movs	r1, #0
 800064e:	4828      	ldr	r0, [pc, #160]	@ (80006f0 <main+0xe0>)
 8000650:	f001 f8fe 	bl	8001850 <HAL_DAC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 8000654:	4827      	ldr	r0, [pc, #156]	@ (80006f4 <main+0xe4>)
 8000656:	f004 f9e9 	bl	8004a2c <HAL_TIM_Base_Start_IT>
	    // the DFSDM module, captures the PDM data. which is 32bits. However, it is converted
	  	// to 16-bit SIGNED PCM format, where the microphone outputs data in 2's complement.

	    //So the RecBuf contains the PCM audio samples

	  if (DmaRecHalfBuffCplt == 1) {
 800065a:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <main+0xe8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d11e      	bne.n	80006a0 <main+0x90>
	      for (i = 0; i < AUDIO_BUFFER_SIZE / 2; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	82fb      	strh	r3, [r7, #22]
 8000666:	e014      	b.n	8000692 <main+0x82>
	          int32_t sample24 = RecBuf[i] >> 8;      // Convert to 24-bit signed
 8000668:	8afb      	ldrh	r3, [r7, #22]
 800066a:	4a24      	ldr	r2, [pc, #144]	@ (80006fc <main+0xec>)
 800066c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000670:	121b      	asrs	r3, r3, #8
 8000672:	613b      	str	r3, [r7, #16]
	          int16_t sample12 = sample24 >> 12;      // Extract top 12 bits
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	131b      	asrs	r3, r3, #12
 8000678:	81fb      	strh	r3, [r7, #14]
	          uint16_t dacValue = (uint16_t)(sample12 + 2048); // Convert signed to unsigned
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000680:	81bb      	strh	r3, [r7, #12]
	          speakerWave[i] = dacValue;
 8000682:	8afb      	ldrh	r3, [r7, #22]
 8000684:	4919      	ldr	r1, [pc, #100]	@ (80006ec <main+0xdc>)
 8000686:	89ba      	ldrh	r2, [r7, #12]
 8000688:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	      for (i = 0; i < AUDIO_BUFFER_SIZE / 2; i++) {
 800068c:	8afb      	ldrh	r3, [r7, #22]
 800068e:	3301      	adds	r3, #1
 8000690:	82fb      	strh	r3, [r7, #22]
 8000692:	8afb      	ldrh	r3, [r7, #22]
 8000694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000698:	d3e6      	bcc.n	8000668 <main+0x58>
	          //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacValue);
	      }
	      DmaRecHalfBuffCplt = 0;
 800069a:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <main+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	  }

	  if (DmaRecBuffCplt == 1) {
 80006a0:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <main+0xf0>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d1d8      	bne.n	800065a <main+0x4a>
	      for (i = AUDIO_BUFFER_SIZE / 2; i < AUDIO_BUFFER_SIZE; i++) {
 80006a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006ac:	82fb      	strh	r3, [r7, #22]
 80006ae:	e014      	b.n	80006da <main+0xca>
	          int32_t sample24 = RecBuf[i] >> 8;
 80006b0:	8afb      	ldrh	r3, [r7, #22]
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <main+0xec>)
 80006b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b8:	121b      	asrs	r3, r3, #8
 80006ba:	60bb      	str	r3, [r7, #8]
	          int16_t sample12 = sample24 >> 12;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	131b      	asrs	r3, r3, #12
 80006c0:	80fb      	strh	r3, [r7, #6]
	          uint16_t dacValue = (uint16_t)(sample12 + 2048);
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80006c8:	80bb      	strh	r3, [r7, #4]
	          speakerWave[i] = dacValue;
 80006ca:	8afb      	ldrh	r3, [r7, #22]
 80006cc:	4907      	ldr	r1, [pc, #28]	@ (80006ec <main+0xdc>)
 80006ce:	88ba      	ldrh	r2, [r7, #4]
 80006d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	      for (i = AUDIO_BUFFER_SIZE / 2; i < AUDIO_BUFFER_SIZE; i++) {
 80006d4:	8afb      	ldrh	r3, [r7, #22]
 80006d6:	3301      	adds	r3, #1
 80006d8:	82fb      	strh	r3, [r7, #22]
 80006da:	8afb      	ldrh	r3, [r7, #22]
 80006dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006e0:	d3e6      	bcc.n	80006b0 <main+0xa0>
	      }
	      DmaRecBuffCplt = 0;
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <main+0xf0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	  if (DmaRecHalfBuffCplt == 1) {
 80006e8:	e7b7      	b.n	800065a <main+0x4a>
 80006ea:	bf00      	nop
 80006ec:	20001314 	.word	0x20001314
 80006f0:	20000028 	.word	0x20000028
 80006f4:	20000228 	.word	0x20000228
 80006f8:	20001308 	.word	0x20001308
 80006fc:	20000308 	.word	0x20000308
 8000700:	20001309 	.word	0x20001309

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b096      	sub	sp, #88	@ 0x58
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2244      	movs	r2, #68	@ 0x44
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 f892 	bl	800683c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000726:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800072a:	f002 fc93 	bl	8003054 <HAL_PWREx_ControlVoltageScaling>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000734:	f000 fb1a 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000738:	2310      	movs	r3, #16
 800073a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000744:	2360      	movs	r3, #96	@ 0x60
 8000746:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800074c:	2301      	movs	r3, #1
 800074e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000754:	2328      	movs	r3, #40	@ 0x28
 8000756:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fd17 	bl	800319c <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000774:	f000 fafa 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2303      	movs	r3, #3
 800077e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	2103      	movs	r1, #3
 8000790:	4618      	mov	r0, r3
 8000792:	f003 f91d 	bl	80039d0 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800079c:	f000 fae6 	bl	8000d6c <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3758      	adds	r7, #88	@ 0x58
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2228      	movs	r2, #40	@ 0x28
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f006 f841 	bl	800683c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_DAC1_Init+0x78>)
 80007bc:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <MX_DAC1_Init+0x7c>)
 80007be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007c0:	4817      	ldr	r0, [pc, #92]	@ (8000820 <MX_DAC1_Init+0x78>)
 80007c2:	f001 f822 	bl	800180a <HAL_DAC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007cc:	f000 face 	bl	8000d6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80007d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007dc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	@ (8000820 <MX_DAC1_Init+0x78>)
 80007f2:	f001 f917 	bl	8001a24 <HAL_DAC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 fab6 	bl	8000d6c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	2210      	movs	r2, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <MX_DAC1_Init+0x78>)
 8000808:	f001 f90c 	bl	8001a24 <HAL_DAC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 faab 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3728      	adds	r7, #40	@ 0x28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000028 	.word	0x20000028
 8000824:	40007400 	.word	0x40007400

08000828 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 800082e:	4a2d      	ldr	r2, [pc, #180]	@ (80008e4 <MX_DFSDM1_Init+0xbc>)
 8000830:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000832:	4b2b      	ldr	r3, [pc, #172]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 800083a:	2201      	movs	r2, #1
 800083c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800083e:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 8000840:	2201      	movs	r2, #1
 8000842:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000844:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 8000846:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800084a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 406;
 800084c:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 800084e:	f44f 72cb 	mov.w	r2, #406	@ 0x196
 8000852:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 8000856:	2201      	movs	r2, #1
 8000858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 800085a:	4821      	ldr	r0, [pc, #132]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 800085c:	f001 fb78 	bl	8001f50 <HAL_DFSDM_FilterInit>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_DFSDM1_Init+0x42>
  {
    Error_Handler();
 8000866:	f000 fa81 	bl	8000d6c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 800086c:	4a1f      	ldr	r2, [pc, #124]	@ (80008ec <MX_DFSDM1_Init+0xc4>)
 800086e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 8000872:	2201      	movs	r2, #1
 8000874:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 25;
 800087c:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 800087e:	2219      	movs	r2, #25
 8000880:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 800089c:	2204      	movs	r2, #4
 800089e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80008b8:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <MX_DFSDM1_Init+0xc0>)
 80008ba:	f001 fa89 	bl	8001dd0 <HAL_DFSDM_ChannelInit>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_DFSDM1_Init+0xa0>
  {
    Error_Handler();
 80008c4:	f000 fa52 	bl	8000d6c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80008c8:	2201      	movs	r2, #1
 80008ca:	4909      	ldr	r1, [pc, #36]	@ (80008f0 <MX_DFSDM1_Init+0xc8>)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_DFSDM1_Init+0xb8>)
 80008ce:	f001 fc19 	bl	8002104 <HAL_DFSDM_FilterConfigRegChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_DFSDM1_Init+0xb4>
  {
    Error_Handler();
 80008d8:	f000 fa48 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000009c 	.word	0x2000009c
 80008e4:	40016100 	.word	0x40016100
 80008e8:	200000f0 	.word	0x200000f0
 80008ec:	40016040 	.word	0x40016040
 80008f0:	00020004 	.word	0x00020004

080008f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_I2C2_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <MX_I2C2_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <MX_I2C2_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_I2C2_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2C2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2C2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000930:	f002 fa3e 	bl	8002db0 <HAL_I2C_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800093a:	f000 fa17 	bl	8000d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000942:	f002 fad0 	bl	8002ee6 <HAL_I2CEx_ConfigAnalogFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800094c:	f000 fa0e 	bl	8000d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000950:	2100      	movs	r1, #0
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000954:	f002 fb12 	bl	8002f7c <HAL_I2CEx_ConfigDigitalFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800095e:	f000 fa05 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000188 	.word	0x20000188
 800096c:	40005800 	.word	0x40005800
 8000970:	10d19ce4 	.word	0x10d19ce4

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ae:	4b2b      	ldr	r3, [pc, #172]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009ba:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b24      	ldr	r3, [pc, #144]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ce:	4823      	ldr	r0, [pc, #140]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009d0:	f003 ffd4 	bl	800497c <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 f9c7 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e8:	4619      	mov	r1, r3
 80009ea:	481c      	ldr	r0, [pc, #112]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009ec:	f004 fb0a 	bl	8005004 <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009f6:	f000 f9b9 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009fa:	4818      	ldr	r0, [pc, #96]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 80009fc:	f004 f886 	bl	8004b0c <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a06:	f000 f9b1 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4810      	ldr	r0, [pc, #64]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 8000a1a:	f004 fffb 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a24:	f000 f9a2 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	@ 0x60
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 8000a40:	f004 f9cc 	bl	8004ddc <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a4a:	f000 f98f 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a4e:	4803      	ldr	r0, [pc, #12]	@ (8000a5c <MX_TIM2_Init+0xe8>)
 8000a50:	f000 fbde 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3738      	adds	r7, #56	@ 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200001dc 	.word	0x200001dc

08000a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a92:	4b2d      	ldr	r3, [pc, #180]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000a94:	4a2d      	ldr	r2, [pc, #180]	@ (8000b4c <MX_TIM3_Init+0xec>)
 8000a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = SYSTEM_FREQ / SAMPLE_RATE;
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aa6:	f640 22a1 	movw	r2, #2721	@ 0xaa1
 8000aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ab8:	4823      	ldr	r0, [pc, #140]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000aba:	f003 ff5f 	bl	800497c <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ac4:	f000 f952 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481c      	ldr	r0, [pc, #112]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000ad6:	f004 fa95 	bl	8005004 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ae0:	f000 f944 	bl	8000d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ae4:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000ae6:	f004 f811 	bl	8004b0c <HAL_TIM_PWM_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000af0:	f000 f93c 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	4811      	ldr	r0, [pc, #68]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000b04:	f004 ff86 	bl	8005a14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b0e:	f000 f92d 	bl	8000d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b12:	2360      	movs	r3, #96	@ 0x60
 8000b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	2204      	movs	r2, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4807      	ldr	r0, [pc, #28]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000b2a:	f004 f957 	bl	8004ddc <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b34:	f000 f91a 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <MX_TIM3_Init+0xe8>)
 8000b3a:	f000 fb69 	bl	8001210 <HAL_TIM_MspPostInit>

}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	@ 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000228 	.word	0x20000228
 8000b4c:	40000400 	.word	0x40000400

08000b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b54:	4b22      	ldr	r3, [pc, #136]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	@ (8000be4 <MX_USART1_UART_Init+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b98:	4811      	ldr	r0, [pc, #68]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000b9a:	f004 ffe1 	bl	8005b60 <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 f8e2 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	480d      	ldr	r0, [pc, #52]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000bac:	f005 fd7c 	bl	80066a8 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bb6:	f000 f8d9 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4808      	ldr	r0, [pc, #32]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000bbe:	f005 fdb1 	bl	8006724 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc8:	f000 f8d0 	bl	8000d6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <MX_USART1_UART_Init+0x90>)
 8000bce:	f005 fd32 	bl	8006636 <HAL_UARTEx_DisableFifoMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 f8c8 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000274 	.word	0x20000274
 8000be4:	40013800 	.word	0x40013800

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_DMA_Init+0x60>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bf2:	4a15      	ldr	r2, [pc, #84]	@ (8000c48 <MX_DMA_Init+0x60>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000bfa:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <MX_DMA_Init+0x60>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_DMA_Init+0x60>)
 8000c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <MX_DMA_Init+0x60>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c12:	4b0d      	ldr	r3, [pc, #52]	@ (8000c48 <MX_DMA_Init+0x60>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	200b      	movs	r0, #11
 8000c24:	f000 fdbb 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c28:	200b      	movs	r0, #11
 8000c2a:	f000 fdd4 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	200c      	movs	r0, #12
 8000c34:	f000 fdb3 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c38:	200c      	movs	r0, #12
 8000c3a:	f000 fdcc 	bl	80017d6 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a2e      	ldr	r2, [pc, #184]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c68:	f043 0310 	orr.w	r3, r3, #16
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	4a28      	ldr	r2, [pc, #160]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a22      	ldr	r2, [pc, #136]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a1c      	ldr	r2, [pc, #112]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_GPIO_Init+0xd4>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cc8:	4816      	ldr	r0, [pc, #88]	@ (8000d24 <MX_GPIO_Init+0xd8>)
 8000cca:	f002 f841 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8000cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	@ (8000d28 <MX_GPIO_Init+0xdc>)
 8000ce6:	f001 fe89 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 8000cea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <MX_GPIO_Init+0xd8>)
 8000d04:	f001 fe7a 	bl	80029fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	2028      	movs	r0, #40	@ 0x28
 8000d0e:	f000 fd46 	bl	800179e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d12:	2028      	movs	r0, #40	@ 0x28
 8000d14:	f000 fd5f 	bl	80017d6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000400 	.word	0x48000400
 8000d28:	48000800 	.word	0x48000800

08000d2c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);

	DmaRecHalfBuffCplt=1;
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20001308 	.word	0x20001308

08000d4c <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);

	DmaRecBuffCplt=1;
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20001309 	.word	0x20001309

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_MspInit+0x44>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	603b      	str	r3, [r7, #0]
 8000dac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8000e8c <HAL_DAC_MspInit+0xcc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d14f      	bne.n	8000e82 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000de2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e90 <HAL_DAC_MspInit+0xd0>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e90 <HAL_DAC_MspInit+0xd0>)
 8000de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dee:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <HAL_DAC_MspInit+0xd0>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <HAL_DAC_MspInit+0xd0>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	4a24      	ldr	r2, [pc, #144]	@ (8000e90 <HAL_DAC_MspInit+0xd0>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e06:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <HAL_DAC_MspInit+0xd0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e12:	2330      	movs	r3, #48	@ 0x30
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	2303      	movs	r3, #3
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e28:	f001 fde8 	bl	80029fc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000e98 <HAL_DAC_MspInit+0xd8>)
 8000e30:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000e32:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e34:	2206      	movs	r2, #6
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e3a:	2210      	movs	r2, #16
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e52:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000e66:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e68:	f001 fb56 	bl	8002518 <HAL_DMA_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000e72:	f7ff ff7b 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <HAL_DAC_MspInit+0xd4>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40007400 	.word	0x40007400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	2000003c 	.word	0x2000003c
 8000e98:	4002001c 	.word	0x4002001c

08000e9c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2294      	movs	r2, #148	@ 0x94
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f005 fcbd 	bl	800683c <memset>
  if(DFSDM1_Init == 0)
 8000ec2:	4b45      	ldr	r3, [pc, #276]	@ (8000fd8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d14b      	bne.n	8000f62 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000eca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ece:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed6:	f107 0310 	add.w	r3, r7, #16
 8000eda:	4618      	mov	r0, r3
 8000edc:	f003 f836 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000ee6:	f7ff ff41 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000eea:	4b3c      	ldr	r3, [pc, #240]	@ (8000fdc <HAL_DFSDM_FilterMspInit+0x140>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4a3a      	ldr	r2, [pc, #232]	@ (8000fdc <HAL_DFSDM_FilterMspInit+0x140>)
 8000ef2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000ef4:	4b39      	ldr	r3, [pc, #228]	@ (8000fdc <HAL_DFSDM_FilterMspInit+0x140>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d10b      	bne.n	8000f14 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000efc:	4b38      	ldr	r3, [pc, #224]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f00:	4a37      	ldr	r2, [pc, #220]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f06:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f08:	4b35      	ldr	r3, [pc, #212]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f14:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a31      	ldr	r2, [pc, #196]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <HAL_DFSDM_FilterMspInit+0x144>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f2c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f46:	2306      	movs	r3, #6
 8000f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4824      	ldr	r0, [pc, #144]	@ (8000fe4 <HAL_DFSDM_FilterMspInit+0x148>)
 8000f54:	f001 fd52 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000f60:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a20      	ldr	r2, [pc, #128]	@ (8000fe8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d130      	bne.n	8000fce <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f6e:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <HAL_DFSDM_FilterMspInit+0x154>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f74:	2256      	movs	r2, #86	@ 0x56
 8000f76:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000fa6:	4811      	ldr	r0, [pc, #68]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000fa8:	f001 fab6 	bl	8002518 <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8000fb2:	f7ff fedb 	bl	8000d6c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000fba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fc8:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <HAL_DFSDM_FilterMspInit+0x150>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8000fce:	bf00      	nop
 8000fd0:	37b8      	adds	r7, #184	@ 0xb8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20016ba0 	.word	0x20016ba0
 8000fdc:	20016b9c 	.word	0x20016b9c
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48001000 	.word	0x48001000
 8000fe8:	40016100 	.word	0x40016100
 8000fec:	20000128 	.word	0x20000128
 8000ff0:	40020008 	.word	0x40020008

08000ff4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	2294      	movs	r2, #148	@ 0x94
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f005 fc11 	bl	800683c <memset>
  if(DFSDM1_Init == 0)
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d14b      	bne.n	80010ba <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001022:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001026:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4618      	mov	r0, r3
 8001034:	f002 ff8a 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800103e:	f7ff fe95 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001042:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a1f      	ldr	r2, [pc, #124]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800104a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800104c:	4b1e      	ldr	r3, [pc, #120]	@ (80010c8 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d10b      	bne.n	800106c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001054:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001058:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800105a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800105e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001060:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800106c:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001070:	4a16      	ldr	r2, [pc, #88]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <HAL_DFSDM_ChannelMspInit+0xd8>)
 800107a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001084:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001088:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800109e:	2306      	movs	r3, #6
 80010a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80010ac:	f001 fca6 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a03      	ldr	r2, [pc, #12]	@ (80010c4 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80010b8:	6013      	str	r3, [r2, #0]
  }

}
 80010ba:	bf00      	nop
 80010bc:	37b8      	adds	r7, #184	@ 0xb8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20016ba0 	.word	0x20016ba0
 80010c8:	20016b9c 	.word	0x20016b9c
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48001000 	.word	0x48001000

080010d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0ae      	sub	sp, #184	@ 0xb8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	2294      	movs	r2, #148	@ 0x94
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fba1 	bl	800683c <memset>
  if(hi2c->Instance==I2C2)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <HAL_I2C_MspInit+0xb0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d13b      	bne.n	800117c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4618      	mov	r0, r3
 8001112:	f002 ff1b 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800111c:	f7ff fe26 	bl	8000d6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001138:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800113c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	2312      	movs	r3, #18
 8001142:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001152:	2304      	movs	r3, #4
 8001154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800115c:	4619      	mov	r1, r3
 800115e:	480b      	ldr	r0, [pc, #44]	@ (800118c <HAL_I2C_MspInit+0xb8>)
 8001160:	f001 fc4c 	bl	80029fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	4a07      	ldr	r2, [pc, #28]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 800116a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800116e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_I2C_MspInit+0xb4>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800117c:	bf00      	nop
 800117e:	37b8      	adds	r7, #184	@ 0xb8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005800 	.word	0x40005800
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011a0:	d114      	bne.n	80011cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_TIM_Base_MspInit+0x78>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	4a18      	ldr	r2, [pc, #96]	@ (8001208 <HAL_TIM_Base_MspInit+0x78>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <HAL_TIM_Base_MspInit+0x78>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	201c      	movs	r0, #28
 80011c0:	f000 faed 	bl	800179e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011c4:	201c      	movs	r0, #28
 80011c6:	f000 fb06 	bl	80017d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011ca:	e018      	b.n	80011fe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0e      	ldr	r2, [pc, #56]	@ (800120c <HAL_TIM_Base_MspInit+0x7c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d113      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_TIM_Base_MspInit+0x78>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011da:	4a0b      	ldr	r2, [pc, #44]	@ (8001208 <HAL_TIM_Base_MspInit+0x78>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <HAL_TIM_Base_MspInit+0x78>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	201d      	movs	r0, #29
 80011f4:	f000 fad3 	bl	800179e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011f8:	201d      	movs	r0, #29
 80011fa:	f000 faec 	bl	80017d6 <HAL_NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	40000400 	.word	0x40000400

08001210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	@ 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001230:	d11d      	bne.n	800126e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <HAL_TIM_MspPostInit+0xa8>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4a20      	ldr	r2, [pc, #128]	@ (80012b8 <HAL_TIM_MspPostInit+0xa8>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4b1e      	ldr	r3, [pc, #120]	@ (80012b8 <HAL_TIM_MspPostInit+0xa8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001268:	f001 fbc8 	bl	80029fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800126c:	e020      	b.n	80012b0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <HAL_TIM_MspPostInit+0xac>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d11b      	bne.n	80012b0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_TIM_MspPostInit+0xa8>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_TIM_MspPostInit+0xa8>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_TIM_MspPostInit+0xa8>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f003 0310 	and.w	r3, r3, #16
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001290:	2310      	movs	r3, #16
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a0:	2302      	movs	r3, #2
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <HAL_TIM_MspPostInit+0xb0>)
 80012ac:	f001 fba6 	bl	80029fc <HAL_GPIO_Init>
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40000400 	.word	0x40000400
 80012c0:	48001000 	.word	0x48001000

080012c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0ae      	sub	sp, #184	@ 0xb8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2294      	movs	r2, #148	@ 0x94
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f005 faa9 	bl	800683c <memset>
  if(huart->Instance==USART1)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <HAL_UART_MspInit+0xb0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d13a      	bne.n	800136a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f8:	2300      	movs	r3, #0
 80012fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fe23 	bl	8003f4c <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800130c:	f7ff fd2e 	bl	8000d6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001310:	4b19      	ldr	r3, [pc, #100]	@ (8001378 <HAL_UART_MspInit+0xb4>)
 8001312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001314:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <HAL_UART_MspInit+0xb4>)
 8001316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800131a:	6613      	str	r3, [r2, #96]	@ 0x60
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <HAL_UART_MspInit+0xb4>)
 800131e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <HAL_UART_MspInit+0xb4>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_UART_MspInit+0xb4>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001334:	4b10      	ldr	r3, [pc, #64]	@ (8001378 <HAL_UART_MspInit+0xb4>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001340:	23c0      	movs	r3, #192	@ 0xc0
 8001342:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001358:	2307      	movs	r3, #7
 800135a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <HAL_UART_MspInit+0xb8>)
 8001366:	f001 fb49 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800136a:	bf00      	nop
 800136c:	37b8      	adds	r7, #184	@ 0xb8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40013800 	.word	0x40013800
 8001378:	40021000 	.word	0x40021000
 800137c:	48000400 	.word	0x48000400

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <NMI_Handler+0x4>

08001388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <MemManage_Handler+0x4>

08001398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <BusFault_Handler+0x4>

080013a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <UsageFault_Handler+0x4>

080013a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d6:	f000 f8c3 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80013e4:	4802      	ldr	r0, [pc, #8]	@ (80013f0 <DMA1_Channel1_IRQHandler+0x10>)
 80013e6:	f001 f9ba 	bl	800275e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000128 	.word	0x20000128

080013f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Channel2_IRQHandler+0x10>)
 80013fa:	f001 f9b0 	bl	800275e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000003c 	.word	0x2000003c

08001408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <TIM2_IRQHandler+0x10>)
 800140e:	f003 fbde 	bl	8004bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200001dc 	.word	0x200001dc

0800141c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <TIM3_IRQHandler+0x10>)
 8001422:	f003 fbd4 	bl	8004bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000228 	.word	0x20000228

08001430 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8001434:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001438:	f001 fca2 	bl	8002d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800149c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff ffea 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	@ (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	@ (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f005 f9db 	bl	800684c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001496:	f7ff f8bb 	bl	8000610 <main>

0800149a <LoopForever>:

LoopForever:
    b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800149c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014a8:	0800692c 	.word	0x0800692c
  ldr r2, =_sbss
 80014ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b0:	20016bcc 	.word	0x20016bcc

080014b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_IRQHandler>

080014b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f961 	bl	8001788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 f80e 	bl	80014e8 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	71fb      	strb	r3, [r7, #7]
 80014d6:	e001      	b.n	80014dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d8:	f7ff fc4e 	bl	8000d78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014dc:	79fb      	ldrb	r3, [r7, #7]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014f4:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_InitTick+0x6c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d023      	beq.n	8001544 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <HAL_InitTick+0x70>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <HAL_InitTick+0x6c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f96d 	bl	80017f2 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d809      	bhi.n	8001538 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f937 	bl	800179e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001530:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_InitTick+0x74>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e007      	b.n	8001548 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e004      	b.n	8001548 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e001      	b.n	8001548 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	20016ba4 	.word	0x20016ba4

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20016ba4 	.word	0x20016ba4

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_Delay+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	@ (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	@ (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	db0a      	blt.n	80016b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	490c      	ldr	r1, [pc, #48]	@ (80016d4 <__NVIC_SetPriority+0x4c>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	0112      	lsls	r2, r2, #4
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	440b      	add	r3, r1
 80016ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b0:	e00a      	b.n	80016c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4908      	ldr	r1, [pc, #32]	@ (80016d8 <__NVIC_SetPriority+0x50>)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	f003 030f 	and.w	r3, r3, #15
 80016be:	3b04      	subs	r3, #4
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	440b      	add	r3, r1
 80016c6:	761a      	strb	r2, [r3, #24]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000e100 	.word	0xe000e100
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f1c3 0307 	rsb	r3, r3, #7
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	bf28      	it	cs
 80016fa:	2304      	movcs	r3, #4
 80016fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3304      	adds	r3, #4
 8001702:	2b06      	cmp	r3, #6
 8001704:	d902      	bls.n	800170c <NVIC_EncodePriority+0x30>
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3b03      	subs	r3, #3
 800170a:	e000      	b.n	800170e <NVIC_EncodePriority+0x32>
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43da      	mvns	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	401a      	ands	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001724:	f04f 31ff 	mov.w	r1, #4294967295
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43d9      	mvns	r1, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	4313      	orrs	r3, r2
         );
}
 8001736:	4618      	mov	r0, r3
 8001738:	3724      	adds	r7, #36	@ 0x24
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001754:	d301      	bcc.n	800175a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001756:	2301      	movs	r3, #1
 8001758:	e00f      	b.n	800177a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <SysTick_Config+0x40>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001762:	210f      	movs	r1, #15
 8001764:	f04f 30ff 	mov.w	r0, #4294967295
 8001768:	f7ff ff8e 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <SysTick_Config+0x40>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001772:	4b04      	ldr	r3, [pc, #16]	@ (8001784 <SysTick_Config+0x40>)
 8001774:	2207      	movs	r2, #7
 8001776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010

08001788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ff29 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b0:	f7ff ff3e 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7ff ff8e 	bl	80016dc <NVIC_EncodePriority>
 80017c0:	4602      	mov	r2, r0
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff31 	bl	800164c <__NVIC_EnableIRQ>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f7ff ffa2 	bl	8001744 <SysTick_Config>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e014      	b.n	8001846 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fac7 	bl	8000dc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2202      	movs	r2, #2
 8001836:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	795b      	ldrb	r3, [r3, #5]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_DAC_Start_DMA+0x1e>
 800186a:	2302      	movs	r3, #2
 800186c:	e0ab      	b.n	80019c6 <HAL_DAC_Start_DMA+0x176>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2202      	movs	r2, #2
 8001878:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d12f      	bne.n	80018e0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a52      	ldr	r2, [pc, #328]	@ (80019d0 <HAL_DAC_Start_DMA+0x180>)
 8001886:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a51      	ldr	r2, [pc, #324]	@ (80019d4 <HAL_DAC_Start_DMA+0x184>)
 800188e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a50      	ldr	r2, [pc, #320]	@ (80019d8 <HAL_DAC_Start_DMA+0x188>)
 8001896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018a6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d013      	beq.n	80018d6 <HAL_DAC_Start_DMA+0x86>
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d845      	bhi.n	8001940 <HAL_DAC_Start_DMA+0xf0>
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_DAC_Start_DMA+0x72>
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d005      	beq.n	80018cc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80018c0:	e03e      	b.n	8001940 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3308      	adds	r3, #8
 80018c8:	613b      	str	r3, [r7, #16]
        break;
 80018ca:	e03c      	b.n	8001946 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	330c      	adds	r3, #12
 80018d2:	613b      	str	r3, [r7, #16]
        break;
 80018d4:	e037      	b.n	8001946 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	3310      	adds	r3, #16
 80018dc:	613b      	str	r3, [r7, #16]
        break;
 80018de:	e032      	b.n	8001946 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a3d      	ldr	r2, [pc, #244]	@ (80019dc <HAL_DAC_Start_DMA+0x18c>)
 80018e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a3c      	ldr	r2, [pc, #240]	@ (80019e0 <HAL_DAC_Start_DMA+0x190>)
 80018ee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a3b      	ldr	r2, [pc, #236]	@ (80019e4 <HAL_DAC_Start_DMA+0x194>)
 80018f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001906:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	2b08      	cmp	r3, #8
 800190c:	d013      	beq.n	8001936 <HAL_DAC_Start_DMA+0xe6>
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d817      	bhi.n	8001944 <HAL_DAC_Start_DMA+0xf4>
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_DAC_Start_DMA+0xd2>
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	2b04      	cmp	r3, #4
 800191e:	d005      	beq.n	800192c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001920:	e010      	b.n	8001944 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3314      	adds	r3, #20
 8001928:	613b      	str	r3, [r7, #16]
        break;
 800192a:	e00c      	b.n	8001946 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3318      	adds	r3, #24
 8001932:	613b      	str	r3, [r7, #16]
        break;
 8001934:	e007      	b.n	8001946 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	331c      	adds	r3, #28
 800193c:	613b      	str	r3, [r7, #16]
        break;
 800193e:	e002      	b.n	8001946 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001940:	bf00      	nop
 8001942:	e000      	b.n	8001946 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001944:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d111      	bne.n	8001970 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800195a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6898      	ldr	r0, [r3, #8]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	f000 fe7f 	bl	8002668 <HAL_DMA_Start_IT>
 800196a:	4603      	mov	r3, r0
 800196c:	75fb      	strb	r3, [r7, #23]
 800196e:	e010      	b.n	8001992 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800197e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68d8      	ldr	r0, [r3, #12]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	f000 fe6d 	bl	8002668 <HAL_DMA_Start_IT>
 800198e:	4603      	mov	r3, r0
 8001990:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2201      	movs	r2, #1
 80019ac:	409a      	lsls	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e005      	b.n	80019c4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	f043 0204 	orr.w	r2, r3, #4
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	08001cbd 	.word	0x08001cbd
 80019d4:	08001cdf 	.word	0x08001cdf
 80019d8:	08001cfb 	.word	0x08001cfb
 80019dc:	08001d65 	.word	0x08001d65
 80019e0:	08001d87 	.word	0x08001d87
 80019e4:	08001da3 	.word	0x08001da3

080019e8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	795b      	ldrb	r3, [r3, #5]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_DAC_ConfigChannel+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e137      	b.n	8001cb0 <HAL_DAC_ConfigChannel+0x28c>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	f040 8081 	bne.w	8001b58 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001a56:	f7ff fd97 	bl	8001588 <HAL_GetTick>
 8001a5a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d140      	bne.n	8001ae4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a62:	e018      	b.n	8001a96 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001a64:	f7ff fd90 	bl	8001588 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d911      	bls.n	8001a96 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f043 0208 	orr.w	r2, r3, #8
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e10c      	b.n	8001cb0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1df      	bne.n	8001a64 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff fd7b 	bl	80015a0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	69d2      	ldr	r2, [r2, #28]
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ab4:	e023      	b.n	8001afe <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001ab6:	f7ff fd67 	bl	8001588 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d90f      	bls.n	8001ae4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da0a      	bge.n	8001ae4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f043 0208 	orr.w	r2, r3, #8
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2203      	movs	r2, #3
 8001ade:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0e5      	b.n	8001cb0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	dbe3      	blt.n	8001ab6 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fd56 	bl	80015a0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	69d2      	ldr	r2, [r2, #28]
 8001afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	ea02 0103 	and.w	r1, r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	21ff      	movs	r1, #255	@ 0xff
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	ea02 0103 	and.w	r1, r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11d      	bne.n	8001b9c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b66:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	221f      	movs	r2, #31
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2207      	movs	r2, #7
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	400a      	ands	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c40:	d104      	bne.n	8001c4c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e018      	b.n	8001c7e <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d104      	bne.n	8001c5e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	e00f      	b.n	8001c7e <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001c5e:	f002 f87d 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8001c62:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4a14      	ldr	r2, [pc, #80]	@ (8001cb8 <HAL_DAC_ConfigChannel+0x294>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d904      	bls.n	8001c76 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	e003      	b.n	8001c7e <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001c7c:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	22c0      	movs	r2, #192	@ 0xc0
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3720      	adds	r7, #32
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	04c4b400 	.word	0x04c4b400

08001cbc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f7ff fe8c 	bl	80019e8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	711a      	strb	r2, [r3, #4]
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fe85 	bl	80019fc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fe7b 	bl	8001a10 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	711a      	strb	r2, [r3, #4]
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff ffd8 	bl	8001d28 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	711a      	strb	r2, [r3, #4]
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff ffd1 	bl	8001d3c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f043 0204 	orr.w	r2, r3, #4
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff ffc7 	bl	8001d50 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	711a      	strb	r2, [r3, #4]
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0ac      	b.n	8001f3c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 faa6 	bl	8002338 <DFSDM_GetChannelFromInstance>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a55      	ldr	r2, [pc, #340]	@ (8001f44 <HAL_DFSDM_ChannelInit+0x174>)
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e09f      	b.n	8001f3c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff f8f9 	bl	8000ff4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001e02:	4b51      	ldr	r3, [pc, #324]	@ (8001f48 <HAL_DFSDM_ChannelInit+0x178>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a4f      	ldr	r2, [pc, #316]	@ (8001f48 <HAL_DFSDM_ChannelInit+0x178>)
 8001e0a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f48 <HAL_DFSDM_ChannelInit+0x178>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d125      	bne.n	8001e60 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001e14:	4b4d      	ldr	r3, [pc, #308]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a4c      	ldr	r2, [pc, #304]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001e1e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001e20:	4b4a      	ldr	r3, [pc, #296]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4948      	ldr	r1, [pc, #288]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a46      	ldr	r2, [pc, #280]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e34:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001e38:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	791b      	ldrb	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d108      	bne.n	8001e54 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001e42:	4b42      	ldr	r3, [pc, #264]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	493f      	ldr	r1, [pc, #252]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001e54:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a3c      	ldr	r2, [pc, #240]	@ (8001f4c <HAL_DFSDM_ChannelInit+0x17c>)
 8001e5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001e5e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001e6e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6819      	ldr	r1, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e7e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001e84:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 020f 	bic.w	r2, r2, #15
 8001e9c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6819      	ldr	r1, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001ec4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f002 0207 	and.w	r2, r2, #7
 8001ef0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fa04 	bl	8002338 <DFSDM_GetChannelFromInstance>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4904      	ldr	r1, [pc, #16]	@ (8001f44 <HAL_DFSDM_ChannelInit+0x174>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20016bac 	.word	0x20016bac
 8001f48:	20016ba8 	.word	0x20016ba8
 8001f4c:	40016000 	.word	0x40016000

08001f50 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e0ca      	b.n	80020f8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a66      	ldr	r2, [pc, #408]	@ (8002100 <HAL_DFSDM_FilterInit+0x1b0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d109      	bne.n	8001f80 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d003      	beq.n	8001f7c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0bb      	b.n	80020f8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe ff7f 	bl	8000e9c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001fac:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	7a1b      	ldrb	r3, [r3, #8]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d108      	bne.n	8001fc8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e007      	b.n	8001fd8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7a5b      	ldrb	r3, [r3, #9]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	e007      	b.n	8002002 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002010:	f023 0308 	bic.w	r3, r3, #8
 8002014:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d108      	bne.n	8002030 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7c1b      	ldrb	r3, [r3, #16]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d108      	bne.n	800204a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0210 	orr.w	r2, r2, #16
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e007      	b.n	800205a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0210 	bic.w	r2, r2, #16
 8002058:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7c5b      	ldrb	r3, [r3, #17]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d108      	bne.n	8002074 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e007      	b.n	8002084 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0220 	bic.w	r2, r2, #32
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8002092:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8002096:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6959      	ldr	r1, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020aa:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80020b2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	699a      	ldr	r2, [r3, #24]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7c1a      	ldrb	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0201 	orr.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40016100 	.word	0x40016100

08002104 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d02e      	beq.n	800217c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002124:	2bff      	cmp	r3, #255	@ 0xff
 8002126:	d029      	beq.n	800217c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d10d      	bne.n	800215e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002150:	431a      	orrs	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e00a      	b.n	8002174 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	631a      	str	r2, [r3, #48]	@ 0x30
 800217a:	e001      	b.n	8002180 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002180:	7dfb      	ldrb	r3, [r7, #23]
}
 8002182:	4618      	mov	r0, r3
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_DFSDM_FilterRegularStop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d007      	beq.n	80021b4 <HAL_DFSDM_FilterRegularStop+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d002      	beq.n	80021b4 <HAL_DFSDM_FilterRegularStop+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e002      	b.n	80021ba <HAL_DFSDM_FilterRegularStop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f961 	bl	800247c <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]
 80021e4:	e064      	b.n	80022b0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021f4:	d002      	beq.n	80021fc <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
 80021fa:	e059      	b.n	80022b0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10e      	bne.n	8002222 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d002      	beq.n	8002222 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	75fb      	strb	r3, [r7, #23]
 8002220:	e046      	b.n	80022b0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10b      	bne.n	8002242 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002236:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002238:	2b20      	cmp	r3, #32
 800223a:	d102      	bne.n	8002242 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
 8002240:	e036      	b.n	80022b0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d004      	beq.n	8002256 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002252:	2b03      	cmp	r3, #3
 8002254:	d12a      	bne.n	80022ac <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	4a18      	ldr	r2, [pc, #96]	@ (80022bc <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800226c:	2b20      	cmp	r3, #32
 800226e:	d101      	bne.n	8002274 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002270:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002272:	e000      	b.n	8002276 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002274:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	331c      	adds	r3, #28
 8002286:	4619      	mov	r1, r3
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f000 f9ec 	bl	8002668 <HAL_DMA_Start_IT>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	22ff      	movs	r2, #255	@ 0xff
 800229a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80022a2:	e005      	b.n	80022b0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f893 	bl	80023d0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80022aa:	e001      	b.n	80022b0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	080022f9 	.word	0x080022f9
 80022c0:	08002315 	.word	0x08002315
 80022c4:	080022dd 	.word	0x080022dd

080022c8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7fe fd1e 	bl	8000d2c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7fe fd20 	bl	8000d4c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2203      	movs	r2, #3
 8002326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff ffcd 	bl	80022c8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d102      	bne.n	800234e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	e02b      	b.n	80023a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <DFSDM_GetChannelFromInstance+0x80>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d102      	bne.n	800235c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002356:	2301      	movs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	e024      	b.n	80023a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <DFSDM_GetChannelFromInstance+0x84>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d102      	bne.n	800236a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002364:	2302      	movs	r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	e01d      	b.n	80023a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <DFSDM_GetChannelFromInstance+0x88>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d102      	bne.n	8002378 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002372:	2304      	movs	r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e016      	b.n	80023a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d102      	bne.n	8002386 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002380:	2305      	movs	r3, #5
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e00f      	b.n	80023a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a0f      	ldr	r2, [pc, #60]	@ (80023c8 <DFSDM_GetChannelFromInstance+0x90>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d102      	bne.n	8002394 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800238e:	2306      	movs	r3, #6
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e008      	b.n	80023a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <DFSDM_GetChannelFromInstance+0x94>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d102      	bne.n	80023a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800239c:	2307      	movs	r3, #7
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e001      	b.n	80023a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80023a2:	2303      	movs	r3, #3
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40016000 	.word	0x40016000
 80023b8:	40016020 	.word	0x40016020
 80023bc:	40016040 	.word	0x40016040
 80023c0:	40016080 	.word	0x40016080
 80023c4:	400160a0 	.word	0x400160a0
 80023c8:	400160c0 	.word	0x400160c0
 80023cc:	400160e0 	.word	0x400160e0

080023d0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d108      	bne.n	80023f2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e033      	b.n	800245a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0201 	bic.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002410:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f042 0201 	orr.w	r2, r2, #1
 8002420:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002428:	2b03      	cmp	r3, #3
 800242a:	d116      	bne.n	800245a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0202 	orr.w	r2, r2, #2
 8002442:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <DFSDM_RegConvStart+0x84>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002452:	e000      	b.n	8002456 <DFSDM_RegConvStart+0x86>
 8002454:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <DFSDM_RegConvStart+0x98>
 8002464:	2202      	movs	r2, #2
 8002466:	e000      	b.n	800246a <DFSDM_RegConvStart+0x9a>
 8002468:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d116      	bne.n	80024f4 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0202 	orr.w	r2, r2, #2
 80024dc:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d102      	bne.n	80024ee <DFSDM_RegConvStop+0x72>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ec:	e000      	b.n	80024f0 <DFSDM_RegConvStop+0x74>
 80024ee:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d101      	bne.n	8002502 <DFSDM_RegConvStop+0x86>
 80024fe:	2201      	movs	r2, #1
 8002500:	e000      	b.n	8002504 <DFSDM_RegConvStop+0x88>
 8002502:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e08d      	b.n	8002646 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <HAL_DMA_Init+0x138>)
 8002532:	429a      	cmp	r2, r3
 8002534:	d80f      	bhi.n	8002556 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b45      	ldr	r3, [pc, #276]	@ (8002654 <HAL_DMA_Init+0x13c>)
 800253e:	4413      	add	r3, r2
 8002540:	4a45      	ldr	r2, [pc, #276]	@ (8002658 <HAL_DMA_Init+0x140>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	009a      	lsls	r2, r3, #2
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_DMA_Init+0x144>)
 8002552:	641a      	str	r2, [r3, #64]	@ 0x40
 8002554:	e00e      	b.n	8002574 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	4b40      	ldr	r3, [pc, #256]	@ (8002660 <HAL_DMA_Init+0x148>)
 800255e:	4413      	add	r3, r2
 8002560:	4a3d      	ldr	r2, [pc, #244]	@ (8002658 <HAL_DMA_Init+0x140>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a3c      	ldr	r2, [pc, #240]	@ (8002664 <HAL_DMA_Init+0x14c>)
 8002572:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800258a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f9b6 	bl	8002938 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025d4:	d102      	bne.n	80025dc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025f0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <HAL_DMA_Init+0x104>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d80c      	bhi.n	800261c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f9d6 	bl	80029b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	e008      	b.n	800262e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40020407 	.word	0x40020407
 8002654:	bffdfff8 	.word	0xbffdfff8
 8002658:	cccccccd 	.word	0xcccccccd
 800265c:	40020000 	.word	0x40020000
 8002660:	bffdfbf8 	.word	0xbffdfbf8
 8002664:	40020400 	.word	0x40020400

08002668 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_DMA_Start_IT+0x20>
 8002684:	2302      	movs	r3, #2
 8002686:	e066      	b.n	8002756 <HAL_DMA_Start_IT+0xee>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d155      	bne.n	8002748 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f8fb 	bl	80028bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 020e 	orr.w	r2, r2, #14
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e00f      	b.n	8002700 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 020a 	orr.w	r2, r2, #10
 80026fe:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800271c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	2b00      	cmp	r3, #0
 8002724:	d007      	beq.n	8002736 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002734:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e005      	b.n	8002754 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002750:	2302      	movs	r3, #2
 8002752:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002754:	7dfb      	ldrb	r3, [r7, #23]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f003 031c 	and.w	r3, r3, #28
 800277e:	2204      	movs	r2, #4
 8002780:	409a      	lsls	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d026      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x7a>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d021      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d107      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0204 	bic.w	r2, r2, #4
 80027b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	f003 021c 	and.w	r2, r3, #28
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	2104      	movs	r1, #4
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d071      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027d6:	e06c      	b.n	80028b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	f003 031c 	and.w	r3, r3, #28
 80027e0:	2202      	movs	r2, #2
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d02e      	beq.n	800284a <HAL_DMA_IRQHandler+0xec>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d029      	beq.n	800284a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 020a 	bic.w	r2, r2, #10
 8002812:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002820:	f003 021c 	and.w	r2, r3, #28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	2102      	movs	r1, #2
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d038      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002848:	e033      	b.n	80028b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f003 031c 	and.w	r3, r3, #28
 8002852:	2208      	movs	r2, #8
 8002854:	409a      	lsls	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d02a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x156>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d025      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 020e 	bic.w	r2, r2, #14
 8002876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287c:	f003 021c 	and.w	r2, r3, #28
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	2101      	movs	r1, #1
 8002886:	fa01 f202 	lsl.w	r2, r1, r2
 800288a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
}
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d004      	beq.n	80028e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028e4:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	f003 021c 	and.w	r2, r3, #28
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	2101      	movs	r1, #1
 80028f4:	fa01 f202 	lsl.w	r2, r1, r2
 80028f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b10      	cmp	r3, #16
 8002908:	d108      	bne.n	800291c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800291a:	e007      	b.n	800292c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	60da      	str	r2, [r3, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002948:	429a      	cmp	r2, r3
 800294a:	d80a      	bhi.n	8002962 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	089b      	lsrs	r3, r3, #2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002958:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002960:	e007      	b.n	8002972 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	009a      	lsls	r2, r3, #2
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800296c:	4413      	add	r3, r2
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3b08      	subs	r3, #8
 800297a:	4a0c      	ldr	r2, [pc, #48]	@ (80029ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002988:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2201      	movs	r2, #1
 8002992:	409a      	lsls	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40020407 	.word	0x40020407
 80029a8:	4002081c 	.word	0x4002081c
 80029ac:	cccccccd 	.word	0xcccccccd
 80029b0:	40020880 	.word	0x40020880

080029b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	461a      	mov	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a08      	ldr	r2, [pc, #32]	@ (80029f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029d6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3b01      	subs	r3, #1
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2201      	movs	r2, #1
 80029e2:	409a      	lsls	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	1000823f 	.word	0x1000823f
 80029f8:	40020940 	.word	0x40020940

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0a:	e166      	b.n	8002cda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8158 	beq.w	8002cd4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d005      	beq.n	8002a3c <HAL_GPIO_Init+0x40>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d130      	bne.n	8002a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a72:	2201      	movs	r2, #1
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	091b      	lsrs	r3, r3, #4
 8002a88:	f003 0201 	and.w	r2, r3, #1
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d017      	beq.n	8002ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d123      	bne.n	8002b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	6939      	ldr	r1, [r7, #16]
 8002b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0203 	and.w	r2, r3, #3
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80b2 	beq.w	8002cd4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b70:	4b61      	ldr	r3, [pc, #388]	@ (8002cf8 <HAL_GPIO_Init+0x2fc>)
 8002b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b74:	4a60      	ldr	r2, [pc, #384]	@ (8002cf8 <HAL_GPIO_Init+0x2fc>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <HAL_GPIO_Init+0x2fc>)
 8002b7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b88:	4a5c      	ldr	r2, [pc, #368]	@ (8002cfc <HAL_GPIO_Init+0x300>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bb2:	d02b      	beq.n	8002c0c <HAL_GPIO_Init+0x210>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a52      	ldr	r2, [pc, #328]	@ (8002d00 <HAL_GPIO_Init+0x304>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d025      	beq.n	8002c08 <HAL_GPIO_Init+0x20c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a51      	ldr	r2, [pc, #324]	@ (8002d04 <HAL_GPIO_Init+0x308>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d01f      	beq.n	8002c04 <HAL_GPIO_Init+0x208>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a50      	ldr	r2, [pc, #320]	@ (8002d08 <HAL_GPIO_Init+0x30c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d019      	beq.n	8002c00 <HAL_GPIO_Init+0x204>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a4f      	ldr	r2, [pc, #316]	@ (8002d0c <HAL_GPIO_Init+0x310>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_GPIO_Init+0x200>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8002d10 <HAL_GPIO_Init+0x314>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00d      	beq.n	8002bf8 <HAL_GPIO_Init+0x1fc>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a4d      	ldr	r2, [pc, #308]	@ (8002d14 <HAL_GPIO_Init+0x318>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <HAL_GPIO_Init+0x1f8>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a4c      	ldr	r2, [pc, #304]	@ (8002d18 <HAL_GPIO_Init+0x31c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_GPIO_Init+0x1f4>
 8002bec:	2307      	movs	r3, #7
 8002bee:	e00e      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	e00c      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002bf4:	2306      	movs	r3, #6
 8002bf6:	e00a      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002bf8:	2305      	movs	r3, #5
 8002bfa:	e008      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	e006      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002c00:	2303      	movs	r3, #3
 8002c02:	e004      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e002      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_GPIO_Init+0x212>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4093      	lsls	r3, r2
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c1e:	4937      	ldr	r1, [pc, #220]	@ (8002cfc <HAL_GPIO_Init+0x300>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c50:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c56:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c7a:	4a28      	ldr	r2, [pc, #160]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c80:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002caa:	4b1c      	ldr	r3, [pc, #112]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cce:	4a13      	ldr	r2, [pc, #76]	@ (8002d1c <HAL_GPIO_Init+0x320>)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f ae91 	bne.w	8002a0c <HAL_GPIO_Init+0x10>
  }
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	48000400 	.word	0x48000400
 8002d04:	48000800 	.word	0x48000800
 8002d08:	48000c00 	.word	0x48000c00
 8002d0c:	48001000 	.word	0x48001000
 8002d10:	48001400 	.word	0x48001400
 8002d14:	48001800 	.word	0x48001800
 8002d18:	48001c00 	.word	0x48001c00
 8002d1c:	40010400 	.word	0x40010400

08002d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e001      	b.n	8002d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d8a:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d96:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fbc2 	bl	8000528 <HAL_GPIO_EXTI_Callback>
  }
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08d      	b.n	8002ede <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe f97c 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	e006      	b.n	8002e38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d108      	bne.n	8002e52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e007      	b.n	8002e62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d138      	bne.n	8002f6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e032      	b.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2224      	movs	r2, #36	@ 0x24
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d139      	bne.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e033      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	@ 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003018:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_PWREx_GetVoltageRange+0x3c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	d102      	bne.n	800302c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800302a:	e00b      	b.n	8003044 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <HAL_PWREx_GetVoltageRange+0x3c>)
 800302e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800303a:	d102      	bne.n	8003042 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800303c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003040:	e000      	b.n	8003044 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003042:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40007000 	.word	0x40007000

08003054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d141      	bne.n	80030e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003062:	4b4b      	ldr	r3, [pc, #300]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306e:	d131      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003070:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003076:	4a46      	ldr	r2, [pc, #280]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800307c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003080:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003088:	4a41      	ldr	r2, [pc, #260]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800308e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003090:	4b40      	ldr	r3, [pc, #256]	@ (8003194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2232      	movs	r2, #50	@ 0x32
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	4a3f      	ldr	r2, [pc, #252]	@ (8003198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	0c9b      	lsrs	r3, r3, #18
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030a6:	e002      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ae:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ba:	d102      	bne.n	80030c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f2      	bne.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c2:	4b33      	ldr	r3, [pc, #204]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ce:	d158      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e057      	b.n	8003184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030da:	4a2d      	ldr	r2, [pc, #180]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030e4:	e04d      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ec:	d141      	bne.n	8003172 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ee:	4b28      	ldr	r3, [pc, #160]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fa:	d131      	bne.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030fc:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003102:	4a23      	ldr	r2, [pc, #140]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800310c:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003114:	4a1e      	ldr	r2, [pc, #120]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800311a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800311c:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2232      	movs	r2, #50	@ 0x32
 8003122:	fb02 f303 	mul.w	r3, r2, r3
 8003126:	4a1c      	ldr	r2, [pc, #112]	@ (8003198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	0c9b      	lsrs	r3, r3, #18
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003132:	e002      	b.n	800313a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3b01      	subs	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d102      	bne.n	800314e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f2      	bne.n	8003134 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800315a:	d112      	bne.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e011      	b.n	8003184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003166:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800316c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003170:	e007      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800317a:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003180:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40007000 	.word	0x40007000
 8003194:	20000000 	.word	0x20000000
 8003198:	431bde83 	.word	0x431bde83

0800319c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f000 bc08 	b.w	80039c0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b0:	4b96      	ldr	r3, [pc, #600]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031ba:	4b94      	ldr	r3, [pc, #592]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0310 	and.w	r3, r3, #16
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80e4 	beq.w	800339a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4c>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	f040 808b 	bne.w	80032f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 8087 	bne.w	80032f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031e8:	4b88      	ldr	r3, [pc, #544]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_OscConfig+0x64>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e3df      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	4b81      	ldr	r3, [pc, #516]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_RCC_OscConfig+0x7e>
 8003210:	4b7e      	ldr	r3, [pc, #504]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003218:	e005      	b.n	8003226 <HAL_RCC_OscConfig+0x8a>
 800321a:	4b7c      	ldr	r3, [pc, #496]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003226:	4293      	cmp	r3, r2
 8003228:	d223      	bcs.n	8003272 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fdcc 	bl	8003dcc <RCC_SetFlashLatencyFromMSIRange>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e3c0      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800323e:	4b73      	ldr	r3, [pc, #460]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a72      	ldr	r2, [pc, #456]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b70      	ldr	r3, [pc, #448]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	496d      	ldr	r1, [pc, #436]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325c:	4b6b      	ldr	r3, [pc, #428]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	4968      	ldr	r1, [pc, #416]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
 8003270:	e025      	b.n	80032be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003272:	4b66      	ldr	r3, [pc, #408]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a65      	ldr	r2, [pc, #404]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b63      	ldr	r3, [pc, #396]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4960      	ldr	r1, [pc, #384]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003290:	4b5e      	ldr	r3, [pc, #376]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	495b      	ldr	r1, [pc, #364]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fd8c 	bl	8003dcc <RCC_SetFlashLatencyFromMSIRange>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e380      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032be:	f000 fcc1 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b51      	ldr	r3, [pc, #324]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	4950      	ldr	r1, [pc, #320]	@ (8003410 <HAL_RCC_OscConfig+0x274>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	4a4e      	ldr	r2, [pc, #312]	@ (8003414 <HAL_RCC_OscConfig+0x278>)
 80032dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032de:	4b4e      	ldr	r3, [pc, #312]	@ (8003418 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe f900 	bl	80014e8 <HAL_InitTick>
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d052      	beq.n	8003398 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	e364      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d032      	beq.n	8003364 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032fe:	4b43      	ldr	r3, [pc, #268]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a42      	ldr	r2, [pc, #264]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800330a:	f7fe f93d 	bl	8001588 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003312:	f7fe f939 	bl	8001588 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e34d      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003324:	4b39      	ldr	r3, [pc, #228]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003330:	4b36      	ldr	r3, [pc, #216]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a35      	ldr	r2, [pc, #212]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003336:	f043 0308 	orr.w	r3, r3, #8
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b33      	ldr	r3, [pc, #204]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4930      	ldr	r1, [pc, #192]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800334e:	4b2f      	ldr	r3, [pc, #188]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	492b      	ldr	r1, [pc, #172]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800335e:	4313      	orrs	r3, r2
 8003360:	604b      	str	r3, [r1, #4]
 8003362:	e01a      	b.n	800339a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003364:	4b29      	ldr	r3, [pc, #164]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a28      	ldr	r2, [pc, #160]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003370:	f7fe f90a 	bl	8001588 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003378:	f7fe f906 	bl	8001588 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e31a      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800338a:	4b20      	ldr	r3, [pc, #128]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x1dc>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d073      	beq.n	800348e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_OscConfig+0x21c>
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d10e      	bne.n	80033d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b14      	ldr	r3, [pc, #80]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d063      	beq.n	800348c <HAL_RCC_OscConfig+0x2f0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d15f      	bne.n	800348c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e2f7      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x24c>
 80033da:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a0b      	ldr	r2, [pc, #44]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e025      	b.n	8003434 <HAL_RCC_OscConfig+0x298>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f0:	d114      	bne.n	800341c <HAL_RCC_OscConfig+0x280>
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a05      	ldr	r2, [pc, #20]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b03      	ldr	r3, [pc, #12]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a02      	ldr	r2, [pc, #8]	@ (800340c <HAL_RCC_OscConfig+0x270>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e013      	b.n	8003434 <HAL_RCC_OscConfig+0x298>
 800340c:	40021000 	.word	0x40021000
 8003410:	080068ac 	.word	0x080068ac
 8003414:	20000000 	.word	0x20000000
 8003418:	20000004 	.word	0x20000004
 800341c:	4ba0      	ldr	r3, [pc, #640]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a9f      	ldr	r2, [pc, #636]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	4b9d      	ldr	r3, [pc, #628]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a9c      	ldr	r2, [pc, #624]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800342e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fe f8a4 	bl	8001588 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fe f8a0 	bl	8001588 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	@ 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e2b4      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003456:	4b92      	ldr	r3, [pc, #584]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x2a8>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe f890 	bl	8001588 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe f88c 	bl	8001588 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	@ 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e2a0      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347e:	4b88      	ldr	r3, [pc, #544]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x2d0>
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d060      	beq.n	800355c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x310>
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d119      	bne.n	80034da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d116      	bne.n	80034da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ac:	4b7c      	ldr	r3, [pc, #496]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_OscConfig+0x328>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e27d      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b76      	ldr	r3, [pc, #472]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	4973      	ldr	r1, [pc, #460]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d8:	e040      	b.n	800355c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d023      	beq.n	800352a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e2:	4b6f      	ldr	r3, [pc, #444]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6e      	ldr	r2, [pc, #440]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe f84b 	bl	8001588 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe f847 	bl	8001588 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e25b      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003508:	4b65      	ldr	r3, [pc, #404]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b62      	ldr	r3, [pc, #392]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	061b      	lsls	r3, r3, #24
 8003522:	495f      	ldr	r1, [pc, #380]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
 8003528:	e018      	b.n	800355c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b5d      	ldr	r3, [pc, #372]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a5c      	ldr	r2, [pc, #368]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003534:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fe f827 	bl	8001588 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353e:	f7fe f823 	bl	8001588 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e237      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003550:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d03c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01c      	beq.n	80035aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003570:	4b4b      	ldr	r3, [pc, #300]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003576:	4a4a      	ldr	r2, [pc, #296]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fe f802 	bl	8001588 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7fd fffe 	bl	8001588 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e212      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800359a:	4b41      	ldr	r3, [pc, #260]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800359c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <HAL_RCC_OscConfig+0x3ec>
 80035a8:	e01b      	b.n	80035e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035aa:	4b3d      	ldr	r3, [pc, #244]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80035ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035b0:	4a3b      	ldr	r2, [pc, #236]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fd ffe5 	bl	8001588 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fd ffe1 	bl	8001588 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1f5      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035d4:	4b32      	ldr	r3, [pc, #200]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80035d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ef      	bne.n	80035c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80a6 	beq.w	800373c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035f4:	4b2a      	ldr	r3, [pc, #168]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003600:	4b27      	ldr	r3, [pc, #156]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	4a26      	ldr	r2, [pc, #152]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360a:	6593      	str	r3, [r2, #88]	@ 0x58
 800360c:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800360e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003618:	2301      	movs	r3, #1
 800361a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361c:	4b21      	ldr	r3, [pc, #132]	@ (80036a4 <HAL_RCC_OscConfig+0x508>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d118      	bne.n	800365a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003628:	4b1e      	ldr	r3, [pc, #120]	@ (80036a4 <HAL_RCC_OscConfig+0x508>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	@ (80036a4 <HAL_RCC_OscConfig+0x508>)
 800362e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003632:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003634:	f7fd ffa8 	bl	8001588 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363c:	f7fd ffa4 	bl	8001588 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e1b8      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <HAL_RCC_OscConfig+0x508>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d0f0      	beq.n	800363c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d108      	bne.n	8003674 <HAL_RCC_OscConfig+0x4d8>
 8003662:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003668:	4a0d      	ldr	r2, [pc, #52]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003672:	e029      	b.n	80036c8 <HAL_RCC_OscConfig+0x52c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d115      	bne.n	80036a8 <HAL_RCC_OscConfig+0x50c>
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	4a07      	ldr	r2, [pc, #28]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	4a03      	ldr	r2, [pc, #12]	@ (80036a0 <HAL_RCC_OscConfig+0x504>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800369c:	e014      	b.n	80036c8 <HAL_RCC_OscConfig+0x52c>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40007000 	.word	0x40007000
 80036a8:	4b9d      	ldr	r3, [pc, #628]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	4a9c      	ldr	r2, [pc, #624]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036b8:	4b99      	ldr	r3, [pc, #612]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	4a98      	ldr	r2, [pc, #608]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d016      	beq.n	80036fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d0:	f7fd ff5a 	bl	8001588 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fd ff56 	bl	8001588 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e168      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80036f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ed      	beq.n	80036d8 <HAL_RCC_OscConfig+0x53c>
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fe:	f7fd ff43 	bl	8001588 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fd ff3f 	bl	8001588 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e151      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800371c:	4b80      	ldr	r3, [pc, #512]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ed      	bne.n	8003706 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372a:	7ffb      	ldrb	r3, [r7, #31]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b7b      	ldr	r3, [pc, #492]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003734:	4a7a      	ldr	r2, [pc, #488]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0320 	and.w	r3, r3, #32
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03c      	beq.n	80037c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01c      	beq.n	800378a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003750:	4b73      	ldr	r3, [pc, #460]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003752:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003756:	4a72      	ldr	r2, [pc, #456]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fd ff12 	bl	8001588 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003768:	f7fd ff0e 	bl	8001588 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e122      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800377a:	4b69      	ldr	r3, [pc, #420]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 800377c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ef      	beq.n	8003768 <HAL_RCC_OscConfig+0x5cc>
 8003788:	e01b      	b.n	80037c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800378a:	4b65      	ldr	r3, [pc, #404]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 800378c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003790:	4a63      	ldr	r2, [pc, #396]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fd fef5 	bl	8001588 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a2:	f7fd fef1 	bl	8001588 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e105      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037b4:	4b5a      	ldr	r3, [pc, #360]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80037b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1ef      	bne.n	80037a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80f9 	beq.w	80039be <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	f040 80cf 	bne.w	8003974 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037d6:	4b52      	ldr	r3, [pc, #328]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f003 0203 	and.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d12c      	bne.n	8003844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	3b01      	subs	r3, #1
 80037f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d123      	bne.n	8003844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003806:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d11b      	bne.n	8003844 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d113      	bne.n	8003844 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	3b01      	subs	r3, #1
 800382a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d109      	bne.n	8003844 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d071      	beq.n	8003928 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d068      	beq.n	800391c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800384a:	4b35      	ldr	r3, [pc, #212]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003856:	4b32      	ldr	r3, [pc, #200]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0ac      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003866:	4b2e      	ldr	r3, [pc, #184]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2d      	ldr	r2, [pc, #180]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 800386c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003870:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003872:	f7fd fe89 	bl	8001588 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387a:	f7fd fe85 	bl	8001588 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e099      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388c:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003898:	4b21      	ldr	r3, [pc, #132]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	4b21      	ldr	r3, [pc, #132]	@ (8003924 <HAL_RCC_OscConfig+0x788>)
 800389e:	4013      	ands	r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038a8:	3a01      	subs	r2, #1
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	4311      	orrs	r1, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038b2:	0212      	lsls	r2, r2, #8
 80038b4:	4311      	orrs	r1, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038ba:	0852      	lsrs	r2, r2, #1
 80038bc:	3a01      	subs	r2, #1
 80038be:	0552      	lsls	r2, r2, #21
 80038c0:	4311      	orrs	r1, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038c6:	0852      	lsrs	r2, r2, #1
 80038c8:	3a01      	subs	r2, #1
 80038ca:	0652      	lsls	r2, r2, #25
 80038cc:	4311      	orrs	r1, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038d2:	06d2      	lsls	r2, r2, #27
 80038d4:	430a      	orrs	r2, r1
 80038d6:	4912      	ldr	r1, [pc, #72]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038dc:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80038e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038f4:	f7fd fe48 	bl	8001588 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fd fe44 	bl	8001588 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e058      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <HAL_RCC_OscConfig+0x784>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800391a:	e050      	b.n	80039be <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e04f      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
 8003920:	40021000 	.word	0x40021000
 8003924:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d144      	bne.n	80039be <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003934:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a23      	ldr	r2, [pc, #140]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 800393a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800393e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003940:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a20      	ldr	r2, [pc, #128]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 8003946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800394a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800394c:	f7fd fe1c 	bl	8001588 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003954:	f7fd fe18 	bl	8001588 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e02c      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x7b8>
 8003972:	e024      	b.n	80039be <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b0c      	cmp	r3, #12
 8003978:	d01f      	beq.n	80039ba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b13      	ldr	r3, [pc, #76]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a12      	ldr	r2, [pc, #72]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 8003980:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fdff 	bl	8001588 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd fdfb 	bl	8001588 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e00f      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039ac:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	4905      	ldr	r1, [pc, #20]	@ (80039c8 <HAL_RCC_OscConfig+0x82c>)
 80039b2:	4b06      	ldr	r3, [pc, #24]	@ (80039cc <HAL_RCC_OscConfig+0x830>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	60cb      	str	r3, [r1, #12]
 80039b8:	e001      	b.n	80039be <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40021000 	.word	0x40021000
 80039cc:	feeefffc 	.word	0xfeeefffc

080039d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e11d      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b90      	ldr	r3, [pc, #576]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d910      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b8d      	ldr	r3, [pc, #564]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 020f 	bic.w	r2, r3, #15
 80039fe:	498b      	ldr	r1, [pc, #556]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b89      	ldr	r3, [pc, #548]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e105      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	4b81      	ldr	r3, [pc, #516]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d908      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b7e      	ldr	r3, [pc, #504]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	497b      	ldr	r1, [pc, #492]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d079      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d11e      	bne.n	8003a98 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a5a:	4b75      	ldr	r3, [pc, #468]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0dc      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003a6a:	f000 fa09 	bl	8003e80 <RCC_GetSysClockFreqFromPLLSource>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4a70      	ldr	r2, [pc, #448]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d946      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a76:	4b6e      	ldr	r3, [pc, #440]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d140      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a82:	4b6b      	ldr	r3, [pc, #428]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8a:	4a69      	ldr	r2, [pc, #420]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a92:	2380      	movs	r3, #128	@ 0x80
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e035      	b.n	8003b04 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa0:	4b63      	ldr	r3, [pc, #396]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d115      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0b9      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0ad      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac8:	4b59      	ldr	r3, [pc, #356]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0a5      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ad8:	f000 f8b4 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8003adc:	4603      	mov	r3, r0
 8003ade:	4a55      	ldr	r2, [pc, #340]	@ (8003c34 <HAL_RCC_ClockConfig+0x264>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d90f      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ae4:	4b52      	ldr	r3, [pc, #328]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d109      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003af0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003af8:	4a4d      	ldr	r2, [pc, #308]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003afe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b00:	2380      	movs	r3, #128	@ 0x80
 8003b02:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b04:	4b4a      	ldr	r3, [pc, #296]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f023 0203 	bic.w	r2, r3, #3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4947      	ldr	r1, [pc, #284]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b16:	f7fd fd37 	bl	8001588 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1c:	e00a      	b.n	8003b34 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1e:	f7fd fd33 	bl	8001588 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e077      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b34:	4b3e      	ldr	r3, [pc, #248]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 020c 	and.w	r2, r3, #12
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d1eb      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b80      	cmp	r3, #128	@ 0x80
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b4c:	4b38      	ldr	r3, [pc, #224]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a37      	ldr	r2, [pc, #220]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b56:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d208      	bcs.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b2e      	ldr	r3, [pc, #184]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	492b      	ldr	r1, [pc, #172]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b86:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d210      	bcs.n	8003bb6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 020f 	bic.w	r2, r3, #15
 8003b9c:	4923      	ldr	r1, [pc, #140]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba4:	4b21      	ldr	r3, [pc, #132]	@ (8003c2c <HAL_RCC_ClockConfig+0x25c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e036      	b.n	8003c24 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4918      	ldr	r1, [pc, #96]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be0:	4b13      	ldr	r3, [pc, #76]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4910      	ldr	r1, [pc, #64]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bf4:	f000 f826 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	490c      	ldr	r1, [pc, #48]	@ (8003c38 <HAL_RCC_ClockConfig+0x268>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c10:	4a0a      	ldr	r2, [pc, #40]	@ (8003c3c <HAL_RCC_ClockConfig+0x26c>)
 8003c12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <HAL_RCC_ClockConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd fc65 	bl	80014e8 <HAL_InitTick>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	73fb      	strb	r3, [r7, #15]

  return status;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40022000 	.word	0x40022000
 8003c30:	40021000 	.word	0x40021000
 8003c34:	04c4b400 	.word	0x04c4b400
 8003c38:	080068ac 	.word	0x080068ac
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	20000004 	.word	0x20000004

08003c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	@ 0x24
 8003c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c52:	4b3e      	ldr	r3, [pc, #248]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0303 	and.w	r3, r3, #3
 8003c64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x34>
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d121      	bne.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d11e      	bne.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c78:	4b34      	ldr	r3, [pc, #208]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c84:	4b31      	ldr	r3, [pc, #196]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e005      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c94:	4b2d      	ldr	r3, [pc, #180]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10d      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cb4:	e00a      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d102      	bne.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cbc:	4b25      	ldr	r3, [pc, #148]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e004      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cc8:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d134      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0xa6>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d003      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cea:	4b1a      	ldr	r3, [pc, #104]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cec:	617b      	str	r3, [r7, #20]
      break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cf2:	617b      	str	r3, [r7, #20]
      break;
 8003cf4:	e002      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	617b      	str	r3, [r7, #20]
      break;
 8003cfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cfc:	4b13      	ldr	r3, [pc, #76]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	3301      	adds	r3, #1
 8003d08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	fb03 f202 	mul.w	r2, r3, r2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d22:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	0e5b      	lsrs	r3, r3, #25
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d3c:	69bb      	ldr	r3, [r7, #24]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3724      	adds	r7, #36	@ 0x24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	080068c4 	.word	0x080068c4
 8003d54:	00f42400 	.word	0x00f42400
 8003d58:	007a1200 	.word	0x007a1200

08003d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d60:	4b03      	ldr	r3, [pc, #12]	@ (8003d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000000 	.word	0x20000000

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d78:	f7ff fff0 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4904      	ldr	r1, [pc, #16]	@ (8003d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	080068bc 	.word	0x080068bc

08003da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003da4:	f7ff ffda 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0adb      	lsrs	r3, r3, #11
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4904      	ldr	r1, [pc, #16]	@ (8003dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	080068bc 	.word	0x080068bc

08003dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dd8:	4b27      	ldr	r3, [pc, #156]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003de4:	f7ff f916 	bl	8003014 <HAL_PWREx_GetVoltageRange>
 8003de8:	6178      	str	r0, [r7, #20]
 8003dea:	e014      	b.n	8003e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	4a21      	ldr	r2, [pc, #132]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003df8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e04:	f7ff f906 	bl	8003014 <HAL_PWREx_GetVoltageRange>
 8003e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003e78 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e1c:	d10b      	bne.n	8003e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b80      	cmp	r3, #128	@ 0x80
 8003e22:	d913      	bls.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e28:	d902      	bls.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	e00d      	b.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e30:	2301      	movs	r3, #1
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	e00a      	b.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e3a:	d902      	bls.n	8003e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	e004      	b.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b70      	cmp	r3, #112	@ 0x70
 8003e46:	d101      	bne.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e48:	2301      	movs	r3, #1
 8003e4a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f023 020f 	bic.w	r2, r3, #15
 8003e54:	4909      	ldr	r1, [pc, #36]	@ (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e5c:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d001      	beq.n	8003e6e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40022000 	.word	0x40022000

08003e80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e86:	4b2d      	ldr	r3, [pc, #180]	@ (8003f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d00b      	beq.n	8003eae <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d825      	bhi.n	8003ee8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d008      	beq.n	8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d11f      	bne.n	8003ee8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ea8:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003eaa:	613b      	str	r3, [r7, #16]
    break;
 8003eac:	e01f      	b.n	8003eee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003eae:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003eb0:	613b      	str	r3, [r7, #16]
    break;
 8003eb2:	e01c      	b.n	8003eee <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003eb4:	4b21      	ldr	r3, [pc, #132]	@ (8003f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d107      	bne.n	8003ed0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e005      	b.n	8003edc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003edc:	4a1a      	ldr	r2, [pc, #104]	@ (8003f48 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	613b      	str	r3, [r7, #16]
    break;
 8003ee6:	e002      	b.n	8003eee <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
    break;
 8003eec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eee:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003efc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	0a1b      	lsrs	r3, r3, #8
 8003f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	fb03 f202 	mul.w	r2, r3, r2
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	0e5b      	lsrs	r3, r3, #25
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f2e:	683b      	ldr	r3, [r7, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	00f42400 	.word	0x00f42400
 8003f44:	007a1200 	.word	0x007a1200
 8003f48:	080068c4 	.word	0x080068c4

08003f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f54:	2300      	movs	r3, #0
 8003f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d040      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f6c:	2b80      	cmp	r3, #128	@ 0x80
 8003f6e:	d02a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f70:	2b80      	cmp	r3, #128	@ 0x80
 8003f72:	d825      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f74:	2b60      	cmp	r3, #96	@ 0x60
 8003f76:	d026      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f78:	2b60      	cmp	r3, #96	@ 0x60
 8003f7a:	d821      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f7c:	2b40      	cmp	r3, #64	@ 0x40
 8003f7e:	d006      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003f80:	2b40      	cmp	r3, #64	@ 0x40
 8003f82:	d81d      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d010      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f8e:	4b89      	ldr	r3, [pc, #548]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4a88      	ldr	r2, [pc, #544]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f98:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f9a:	e015      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fb02 	bl	80045ac <RCCEx_PLLSAI1_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fac:	e00c      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3320      	adds	r3, #32
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fbed 	bl	8004794 <RCCEx_PLLSAI2_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fbe:	e003      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	74fb      	strb	r3, [r7, #19]
      break;
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fce:	4b79      	ldr	r3, [pc, #484]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fdc:	4975      	ldr	r1, [pc, #468]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003fe4:	e001      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d047      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffe:	d030      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004004:	d82a      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800400a:	d02a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800400c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004010:	d824      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004016:	d008      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800401c:	d81e      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004026:	d010      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004028:	e018      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800402a:	4b62      	ldr	r3, [pc, #392]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	4a61      	ldr	r2, [pc, #388]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004034:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004036:	e015      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3304      	adds	r3, #4
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fab4 	bl	80045ac <RCCEx_PLLSAI1_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004048:	e00c      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3320      	adds	r3, #32
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fb9f 	bl	8004794 <RCCEx_PLLSAI2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800405a:	e003      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	74fb      	strb	r3, [r7, #19]
      break;
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800406a:	4b52      	ldr	r3, [pc, #328]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800406c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004078:	494e      	ldr	r1, [pc, #312]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004080:	e001      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 809f 	beq.w	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004094:	2300      	movs	r3, #0
 8004096:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004098:	4b46      	ldr	r3, [pc, #280]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040a8:	2300      	movs	r3, #0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00d      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	4b41      	ldr	r3, [pc, #260]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b2:	4a40      	ldr	r2, [pc, #256]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ba:	4b3e      	ldr	r3, [pc, #248]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c6:	2301      	movs	r3, #1
 80040c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ca:	4b3b      	ldr	r3, [pc, #236]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3a      	ldr	r2, [pc, #232]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040d6:	f7fd fa57 	bl	8001588 <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040dc:	e009      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040de:	f7fd fa53 	bl	8001588 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d902      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	74fb      	strb	r3, [r7, #19]
        break;
 80040f0:	e005      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040f2:	4b31      	ldr	r3, [pc, #196]	@ (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0ef      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d15b      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004104:	4b2b      	ldr	r3, [pc, #172]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01f      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	429a      	cmp	r2, r3
 8004120:	d019      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004122:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800412e:	4b21      	ldr	r3, [pc, #132]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004134:	4a1f      	ldr	r2, [pc, #124]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800413a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800413e:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004144:	4a1b      	ldr	r2, [pc, #108]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800414a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800414e:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d016      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd fa12 	bl	8001588 <HAL_GetTick>
 8004164:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004166:	e00b      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fd fa0e 	bl	8001588 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004176:	4293      	cmp	r3, r2
 8004178:	d902      	bls.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	74fb      	strb	r3, [r7, #19]
            break;
 800417e:	e006      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ec      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10c      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004194:	4b07      	ldr	r3, [pc, #28]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	4903      	ldr	r1, [pc, #12]	@ (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041ac:	e008      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	74bb      	strb	r3, [r7, #18]
 80041b2:	e005      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c0:	7c7b      	ldrb	r3, [r7, #17]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4ba0      	ldr	r3, [pc, #640]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4a9f      	ldr	r2, [pc, #636]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041de:	4b9a      	ldr	r3, [pc, #616]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e4:	f023 0203 	bic.w	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ec:	4996      	ldr	r1, [pc, #600]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004200:	4b91      	ldr	r3, [pc, #580]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	f023 020c 	bic.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	498e      	ldr	r1, [pc, #568]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004222:	4b89      	ldr	r3, [pc, #548]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004228:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004230:	4985      	ldr	r1, [pc, #532]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004244:	4b80      	ldr	r3, [pc, #512]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004252:	497d      	ldr	r1, [pc, #500]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004266:	4b78      	ldr	r3, [pc, #480]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004274:	4974      	ldr	r1, [pc, #464]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004288:	4b6f      	ldr	r3, [pc, #444]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004296:	496c      	ldr	r1, [pc, #432]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042aa:	4b67      	ldr	r3, [pc, #412]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042b8:	4963      	ldr	r1, [pc, #396]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042da:	495b      	ldr	r1, [pc, #364]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ee:	4b56      	ldr	r3, [pc, #344]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fc:	4952      	ldr	r1, [pc, #328]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004310:	4b4d      	ldr	r3, [pc, #308]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004316:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	494a      	ldr	r1, [pc, #296]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004332:	4b45      	ldr	r3, [pc, #276]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004338:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004340:	4941      	ldr	r1, [pc, #260]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004354:	4b3c      	ldr	r3, [pc, #240]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004356:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004362:	4939      	ldr	r1, [pc, #228]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d028      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004376:	4b34      	ldr	r3, [pc, #208]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004384:	4930      	ldr	r1, [pc, #192]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004394:	d106      	bne.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004396:	4b2c      	ldr	r3, [pc, #176]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4a2b      	ldr	r2, [pc, #172]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043a0:	60d3      	str	r3, [r2, #12]
 80043a2:	e011      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2101      	movs	r1, #1
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 f8f9 	bl	80045ac <RCCEx_PLLSAI1_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043be:	7cfb      	ldrb	r3, [r7, #19]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80043c4:	7cfb      	ldrb	r3, [r7, #19]
 80043c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d04d      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043dc:	d108      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80043de:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e4:	4a18      	ldr	r2, [pc, #96]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80043ee:	e012      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80043f0:	4b15      	ldr	r3, [pc, #84]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043f6:	4a14      	ldr	r2, [pc, #80]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043fc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800440e:	490e      	ldr	r1, [pc, #56]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800441a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800441e:	d106      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004420:	4b09      	ldr	r3, [pc, #36]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4a08      	ldr	r2, [pc, #32]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442a:	60d3      	str	r3, [r2, #12]
 800442c:	e020      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004432:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004436:	d109      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a02      	ldr	r2, [pc, #8]	@ (8004448 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004442:	60d3      	str	r3, [r2, #12]
 8004444:	e014      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004450:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004454:	d10c      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	2101      	movs	r1, #1
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f8a5 	bl	80045ac <RCCEx_PLLSAI1_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d028      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800447c:	4b4a      	ldr	r3, [pc, #296]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004482:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800448a:	4947      	ldr	r1, [pc, #284]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800449a:	d106      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449c:	4b42      	ldr	r3, [pc, #264]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a41      	ldr	r2, [pc, #260]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044a6:	60d3      	str	r3, [r2, #12]
 80044a8:	e011      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044b2:	d10c      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	2101      	movs	r1, #1
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f876 	bl	80045ac <RCCEx_PLLSAI1_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80044ca:	7cfb      	ldrb	r3, [r7, #19]
 80044cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044da:	4b33      	ldr	r3, [pc, #204]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ea:	492f      	ldr	r1, [pc, #188]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044fc:	d10c      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	2102      	movs	r1, #2
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f851 	bl	80045ac <RCCEx_PLLSAI1_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800450e:	7cfb      	ldrb	r3, [r7, #19]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004524:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800452a:	f023 0204 	bic.w	r2, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004534:	491c      	ldr	r1, [pc, #112]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00b      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004548:	4b17      	ldr	r3, [pc, #92]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800454e:	f023 0218 	bic.w	r2, r3, #24
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004558:	4913      	ldr	r1, [pc, #76]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d017      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004572:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800457c:	490a      	ldr	r1, [pc, #40]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800458a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800458e:	d105      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a04      	ldr	r2, [pc, #16]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800459a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800459c:	7cbb      	ldrb	r3, [r7, #18]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000

080045ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ba:	4b72      	ldr	r3, [pc, #456]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0203 	and.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d103      	bne.n	80045de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
       ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d142      	bne.n	8004664 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	e03f      	b.n	8004664 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d018      	beq.n	800461e <RCCEx_PLLSAI1_Config+0x72>
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d825      	bhi.n	800463c <RCCEx_PLLSAI1_Config+0x90>
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d002      	beq.n	80045fa <RCCEx_PLLSAI1_Config+0x4e>
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d009      	beq.n	800460c <RCCEx_PLLSAI1_Config+0x60>
 80045f8:	e020      	b.n	800463c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045fa:	4b62      	ldr	r3, [pc, #392]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11d      	bne.n	8004642 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460a:	e01a      	b.n	8004642 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800460c:	4b5d      	ldr	r3, [pc, #372]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461c:	e013      	b.n	8004646 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800461e:	4b59      	ldr	r3, [pc, #356]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800462a:	4b56      	ldr	r3, [pc, #344]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800463a:	e006      	b.n	800464a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e004      	b.n	800464c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004642:	bf00      	nop
 8004644:	e002      	b.n	800464c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800464a:	bf00      	nop
    }

    if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004652:	4b4c      	ldr	r3, [pc, #304]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4949      	ldr	r1, [pc, #292]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004660:	4313      	orrs	r3, r2
 8004662:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 8086 	bne.w	8004778 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800466c:	4b45      	ldr	r3, [pc, #276]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a44      	ldr	r2, [pc, #272]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004672:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004678:	f7fc ff86 	bl	8001588 <HAL_GetTick>
 800467c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800467e:	e009      	b.n	8004694 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004680:	f7fc ff82 	bl	8001588 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d902      	bls.n	8004694 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	73fb      	strb	r3, [r7, #15]
        break;
 8004692:	e005      	b.n	80046a0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004694:	4b3b      	ldr	r3, [pc, #236]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1ef      	bne.n	8004680 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d168      	bne.n	8004778 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d113      	bne.n	80046d4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046ac:	4b35      	ldr	r3, [pc, #212]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	4b35      	ldr	r3, [pc, #212]	@ (8004788 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6892      	ldr	r2, [r2, #8]
 80046b8:	0211      	lsls	r1, r2, #8
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68d2      	ldr	r2, [r2, #12]
 80046be:	06d2      	lsls	r2, r2, #27
 80046c0:	4311      	orrs	r1, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6852      	ldr	r2, [r2, #4]
 80046c6:	3a01      	subs	r2, #1
 80046c8:	0112      	lsls	r2, r2, #4
 80046ca:	430a      	orrs	r2, r1
 80046cc:	492d      	ldr	r1, [pc, #180]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	610b      	str	r3, [r1, #16]
 80046d2:	e02d      	b.n	8004730 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d115      	bne.n	8004706 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046da:	4b2a      	ldr	r3, [pc, #168]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	4b2b      	ldr	r3, [pc, #172]	@ (800478c <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6892      	ldr	r2, [r2, #8]
 80046e6:	0211      	lsls	r1, r2, #8
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6912      	ldr	r2, [r2, #16]
 80046ec:	0852      	lsrs	r2, r2, #1
 80046ee:	3a01      	subs	r2, #1
 80046f0:	0552      	lsls	r2, r2, #21
 80046f2:	4311      	orrs	r1, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6852      	ldr	r2, [r2, #4]
 80046f8:	3a01      	subs	r2, #1
 80046fa:	0112      	lsls	r2, r2, #4
 80046fc:	430a      	orrs	r2, r1
 80046fe:	4921      	ldr	r1, [pc, #132]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004700:	4313      	orrs	r3, r2
 8004702:	610b      	str	r3, [r1, #16]
 8004704:	e014      	b.n	8004730 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004706:	4b1f      	ldr	r3, [pc, #124]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	4b21      	ldr	r3, [pc, #132]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	4013      	ands	r3, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6892      	ldr	r2, [r2, #8]
 8004712:	0211      	lsls	r1, r2, #8
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6952      	ldr	r2, [r2, #20]
 8004718:	0852      	lsrs	r2, r2, #1
 800471a:	3a01      	subs	r2, #1
 800471c:	0652      	lsls	r2, r2, #25
 800471e:	4311      	orrs	r1, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6852      	ldr	r2, [r2, #4]
 8004724:	3a01      	subs	r2, #1
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	430a      	orrs	r2, r1
 800472a:	4916      	ldr	r1, [pc, #88]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800472c:	4313      	orrs	r3, r2
 800472e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004730:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a13      	ldr	r2, [pc, #76]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004736:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800473a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fc ff24 	bl	8001588 <HAL_GetTick>
 8004740:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004742:	e009      	b.n	8004758 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004744:	f7fc ff20 	bl	8001588 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d902      	bls.n	8004758 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	73fb      	strb	r3, [r7, #15]
          break;
 8004756:	e005      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004758:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0ef      	beq.n	8004744 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800476a:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	4904      	ldr	r1, [pc, #16]	@ (8004784 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004774:	4313      	orrs	r3, r2
 8004776:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	07ff800f 	.word	0x07ff800f
 800478c:	ff9f800f 	.word	0xff9f800f
 8004790:	f9ff800f 	.word	0xf9ff800f

08004794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047a2:	4b72      	ldr	r3, [pc, #456]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00e      	beq.n	80047cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ae:	4b6f      	ldr	r3, [pc, #444]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d103      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
       ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d142      	bne.n	800484c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
 80047ca:	e03f      	b.n	800484c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d018      	beq.n	8004806 <RCCEx_PLLSAI2_Config+0x72>
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d825      	bhi.n	8004824 <RCCEx_PLLSAI2_Config+0x90>
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d002      	beq.n	80047e2 <RCCEx_PLLSAI2_Config+0x4e>
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d009      	beq.n	80047f4 <RCCEx_PLLSAI2_Config+0x60>
 80047e0:	e020      	b.n	8004824 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047e2:	4b62      	ldr	r3, [pc, #392]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11d      	bne.n	800482a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f2:	e01a      	b.n	800482a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047f4:	4b5d      	ldr	r3, [pc, #372]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d116      	bne.n	800482e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004804:	e013      	b.n	800482e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004806:	4b59      	ldr	r3, [pc, #356]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004812:	4b56      	ldr	r3, [pc, #344]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004822:	e006      	b.n	8004832 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e004      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004832:	bf00      	nop
    }

    if(status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800483a:	4b4c      	ldr	r3, [pc, #304]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f023 0203 	bic.w	r2, r3, #3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4949      	ldr	r1, [pc, #292]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004848:	4313      	orrs	r3, r2
 800484a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f040 8086 	bne.w	8004960 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004854:	4b45      	ldr	r3, [pc, #276]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a44      	ldr	r2, [pc, #272]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800485e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004860:	f7fc fe92 	bl	8001588 <HAL_GetTick>
 8004864:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004866:	e009      	b.n	800487c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004868:	f7fc fe8e 	bl	8001588 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d902      	bls.n	800487c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	73fb      	strb	r3, [r7, #15]
        break;
 800487a:	e005      	b.n	8004888 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800487c:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1ef      	bne.n	8004868 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d168      	bne.n	8004960 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d113      	bne.n	80048bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004894:	4b35      	ldr	r3, [pc, #212]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	4b35      	ldr	r3, [pc, #212]	@ (8004970 <RCCEx_PLLSAI2_Config+0x1dc>)
 800489a:	4013      	ands	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6892      	ldr	r2, [r2, #8]
 80048a0:	0211      	lsls	r1, r2, #8
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	68d2      	ldr	r2, [r2, #12]
 80048a6:	06d2      	lsls	r2, r2, #27
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6852      	ldr	r2, [r2, #4]
 80048ae:	3a01      	subs	r2, #1
 80048b0:	0112      	lsls	r2, r2, #4
 80048b2:	430a      	orrs	r2, r1
 80048b4:	492d      	ldr	r1, [pc, #180]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	614b      	str	r3, [r1, #20]
 80048ba:	e02d      	b.n	8004918 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d115      	bne.n	80048ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048c2:	4b2a      	ldr	r3, [pc, #168]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004974 <RCCEx_PLLSAI2_Config+0x1e0>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6892      	ldr	r2, [r2, #8]
 80048ce:	0211      	lsls	r1, r2, #8
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6912      	ldr	r2, [r2, #16]
 80048d4:	0852      	lsrs	r2, r2, #1
 80048d6:	3a01      	subs	r2, #1
 80048d8:	0552      	lsls	r2, r2, #21
 80048da:	4311      	orrs	r1, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6852      	ldr	r2, [r2, #4]
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0112      	lsls	r2, r2, #4
 80048e4:	430a      	orrs	r2, r1
 80048e6:	4921      	ldr	r1, [pc, #132]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	614b      	str	r3, [r1, #20]
 80048ec:	e014      	b.n	8004918 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048ee:	4b1f      	ldr	r3, [pc, #124]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f0:	695a      	ldr	r2, [r3, #20]
 80048f2:	4b21      	ldr	r3, [pc, #132]	@ (8004978 <RCCEx_PLLSAI2_Config+0x1e4>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6892      	ldr	r2, [r2, #8]
 80048fa:	0211      	lsls	r1, r2, #8
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6952      	ldr	r2, [r2, #20]
 8004900:	0852      	lsrs	r2, r2, #1
 8004902:	3a01      	subs	r2, #1
 8004904:	0652      	lsls	r2, r2, #25
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6852      	ldr	r2, [r2, #4]
 800490c:	3a01      	subs	r2, #1
 800490e:	0112      	lsls	r2, r2, #4
 8004910:	430a      	orrs	r2, r1
 8004912:	4916      	ldr	r1, [pc, #88]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004914:	4313      	orrs	r3, r2
 8004916:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004918:	4b14      	ldr	r3, [pc, #80]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a13      	ldr	r2, [pc, #76]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 800491e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004922:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fc fe30 	bl	8001588 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800492a:	e009      	b.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800492c:	f7fc fe2c 	bl	8001588 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d902      	bls.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	73fb      	strb	r3, [r7, #15]
          break;
 800493e:	e005      	b.n	800494c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004940:	4b0a      	ldr	r3, [pc, #40]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ef      	beq.n	800492c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004952:	4b06      	ldr	r3, [pc, #24]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	4904      	ldr	r1, [pc, #16]	@ (800496c <RCCEx_PLLSAI2_Config+0x1d8>)
 800495c:	4313      	orrs	r3, r2
 800495e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004960:	7bfb      	ldrb	r3, [r7, #15]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
 8004970:	07ff800f 	.word	0x07ff800f
 8004974:	ff9f800f 	.word	0xff9f800f
 8004978:	f9ff800f 	.word	0xf9ff800f

0800497c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e049      	b.n	8004a22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc fbf4 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fc14 	bl	80051e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d001      	beq.n	8004a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e04f      	b.n	8004ae4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a23      	ldr	r2, [pc, #140]	@ (8004af0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01d      	beq.n	8004aa2 <HAL_TIM_Base_Start_IT+0x76>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6e:	d018      	beq.n	8004aa2 <HAL_TIM_Base_Start_IT+0x76>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1f      	ldr	r2, [pc, #124]	@ (8004af4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_TIM_Base_Start_IT+0x76>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004af8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_TIM_Base_Start_IT+0x76>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1c      	ldr	r2, [pc, #112]	@ (8004afc <HAL_TIM_Base_Start_IT+0xd0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_TIM_Base_Start_IT+0x76>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1b      	ldr	r2, [pc, #108]	@ (8004b00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_TIM_Base_Start_IT+0x76>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d115      	bne.n	8004ace <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4b17      	ldr	r3, [pc, #92]	@ (8004b08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d015      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0xb4>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aba:	d011      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	e008      	b.n	8004ae0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e000      	b.n	8004ae2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40013400 	.word	0x40013400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	00010007 	.word	0x00010007

08004b0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e049      	b.n	8004bb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f841 	bl	8004bba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f000 fb4c 	bl	80051e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01b      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f06f 0202 	mvn.w	r2, #2
 8004c02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fac6 	bl	80051aa <HAL_TIM_IC_CaptureCallback>
 8004c1e:	e005      	b.n	8004c2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fab8 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fac9 	bl	80051be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01b      	beq.n	8004c7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f06f 0204 	mvn.w	r2, #4
 8004c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 faa0 	bl	80051aa <HAL_TIM_IC_CaptureCallback>
 8004c6a:	e005      	b.n	8004c78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fa92 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 faa3 	bl	80051be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0208 	mvn.w	r2, #8
 8004c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2204      	movs	r2, #4
 8004ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 0303 	and.w	r3, r3, #3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fa7a 	bl	80051aa <HAL_TIM_IC_CaptureCallback>
 8004cb6:	e005      	b.n	8004cc4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fa6c 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa7d 	bl	80051be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f06f 0210 	mvn.w	r2, #16
 8004ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2208      	movs	r2, #8
 8004cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fa54 	bl	80051aa <HAL_TIM_IC_CaptureCallback>
 8004d02:	e005      	b.n	8004d10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fa46 	bl	8005196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fa57 	bl	80051be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0201 	mvn.w	r2, #1
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7fb fc41 	bl	80005bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00c      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fee8 	bl	8005b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fee0 	bl	8005b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00c      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d007      	beq.n	8004db0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa11 	bl	80051d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00c      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0220 	mvn.w	r2, #32
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fea8 	bl	8005b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e0ff      	b.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b14      	cmp	r3, #20
 8004e06:	f200 80f0 	bhi.w	8004fea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e65 	.word	0x08004e65
 8004e14:	08004feb 	.word	0x08004feb
 8004e18:	08004feb 	.word	0x08004feb
 8004e1c:	08004feb 	.word	0x08004feb
 8004e20:	08004ea5 	.word	0x08004ea5
 8004e24:	08004feb 	.word	0x08004feb
 8004e28:	08004feb 	.word	0x08004feb
 8004e2c:	08004feb 	.word	0x08004feb
 8004e30:	08004ee7 	.word	0x08004ee7
 8004e34:	08004feb 	.word	0x08004feb
 8004e38:	08004feb 	.word	0x08004feb
 8004e3c:	08004feb 	.word	0x08004feb
 8004e40:	08004f27 	.word	0x08004f27
 8004e44:	08004feb 	.word	0x08004feb
 8004e48:	08004feb 	.word	0x08004feb
 8004e4c:	08004feb 	.word	0x08004feb
 8004e50:	08004f69 	.word	0x08004f69
 8004e54:	08004feb 	.word	0x08004feb
 8004e58:	08004feb 	.word	0x08004feb
 8004e5c:	08004feb 	.word	0x08004feb
 8004e60:	08004fa9 	.word	0x08004fa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fa62 	bl	8005334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0208 	orr.w	r2, r2, #8
 8004e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0204 	bic.w	r2, r2, #4
 8004e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6999      	ldr	r1, [r3, #24]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	619a      	str	r2, [r3, #24]
      break;
 8004ea2:	e0a5      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fad2 	bl	8005454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	021a      	lsls	r2, r3, #8
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	619a      	str	r2, [r3, #24]
      break;
 8004ee4:	e084      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fb3b 	bl	8005568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0208 	orr.w	r2, r2, #8
 8004f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0204 	bic.w	r2, r2, #4
 8004f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69d9      	ldr	r1, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	61da      	str	r2, [r3, #28]
      break;
 8004f24:	e064      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fba3 	bl	8005678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	021a      	lsls	r2, r3, #8
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	61da      	str	r2, [r3, #28]
      break;
 8004f66:	e043      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fbec 	bl	800574c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0208 	orr.w	r2, r2, #8
 8004f82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0204 	bic.w	r2, r2, #4
 8004f92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fa6:	e023      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fc30 	bl	8005814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fe8:	e002      	b.n	8004ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	75fb      	strb	r3, [r7, #23]
      break;
 8004fee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3718      	adds	r7, #24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop

08005004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIM_ConfigClockSource+0x1c>
 800501c:	2302      	movs	r3, #2
 800501e:	e0b6      	b.n	800518e <HAL_TIM_ConfigClockSource+0x18a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800503e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800504a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505c:	d03e      	beq.n	80050dc <HAL_TIM_ConfigClockSource+0xd8>
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005062:	f200 8087 	bhi.w	8005174 <HAL_TIM_ConfigClockSource+0x170>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506a:	f000 8086 	beq.w	800517a <HAL_TIM_ConfigClockSource+0x176>
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005072:	d87f      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
 8005074:	2b70      	cmp	r3, #112	@ 0x70
 8005076:	d01a      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0xaa>
 8005078:	2b70      	cmp	r3, #112	@ 0x70
 800507a:	d87b      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
 800507c:	2b60      	cmp	r3, #96	@ 0x60
 800507e:	d050      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x11e>
 8005080:	2b60      	cmp	r3, #96	@ 0x60
 8005082:	d877      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
 8005084:	2b50      	cmp	r3, #80	@ 0x50
 8005086:	d03c      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0xfe>
 8005088:	2b50      	cmp	r3, #80	@ 0x50
 800508a:	d873      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
 800508c:	2b40      	cmp	r3, #64	@ 0x40
 800508e:	d058      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x13e>
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	d86f      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
 8005094:	2b30      	cmp	r3, #48	@ 0x30
 8005096:	d064      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15e>
 8005098:	2b30      	cmp	r3, #48	@ 0x30
 800509a:	d86b      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
 800509c:	2b20      	cmp	r3, #32
 800509e:	d060      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15e>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d867      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15e>
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d05a      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15e>
 80050ac:	e062      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	f000 fc89 	bl	80059d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	609a      	str	r2, [r3, #8]
      break;
 80050da:	e04f      	b.n	800517c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ec:	f000 fc72 	bl	80059d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050fe:	609a      	str	r2, [r3, #8]
      break;
 8005100:	e03c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	461a      	mov	r2, r3
 8005110:	f000 fbe6 	bl	80058e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2150      	movs	r1, #80	@ 0x50
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fc3f 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005120:	e02c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800512e:	461a      	mov	r2, r3
 8005130:	f000 fc05 	bl	800593e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2160      	movs	r1, #96	@ 0x60
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fc2f 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005140:	e01c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	461a      	mov	r2, r3
 8005150:	f000 fbc6 	bl	80058e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2140      	movs	r1, #64	@ 0x40
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fc1f 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005160:	e00c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f000 fc16 	bl	800599e <TIM_ITRx_SetConfig>
      break;
 8005172:	e003      	b.n	800517c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      break;
 8005178:	e000      	b.n	800517c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800517a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a46      	ldr	r2, [pc, #280]	@ (8005314 <TIM_Base_SetConfig+0x12c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d00f      	beq.n	8005228 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a43      	ldr	r2, [pc, #268]	@ (8005318 <TIM_Base_SetConfig+0x130>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00b      	beq.n	8005228 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a42      	ldr	r2, [pc, #264]	@ (800531c <TIM_Base_SetConfig+0x134>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d007      	beq.n	8005228 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a41      	ldr	r2, [pc, #260]	@ (8005320 <TIM_Base_SetConfig+0x138>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d003      	beq.n	8005228 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a40      	ldr	r2, [pc, #256]	@ (8005324 <TIM_Base_SetConfig+0x13c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d108      	bne.n	800523a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a35      	ldr	r2, [pc, #212]	@ (8005314 <TIM_Base_SetConfig+0x12c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01f      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005248:	d01b      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a32      	ldr	r2, [pc, #200]	@ (8005318 <TIM_Base_SetConfig+0x130>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d017      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a31      	ldr	r2, [pc, #196]	@ (800531c <TIM_Base_SetConfig+0x134>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a30      	ldr	r2, [pc, #192]	@ (8005320 <TIM_Base_SetConfig+0x138>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00f      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2f      	ldr	r2, [pc, #188]	@ (8005324 <TIM_Base_SetConfig+0x13c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2e      	ldr	r2, [pc, #184]	@ (8005328 <TIM_Base_SetConfig+0x140>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2d      	ldr	r2, [pc, #180]	@ (800532c <TIM_Base_SetConfig+0x144>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0x9a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2c      	ldr	r2, [pc, #176]	@ (8005330 <TIM_Base_SetConfig+0x148>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a16      	ldr	r2, [pc, #88]	@ (8005314 <TIM_Base_SetConfig+0x12c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00f      	beq.n	80052e0 <TIM_Base_SetConfig+0xf8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <TIM_Base_SetConfig+0x13c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00b      	beq.n	80052e0 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a17      	ldr	r2, [pc, #92]	@ (8005328 <TIM_Base_SetConfig+0x140>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_Base_SetConfig+0xf8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a16      	ldr	r2, [pc, #88]	@ (800532c <TIM_Base_SetConfig+0x144>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_Base_SetConfig+0xf8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a15      	ldr	r2, [pc, #84]	@ (8005330 <TIM_Base_SetConfig+0x148>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d103      	bne.n	80052e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]
  }
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f023 0201 	bic.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2c      	ldr	r2, [pc, #176]	@ (8005440 <TIM_OC1_SetConfig+0x10c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00f      	beq.n	80053b4 <TIM_OC1_SetConfig+0x80>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a2b      	ldr	r2, [pc, #172]	@ (8005444 <TIM_OC1_SetConfig+0x110>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00b      	beq.n	80053b4 <TIM_OC1_SetConfig+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a2a      	ldr	r2, [pc, #168]	@ (8005448 <TIM_OC1_SetConfig+0x114>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d007      	beq.n	80053b4 <TIM_OC1_SetConfig+0x80>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a29      	ldr	r2, [pc, #164]	@ (800544c <TIM_OC1_SetConfig+0x118>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <TIM_OC1_SetConfig+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a28      	ldr	r2, [pc, #160]	@ (8005450 <TIM_OC1_SetConfig+0x11c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d10c      	bne.n	80053ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0308 	bic.w	r3, r3, #8
 80053ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f023 0304 	bic.w	r3, r3, #4
 80053cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005440 <TIM_OC1_SetConfig+0x10c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00f      	beq.n	80053f6 <TIM_OC1_SetConfig+0xc2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005444 <TIM_OC1_SetConfig+0x110>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00b      	beq.n	80053f6 <TIM_OC1_SetConfig+0xc2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a19      	ldr	r2, [pc, #100]	@ (8005448 <TIM_OC1_SetConfig+0x114>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <TIM_OC1_SetConfig+0xc2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a18      	ldr	r2, [pc, #96]	@ (800544c <TIM_OC1_SetConfig+0x118>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC1_SetConfig+0xc2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a17      	ldr	r2, [pc, #92]	@ (8005450 <TIM_OC1_SetConfig+0x11c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d111      	bne.n	800541a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 0210 	bic.w	r2, r3, #16
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	4313      	orrs	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0320 	bic.w	r3, r3, #32
 80054a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a28      	ldr	r2, [pc, #160]	@ (8005554 <TIM_OC2_SetConfig+0x100>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC2_SetConfig+0x6c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a27      	ldr	r2, [pc, #156]	@ (8005558 <TIM_OC2_SetConfig+0x104>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10d      	bne.n	80054dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <TIM_OC2_SetConfig+0x100>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00f      	beq.n	8005504 <TIM_OC2_SetConfig+0xb0>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <TIM_OC2_SetConfig+0x104>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00b      	beq.n	8005504 <TIM_OC2_SetConfig+0xb0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a1b      	ldr	r2, [pc, #108]	@ (800555c <TIM_OC2_SetConfig+0x108>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d007      	beq.n	8005504 <TIM_OC2_SetConfig+0xb0>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005560 <TIM_OC2_SetConfig+0x10c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC2_SetConfig+0xb0>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <TIM_OC2_SetConfig+0x110>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d113      	bne.n	800552c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800550a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40013400 	.word	0x40013400
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0303 	bic.w	r3, r3, #3
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a27      	ldr	r2, [pc, #156]	@ (8005664 <TIM_OC3_SetConfig+0xfc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC3_SetConfig+0x6a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a26      	ldr	r2, [pc, #152]	@ (8005668 <TIM_OC3_SetConfig+0x100>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10d      	bne.n	80055ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005664 <TIM_OC3_SetConfig+0xfc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00f      	beq.n	8005616 <TIM_OC3_SetConfig+0xae>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005668 <TIM_OC3_SetConfig+0x100>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00b      	beq.n	8005616 <TIM_OC3_SetConfig+0xae>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <TIM_OC3_SetConfig+0x104>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d007      	beq.n	8005616 <TIM_OC3_SetConfig+0xae>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <TIM_OC3_SetConfig+0x108>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_OC3_SetConfig+0xae>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <TIM_OC3_SetConfig+0x10c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d113      	bne.n	800563e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800561c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	621a      	str	r2, [r3, #32]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40013400 	.word	0x40013400
 800566c:	40014000 	.word	0x40014000
 8005670:	40014400 	.word	0x40014400
 8005674:	40014800 	.word	0x40014800

08005678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	021b      	lsls	r3, r3, #8
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	031b      	lsls	r3, r3, #12
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <TIM_OC4_SetConfig+0xc0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00f      	beq.n	80056fc <TIM_OC4_SetConfig+0x84>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a17      	ldr	r2, [pc, #92]	@ (800573c <TIM_OC4_SetConfig+0xc4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00b      	beq.n	80056fc <TIM_OC4_SetConfig+0x84>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a16      	ldr	r2, [pc, #88]	@ (8005740 <TIM_OC4_SetConfig+0xc8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d007      	beq.n	80056fc <TIM_OC4_SetConfig+0x84>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a15      	ldr	r2, [pc, #84]	@ (8005744 <TIM_OC4_SetConfig+0xcc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d003      	beq.n	80056fc <TIM_OC4_SetConfig+0x84>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a14      	ldr	r2, [pc, #80]	@ (8005748 <TIM_OC4_SetConfig+0xd0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d109      	bne.n	8005710 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	019b      	lsls	r3, r3, #6
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	621a      	str	r2, [r3, #32]
}
 800572a:	bf00      	nop
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40013400 	.word	0x40013400
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005790:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	041b      	lsls	r3, r3, #16
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a17      	ldr	r2, [pc, #92]	@ (8005800 <TIM_OC5_SetConfig+0xb4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00f      	beq.n	80057c6 <TIM_OC5_SetConfig+0x7a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a16      	ldr	r2, [pc, #88]	@ (8005804 <TIM_OC5_SetConfig+0xb8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00b      	beq.n	80057c6 <TIM_OC5_SetConfig+0x7a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a15      	ldr	r2, [pc, #84]	@ (8005808 <TIM_OC5_SetConfig+0xbc>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d007      	beq.n	80057c6 <TIM_OC5_SetConfig+0x7a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a14      	ldr	r2, [pc, #80]	@ (800580c <TIM_OC5_SetConfig+0xc0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC5_SetConfig+0x7a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a13      	ldr	r2, [pc, #76]	@ (8005810 <TIM_OC5_SetConfig+0xc4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d109      	bne.n	80057da <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40013400 	.word	0x40013400
 8005808:	40014000 	.word	0x40014000
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800

08005814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800585a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	051b      	lsls	r3, r3, #20
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a18      	ldr	r2, [pc, #96]	@ (80058cc <TIM_OC6_SetConfig+0xb8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00f      	beq.n	8005890 <TIM_OC6_SetConfig+0x7c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a17      	ldr	r2, [pc, #92]	@ (80058d0 <TIM_OC6_SetConfig+0xbc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00b      	beq.n	8005890 <TIM_OC6_SetConfig+0x7c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a16      	ldr	r2, [pc, #88]	@ (80058d4 <TIM_OC6_SetConfig+0xc0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d007      	beq.n	8005890 <TIM_OC6_SetConfig+0x7c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a15      	ldr	r2, [pc, #84]	@ (80058d8 <TIM_OC6_SetConfig+0xc4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <TIM_OC6_SetConfig+0x7c>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a14      	ldr	r2, [pc, #80]	@ (80058dc <TIM_OC6_SetConfig+0xc8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d109      	bne.n	80058a4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005896:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	029b      	lsls	r3, r3, #10
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	621a      	str	r2, [r3, #32]
}
 80058be:	bf00      	nop
 80058c0:	371c      	adds	r7, #28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40013400 	.word	0x40013400
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0201 	bic.w	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800590a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f023 030a 	bic.w	r3, r3, #10
 800591c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800593e:	b480      	push	{r7}
 8005940:	b087      	sub	sp, #28
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f023 0210 	bic.w	r2, r3, #16
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	031b      	lsls	r3, r3, #12
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800597a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f043 0307 	orr.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	021a      	lsls	r2, r3, #8
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	371c      	adds	r7, #28
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e068      	b.n	8005afe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2e      	ldr	r2, [pc, #184]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d108      	bne.n	8005a72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1e      	ldr	r2, [pc, #120]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01d      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a9e:	d018      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1a      	ldr	r2, [pc, #104]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a18      	ldr	r2, [pc, #96]	@ (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d009      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a13      	ldr	r2, [pc, #76]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d004      	beq.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d10c      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40014000 	.word	0x40014000

08005b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e042      	b.n	8005bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7fb fb9d 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2224      	movs	r2, #36	@ 0x24
 8005b8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fb24 	bl	80061f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f825 	bl	8005c00 <UART_SetConfig>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e01b      	b.n	8005bf8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fba3 	bl	800633c <UART_CheckIdleState>
 8005bf6:	4603      	mov	r3, r0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c04:	b08c      	sub	sp, #48	@ 0x30
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4baa      	ldr	r3, [pc, #680]	@ (8005ed8 <UART_SetConfig+0x2d8>)
 8005c30:	4013      	ands	r3, r2
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	6812      	ldr	r2, [r2, #0]
 8005c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a9f      	ldr	r2, [pc, #636]	@ (8005edc <UART_SetConfig+0x2dc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	f023 010f 	bic.w	r1, r3, #15
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a90      	ldr	r2, [pc, #576]	@ (8005ee0 <UART_SetConfig+0x2e0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d125      	bne.n	8005cf0 <UART_SetConfig+0xf0>
 8005ca4:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee4 <UART_SetConfig+0x2e4>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	d81a      	bhi.n	8005ce8 <UART_SetConfig+0xe8>
 8005cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb8 <UART_SetConfig+0xb8>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005cc9 	.word	0x08005cc9
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005ce1 	.word	0x08005ce1
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cce:	e116      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd6:	e112      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cde:	e10e      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce6:	e10a      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cee:	e106      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7c      	ldr	r2, [pc, #496]	@ (8005ee8 <UART_SetConfig+0x2e8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d138      	bne.n	8005d6c <UART_SetConfig+0x16c>
 8005cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8005ee4 <UART_SetConfig+0x2e4>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d00:	f003 030c 	and.w	r3, r3, #12
 8005d04:	2b0c      	cmp	r3, #12
 8005d06:	d82d      	bhi.n	8005d64 <UART_SetConfig+0x164>
 8005d08:	a201      	add	r2, pc, #4	@ (adr r2, 8005d10 <UART_SetConfig+0x110>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d65 	.word	0x08005d65
 8005d18:	08005d65 	.word	0x08005d65
 8005d1c:	08005d65 	.word	0x08005d65
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d65 	.word	0x08005d65
 8005d28:	08005d65 	.word	0x08005d65
 8005d2c:	08005d65 	.word	0x08005d65
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	08005d65 	.word	0x08005d65
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d5d 	.word	0x08005d5d
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4a:	e0d8      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d52:	e0d4      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5a:	e0d0      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d62:	e0cc      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6a:	e0c8      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5e      	ldr	r2, [pc, #376]	@ (8005eec <UART_SetConfig+0x2ec>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d125      	bne.n	8005dc2 <UART_SetConfig+0x1c2>
 8005d76:	4b5b      	ldr	r3, [pc, #364]	@ (8005ee4 <UART_SetConfig+0x2e4>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d80:	2b30      	cmp	r3, #48	@ 0x30
 8005d82:	d016      	beq.n	8005db2 <UART_SetConfig+0x1b2>
 8005d84:	2b30      	cmp	r3, #48	@ 0x30
 8005d86:	d818      	bhi.n	8005dba <UART_SetConfig+0x1ba>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d00a      	beq.n	8005da2 <UART_SetConfig+0x1a2>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d814      	bhi.n	8005dba <UART_SetConfig+0x1ba>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <UART_SetConfig+0x19a>
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d008      	beq.n	8005daa <UART_SetConfig+0x1aa>
 8005d98:	e00f      	b.n	8005dba <UART_SetConfig+0x1ba>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da0:	e0ad      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005da2:	2302      	movs	r3, #2
 8005da4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da8:	e0a9      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005daa:	2304      	movs	r3, #4
 8005dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db0:	e0a5      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005db2:	2308      	movs	r3, #8
 8005db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db8:	e0a1      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005dba:	2310      	movs	r3, #16
 8005dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc0:	e09d      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef0 <UART_SetConfig+0x2f0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d125      	bne.n	8005e18 <UART_SetConfig+0x218>
 8005dcc:	4b45      	ldr	r3, [pc, #276]	@ (8005ee4 <UART_SetConfig+0x2e4>)
 8005dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005dd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005dd8:	d016      	beq.n	8005e08 <UART_SetConfig+0x208>
 8005dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ddc:	d818      	bhi.n	8005e10 <UART_SetConfig+0x210>
 8005dde:	2b80      	cmp	r3, #128	@ 0x80
 8005de0:	d00a      	beq.n	8005df8 <UART_SetConfig+0x1f8>
 8005de2:	2b80      	cmp	r3, #128	@ 0x80
 8005de4:	d814      	bhi.n	8005e10 <UART_SetConfig+0x210>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <UART_SetConfig+0x1f0>
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d008      	beq.n	8005e00 <UART_SetConfig+0x200>
 8005dee:	e00f      	b.n	8005e10 <UART_SetConfig+0x210>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005df6:	e082      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfe:	e07e      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e06:	e07a      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0e:	e076      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e072      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a35      	ldr	r2, [pc, #212]	@ (8005ef4 <UART_SetConfig+0x2f4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d12a      	bne.n	8005e78 <UART_SetConfig+0x278>
 8005e22:	4b30      	ldr	r3, [pc, #192]	@ (8005ee4 <UART_SetConfig+0x2e4>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e30:	d01a      	beq.n	8005e68 <UART_SetConfig+0x268>
 8005e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e36:	d81b      	bhi.n	8005e70 <UART_SetConfig+0x270>
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e3c:	d00c      	beq.n	8005e58 <UART_SetConfig+0x258>
 8005e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e42:	d815      	bhi.n	8005e70 <UART_SetConfig+0x270>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <UART_SetConfig+0x250>
 8005e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4c:	d008      	beq.n	8005e60 <UART_SetConfig+0x260>
 8005e4e:	e00f      	b.n	8005e70 <UART_SetConfig+0x270>
 8005e50:	2300      	movs	r3, #0
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e56:	e052      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e5e:	e04e      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e60:	2304      	movs	r3, #4
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e66:	e04a      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e68:	2308      	movs	r3, #8
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e6e:	e046      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e70:	2310      	movs	r3, #16
 8005e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e76:	e042      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	@ (8005edc <UART_SetConfig+0x2dc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d13a      	bne.n	8005ef8 <UART_SetConfig+0x2f8>
 8005e82:	4b18      	ldr	r3, [pc, #96]	@ (8005ee4 <UART_SetConfig+0x2e4>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e90:	d01a      	beq.n	8005ec8 <UART_SetConfig+0x2c8>
 8005e92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e96:	d81b      	bhi.n	8005ed0 <UART_SetConfig+0x2d0>
 8005e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e9c:	d00c      	beq.n	8005eb8 <UART_SetConfig+0x2b8>
 8005e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea2:	d815      	bhi.n	8005ed0 <UART_SetConfig+0x2d0>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <UART_SetConfig+0x2b0>
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eac:	d008      	beq.n	8005ec0 <UART_SetConfig+0x2c0>
 8005eae:	e00f      	b.n	8005ed0 <UART_SetConfig+0x2d0>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005eb6:	e022      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ebe:	e01e      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ec6:	e01a      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ece:	e016      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ed6:	e012      	b.n	8005efe <UART_SetConfig+0x2fe>
 8005ed8:	cfff69f3 	.word	0xcfff69f3
 8005edc:	40008000 	.word	0x40008000
 8005ee0:	40013800 	.word	0x40013800
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	40004400 	.word	0x40004400
 8005eec:	40004800 	.word	0x40004800
 8005ef0:	40004c00 	.word	0x40004c00
 8005ef4:	40005000 	.word	0x40005000
 8005ef8:	2310      	movs	r3, #16
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4aae      	ldr	r2, [pc, #696]	@ (80061bc <UART_SetConfig+0x5bc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	f040 8097 	bne.w	8006038 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f0e:	2b08      	cmp	r3, #8
 8005f10:	d823      	bhi.n	8005f5a <UART_SetConfig+0x35a>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <UART_SetConfig+0x318>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f5b 	.word	0x08005f5b
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f5b 	.word	0x08005f5b
 8005f28:	08005f4b 	.word	0x08005f4b
 8005f2c:	08005f5b 	.word	0x08005f5b
 8005f30:	08005f5b 	.word	0x08005f5b
 8005f34:	08005f5b 	.word	0x08005f5b
 8005f38:	08005f53 	.word	0x08005f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f3c:	f7fd ff1a 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8005f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f42:	e010      	b.n	8005f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f44:	4b9e      	ldr	r3, [pc, #632]	@ (80061c0 <UART_SetConfig+0x5c0>)
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f48:	e00d      	b.n	8005f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4a:	f7fd fe7b 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 8005f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f50:	e009      	b.n	8005f66 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f58:	e005      	b.n	8005f66 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8130 	beq.w	80061ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f72:	4a94      	ldr	r2, [pc, #592]	@ (80061c4 <UART_SetConfig+0x5c4>)
 8005f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	4413      	add	r3, r2
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d305      	bcc.n	8005f9e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d903      	bls.n	8005fa6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005fa4:	e113      	b.n	80061ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	2200      	movs	r2, #0
 8005faa:	60bb      	str	r3, [r7, #8]
 8005fac:	60fa      	str	r2, [r7, #12]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	4a84      	ldr	r2, [pc, #528]	@ (80061c4 <UART_SetConfig+0x5c4>)
 8005fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2200      	movs	r2, #0
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fc8:	f7fa f918 	bl	80001fc <__aeabi_uldivmod>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	020b      	lsls	r3, r1, #8
 8005fde:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fe2:	0202      	lsls	r2, r0, #8
 8005fe4:	6979      	ldr	r1, [r7, #20]
 8005fe6:	6849      	ldr	r1, [r1, #4]
 8005fe8:	0849      	lsrs	r1, r1, #1
 8005fea:	2000      	movs	r0, #0
 8005fec:	460c      	mov	r4, r1
 8005fee:	4605      	mov	r5, r0
 8005ff0:	eb12 0804 	adds.w	r8, r2, r4
 8005ff4:	eb43 0905 	adc.w	r9, r3, r5
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	469a      	mov	sl, r3
 8006000:	4693      	mov	fp, r2
 8006002:	4652      	mov	r2, sl
 8006004:	465b      	mov	r3, fp
 8006006:	4640      	mov	r0, r8
 8006008:	4649      	mov	r1, r9
 800600a:	f7fa f8f7 	bl	80001fc <__aeabi_uldivmod>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	4613      	mov	r3, r2
 8006014:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800601c:	d308      	bcc.n	8006030 <UART_SetConfig+0x430>
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006024:	d204      	bcs.n	8006030 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a3a      	ldr	r2, [r7, #32]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	e0ce      	b.n	80061ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006036:	e0ca      	b.n	80061ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006040:	d166      	bne.n	8006110 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006042:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006046:	2b08      	cmp	r3, #8
 8006048:	d827      	bhi.n	800609a <UART_SetConfig+0x49a>
 800604a:	a201      	add	r2, pc, #4	@ (adr r2, 8006050 <UART_SetConfig+0x450>)
 800604c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006050:	08006075 	.word	0x08006075
 8006054:	0800607d 	.word	0x0800607d
 8006058:	08006085 	.word	0x08006085
 800605c:	0800609b 	.word	0x0800609b
 8006060:	0800608b 	.word	0x0800608b
 8006064:	0800609b 	.word	0x0800609b
 8006068:	0800609b 	.word	0x0800609b
 800606c:	0800609b 	.word	0x0800609b
 8006070:	08006093 	.word	0x08006093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006074:	f7fd fe7e 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8006078:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800607a:	e014      	b.n	80060a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800607c:	f7fd fe90 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8006080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006082:	e010      	b.n	80060a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006084:	4b4e      	ldr	r3, [pc, #312]	@ (80061c0 <UART_SetConfig+0x5c0>)
 8006086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006088:	e00d      	b.n	80060a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800608a:	f7fd fddb 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 800608e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006090:	e009      	b.n	80060a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006098:	e005      	b.n	80060a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8090 	beq.w	80061ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b2:	4a44      	ldr	r2, [pc, #272]	@ (80061c4 <UART_SetConfig+0x5c4>)
 80060b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b8:	461a      	mov	r2, r3
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80060c0:	005a      	lsls	r2, r3, #1
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	441a      	add	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b0f      	cmp	r3, #15
 80060d8:	d916      	bls.n	8006108 <UART_SetConfig+0x508>
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e0:	d212      	bcs.n	8006108 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f023 030f 	bic.w	r3, r3, #15
 80060ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	8bfb      	ldrh	r3, [r7, #30]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	8bfa      	ldrh	r2, [r7, #30]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	e062      	b.n	80061ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800610e:	e05e      	b.n	80061ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006110:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006114:	2b08      	cmp	r3, #8
 8006116:	d828      	bhi.n	800616a <UART_SetConfig+0x56a>
 8006118:	a201      	add	r2, pc, #4	@ (adr r2, 8006120 <UART_SetConfig+0x520>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006145 	.word	0x08006145
 8006124:	0800614d 	.word	0x0800614d
 8006128:	08006155 	.word	0x08006155
 800612c:	0800616b 	.word	0x0800616b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800616b 	.word	0x0800616b
 8006138:	0800616b 	.word	0x0800616b
 800613c:	0800616b 	.word	0x0800616b
 8006140:	08006163 	.word	0x08006163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fd fe16 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8006148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800614a:	e014      	b.n	8006176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fd fe28 	bl	8003da0 <HAL_RCC_GetPCLK2Freq>
 8006150:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006152:	e010      	b.n	8006176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006154:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <UART_SetConfig+0x5c0>)
 8006156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006158:	e00d      	b.n	8006176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fd fd73 	bl	8003c44 <HAL_RCC_GetSysClockFreq>
 800615e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006160:	e009      	b.n	8006176 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006168:	e005      	b.n	8006176 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006174:	bf00      	nop
    }

    if (pclk != 0U)
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d028      	beq.n	80061ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	4a10      	ldr	r2, [pc, #64]	@ (80061c4 <UART_SetConfig+0x5c4>)
 8006182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006186:	461a      	mov	r2, r3
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	fbb3 f2f2 	udiv	r2, r3, r2
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	441a      	add	r2, r3
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	2b0f      	cmp	r3, #15
 80061a4:	d910      	bls.n	80061c8 <UART_SetConfig+0x5c8>
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ac:	d20c      	bcs.n	80061c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60da      	str	r2, [r3, #12]
 80061b8:	e009      	b.n	80061ce <UART_SetConfig+0x5ce>
 80061ba:	bf00      	nop
 80061bc:	40008000 	.word	0x40008000
 80061c0:	00f42400 	.word	0x00f42400
 80061c4:	080068f4 	.word	0x080068f4
      }
      else
      {
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2201      	movs	r2, #1
 80061da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2200      	movs	r2, #0
 80061e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80061ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3730      	adds	r7, #48	@ 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	f003 0304 	and.w	r3, r3, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628c:	f003 0310 	and.w	r3, r3, #16
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01a      	beq.n	800630e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062f6:	d10a      	bne.n	800630e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
  }
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b098      	sub	sp, #96	@ 0x60
 8006340:	af02      	add	r7, sp, #8
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800634c:	f7fb f91c 	bl	8001588 <HAL_GetTick>
 8006350:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0308 	and.w	r3, r3, #8
 800635c:	2b08      	cmp	r3, #8
 800635e:	d12f      	bne.n	80063c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006368:	2200      	movs	r2, #0
 800636a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f88e 	bl	8006490 <UART_WaitOnFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d022      	beq.n	80063c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800638e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006398:	647b      	str	r3, [r7, #68]	@ 0x44
 800639a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800639e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e6      	bne.n	800637a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e063      	b.n	8006488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d149      	bne.n	8006462 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063d6:	2200      	movs	r2, #0
 80063d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f857 	bl	8006490 <UART_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d03c      	beq.n	8006462 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	623b      	str	r3, [r7, #32]
   return(result);
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006406:	633b      	str	r3, [r7, #48]	@ 0x30
 8006408:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800640c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e6      	bne.n	80063e8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3308      	adds	r3, #8
 8006420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	e853 3f00 	ldrex	r3, [r3]
 8006428:	60fb      	str	r3, [r7, #12]
   return(result);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800643a:	61fa      	str	r2, [r7, #28]
 800643c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	69b9      	ldr	r1, [r7, #24]
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	617b      	str	r3, [r7, #20]
   return(result);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e5      	bne.n	800641a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e012      	b.n	8006488 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3758      	adds	r7, #88	@ 0x58
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a0:	e04f      	b.n	8006542 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d04b      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064aa:	f7fb f86d 	bl	8001588 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e04e      	b.n	8006562 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d037      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b80      	cmp	r3, #128	@ 0x80
 80064d6:	d034      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b40      	cmp	r3, #64	@ 0x40
 80064dc:	d031      	beq.n	8006542 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d110      	bne.n	800650e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2208      	movs	r2, #8
 80064f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f838 	bl	800656a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2208      	movs	r2, #8
 80064fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e029      	b.n	8006562 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006518:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800651c:	d111      	bne.n	8006542 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f81e 	bl	800656a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e00f      	b.n	8006562 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69da      	ldr	r2, [r3, #28]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4013      	ands	r3, r2
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	429a      	cmp	r2, r3
 8006550:	bf0c      	ite	eq
 8006552:	2301      	moveq	r3, #1
 8006554:	2300      	movne	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	429a      	cmp	r2, r3
 800655e:	d0a0      	beq.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800656a:	b480      	push	{r7}
 800656c:	b095      	sub	sp, #84	@ 0x54
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657a:	e853 3f00 	ldrex	r3, [r3]
 800657e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006590:	643b      	str	r3, [r7, #64]	@ 0x40
 8006592:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e6      	bne.n	8006572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065ba:	f023 0301 	bic.w	r3, r3, #1
 80065be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e3      	bne.n	80065a4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d118      	bne.n	8006616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 0310 	bic.w	r3, r3, #16
 80065f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006602:	61bb      	str	r3, [r7, #24]
 8006604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	613b      	str	r3, [r7, #16]
   return(result);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e6      	bne.n	80065e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800662a:	bf00      	nop
 800662c:	3754      	adds	r7, #84	@ 0x54
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_UARTEx_DisableFifoMode+0x16>
 8006648:	2302      	movs	r3, #2
 800664a:	e027      	b.n	800669c <HAL_UARTEx_DisableFifoMode+0x66>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2224      	movs	r2, #36	@ 0x24
 8006658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800667a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066bc:	2302      	movs	r3, #2
 80066be:	e02d      	b.n	800671c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2224      	movs	r2, #36	@ 0x24
 80066cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f84f 	bl	80067a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006738:	2302      	movs	r3, #2
 800673a:	e02d      	b.n	8006798 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2224      	movs	r2, #36	@ 0x24
 8006748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f811 	bl	80067a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d108      	bne.n	80067c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067c0:	e031      	b.n	8006826 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067c2:	2308      	movs	r3, #8
 80067c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80067c6:	2308      	movs	r3, #8
 80067c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	0e5b      	lsrs	r3, r3, #25
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	0f5b      	lsrs	r3, r3, #29
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	7b3a      	ldrb	r2, [r7, #12]
 80067ee:	4911      	ldr	r1, [pc, #68]	@ (8006834 <UARTEx_SetNbDataToProcess+0x94>)
 80067f0:	5c8a      	ldrb	r2, [r1, r2]
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80067f6:	7b3a      	ldrb	r2, [r7, #12]
 80067f8:	490f      	ldr	r1, [pc, #60]	@ (8006838 <UARTEx_SetNbDataToProcess+0x98>)
 80067fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006800:	b29a      	uxth	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	7b7a      	ldrb	r2, [r7, #13]
 800680c:	4909      	ldr	r1, [pc, #36]	@ (8006834 <UARTEx_SetNbDataToProcess+0x94>)
 800680e:	5c8a      	ldrb	r2, [r1, r2]
 8006810:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006814:	7b7a      	ldrb	r2, [r7, #13]
 8006816:	4908      	ldr	r1, [pc, #32]	@ (8006838 <UARTEx_SetNbDataToProcess+0x98>)
 8006818:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800681a:	fb93 f3f2 	sdiv	r3, r3, r2
 800681e:	b29a      	uxth	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	0800690c 	.word	0x0800690c
 8006838:	08006914 	.word	0x08006914

0800683c <memset>:
 800683c:	4402      	add	r2, r0
 800683e:	4603      	mov	r3, r0
 8006840:	4293      	cmp	r3, r2
 8006842:	d100      	bne.n	8006846 <memset+0xa>
 8006844:	4770      	bx	lr
 8006846:	f803 1b01 	strb.w	r1, [r3], #1
 800684a:	e7f9      	b.n	8006840 <memset+0x4>

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4d0d      	ldr	r5, [pc, #52]	@ (8006884 <__libc_init_array+0x38>)
 8006850:	4c0d      	ldr	r4, [pc, #52]	@ (8006888 <__libc_init_array+0x3c>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	2600      	movs	r6, #0
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	4d0b      	ldr	r5, [pc, #44]	@ (800688c <__libc_init_array+0x40>)
 800685e:	4c0c      	ldr	r4, [pc, #48]	@ (8006890 <__libc_init_array+0x44>)
 8006860:	f000 f818 	bl	8006894 <_init>
 8006864:	1b64      	subs	r4, r4, r5
 8006866:	10a4      	asrs	r4, r4, #2
 8006868:	2600      	movs	r6, #0
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	f855 3b04 	ldr.w	r3, [r5], #4
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	f855 3b04 	ldr.w	r3, [r5], #4
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	08006924 	.word	0x08006924
 8006888:	08006924 	.word	0x08006924
 800688c:	08006924 	.word	0x08006924
 8006890:	08006928 	.word	0x08006928

08006894 <_init>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr

080068a0 <_fini>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr
