
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe8  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013280  080081a8  080081a8  000091a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b428  0801b428  0001d05c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b428  0801b428  0001c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b430  0801b430  0001d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b430  0801b430  0001c430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b434  0801b434  0001c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0801b438  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040e2c  2000005c  0801b494  0001d05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040e88  0801b494  0001de88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df6d  00000000  00000000  0001d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345c  00000000  00000000  0003aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  0003e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001276  00000000  00000000  0003fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca30  00000000  00000000  00040e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c56e  00000000  00000000  0006d8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114378  00000000  00000000  00089e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  0019e1b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b84  00000000  00000000  0019e26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001a4df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000067f  00000000  00000000  001a4e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000050  00000000  00000000  001a54df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008190 	.word	0x08008190

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08008190 	.word	0x08008190

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <FindLoudSection>:

// HELPER FUNCTIONS FOR GUITAR TUNING //


// Find the loudest section of the buffer (handles decaying plucks)
uint32_t FindLoudSection(int32_t* buffer, uint32_t size) {
 80005a0:	b480      	push	{r7}
 80005a2:	b089      	sub	sp, #36	@ 0x24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
    int32_t maxVal = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61fb      	str	r3, [r7, #28]
    uint32_t endIndex = size;
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	61bb      	str	r3, [r7, #24]

    // Find peak volume
    for(uint32_t i = 0; i < size; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e011      	b.n	80005dc <FindLoudSection+0x3c>
        int32_t absVal = buffer[i] > 0 ? buffer[i] : -buffer[i]; // Manual abs
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bfb8      	it	lt
 80005c6:	425b      	neglt	r3, r3
 80005c8:	60bb      	str	r3, [r7, #8]
        if(absVal > maxVal) maxVal = absVal;
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	dd01      	ble.n	80005d6 <FindLoudSection+0x36>
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	61fb      	str	r3, [r7, #28]
    for(uint32_t i = 0; i < size; i++) {
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3e9      	bcc.n	80005b8 <FindLoudSection+0x18>
    }

    // Find where signal drops below 20% of peak
    int32_t threshold = maxVal / 5;
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	4a15      	ldr	r2, [pc, #84]	@ (800063c <FindLoudSection+0x9c>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	1052      	asrs	r2, r2, #1
 80005ee:	17db      	asrs	r3, r3, #31
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < size; i++) {
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
 80005f8:	e010      	b.n	800061c <FindLoudSection+0x7c>
        if((buffer[i] > 0 ? buffer[i] : -buffer[i]) < threshold) {
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	bfb8      	it	lt
 8000608:	425b      	neglt	r3, r3
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	429a      	cmp	r2, r3
 800060e:	dd02      	ble.n	8000616 <FindLoudSection+0x76>
            endIndex = i;
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	61bb      	str	r3, [r7, #24]
            break;
 8000614:	e006      	b.n	8000624 <FindLoudSection+0x84>
    for(uint32_t i = 0; i < size; i++) {
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	3301      	adds	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	429a      	cmp	r2, r3
 8000622:	d3ea      	bcc.n	80005fa <FindLoudSection+0x5a>
        }
    }

    // Return constrained value
    return endIndex > FFT_SIZE ? FFT_SIZE : endIndex;
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800062a:	bf28      	it	cs
 800062c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
}
 8000630:	4618      	mov	r0, r3
 8000632:	3724      	adds	r7, #36	@ 0x24
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	66666667 	.word	0x66666667

08000640 <AutoCorrelationTune>:

// Autocorrelation-based pitch detection
float AutoCorrelationTune(int32_t* buffer, uint32_t size) {
 8000640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000644:	b093      	sub	sp, #76	@ 0x4c
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
 800064c:	466b      	mov	r3, sp
 800064e:	461e      	mov	r6, r3

    // Calculate lag bounds
    uint32_t minLag = SAMPLE_RATE / GUITAR_MAX_FREQ; // ~110 samples
 8000650:	236e      	movs	r3, #110	@ 0x6e
 8000652:	623b      	str	r3, [r7, #32]
    uint32_t maxLag = SAMPLE_RATE / GUITAR_MIN_FREQ; // ~551 samples
 8000654:	f240 2327 	movw	r3, #551	@ 0x227
 8000658:	61fb      	str	r3, [r7, #28]

    // Safety checks
    if(size < maxLag*2) {
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	d205      	bcs.n	8000670 <AutoCorrelationTune+0x30>
        UART_Print("Need 1.1k samples minimum\r\n");
 8000664:	4877      	ldr	r0, [pc, #476]	@ (8000844 <AutoCorrelationTune+0x204>)
 8000666:	f000 f9cd 	bl	8000a04 <UART_Print>
        return 0;
 800066a:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8000848 <AutoCorrelationTune+0x208>
 800066e:	e0df      	b.n	8000830 <AutoCorrelationTune+0x1f0>
    }

    // Convert uint16_t to float32_t (-1 to +1 range)
    float32_t floatBuf[size];
 8000670:	6839      	ldr	r1, [r7, #0]
 8000672:	460b      	mov	r3, r1
 8000674:	3b01      	subs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	2300      	movs	r3, #0
 800067a:	4688      	mov	r8, r1
 800067c:	4699      	mov	r9, r3
 800067e:	f04f 0200 	mov.w	r2, #0
 8000682:	f04f 0300 	mov.w	r3, #0
 8000686:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800068a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800068e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000692:	2300      	movs	r3, #0
 8000694:	460c      	mov	r4, r1
 8000696:	461d      	mov	r5, r3
 8000698:	f04f 0200 	mov.w	r2, #0
 800069c:	f04f 0300 	mov.w	r3, #0
 80006a0:	016b      	lsls	r3, r5, #5
 80006a2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80006a6:	0162      	lsls	r2, r4, #5
 80006a8:	008b      	lsls	r3, r1, #2
 80006aa:	3307      	adds	r3, #7
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	ebad 0d03 	sub.w	sp, sp, r3
 80006b4:	466b      	mov	r3, sp
 80006b6:	3303      	adds	r3, #3
 80006b8:	089b      	lsrs	r3, r3, #2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	617b      	str	r3, [r7, #20]
    for(uint32_t i=0; i<size; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80006c2:	e017      	b.n	80006f4 <AutoCorrelationTune+0xb4>
        floatBuf[i] = (buffer[i] - 2048) / 2048.0f; // 12-bit DAC center at 2048
 80006c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80006d2:	ee07 3a90 	vmov	s15, r3
 80006d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006da:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 800084c <AutoCorrelationTune+0x20c>
 80006de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	edc3 7a00 	vstr	s15, [r3]
    for(uint32_t i=0; i<size; i++) {
 80006ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006f0:	3301      	adds	r3, #1
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80006f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d3e3      	bcc.n	80006c4 <AutoCorrelationTune+0x84>
    }

    float maxCorrelation = -1;
 80006fc:	4b54      	ldr	r3, [pc, #336]	@ (8000850 <AutoCorrelationTune+0x210>)
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t bestLag = minLag;
 8000700:	6a3b      	ldr	r3, [r7, #32]
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Sample every 4th lag for speed (we can interpolate later)
    for(uint32_t lag = minLag; lag < maxLag; lag += 4) {
 8000704:	6a3b      	ldr	r3, [r7, #32]
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000708:	e036      	b.n	8000778 <AutoCorrelationTune+0x138>
        float correlation = 0;
 800070a:	f04f 0300 	mov.w	r3, #0
 800070e:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t compareLength = size - lag;
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	60bb      	str	r3, [r7, #8]

        // Only check every 4th sample for speed
        for(uint32_t i = 0; i < compareLength; i += 4) {
 8000718:	2300      	movs	r3, #0
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
 800071c:	e018      	b.n	8000750 <AutoCorrelationTune+0x110>
            correlation += floatBuf[i] * floatBuf[i+lag];
 800071e:	697a      	ldr	r2, [r7, #20]
 8000720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	ed93 7a00 	vldr	s14, [r3]
 800072a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800072c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800072e:	4413      	add	r3, r2
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	edd3 7a00 	vldr	s15, [r3]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000746:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        for(uint32_t i = 0; i < compareLength; i += 4) {
 800074a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800074c:	3304      	adds	r3, #4
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000750:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3e2      	bcc.n	800071e <AutoCorrelationTune+0xde>
        }

        if(correlation > maxCorrelation) {
 8000758:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800075c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000768:	dd03      	ble.n	8000772 <AutoCorrelationTune+0x132>
            maxCorrelation = correlation;
 800076a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800076c:	643b      	str	r3, [r7, #64]	@ 0x40
            bestLag = lag;
 800076e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000770:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for(uint32_t lag = minLag; lag < maxLag; lag += 4) {
 8000772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000774:	3304      	adds	r3, #4
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	429a      	cmp	r2, r3
 800077e:	d3c4      	bcc.n	800070a <AutoCorrelationTune+0xca>
        }
    }

    // Refine around the best lag (+-3 samples)
    maxCorrelation = -1;
 8000780:	4b33      	ldr	r3, [pc, #204]	@ (8000850 <AutoCorrelationTune+0x210>)
 8000782:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t refineStart = bestLag > 3 ? bestLag - 3 : minLag;
 8000784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000786:	2b03      	cmp	r3, #3
 8000788:	d902      	bls.n	8000790 <AutoCorrelationTune+0x150>
 800078a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <AutoCorrelationTune+0x152>
 8000790:	6a3b      	ldr	r3, [r7, #32]
 8000792:	613b      	str	r3, [r7, #16]
    uint32_t refineEnd = bestLag + 3 < maxLag ? bestLag + 3 : maxLag;
 8000794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000796:	3303      	adds	r3, #3
 8000798:	69fa      	ldr	r2, [r7, #28]
 800079a:	4293      	cmp	r3, r2
 800079c:	bf28      	it	cs
 800079e:	4613      	movcs	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]

    for(uint32_t lag = refineStart; lag <= refineEnd; lag++) {
 80007a2:	693b      	ldr	r3, [r7, #16]
 80007a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007a6:	e036      	b.n	8000816 <AutoCorrelationTune+0x1d6>
        float correlation = 0;
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
        for(uint32_t i = 0; i < size - lag; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b2:	e01a      	b.n	80007ea <AutoCorrelationTune+0x1aa>
            correlation += buffer[i] * buffer[i+lag];
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	4413      	add	r3, r2
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007c2:	440a      	add	r2, r1
 80007c4:	0092      	lsls	r2, r2, #2
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	440a      	add	r2, r1
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80007dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for(uint32_t i = 0; i < size - lag; i++) {
 80007e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e6:	3301      	adds	r3, #1
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ea:	683a      	ldr	r2, [r7, #0]
 80007ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3de      	bcc.n	80007b4 <AutoCorrelationTune+0x174>
        }

        if(correlation > maxCorrelation) {
 80007f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80007fa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80007fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000806:	dd03      	ble.n	8000810 <AutoCorrelationTune+0x1d0>
            maxCorrelation = correlation;
 8000808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800080a:	643b      	str	r3, [r7, #64]	@ 0x40
            bestLag = lag;
 800080c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for(uint32_t lag = refineStart; lag <= refineEnd; lag++) {
 8000810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000812:	3301      	adds	r3, #1
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	429a      	cmp	r2, r3
 800081c:	d9c4      	bls.n	80007a8 <AutoCorrelationTune+0x168>
        }
    }

    return (float)SAMPLE_RATE / bestLag;
 800081e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000820:	ee07 3a90 	vmov	s15, r3
 8000824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000828:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000854 <AutoCorrelationTune+0x214>
 800082c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000830:	46b5      	mov	sp, r6
}
 8000832:	eef0 7a47 	vmov.f32	s15, s14
 8000836:	eeb0 0a67 	vmov.f32	s0, s15
 800083a:	374c      	adds	r7, #76	@ 0x4c
 800083c:	46bd      	mov	sp, r7
 800083e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000842:	bf00      	nop
 8000844:	080081a8 	.word	0x080081a8
 8000848:	00000000 	.word	0x00000000
 800084c:	45000000 	.word	0x45000000
 8000850:	bf800000 	.word	0xbf800000
 8000854:	472c4400 	.word	0x472c4400

08000858 <DisplayTuning>:


// Convert frequency to note name and cents
void DisplayTuning(float freq) {
 8000858:	b5b0      	push	{r4, r5, r7, lr}
 800085a:	b09e      	sub	sp, #120	@ 0x78
 800085c:	af02      	add	r7, sp, #8
 800085e:	ed87 0a01 	vstr	s0, [r7, #4]

	//the guitar notes!
    const char* notes[] = {"E2", "A2", "D3", "G3", "B3", "E4"};
 8000862:	4b61      	ldr	r3, [pc, #388]	@ (80009e8 <DisplayTuning+0x190>)
 8000864:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8000868:	461d      	mov	r5, r3
 800086a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000872:	e884 0003 	stmia.w	r4, {r0, r1}
    const float targets[] = {82.41, 110.0, 146.83, 196.0, 246.94, 329.63};
 8000876:	4b5d      	ldr	r3, [pc, #372]	@ (80009ec <DisplayTuning+0x194>)
 8000878:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800087c:	461d      	mov	r5, r3
 800087e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000882:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000886:	e884 0003 	stmia.w	r4, {r0, r1}
    char msg[32];

    // Find closest guitar string
    uint8_t closest = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    float minDiff = fabsf(freq - targets[0]);
 8000890:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000894:	ed97 7a01 	vldr	s14, [r7, #4]
 8000898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800089c:	eef0 7ae7 	vabs.f32	s15, s15
 80008a0:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    for(uint8_t i = 1; i < 6; i++) {
 80008a4:	2301      	movs	r3, #1
 80008a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80008aa:	e023      	b.n	80008f4 <DisplayTuning+0x9c>
        float diff = fabsf(freq - targets[i]);
 80008ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	3370      	adds	r3, #112	@ 0x70
 80008b4:	443b      	add	r3, r7
 80008b6:	3b44      	subs	r3, #68	@ 0x44
 80008b8:	edd3 7a00 	vldr	s15, [r3]
 80008bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80008c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008c4:	eef0 7ae7 	vabs.f32	s15, s15
 80008c8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        if(diff < minDiff) {
 80008cc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80008d0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80008d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	d505      	bpl.n	80008ea <DisplayTuning+0x92>
            minDiff = diff;
 80008de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80008e0:	66bb      	str	r3, [r7, #104]	@ 0x68
            closest = i;
 80008e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008e6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    for(uint8_t i = 1; i < 6; i++) {
 80008ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008ee:	3301      	adds	r3, #1
 80008f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80008f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008f8:	2b05      	cmp	r3, #5
 80008fa:	d9d7      	bls.n	80008ac <DisplayTuning+0x54>
        }
    }

    // Calculate cents (1/100th of a semitone)
    float cents = 1200 * log2f(freq / targets[closest]);
 80008fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	3370      	adds	r3, #112	@ 0x70
 8000904:	443b      	add	r3, r7
 8000906:	3b44      	subs	r3, #68	@ 0x44
 8000908:	edd3 7a00 	vldr	s15, [r3]
 800090c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000910:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000914:	eeb0 0a66 	vmov.f32	s0, s13
 8000918:	f007 fb0a 	bl	8007f30 <log2f>
 800091c:	eef0 7a40 	vmov.f32	s15, s0
 8000920:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80009f0 <DisplayTuning+0x198>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60


    if(fabsf(cents) < 5) {
 800092c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000930:	eef0 7ae7 	vabs.f32	s15, s15
 8000934:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000938:	eef4 7ac7 	vcmpe.f32	s15, s14
 800093c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000940:	d50d      	bpl.n	800095e <DisplayTuning+0x106>
        snprintf(msg, sizeof(msg), "%s: Perfect!\r\n", notes[closest]);
 8000942:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	3370      	adds	r3, #112	@ 0x70
 800094a:	443b      	add	r3, r7
 800094c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000950:	f107 000c 	add.w	r0, r7, #12
 8000954:	4a27      	ldr	r2, [pc, #156]	@ (80009f4 <DisplayTuning+0x19c>)
 8000956:	2120      	movs	r1, #32
 8000958:	f006 fe36 	bl	80075c8 <sniprintf>
 800095c:	e031      	b.n	80009c2 <DisplayTuning+0x16a>
    }
    else if(cents < 0) {
 800095e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8000962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	d516      	bpl.n	800099a <DisplayTuning+0x142>
        snprintf(msg, sizeof(msg), "%s: %d cents LOW\r\n",
 800096c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	3370      	adds	r3, #112	@ 0x70
 8000974:	443b      	add	r3, r7
 8000976:	f853 3c2c 	ldr.w	r3, [r3, #-44]
                notes[closest], (int)fabsf(cents));
 800097a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800097e:	eef0 7ae7 	vabs.f32	s15, s15
        snprintf(msg, sizeof(msg), "%s: %d cents LOW\r\n",
 8000982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000986:	ee17 2a90 	vmov	r2, s15
 800098a:	f107 000c 	add.w	r0, r7, #12
 800098e:	9200      	str	r2, [sp, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <DisplayTuning+0x1a0>)
 8000992:	2120      	movs	r1, #32
 8000994:	f006 fe18 	bl	80075c8 <sniprintf>
 8000998:	e013      	b.n	80009c2 <DisplayTuning+0x16a>
    }
    else {
        snprintf(msg, sizeof(msg), "%s: %d cents HIGH\r\n",
 800099a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	3370      	adds	r3, #112	@ 0x70
 80009a2:	443b      	add	r3, r7
 80009a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80009a8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80009ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b0:	ee17 2a90 	vmov	r2, s15
 80009b4:	f107 000c 	add.w	r0, r7, #12
 80009b8:	9200      	str	r2, [sp, #0]
 80009ba:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <DisplayTuning+0x1a4>)
 80009bc:	2120      	movs	r1, #32
 80009be:	f006 fe03 	bl	80075c8 <sniprintf>
                notes[closest], (int)cents);
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fc1a 	bl	8000200 <strlen>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f107 010c 	add.w	r1, r7, #12
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <DisplayTuning+0x1a8>)
 80009da:	f005 fe4d 	bl	8006678 <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3770      	adds	r7, #112	@ 0x70
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bdb0      	pop	{r4, r5, r7, pc}
 80009e6:	bf00      	nop
 80009e8:	08008214 	.word	0x08008214
 80009ec:	0800822c 	.word	0x0800822c
 80009f0:	44960000 	.word	0x44960000
 80009f4:	080081c4 	.word	0x080081c4
 80009f8:	080081d4 	.word	0x080081d4
 80009fc:	080081e8 	.word	0x080081e8
 8000a00:	200002c4 	.word	0x200002c4

08000a04 <UART_Print>:


// HELPER FUNCTIONS FOR GUITAR TUNING

// Helper function to send strings over UART
void UART_Print(const char *message) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff fbf7 	bl	8000200 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <UART_Print+0x28>)
 8000a1e:	f005 fe2b 	bl	8006678 <HAL_UART_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200002c4 	.word	0x200002c4

08000a30 <UART_Print_Error>:


// This is insanely helpful to solve a lot of problem
void UART_Print_Error(const char *message, HAL_StatusTypeDef status) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	@ 0x50
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
    char err_buf[64];
    snprintf(err_buf, sizeof(err_buf), "%s (Error: %d)\r\n", message, status);
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	f107 0008 	add.w	r0, r7, #8
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a0b      	ldr	r2, [pc, #44]	@ (8000a74 <UART_Print_Error+0x44>)
 8000a48:	2140      	movs	r1, #64	@ 0x40
 8000a4a:	f006 fdbd 	bl	80075c8 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)err_buf, strlen(err_buf), HAL_MAX_DELAY);
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbd4 	bl	8000200 <strlen>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	f107 0108 	add.w	r1, r7, #8
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <UART_Print_Error+0x48>)
 8000a66:	f005 fe07 	bl	8006678 <HAL_UART_Transmit>
}
 8000a6a:	bf00      	nop
 8000a6c:	3748      	adds	r7, #72	@ 0x48
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08008244 	.word	0x08008244
 8000a78:	200002c4 	.word	0x200002c4

08000a7c <HAL_GPIO_EXTI_Callback>:

//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]

	// if button is 0 -> NOT on recording mode, ready to record
	// if button is 1 -> Recording


	if (GPIO_Pin == B_BUTTON_Pin) {
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a8c:	f040 80bb 	bne.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>


        // Check if the button is pressed
        if (HAL_GPIO_ReadPin(B_BUTTON_GPIO_Port, B_BUTTON_Pin) == GPIO_PIN_SET) {
 8000a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a94:	485e      	ldr	r0, [pc, #376]	@ (8000c10 <HAL_GPIO_EXTI_Callback+0x194>)
 8000a96:	f002 fdef 	bl	8003678 <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	f040 80b2 	bne.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>

        	//ready to record. It also means we need to wipe out any recBuf
        	if (button_state == 0) {
 8000aa2:	4b5c      	ldr	r3, [pc, #368]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x198>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d130      	bne.n	8000b0c <HAL_GPIO_EXTI_Callback+0x90>

				UART_Print("[recording...]\r\n");
 8000aaa:	485b      	ldr	r0, [pc, #364]	@ (8000c18 <HAL_GPIO_EXTI_Callback+0x19c>)
 8000aac:	f7ff ffaa 	bl	8000a04 <UART_Print>

                //just in case stop DMA
                //stop the timer now
                HAL_TIM_Base_Stop(&htim2);
 8000ab0:	485a      	ldr	r0, [pc, #360]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000ab2:	f004 fccf 	bl	8005454 <HAL_TIM_Base_Stop>
                HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Ensure DAC DMA is stopped first
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4859      	ldr	r0, [pc, #356]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000aba:	f001 fb99 	bl	80021f0 <HAL_DAC_Stop_DMA>
                HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);  // Ensure DFSDM DMA is stopped
 8000abe:	4859      	ldr	r0, [pc, #356]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000ac0:	f002 f832 	bl	8002b28 <HAL_DFSDM_FilterRegularStop_DMA>


				//clear Buffers
                memset(RecBuf, 0, sizeof(RecBuf));  // Uncomment if needed
 8000ac4:	4a58      	ldr	r2, [pc, #352]	@ (8000c28 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4858      	ldr	r0, [pc, #352]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000aca:	f006 fdb1 	bl	8007630 <memset>
                memset(speakerWave, 2048, sizeof(speakerWave));  // Reset to silence (mid-scale)
 8000ace:	4a58      	ldr	r2, [pc, #352]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ad0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad4:	4857      	ldr	r0, [pc, #348]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ad6:	f006 fdab 	bl	8007630 <memset>
//                // Reinitialize DFSDM completely
//                MX_DFSDM1_Init();
//                MX_DMA_Init(); // Reinitialize DMA as well

                //lit the LED
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae0:	4855      	ldr	r0, [pc, #340]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000ae2:	f002 fde1 	bl	80036a8 <HAL_GPIO_WritePin>

                //start the microphone DMA

                // Start DMA with fresh configuration
                if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE) != HAL_OK) {
 8000ae6:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000aea:	4950      	ldr	r1, [pc, #320]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000aec:	484d      	ldr	r0, [pc, #308]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000aee:	f001 ff99 	bl	8002a24 <HAL_DFSDM_FilterRegularStart_DMA>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d002      	beq.n	8000afe <HAL_GPIO_EXTI_Callback+0x82>
                    UART_Print("DFSDM start failed!\r\n");
 8000af8:	4850      	ldr	r0, [pc, #320]	@ (8000c3c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000afa:	f7ff ff83 	bl	8000a04 <UART_Print>
                }


                HAL_TIM_Base_Start(&htim2); // Start DAC trigger timer
 8000afe:	4847      	ldr	r0, [pc, #284]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b00:	f004 fc40 	bl	8005384 <HAL_TIM_Base_Start>




        		button_state = 1;
 8000b04:	4b43      	ldr	r3, [pc, #268]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x198>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]

        }


	}
}
 8000b0a:	e07c      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
        	else if (button_state == 1) {
 8000b0c:	4b41      	ldr	r3, [pc, #260]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x198>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d178      	bne.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
                UART_Print("[processing audio...]\r\n");
 8000b14:	484a      	ldr	r0, [pc, #296]	@ (8000c40 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000b16:	f7ff ff75 	bl	8000a04 <UART_Print>
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b20:	4845      	ldr	r0, [pc, #276]	@ (8000c38 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000b22:	f002 fdc1 	bl	80036a8 <HAL_GPIO_WritePin>
                HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000b26:	483f      	ldr	r0, [pc, #252]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000b28:	f001 fffe 	bl	8002b28 <HAL_DFSDM_FilterRegularStop_DMA>
                HAL_TIM_Base_Stop(&htim2);
 8000b2c:	483b      	ldr	r0, [pc, #236]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000b2e:	f004 fc91 	bl	8005454 <HAL_TIM_Base_Stop>
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	83fb      	strh	r3, [r7, #30]
 8000b36:	e02e      	b.n	8000b96 <HAL_GPIO_EXTI_Callback+0x11a>
                	int32_t sample24 = RecBuf[i] >> 8;
 8000b38:	8bfb      	ldrh	r3, [r7, #30]
 8000b3a:	4a3c      	ldr	r2, [pc, #240]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	121b      	asrs	r3, r3, #8
 8000b42:	60fb      	str	r3, [r7, #12]
                	 int16_t sample12 = sample24 >> 12;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	131b      	asrs	r3, r3, #12
 8000b48:	817b      	strh	r3, [r7, #10]
                	 int32_t boostedSample = sample12 * BOOST_FACTOR;
 8000b4a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
                	 if (boostedSample > 2047) {
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000b58:	db03      	blt.n	8000b62 <HAL_GPIO_EXTI_Callback+0xe6>
                	     boostedSample = 2047;  // Max positive value for 12-bit DAC
 8000b5a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	e005      	b.n	8000b6e <HAL_GPIO_EXTI_Callback+0xf2>
                	 } else if (boostedSample < -2048) {
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000b68:	da01      	bge.n	8000b6e <HAL_GPIO_EXTI_Callback+0xf2>
                	     boostedSample = -2048; // Max negative value for 12-bit DAC
 8000b6a:	4b36      	ldr	r3, [pc, #216]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000b6c:	61bb      	str	r3, [r7, #24]
                	 uint16_t dacValue = (uint16_t)(boostedSample + 2048);
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b76:	82fb      	strh	r3, [r7, #22]
                	 if (dacValue > 4095) {
 8000b78:	8afb      	ldrh	r3, [r7, #22]
 8000b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b7e:	d302      	bcc.n	8000b86 <HAL_GPIO_EXTI_Callback+0x10a>
                	    dacValue = 4095; // Maximum value for 12-bit DAC
 8000b80:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000b84:	82fb      	strh	r3, [r7, #22]
                	 speakerWave[i] = dacValue;
 8000b86:	8bfb      	ldrh	r3, [r7, #30]
 8000b88:	492a      	ldr	r1, [pc, #168]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000b8a:	8afa      	ldrh	r2, [r7, #22]
 8000b8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 8000b90:	8bfb      	ldrh	r3, [r7, #30]
 8000b92:	3301      	adds	r3, #1
 8000b94:	83fb      	strh	r3, [r7, #30]
 8000b96:	8bfb      	ldrh	r3, [r7, #30]
 8000b98:	f64a 4243 	movw	r2, #44099	@ 0xac43
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d9cb      	bls.n	8000b38 <HAL_GPIO_EXTI_Callback+0xbc>
                float freq = AutoCorrelationTune(RecBuf, AUDIO_BUFFER_SIZE);
 8000ba0:	f64a 4144 	movw	r1, #44100	@ 0xac44
 8000ba4:	4821      	ldr	r0, [pc, #132]	@ (8000c2c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000ba6:	f7ff fd4b 	bl	8000640 <AutoCorrelationTune>
 8000baa:	ed87 0a04 	vstr	s0, [r7, #16]
                if(freq > 70 && freq < 400) { // Valid guitar range
 8000bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bb2:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000c48 <HAL_GPIO_EXTI_Callback+0x1cc>
 8000bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bbe:	dd0d      	ble.n	8000bdc <HAL_GPIO_EXTI_Callback+0x160>
 8000bc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000c4c <HAL_GPIO_EXTI_Callback+0x1d0>
 8000bc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd0:	d504      	bpl.n	8000bdc <HAL_GPIO_EXTI_Callback+0x160>
                    DisplayTuning(freq);
 8000bd2:	ed97 0a04 	vldr	s0, [r7, #16]
 8000bd6:	f7ff fe3f 	bl	8000858 <DisplayTuning>
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_EXTI_Callback+0x166>
                    UART_Print("No note detected - try again\r\n");
 8000bdc:	481c      	ldr	r0, [pc, #112]	@ (8000c50 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000bde:	f7ff ff11 	bl	8000a04 <UART_Print>
				UART_Print("[playing back through speaker...]\r\n");
 8000be2:	481c      	ldr	r0, [pc, #112]	@ (8000c54 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000be4:	f7ff ff0e 	bl	8000a04 <UART_Print>
                HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint16_t*)speakerWave, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000be8:	2300      	movs	r3, #0
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8000bf0:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	480a      	ldr	r0, [pc, #40]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8000bf6:	f001 fa2f 	bl	8002058 <HAL_DAC_Start_DMA>
                HAL_TIM_Base_Start(&htim2); // Start DAC trigger timer
 8000bfa:	4808      	ldr	r0, [pc, #32]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x1a0>)
 8000bfc:	f004 fbc2 	bl	8005384 <HAL_TIM_Base_Start>
                button_state = 0;
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <HAL_GPIO_EXTI_Callback+0x198>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	48000800 	.word	0x48000800
 8000c14:	2000035a 	.word	0x2000035a
 8000c18:	08008258 	.word	0x08008258
 8000c1c:	2000022c 	.word	0x2000022c
 8000c20:	20000078 	.word	0x20000078
 8000c24:	200000ec 	.word	0x200000ec
 8000c28:	0002b110 	.word	0x0002b110
 8000c2c:	2000035c 	.word	0x2000035c
 8000c30:	00015888 	.word	0x00015888
 8000c34:	2002b46c 	.word	0x2002b46c
 8000c38:	48000400 	.word	0x48000400
 8000c3c:	0800826c 	.word	0x0800826c
 8000c40:	08008284 	.word	0x08008284
 8000c44:	fffff800 	.word	0xfffff800
 8000c48:	428c0000 	.word	0x428c0000
 8000c4c:	43c80000 	.word	0x43c80000
 8000c50:	0800829c 	.word	0x0800829c
 8000c54:	080082bc 	.word	0x080082bc

08000c58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

    if(htim == &htim3 && button_state == 1) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a19      	ldr	r2, [pc, #100]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d12a      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x66>
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d126      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x66>
        uint32_t usableSamples = FindLoudSection(RecBuf, AUDIO_BUFFER_SIZE);
 8000c70:	f64a 4144 	movw	r1, #44100	@ 0xac44
 8000c74:	4816      	ldr	r0, [pc, #88]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c76:	f7ff fc93 	bl	80005a0 <FindLoudSection>
 8000c7a:	60f8      	str	r0, [r7, #12]
        if(usableSamples > FFT_SIZE/2) {
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b80      	cmp	r3, #128	@ 0x80
 8000c80:	d91d      	bls.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x66>
            float freq = AutoCorrelationTune(RecBuf, usableSamples);
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c86:	f7ff fcdb 	bl	8000640 <AutoCorrelationTune>
 8000c8a:	ed87 0a02 	vstr	s0, [r7, #8]
            if(freq > 70 && freq < 400) {
 8000c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c92:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000cd4 <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	dc00      	bgt.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x4a>
                DisplayTuning(freq);
            }
        }
    }
}
 8000ca0:	e00d      	b.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x66>
            if(freq > 70 && freq < 400) {
 8000ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ca6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8000cd8 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb2:	d400      	bmi.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x5e>
}
 8000cb4:	e003      	b.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x66>
                DisplayTuning(freq);
 8000cb6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000cba:	f7ff fdcd 	bl	8000858 <DisplayTuning>
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000278 	.word	0x20000278
 8000ccc:	2000035a 	.word	0x2000035a
 8000cd0:	2000035c 	.word	0x2000035c
 8000cd4:	428c0000 	.word	0x428c0000
 8000cd8:	43c80000 	.word	0x43c80000

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b090      	sub	sp, #64	@ 0x40
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// Set up FFT
	arm_rfft_fast_init_f32(&fftHandler, FFT_SIZE);
 8000ce2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ce6:	4828      	ldr	r0, [pc, #160]	@ (8000d88 <main+0xac>)
 8000ce8:	f006 fc3a 	bl	8007560 <arm_rfft_fast_init_f32>

	// Set up a timer for periodic pitch detection (every 100ms)
	HAL_TIM_Base_Start_IT(&htim3);  // Using TIM3 for periodic detection
 8000cec:	4827      	ldr	r0, [pc, #156]	@ (8000d8c <main+0xb0>)
 8000cee:	f004 fbd9 	bl	80054a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 ff92 	bl	8001c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f863 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 fb23 	bl	8001344 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cfe:	f000 faef 	bl	80012e0 <MX_DMA_Init>
  MX_I2C2_Init();
 8000d02:	f000 f973 	bl	8000fec <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d06:	f000 fa9f 	bl	8001248 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d0a:	f000 f9af 	bl	800106c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000d0e:	f000 f8e9 	bl	8000ee4 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 8000d12:	f000 f8a7 	bl	8000e64 <MX_DAC1_Init>
  MX_TIM3_Init();
 8000d16:	f000 fa1f 	bl	8001158 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    // Initialize UART and send welcome message
  UART_Print("\r\nAudio Recorder/Player Ready\r\n");
 8000d1a:	481d      	ldr	r0, [pc, #116]	@ (8000d90 <main+0xb4>)
 8000d1c:	f7ff fe72 	bl	8000a04 <UART_Print>
  UART_Print("Press button to start recording\r\n");
 8000d20:	481c      	ldr	r0, [pc, #112]	@ (8000d94 <main+0xb8>)
 8000d22:	f7ff fe6f 	bl	8000a04 <UART_Print>
  UART_Print("Press button again to play back\r\n\r\n");
 8000d26:	481c      	ldr	r0, [pc, #112]	@ (8000d98 <main+0xbc>)
 8000d28:	f7ff fe6c 	bl	8000a04 <UART_Print>


  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC channel 1
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	481b      	ldr	r0, [pc, #108]	@ (8000d9c <main+0xc0>)
 8000d30:	f001 f93f 	bl	8001fb2 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d34:	481a      	ldr	r0, [pc, #104]	@ (8000da0 <main+0xc4>)
 8000d36:	f004 fbb5 	bl	80054a4 <HAL_TIM_Base_Start_IT>


  memset(RecBuf, 0, sizeof(RecBuf));  // Uncomment if needed
 8000d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <main+0xc8>)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	481a      	ldr	r0, [pc, #104]	@ (8000da8 <main+0xcc>)
 8000d40:	f006 fc76 	bl	8007630 <memset>
  memset(speakerWave, 2048, sizeof(speakerWave));  // Reset to silence (mid-scale)
 8000d44:	4a19      	ldr	r2, [pc, #100]	@ (8000dac <main+0xd0>)
 8000d46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d4a:	4819      	ldr	r0, [pc, #100]	@ (8000db0 <main+0xd4>)
 8000d4c:	f006 fc70 	bl	8007630 <memset>

	  	// Something very important to know is that when the microphone captures stuff, it is
	    // the DFSDM module, captures the PDM data. which is 32bits. However, it is converted
	  	// to 16-bit SIGNED PCM format, where the microphone outputs data in 2's complement.
		    // Debug output - show first sample value
    if(button_state == 1) { // Only when recording
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <main+0xd8>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d112      	bne.n	8000d7e <main+0xa2>
        char dbg_msg[64];
        snprintf(dbg_msg, sizeof(dbg_msg), "First sample: %ld\r\n", RecBuf[0]);
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <main+0xcc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4638      	mov	r0, r7
 8000d5e:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <main+0xdc>)
 8000d60:	2140      	movs	r1, #64	@ 0x40
 8000d62:	f006 fc31 	bl	80075c8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)dbg_msg, strlen(dbg_msg), HAL_MAX_DELAY);
 8000d66:	463b      	mov	r3, r7
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fa49 	bl	8000200 <strlen>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	4639      	mov	r1, r7
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d78:	4810      	ldr	r0, [pc, #64]	@ (8000dbc <main+0xe0>)
 8000d7a:	f005 fc7d 	bl	8006678 <HAL_UART_Transmit>
    }
    HAL_Delay(500);
 8000d7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d82:	f000 ffbf 	bl	8001d04 <HAL_Delay>
    if(button_state == 1) { // Only when recording
 8000d86:	e7e3      	b.n	8000d50 <main+0x74>
 8000d88:	20040cf4 	.word	0x20040cf4
 8000d8c:	20000278 	.word	0x20000278
 8000d90:	080082e0 	.word	0x080082e0
 8000d94:	08008300 	.word	0x08008300
 8000d98:	08008324 	.word	0x08008324
 8000d9c:	20000078 	.word	0x20000078
 8000da0:	2000022c 	.word	0x2000022c
 8000da4:	0002b110 	.word	0x0002b110
 8000da8:	2000035c 	.word	0x2000035c
 8000dac:	00015888 	.word	0x00015888
 8000db0:	2002b46c 	.word	0x2002b46c
 8000db4:	2000035a 	.word	0x2000035a
 8000db8:	08008348 	.word	0x08008348
 8000dbc:	200002c4 	.word	0x200002c4

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b096      	sub	sp, #88	@ 0x58
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	2244      	movs	r2, #68	@ 0x44
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f006 fc2e 	bl	8007630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000de2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000de6:	f002 fde1 	bl	80039ac <HAL_PWREx_ControlVoltageScaling>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000df0:	f000 fb38 	bl	8001464 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000df4:	2310      	movs	r3, #16
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e00:	2360      	movs	r3, #96	@ 0x60
 8000e02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e04:	2302      	movs	r3, #2
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e10:	2328      	movs	r3, #40	@ 0x28
 8000e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fe65 	bl	8003af4 <HAL_RCC_OscConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e30:	f000 fb18 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	230f      	movs	r3, #15
 8000e36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f003 fa6b 	bl	8004328 <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e58:	f000 fb04 	bl	8001464 <Error_Handler>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3758      	adds	r7, #88	@ 0x58
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2228      	movs	r2, #40	@ 0x28
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 fbdd 	bl	8007630 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_DAC1_Init+0x78>)
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <MX_DAC1_Init+0x7c>)
 8000e7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e7c:	4817      	ldr	r0, [pc, #92]	@ (8000edc <MX_DAC1_Init+0x78>)
 8000e7e:	f001 f876 	bl	8001f6e <HAL_DAC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e88:	f000 faec 	bl	8001464 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e90:	230a      	movs	r3, #10
 8000e92:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e98:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480b      	ldr	r0, [pc, #44]	@ (8000edc <MX_DAC1_Init+0x78>)
 8000eae:	f001 fa03 	bl	80022b8 <HAL_DAC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000eb8:	f000 fad4 	bl	8001464 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2210      	movs	r2, #16
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <MX_DAC1_Init+0x78>)
 8000ec4:	f001 f9f8 	bl	80022b8 <HAL_DAC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 fac9 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	@ 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000078 	.word	0x20000078
 8000ee0:	40007400 	.word	0x40007400

08000ee4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000eec:	4a38      	ldr	r2, [pc, #224]	@ (8000fd0 <MX_DFSDM1_Init+0xec>)
 8000eee:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000ef0:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000f02:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000f04:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000f08:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 8000f0a:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000f0c:	22fa      	movs	r2, #250	@ 0xfa
 8000f0e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000f10:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24

  //CHANGED to know why Filter is not starting again.
  status = HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000f16:	482d      	ldr	r0, [pc, #180]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000f18:	f001 fc64 	bl	80027e4 <HAL_DFSDM_FilterInit>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK) {
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <MX_DFSDM1_Init+0x50>
        UART_Print_Error("Filter Init Failed", status);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	482a      	ldr	r0, [pc, #168]	@ (8000fd4 <MX_DFSDM1_Init+0xf0>)
 8000f2c:	f7ff fd80 	bl	8000a30 <UART_Print_Error>
        Error_Handler();
 8000f30:	f000 fa98 	bl	8001464 <Error_Handler>
    }


  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f36:	4a29      	ldr	r2, [pc, #164]	@ (8000fdc <MX_DFSDM1_Init+0xf8>)
 8000f38:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000f40:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 7;
 8000f46:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000f64:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f66:	2204      	movs	r2, #4
 8000f68:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000f70:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000f76:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	631a      	str	r2, [r3, #48]	@ 0x30


    status = HAL_DFSDM_ChannelInit(&hdfsdm1_channel2);
 8000f82:	4815      	ldr	r0, [pc, #84]	@ (8000fd8 <MX_DFSDM1_Init+0xf4>)
 8000f84:	f001 fb6e 	bl	8002664 <HAL_DFSDM_ChannelInit>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK) {
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <MX_DFSDM1_Init+0xbc>
        UART_Print_Error("Channel Init Failed", status);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4812      	ldr	r0, [pc, #72]	@ (8000fe0 <MX_DFSDM1_Init+0xfc>)
 8000f98:	f7ff fd4a 	bl	8000a30 <UART_Print_Error>
        Error_Handler();
 8000f9c:	f000 fa62 	bl	8001464 <Error_Handler>
    }

    /* Associate channel with filter */
    status = HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4910      	ldr	r1, [pc, #64]	@ (8000fe4 <MX_DFSDM1_Init+0x100>)
 8000fa4:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <MX_DFSDM1_Init+0xe8>)
 8000fa6:	f001 fcf7 	bl	8002998 <HAL_DFSDM_FilterConfigRegChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK) {
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <MX_DFSDM1_Init+0xde>
        UART_Print_Error("Filter Config Failed", status);
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480b      	ldr	r0, [pc, #44]	@ (8000fe8 <MX_DFSDM1_Init+0x104>)
 8000fba:	f7ff fd39 	bl	8000a30 <UART_Print_Error>
        Error_Handler();
 8000fbe:	f000 fa51 	bl	8001464 <Error_Handler>
    }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000ec 	.word	0x200000ec
 8000fd0:	40016100 	.word	0x40016100
 8000fd4:	0800835c 	.word	0x0800835c
 8000fd8:	20000140 	.word	0x20000140
 8000fdc:	40016040 	.word	0x40016040
 8000fe0:	08008370 	.word	0x08008370
 8000fe4:	00020004 	.word	0x00020004
 8000fe8:	08008384 	.word	0x08008384

08000fec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_I2C2_Init+0x74>)
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <MX_I2C2_Init+0x78>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <MX_I2C2_Init+0x74>)
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <MX_I2C2_Init+0x7c>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <MX_I2C2_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001002:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001004:	2201      	movs	r2, #1
 8001006:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_I2C2_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800100e:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <MX_I2C2_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001026:	480e      	ldr	r0, [pc, #56]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001028:	f002 fb6e 	bl	8003708 <HAL_I2C_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001032:	f000 fa17 	bl	8001464 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	4809      	ldr	r0, [pc, #36]	@ (8001060 <MX_I2C2_Init+0x74>)
 800103a:	f002 fc00 	bl	800383e <HAL_I2CEx_ConfigAnalogFilter>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001044:	f000 fa0e 	bl	8001464 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001048:	2100      	movs	r1, #0
 800104a:	4805      	ldr	r0, [pc, #20]	@ (8001060 <MX_I2C2_Init+0x74>)
 800104c:	f002 fc42 	bl	80038d4 <HAL_I2CEx_ConfigDigitalFilter>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001056:	f000 fa05 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200001d8 	.word	0x200001d8
 8001064:	40005800 	.word	0x40005800
 8001068:	10d19ce4 	.word	0x10d19ce4

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109e:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TIMER_PERIOD - 1);
 80010b2:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010b4:	f240 7215 	movw	r2, #1813	@ 0x715
 80010b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b24      	ldr	r3, [pc, #144]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010c8:	f004 f904 	bl	80052d4 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010d2:	f000 f9c7 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010da:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010e4:	f004 fcca 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010ee:	f000 f9b9 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f2:	4818      	ldr	r0, [pc, #96]	@ (8001154 <MX_TIM2_Init+0xe8>)
 80010f4:	f004 fa46 	bl	8005584 <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010fe:	f000 f9b1 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001102:	2320      	movs	r3, #32
 8001104:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4810      	ldr	r0, [pc, #64]	@ (8001154 <MX_TIM2_Init+0xe8>)
 8001112:	f005 f9bb 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800111c:	f000 f9a2 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <MX_TIM2_Init+0xe8>)
 8001138:	f004 fb8c 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001142:	f000 f98f 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001146:	4803      	ldr	r0, [pc, #12]	@ (8001154 <MX_TIM2_Init+0xe8>)
 8001148:	f000 fbde 	bl	8001908 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3738      	adds	r7, #56	@ 0x38
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000022c 	.word	0x2000022c

08001158 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	@ 0x38
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001178:	463b      	mov	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_TIM3_Init+0xe8>)
 800118c:	4a2d      	ldr	r2, [pc, #180]	@ (8001244 <MX_TIM3_Init+0xec>)
 800118e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8001190:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <MX_TIM3_Init+0xe8>)
 8001192:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001196:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <MX_TIM3_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <MX_TIM3_Init+0xe8>)
 80011a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_TIM3_Init+0xe8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <MX_TIM3_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b2:	4823      	ldr	r0, [pc, #140]	@ (8001240 <MX_TIM3_Init+0xe8>)
 80011b4:	f004 f88e 	bl	80052d4 <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80011be:	f000 f951 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011cc:	4619      	mov	r1, r3
 80011ce:	481c      	ldr	r0, [pc, #112]	@ (8001240 <MX_TIM3_Init+0xe8>)
 80011d0:	f004 fc54 	bl	8005a7c <HAL_TIM_ConfigClockSource>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80011da:	f000 f943 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011de:	4818      	ldr	r0, [pc, #96]	@ (8001240 <MX_TIM3_Init+0xe8>)
 80011e0:	f004 f9d0 	bl	8005584 <HAL_TIM_PWM_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80011ea:	f000 f93b 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4810      	ldr	r0, [pc, #64]	@ (8001240 <MX_TIM3_Init+0xe8>)
 80011fe:	f005 f945 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001208:	f000 f92c 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120c:	2360      	movs	r3, #96	@ 0x60
 800120e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	2204      	movs	r2, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	@ (8001240 <MX_TIM3_Init+0xe8>)
 8001224:	f004 fb16 	bl	8005854 <HAL_TIM_PWM_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800122e:	f000 f919 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <MX_TIM3_Init+0xe8>)
 8001234:	f000 fb68 	bl	8001908 <HAL_TIM_MspPostInit>

}
 8001238:	bf00      	nop
 800123a:	3738      	adds	r7, #56	@ 0x38
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000278 	.word	0x20000278
 8001244:	40000400 	.word	0x40000400

08001248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <MX_USART1_UART_Init+0x94>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001290:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001292:	f005 f9a1 	bl	80065d8 <HAL_UART_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 f8e2 	bl	8001464 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 80012a4:	f005 ffca 	bl	800723c <HAL_UARTEx_SetTxFifoThreshold>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012ae:	f000 f8d9 	bl	8001464 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 80012b6:	f005 ffff 	bl	80072b8 <HAL_UARTEx_SetRxFifoThreshold>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012c0:	f000 f8d0 	bl	8001464 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 80012c6:	f005 ff80 	bl	80071ca <HAL_UARTEx_DisableFifoMode>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012d0:	f000 f8c8 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200002c4 	.word	0x200002c4
 80012dc:	40013800 	.word	0x40013800

080012e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_DMA_Init+0x60>)
 80012e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ea:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <MX_DMA_Init+0x60>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_DMA_Init+0x60>)
 80012f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_DMA_Init+0x60>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001302:	4a0f      	ldr	r2, [pc, #60]	@ (8001340 <MX_DMA_Init+0x60>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6493      	str	r3, [r2, #72]	@ 0x48
 800130a:	4b0d      	ldr	r3, [pc, #52]	@ (8001340 <MX_DMA_Init+0x60>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	200b      	movs	r0, #11
 800131c:	f000 fdf1 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001320:	200b      	movs	r0, #11
 8001322:	f000 fe0a 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200c      	movs	r0, #12
 800132c:	f000 fde9 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001330:	200c      	movs	r0, #12
 8001332:	f000 fe02 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <MX_GPIO_Init+0xd4>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	4a2e      	ldr	r2, [pc, #184]	@ (8001418 <MX_GPIO_Init+0xd4>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001366:	4b2c      	ldr	r3, [pc, #176]	@ (8001418 <MX_GPIO_Init+0xd4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <MX_GPIO_Init+0xd4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <MX_GPIO_Init+0xd4>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <MX_GPIO_Init+0xd4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <MX_GPIO_Init+0xd4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <MX_GPIO_Init+0xd4>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <MX_GPIO_Init+0xd4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <MX_GPIO_Init+0xd4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <MX_GPIO_Init+0xd4>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <MX_GPIO_Init+0xd4>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c0:	4816      	ldr	r0, [pc, #88]	@ (800141c <MX_GPIO_Init+0xd8>)
 80013c2:	f002 f971 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 80013c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4810      	ldr	r0, [pc, #64]	@ (8001420 <MX_GPIO_Init+0xdc>)
 80013de:	f001 ffb9 	bl	8003354 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 80013e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4808      	ldr	r0, [pc, #32]	@ (800141c <MX_GPIO_Init+0xd8>)
 80013fc:	f001 ffaa 	bl	8003354 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2028      	movs	r0, #40	@ 0x28
 8001406:	f000 fd7c 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140a:	2028      	movs	r0, #40	@ 0x28
 800140c:	f000 fd95 	bl	8001f3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400
 8001420:	48000800 	.word	0x48000800

08001424 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

	DmaRecHalfBuffCplt=1;
 800142c:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]

}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000358 	.word	0x20000358

08001444 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

	DmaRecBuffCplt=1;
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]


}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000359 	.word	0x20000359

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <Error_Handler+0x8>

08001470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_MspInit+0x44>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	4a0e      	ldr	r2, [pc, #56]	@ (80014b4 <HAL_MspInit+0x44>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6613      	str	r3, [r2, #96]	@ 0x60
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_MspInit+0x44>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_MspInit+0x44>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_MspInit+0x44>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	6593      	str	r3, [r2, #88]	@ 0x58
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_MspInit+0x44>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001584 <HAL_DAC_MspInit+0xcc>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d14f      	bne.n	800157a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <HAL_DAC_MspInit+0xd0>)
 80014dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014de:	4a2a      	ldr	r2, [pc, #168]	@ (8001588 <HAL_DAC_MspInit+0xd0>)
 80014e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80014e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e6:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <HAL_DAC_MspInit+0xd0>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b25      	ldr	r3, [pc, #148]	@ (8001588 <HAL_DAC_MspInit+0xd0>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a24      	ldr	r2, [pc, #144]	@ (8001588 <HAL_DAC_MspInit+0xd0>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <HAL_DAC_MspInit+0xd0>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800150a:	2330      	movs	r3, #48	@ 0x30
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001520:	f001 ff18 	bl	8003354 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001526:	4a1a      	ldr	r2, [pc, #104]	@ (8001590 <HAL_DAC_MspInit+0xd8>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 800152c:	2206      	movs	r2, #6
 800152e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001532:	2210      	movs	r2, #16
 8001534:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001548:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 800154c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001550:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001554:	2220      	movs	r2, #32
 8001556:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 800155a:	2200      	movs	r2, #0
 800155c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001560:	f001 fc2a 	bl	8002db8 <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800156a:	f7ff ff7b 	bl	8001464 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a06      	ldr	r2, [pc, #24]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	4a05      	ldr	r2, [pc, #20]	@ (800158c <HAL_DAC_MspInit+0xd4>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40007400 	.word	0x40007400
 8001588:	40021000 	.word	0x40021000
 800158c:	2000008c 	.word	0x2000008c
 8001590:	4002001c 	.word	0x4002001c

08001594 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0ae      	sub	sp, #184	@ 0xb8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	2294      	movs	r2, #148	@ 0x94
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 f83b 	bl	8007630 <memset>
  if(DFSDM1_Init == 0)
 80015ba:	4b45      	ldr	r3, [pc, #276]	@ (80016d0 <HAL_DFSDM_FilterMspInit+0x13c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d14b      	bne.n	800165a <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80015c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 f966 	bl	80048a4 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80015de:	f7ff ff41 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80015e2:	4b3c      	ldr	r3, [pc, #240]	@ (80016d4 <HAL_DFSDM_FilterMspInit+0x140>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	4a3a      	ldr	r2, [pc, #232]	@ (80016d4 <HAL_DFSDM_FilterMspInit+0x140>)
 80015ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80015ec:	4b39      	ldr	r3, [pc, #228]	@ (80016d4 <HAL_DFSDM_FilterMspInit+0x140>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10b      	bne.n	800160c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015f4:	4b38      	ldr	r3, [pc, #224]	@ (80016d8 <HAL_DFSDM_FilterMspInit+0x144>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f8:	4a37      	ldr	r2, [pc, #220]	@ (80016d8 <HAL_DFSDM_FilterMspInit+0x144>)
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001600:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <HAL_DFSDM_FilterMspInit+0x144>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001604:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800160c:	4b32      	ldr	r3, [pc, #200]	@ (80016d8 <HAL_DFSDM_FilterMspInit+0x144>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <HAL_DFSDM_FilterMspInit+0x144>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001618:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <HAL_DFSDM_FilterMspInit+0x144>)
 800161a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001624:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001628:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800163e:	2306      	movs	r3, #6
 8001640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001644:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001648:	4619      	mov	r1, r3
 800164a:	4824      	ldr	r0, [pc, #144]	@ (80016dc <HAL_DFSDM_FilterMspInit+0x148>)
 800164c:	f001 fe82 	bl	8003354 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001650:	4b1f      	ldr	r3, [pc, #124]	@ (80016d0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001658:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a20      	ldr	r2, [pc, #128]	@ (80016e0 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d130      	bne.n	80016c6 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001666:	4a20      	ldr	r2, [pc, #128]	@ (80016e8 <HAL_DFSDM_FilterMspInit+0x154>)
 8001668:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800166a:	4b1e      	ldr	r3, [pc, #120]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800166c:	2256      	movs	r2, #86	@ 0x56
 800166e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001670:	4b1c      	ldr	r3, [pc, #112]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800167e:	2280      	movs	r2, #128	@ 0x80
 8001680:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001688:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800168c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001690:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001694:	2220      	movs	r2, #32
 8001696:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800169e:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80016a0:	f001 fb8a 	bl	8002db8 <HAL_DMA_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80016aa:	f7ff fedb 	bl	8001464 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016b4:	4a0b      	ldr	r2, [pc, #44]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
 80016c0:	4a08      	ldr	r2, [pc, #32]	@ (80016e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 80016c6:	bf00      	nop
 80016c8:	37b8      	adds	r7, #184	@ 0xb8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20040d10 	.word	0x20040d10
 80016d4:	20040d0c 	.word	0x20040d0c
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48001000 	.word	0x48001000
 80016e0:	40016100 	.word	0x40016100
 80016e4:	20000178 	.word	0x20000178
 80016e8:	40020008 	.word	0x40020008

080016ec <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0ae      	sub	sp, #184	@ 0xb8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	2294      	movs	r2, #148	@ 0x94
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f005 ff8f 	bl	8007630 <memset>
  if(DFSDM1_Init == 0)
 8001712:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d14b      	bne.n	80017b2 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800171a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800171e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001726:	f107 0310 	add.w	r3, r7, #16
 800172a:	4618      	mov	r0, r3
 800172c:	f003 f8ba 	bl	80048a4 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001736:	f7ff fe95 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800173a:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001742:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d10b      	bne.n	8001764 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800174e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001750:	4a1c      	ldr	r2, [pc, #112]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001756:	6613      	str	r3, [r2, #96]	@ 0x60
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800175a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001764:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001768:	4a16      	ldr	r2, [pc, #88]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800176a:	f043 0310 	orr.w	r3, r3, #16
 800176e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800177c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001780:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001796:	2306      	movs	r3, #6
 8001798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4809      	ldr	r0, [pc, #36]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80017a4:	f001 fdd6 	bl	8003354 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80017b0:	6013      	str	r3, [r2, #0]
  }

}
 80017b2:	bf00      	nop
 80017b4:	37b8      	adds	r7, #184	@ 0xb8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20040d10 	.word	0x20040d10
 80017c0:	20040d0c 	.word	0x20040d0c
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48001000 	.word	0x48001000

080017cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b0ae      	sub	sp, #184	@ 0xb8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2294      	movs	r2, #148	@ 0x94
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 ff1f 	bl	8007630 <memset>
  if(hi2c->Instance==I2C2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <HAL_I2C_MspInit+0xb0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d13b      	bne.n	8001874 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001800:	2300      	movs	r3, #0
 8001802:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4618      	mov	r0, r3
 800180a:	f003 f84b 	bl	80048a4 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001814:	f7ff fe26 	bl	8001464 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_I2C_MspInit+0xb4>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	4a18      	ldr	r2, [pc, #96]	@ (8001880 <HAL_I2C_MspInit+0xb4>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <HAL_I2C_MspInit+0xb4>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001830:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001838:	2312      	movs	r3, #18
 800183a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800184a:	2304      	movs	r3, #4
 800184c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001854:	4619      	mov	r1, r3
 8001856:	480b      	ldr	r0, [pc, #44]	@ (8001884 <HAL_I2C_MspInit+0xb8>)
 8001858:	f001 fd7c 	bl	8003354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_I2C_MspInit+0xb4>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_I2C_MspInit+0xb4>)
 8001862:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001866:	6593      	str	r3, [r2, #88]	@ 0x58
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_I2C_MspInit+0xb4>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001874:	bf00      	nop
 8001876:	37b8      	adds	r7, #184	@ 0xb8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40005800 	.word	0x40005800
 8001880:	40021000 	.word	0x40021000
 8001884:	48000400 	.word	0x48000400

08001888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001898:	d114      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189a:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_TIM_Base_MspInit+0x78>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189e:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_TIM_Base_MspInit+0x78>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <HAL_TIM_Base_MspInit+0x78>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	201c      	movs	r0, #28
 80018b8:	f000 fb23 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018bc:	201c      	movs	r0, #28
 80018be:	f000 fb3c 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018c2:	e018      	b.n	80018f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001904 <HAL_TIM_Base_MspInit+0x7c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d113      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <HAL_TIM_Base_MspInit+0x78>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_TIM_Base_MspInit+0x78>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_TIM_Base_MspInit+0x78>)
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201d      	movs	r0, #29
 80018ec:	f000 fb09 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f0:	201d      	movs	r0, #29
 80018f2:	f000 fb22 	bl	8001f3a <HAL_NVIC_EnableIRQ>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	40000400 	.word	0x40000400

08001908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	@ 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001928:	d11d      	bne.n	8001966 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <HAL_TIM_MspPostInit+0xa8>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a20      	ldr	r2, [pc, #128]	@ (80019b0 <HAL_TIM_MspPostInit+0xa8>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <HAL_TIM_MspPostInit+0xa8>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001952:	2301      	movs	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001960:	f001 fcf8 	bl	8003354 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001964:	e020      	b.n	80019a8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <HAL_TIM_MspPostInit+0xac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d11b      	bne.n	80019a8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <HAL_TIM_MspPostInit+0xa8>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001974:	4a0e      	ldr	r2, [pc, #56]	@ (80019b0 <HAL_TIM_MspPostInit+0xa8>)
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <HAL_TIM_MspPostInit+0xa8>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001988:	2310      	movs	r3, #16
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001998:	2302      	movs	r3, #2
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <HAL_TIM_MspPostInit+0xb0>)
 80019a4:	f001 fcd6 	bl	8003354 <HAL_GPIO_Init>
}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	@ 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40000400 	.word	0x40000400
 80019b8:	48001000 	.word	0x48001000

080019bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0ae      	sub	sp, #184	@ 0xb8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	2294      	movs	r2, #148	@ 0x94
 80019da:	2100      	movs	r1, #0
 80019dc:	4618      	mov	r0, r3
 80019de:	f005 fe27 	bl	8007630 <memset>
  if(huart->Instance==USART1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_UART_MspInit+0xb0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d13a      	bne.n	8001a62 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019f0:	2300      	movs	r3, #0
 80019f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 ff53 	bl	80048a4 <HAL_RCCEx_PeriphCLKConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a04:	f7ff fd2e 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	4a18      	ldr	r2, [pc, #96]	@ (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a14:	4b16      	ldr	r3, [pc, #88]	@ (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a24:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2c:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <HAL_UART_MspInit+0xb4>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a38:	23c0      	movs	r3, #192	@ 0xc0
 8001a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <HAL_UART_MspInit+0xb8>)
 8001a5e:	f001 fc79 	bl	8003354 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	37b8      	adds	r7, #184	@ 0xb8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000400 	.word	0x48000400

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ace:	f000 f8f9 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA1_Channel1_IRQHandler+0x10>)
 8001ade:	f001 faea 	bl	80030b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000178 	.word	0x20000178

08001aec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <DMA1_Channel2_IRQHandler+0x10>)
 8001af2:	f001 fae0 	bl	80030b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000008c 	.word	0x2000008c

08001b00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <TIM2_IRQHandler+0x10>)
 8001b06:	f003 fd9e 	bl	8005646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000022c 	.word	0x2000022c

08001b14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM3_IRQHandler+0x10>)
 8001b1a:	f003 fd94 	bl	8005646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000278 	.word	0x20000278

08001b28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8001b2c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b30:	f001 fdd2 	bl	80036d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b40:	4a14      	ldr	r2, [pc, #80]	@ (8001b94 <_sbrk+0x5c>)
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <_sbrk+0x60>)
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <_sbrk+0x64>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <_sbrk+0x64>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <_sbrk+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d207      	bcs.n	8001b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b68:	f005 fd6a 	bl	8007640 <__errno>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	220c      	movs	r2, #12
 8001b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b76:	e009      	b.n	8001b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b78:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <_sbrk+0x64>)
 8001b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200a0000 	.word	0x200a0000
 8001b98:	00000400 	.word	0x00000400
 8001b9c:	20040d14 	.word	0x20040d14
 8001ba0:	20040e88 	.word	0x20040e88

08001ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <SystemInit+0x20>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <SystemInit+0x20>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bcc:	f7ff ffea 	bl	8001ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopForever+0xe>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopForever+0x16>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f005 fd29 	bl	800764c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfa:	f7ff f86f 	bl	8000cdc <main>

08001bfe <LoopForever>:

LoopForever:
    b LoopForever
 8001bfe:	e7fe      	b.n	8001bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c0c:	0801b438 	.word	0x0801b438
  ldr r2, =_sbss
 8001c10:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c14:	20040e88 	.word	0x20040e88

08001c18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_IRQHandler>

08001c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f961 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f80e 	bl	8001c4c <HAL_InitTick>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	71fb      	strb	r3, [r7, #7]
 8001c3a:	e001      	b.n	8001c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c3c:	f7ff fc18 	bl	8001470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c40:	79fb      	ldrb	r3, [r7, #7]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_InitTick+0x6c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c60:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <HAL_InitTick+0x70>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_InitTick+0x6c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f96d 	bl	8001f56 <HAL_SYSTICK_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10f      	bne.n	8001ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d809      	bhi.n	8001c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c90:	f000 f937 	bl	8001f02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c94:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_InitTick+0x74>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e007      	b.n	8001cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e004      	b.n	8001cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e001      	b.n	8001cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20040d18 	.word	0x20040d18

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20040d18 	.word	0x20040d18

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e014      	b.n	8001faa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d105      	bne.n	8001f96 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fa91 	bl	80014b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	795b      	ldrb	r3, [r3, #5]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DAC_Start+0x16>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e040      	b.n	800204a <HAL_DAC_Start+0x98>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f003 0310 	and.w	r3, r3, #16
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10f      	bne.n	8002012 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d11d      	bne.n	800203c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	e014      	b.n	800203c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2102      	movs	r1, #2
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0202 	orr.w	r2, r2, #2
 800203a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	795b      	ldrb	r3, [r3, #5]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_DAC_Start_DMA+0x1e>
 8002072:	2302      	movs	r3, #2
 8002074:	e0ab      	b.n	80021ce <HAL_DAC_Start_DMA+0x176>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2202      	movs	r2, #2
 8002080:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d12f      	bne.n	80020e8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_DAC_Start_DMA+0x180>)
 800208e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a51      	ldr	r2, [pc, #324]	@ (80021dc <HAL_DAC_Start_DMA+0x184>)
 8002096:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a50      	ldr	r2, [pc, #320]	@ (80021e0 <HAL_DAC_Start_DMA+0x188>)
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020ae:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d013      	beq.n	80020de <HAL_DAC_Start_DMA+0x86>
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d845      	bhi.n	8002148 <HAL_DAC_Start_DMA+0xf0>
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_DAC_Start_DMA+0x72>
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d005      	beq.n	80020d4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80020c8:	e03e      	b.n	8002148 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3308      	adds	r3, #8
 80020d0:	613b      	str	r3, [r7, #16]
        break;
 80020d2:	e03c      	b.n	800214e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	330c      	adds	r3, #12
 80020da:	613b      	str	r3, [r7, #16]
        break;
 80020dc:	e037      	b.n	800214e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3310      	adds	r3, #16
 80020e4:	613b      	str	r3, [r7, #16]
        break;
 80020e6:	e032      	b.n	800214e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a3d      	ldr	r2, [pc, #244]	@ (80021e4 <HAL_DAC_Start_DMA+0x18c>)
 80020ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a3c      	ldr	r2, [pc, #240]	@ (80021e8 <HAL_DAC_Start_DMA+0x190>)
 80020f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a3b      	ldr	r2, [pc, #236]	@ (80021ec <HAL_DAC_Start_DMA+0x194>)
 80020fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800210e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	2b08      	cmp	r3, #8
 8002114:	d013      	beq.n	800213e <HAL_DAC_Start_DMA+0xe6>
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d817      	bhi.n	800214c <HAL_DAC_Start_DMA+0xf4>
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_DAC_Start_DMA+0xd2>
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d005      	beq.n	8002134 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002128:	e010      	b.n	800214c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3314      	adds	r3, #20
 8002130:	613b      	str	r3, [r7, #16]
        break;
 8002132:	e00c      	b.n	800214e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3318      	adds	r3, #24
 800213a:	613b      	str	r3, [r7, #16]
        break;
 800213c:	e007      	b.n	800214e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	331c      	adds	r3, #28
 8002144:	613b      	str	r3, [r7, #16]
        break;
 8002146:	e002      	b.n	800214e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002148:	bf00      	nop
 800214a:	e000      	b.n	800214e <HAL_DAC_Start_DMA+0xf6>
        break;
 800214c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d111      	bne.n	8002178 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002162:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6898      	ldr	r0, [r3, #8]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	f000 fecb 	bl	8002f08 <HAL_DMA_Start_IT>
 8002172:	4603      	mov	r3, r0
 8002174:	75fb      	strb	r3, [r7, #23]
 8002176:	e010      	b.n	800219a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002186:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68d8      	ldr	r0, [r3, #12]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	f000 feb9 	bl	8002f08 <HAL_DMA_Start_IT>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2201      	movs	r2, #1
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e005      	b.n	80021cc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	08002551 	.word	0x08002551
 80021dc:	08002573 	.word	0x08002573
 80021e0:	0800258f 	.word	0x0800258f
 80021e4:	080025f9 	.word	0x080025f9
 80021e8:	0800261b 	.word	0x0800261b
 80021ec:	08002637 	.word	0x08002637

080021f0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6819      	ldr	r1, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2201      	movs	r2, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10d      	bne.n	8002256 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fedd 	bl	8002ffe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e00c      	b.n	8002270 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fecf 	bl	8002ffe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800226e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	795b      	ldrb	r3, [r3, #5]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_DAC_ConfigChannel+0x1c>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e137      	b.n	8002544 <HAL_DAC_ConfigChannel+0x28c>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2202      	movs	r2, #2
 80022de:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	f040 8081 	bne.w	80023ec <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80022ea:	f7ff fcff 	bl	8001cec <HAL_GetTick>
 80022ee:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d140      	bne.n	8002378 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022f6:	e018      	b.n	800232a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022f8:	f7ff fcf8 	bl	8001cec <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d911      	bls.n	800232a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f043 0208 	orr.w	r2, r3, #8
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2203      	movs	r2, #3
 8002324:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e10c      	b.n	8002544 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1df      	bne.n	80022f8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002338:	2001      	movs	r0, #1
 800233a:	f7ff fce3 	bl	8001d04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	69d2      	ldr	r2, [r2, #28]
 8002346:	641a      	str	r2, [r3, #64]	@ 0x40
 8002348:	e023      	b.n	8002392 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800234a:	f7ff fccf 	bl	8001cec <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d90f      	bls.n	8002378 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800235e:	2b00      	cmp	r3, #0
 8002360:	da0a      	bge.n	8002378 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	f043 0208 	orr.w	r2, r3, #8
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2203      	movs	r2, #3
 8002372:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0e5      	b.n	8002544 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237e:	2b00      	cmp	r3, #0
 8002380:	dbe3      	blt.n	800234a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002382:	2001      	movs	r0, #1
 8002384:	f7ff fcbe 	bl	8001d04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	69d2      	ldr	r2, [r2, #28]
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	ea02 0103 	and.w	r1, r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	409a      	lsls	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	21ff      	movs	r1, #255	@ 0xff
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	ea02 0103 	and.w	r1, r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d11d      	bne.n	8002430 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fa:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	221f      	movs	r2, #31
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	4013      	ands	r3, r2
 800240e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	4313      	orrs	r3, r2
 8002426:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002436:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2207      	movs	r2, #7
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	4013      	ands	r3, r2
 800244a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	431a      	orrs	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	4313      	orrs	r3, r2
 800246e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f003 0310 	and.w	r3, r3, #16
 8002484:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43da      	mvns	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	400a      	ands	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024d4:	d104      	bne.n	80024e0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e018      	b.n	8002512 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	e00f      	b.n	8002512 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80024f2:	f002 f8df 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80024f6:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4a14      	ldr	r2, [pc, #80]	@ (800254c <HAL_DAC_ConfigChannel+0x294>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d904      	bls.n	800250a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	e003      	b.n	8002512 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002510:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	22c0      	movs	r2, #192	@ 0xc0
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43da      	mvns	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	400a      	ands	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2201      	movs	r2, #1
 800253a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	04c4b400 	.word	0x04c4b400

08002550 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f7ff fe8b 	bl	800227a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	711a      	strb	r2, [r3, #4]
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f7ff fe84 	bl	800228e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f043 0204 	orr.w	r2, r3, #4
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff fe7a 	bl	80022a2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	711a      	strb	r2, [r3, #4]
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002604:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff ffd8 	bl	80025bc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	711a      	strb	r2, [r3, #4]
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff ffd1 	bl	80025d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f043 0204 	orr.w	r2, r3, #4
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff ffc7 	bl	80025e4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	711a      	strb	r2, [r3, #4]
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0ac      	b.n	80027d0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 faac 	bl	8002bd8 <DFSDM_GetChannelFromInstance>
 8002680:	4603      	mov	r3, r0
 8002682:	4a55      	ldr	r2, [pc, #340]	@ (80027d8 <HAL_DFSDM_ChannelInit+0x174>)
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e09f      	b.n	80027d0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff f82b 	bl	80016ec <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002696:	4b51      	ldr	r3, [pc, #324]	@ (80027dc <HAL_DFSDM_ChannelInit+0x178>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	4a4f      	ldr	r2, [pc, #316]	@ (80027dc <HAL_DFSDM_ChannelInit+0x178>)
 800269e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80026a0:	4b4e      	ldr	r3, [pc, #312]	@ (80027dc <HAL_DFSDM_ChannelInit+0x178>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d125      	bne.n	80026f4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80026a8:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026b2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026b4:	4b4a      	ldr	r3, [pc, #296]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4948      	ldr	r1, [pc, #288]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a46      	ldr	r2, [pc, #280]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026c8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80026cc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	791b      	ldrb	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026d6:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	3b01      	subs	r3, #1
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	493f      	ldr	r1, [pc, #252]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026e8:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3c      	ldr	r2, [pc, #240]	@ (80027e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80026ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026f2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002702:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002712:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002718:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 020f 	bic.w	r2, r2, #15
 8002730:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6819      	ldr	r1, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002758:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f002 0207 	and.w	r2, r2, #7
 8002784:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fa0a 	bl	8002bd8 <DFSDM_GetChannelFromInstance>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4904      	ldr	r1, [pc, #16]	@ (80027d8 <HAL_DFSDM_ChannelInit+0x174>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20040d20 	.word	0x20040d20
 80027dc:	20040d1c 	.word	0x20040d1c
 80027e0:	40016000 	.word	0x40016000

080027e4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0ca      	b.n	800298c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a66      	ldr	r2, [pc, #408]	@ (8002994 <HAL_DFSDM_FilterInit+0x1b0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d109      	bne.n	8002814 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002804:	2b01      	cmp	r3, #1
 8002806:	d003      	beq.n	8002810 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0bb      	b.n	800298c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7fe feb1 	bl	8001594 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8002840:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	7a1b      	ldrb	r3, [r3, #8]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e007      	b.n	800286c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800286a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7a5b      	ldrb	r3, [r3, #9]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d108      	bne.n	8002886 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e007      	b.n	8002896 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80028a4:	f023 0308 	bic.w	r3, r3, #8
 80028a8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d108      	bne.n	80028c4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6819      	ldr	r1, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7c1b      	ldrb	r3, [r3, #16]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d108      	bne.n	80028de <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0210 	orr.w	r2, r2, #16
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e007      	b.n	80028ee <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0210 	bic.w	r2, r2, #16
 80028ec:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	7c5b      	ldrb	r3, [r3, #17]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d108      	bne.n	8002908 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0220 	orr.w	r2, r2, #32
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e007      	b.n	8002918 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0220 	bic.w	r2, r2, #32
 8002916:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8002926:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800292a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6959      	ldr	r1, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800293e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002946:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7c1a      	ldrb	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0201 	orr.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40016100 	.word	0x40016100

08002998 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d02e      	beq.n	8002a10 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80029b8:	2bff      	cmp	r3, #255	@ 0xff
 80029ba:	d029      	beq.n	8002a10 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ce:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d10d      	bne.n	80029f2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80029e4:	431a      	orrs	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e00a      	b.n	8002a08 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a0e:	e001      	b.n	8002a14 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	75fb      	strb	r3, [r7, #23]
 8002a44:	e064      	b.n	8002b10 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a54:	d002      	beq.n	8002a5c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
 8002a5a:	e059      	b.n	8002b10 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10e      	bne.n	8002a82 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d002      	beq.n	8002a82 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
 8002a80:	e046      	b.n	8002b10 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d102      	bne.n	8002aa2 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
 8002aa0:	e036      	b.n	8002b10 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d004      	beq.n	8002ab6 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d12a      	bne.n	8002b0c <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	4a18      	ldr	r2, [pc, #96]	@ (8002b1c <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002abc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	4a17      	ldr	r2, [pc, #92]	@ (8002b20 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aca:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d101      	bne.n	8002ad4 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002ad2:	e000      	b.n	8002ad6 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002ad4:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ada:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	331c      	adds	r3, #28
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f000 fa0c 	bl	8002f08 <HAL_DMA_Start_IT>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	22ff      	movs	r2, #255	@ 0xff
 8002afa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002b02:	e005      	b.n	8002b10 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f8b3 	bl	8002c70 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002b0a:	e001      	b.n	8002b10 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	08002b99 	.word	0x08002b99
 8002b20:	08002bb5 	.word	0x08002bb5
 8002b24:	08002b7d 	.word	0x08002b7d

08002b28 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d007      	beq.n	8002b4e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d002      	beq.n	8002b4e <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e007      	b.n	8002b5e <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fa53 	bl	8002ffe <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f8df 	bl	8002d1c <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7fe fc4a 	bl	8001424 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7fe fc4c 	bl	8001444 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff ffcd 	bl	8002b68 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002bce:	bf00      	nop
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <DFSDM_GetChannelFromInstance+0x7c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d102      	bne.n	8002bee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	e02b      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a19      	ldr	r2, [pc, #100]	@ (8002c58 <DFSDM_GetChannelFromInstance+0x80>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e024      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a17      	ldr	r2, [pc, #92]	@ (8002c5c <DFSDM_GetChannelFromInstance+0x84>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d102      	bne.n	8002c0a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002c04:	2302      	movs	r3, #2
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e01d      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <DFSDM_GetChannelFromInstance+0x88>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d102      	bne.n	8002c18 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002c12:	2304      	movs	r3, #4
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e016      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <DFSDM_GetChannelFromInstance+0x8c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d102      	bne.n	8002c26 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002c20:	2305      	movs	r3, #5
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e00f      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0f      	ldr	r2, [pc, #60]	@ (8002c68 <DFSDM_GetChannelFromInstance+0x90>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c2e:	2306      	movs	r3, #6
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e008      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a0d      	ldr	r2, [pc, #52]	@ (8002c6c <DFSDM_GetChannelFromInstance+0x94>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e001      	b.n	8002c46 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c42:	2303      	movs	r3, #3
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40016000 	.word	0x40016000
 8002c58:	40016020 	.word	0x40016020
 8002c5c:	40016040 	.word	0x40016040
 8002c60:	40016080 	.word	0x40016080
 8002c64:	400160a0 	.word	0x400160a0
 8002c68:	400160c0 	.word	0x400160c0
 8002c6c:	400160e0 	.word	0x400160e0

08002c70 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d108      	bne.n	8002c92 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e033      	b.n	8002cfa <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0201 	bic.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002cb0:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d116      	bne.n	8002cfa <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0202 	orr.w	r2, r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d102      	bne.n	8002cf4 <DFSDM_RegConvStart+0x84>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	e000      	b.n	8002cf6 <DFSDM_RegConvStart+0x86>
 8002cf4:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <DFSDM_RegConvStart+0x98>
 8002d04:	2202      	movs	r2, #2
 8002d06:	e000      	b.n	8002d0a <DFSDM_RegConvStart+0x9a>
 8002d08:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d107      	bne.n	8002d4c <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d116      	bne.n	8002d94 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0202 	orr.w	r2, r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d102      	bne.n	8002d8e <DFSDM_RegConvStop+0x72>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	e000      	b.n	8002d90 <DFSDM_RegConvStop+0x74>
 8002d8e:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d101      	bne.n	8002da2 <DFSDM_RegConvStop+0x86>
 8002d9e:	2201      	movs	r2, #1
 8002da0:	e000      	b.n	8002da4 <DFSDM_RegConvStop+0x88>
 8002da2:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e08d      	b.n	8002ee6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_DMA_Init+0x138>)
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d80f      	bhi.n	8002df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b45      	ldr	r3, [pc, #276]	@ (8002ef4 <HAL_DMA_Init+0x13c>)
 8002dde:	4413      	add	r3, r2
 8002de0:	4a45      	ldr	r2, [pc, #276]	@ (8002ef8 <HAL_DMA_Init+0x140>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	009a      	lsls	r2, r3, #2
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a42      	ldr	r2, [pc, #264]	@ (8002efc <HAL_DMA_Init+0x144>)
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002df4:	e00e      	b.n	8002e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b40      	ldr	r3, [pc, #256]	@ (8002f00 <HAL_DMA_Init+0x148>)
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef8 <HAL_DMA_Init+0x140>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a3c      	ldr	r2, [pc, #240]	@ (8002f04 <HAL_DMA_Init+0x14c>)
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa12 	bl	8003290 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e74:	d102      	bne.n	8002e7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <HAL_DMA_Init+0x104>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d80c      	bhi.n	8002ebc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa32 	bl	800330c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	e008      	b.n	8002ece <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40020407 	.word	0x40020407
 8002ef4:	bffdfff8 	.word	0xbffdfff8
 8002ef8:	cccccccd 	.word	0xcccccccd
 8002efc:	40020000 	.word	0x40020000
 8002f00:	bffdfbf8 	.word	0xbffdfbf8
 8002f04:	40020400 	.word	0x40020400

08002f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_DMA_Start_IT+0x20>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e066      	b.n	8002ff6 <HAL_DMA_Start_IT+0xee>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d155      	bne.n	8002fe8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f957 	bl	8003214 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 020e 	orr.w	r2, r2, #14
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e00f      	b.n	8002fa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0204 	bic.w	r2, r2, #4
 8002f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 020a 	orr.w	r2, r2, #10
 8002f9e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fd4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e005      	b.n	8002ff4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d008      	beq.n	8003028 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2204      	movs	r2, #4
 800301a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e040      	b.n	80030aa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 020e 	bic.w	r2, r2, #14
 8003036:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003042:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003046:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	f003 021c 	and.w	r2, r3, #28
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	2101      	movs	r1, #1
 8003066:	fa01 f202 	lsl.w	r2, r1, r2
 800306a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003074:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00c      	beq.n	8003098 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003088:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800308c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003096:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f003 031c 	and.w	r3, r3, #28
 80030d6:	2204      	movs	r2, #4
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d026      	beq.n	8003130 <HAL_DMA_IRQHandler+0x7a>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d021      	beq.n	8003130 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0204 	bic.w	r2, r2, #4
 8003108:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f003 021c 	and.w	r2, r3, #28
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	2104      	movs	r1, #4
 8003118:	fa01 f202 	lsl.w	r2, r1, r2
 800311c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	2b00      	cmp	r3, #0
 8003124:	d071      	beq.n	800320a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800312e:	e06c      	b.n	800320a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003134:	f003 031c 	and.w	r3, r3, #28
 8003138:	2202      	movs	r2, #2
 800313a:	409a      	lsls	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02e      	beq.n	80031a2 <HAL_DMA_IRQHandler+0xec>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d029      	beq.n	80031a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 020a 	bic.w	r2, r2, #10
 800316a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003178:	f003 021c 	and.w	r2, r3, #28
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	2102      	movs	r1, #2
 8003182:	fa01 f202 	lsl.w	r2, r1, r2
 8003186:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d038      	beq.n	800320a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031a0:	e033      	b.n	800320a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f003 031c 	and.w	r3, r3, #28
 80031aa:	2208      	movs	r2, #8
 80031ac:	409a      	lsls	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d02a      	beq.n	800320c <HAL_DMA_IRQHandler+0x156>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d025      	beq.n	800320c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 020e 	bic.w	r2, r2, #14
 80031ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f003 021c 	and.w	r2, r3, #28
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f202 	lsl.w	r2, r1, r2
 80031e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d004      	beq.n	800320c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800320a:	bf00      	nop
 800320c:	bf00      	nop
}
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800322a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800323c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f003 021c 	and.w	r2, r3, #28
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2101      	movs	r1, #1
 800324c:	fa01 f202 	lsl.w	r2, r1, r2
 8003250:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b10      	cmp	r3, #16
 8003260:	d108      	bne.n	8003274 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003272:	e007      	b.n	8003284 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	4b17      	ldr	r3, [pc, #92]	@ (80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d80a      	bhi.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032b0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6493      	str	r3, [r2, #72]	@ 0x48
 80032b8:	e007      	b.n	80032ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	009a      	lsls	r2, r3, #2
 80032c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032c4:	4413      	add	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	3b08      	subs	r3, #8
 80032d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2201      	movs	r2, #1
 80032ea:	409a      	lsls	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40020407 	.word	0x40020407
 8003300:	4002081c 	.word	0x4002081c
 8003304:	cccccccd 	.word	0xcccccccd
 8003308:	40020880 	.word	0x40020880

0800330c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4b0b      	ldr	r3, [pc, #44]	@ (800334c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	461a      	mov	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a08      	ldr	r2, [pc, #32]	@ (8003350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800332e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3b01      	subs	r3, #1
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2201      	movs	r2, #1
 800333a:	409a      	lsls	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	1000823f 	.word	0x1000823f
 8003350:	40020940 	.word	0x40020940

08003354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003362:	e166      	b.n	8003632 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2101      	movs	r1, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8158 	beq.w	800362c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d005      	beq.n	8003394 <HAL_GPIO_Init+0x40>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d130      	bne.n	80033f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ca:	2201      	movs	r2, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 0201 	and.w	r2, r3, #1
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d017      	beq.n	8003432 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d123      	bne.n	8003486 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	08da      	lsrs	r2, r3, #3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3208      	adds	r2, #8
 8003446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	6939      	ldr	r1, [r7, #16]
 8003482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0203 	and.w	r2, r3, #3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80b2 	beq.w	800362c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c8:	4b61      	ldr	r3, [pc, #388]	@ (8003650 <HAL_GPIO_Init+0x2fc>)
 80034ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034cc:	4a60      	ldr	r2, [pc, #384]	@ (8003650 <HAL_GPIO_Init+0x2fc>)
 80034ce:	f043 0301 	orr.w	r3, r3, #1
 80034d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <HAL_GPIO_Init+0x2fc>)
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003654 <HAL_GPIO_Init+0x300>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	3302      	adds	r3, #2
 80034e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	220f      	movs	r2, #15
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4013      	ands	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800350a:	d02b      	beq.n	8003564 <HAL_GPIO_Init+0x210>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a52      	ldr	r2, [pc, #328]	@ (8003658 <HAL_GPIO_Init+0x304>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d025      	beq.n	8003560 <HAL_GPIO_Init+0x20c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a51      	ldr	r2, [pc, #324]	@ (800365c <HAL_GPIO_Init+0x308>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d01f      	beq.n	800355c <HAL_GPIO_Init+0x208>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a50      	ldr	r2, [pc, #320]	@ (8003660 <HAL_GPIO_Init+0x30c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d019      	beq.n	8003558 <HAL_GPIO_Init+0x204>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a4f      	ldr	r2, [pc, #316]	@ (8003664 <HAL_GPIO_Init+0x310>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_GPIO_Init+0x200>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a4e      	ldr	r2, [pc, #312]	@ (8003668 <HAL_GPIO_Init+0x314>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00d      	beq.n	8003550 <HAL_GPIO_Init+0x1fc>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a4d      	ldr	r2, [pc, #308]	@ (800366c <HAL_GPIO_Init+0x318>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <HAL_GPIO_Init+0x1f8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4c      	ldr	r2, [pc, #304]	@ (8003670 <HAL_GPIO_Init+0x31c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_GPIO_Init+0x1f4>
 8003544:	2307      	movs	r3, #7
 8003546:	e00e      	b.n	8003566 <HAL_GPIO_Init+0x212>
 8003548:	2308      	movs	r3, #8
 800354a:	e00c      	b.n	8003566 <HAL_GPIO_Init+0x212>
 800354c:	2306      	movs	r3, #6
 800354e:	e00a      	b.n	8003566 <HAL_GPIO_Init+0x212>
 8003550:	2305      	movs	r3, #5
 8003552:	e008      	b.n	8003566 <HAL_GPIO_Init+0x212>
 8003554:	2304      	movs	r3, #4
 8003556:	e006      	b.n	8003566 <HAL_GPIO_Init+0x212>
 8003558:	2303      	movs	r3, #3
 800355a:	e004      	b.n	8003566 <HAL_GPIO_Init+0x212>
 800355c:	2302      	movs	r3, #2
 800355e:	e002      	b.n	8003566 <HAL_GPIO_Init+0x212>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <HAL_GPIO_Init+0x212>
 8003564:	2300      	movs	r3, #0
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	f002 0203 	and.w	r2, r2, #3
 800356c:	0092      	lsls	r2, r2, #2
 800356e:	4093      	lsls	r3, r2
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003576:	4937      	ldr	r1, [pc, #220]	@ (8003654 <HAL_GPIO_Init+0x300>)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	3302      	adds	r3, #2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003584:	4b3b      	ldr	r3, [pc, #236]	@ (8003674 <HAL_GPIO_Init+0x320>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	43db      	mvns	r3, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035a8:	4a32      	ldr	r2, [pc, #200]	@ (8003674 <HAL_GPIO_Init+0x320>)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035ae:	4b31      	ldr	r3, [pc, #196]	@ (8003674 <HAL_GPIO_Init+0x320>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035d2:	4a28      	ldr	r2, [pc, #160]	@ (8003674 <HAL_GPIO_Init+0x320>)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035d8:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <HAL_GPIO_Init+0x320>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003674 <HAL_GPIO_Init+0x320>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003602:	4b1c      	ldr	r3, [pc, #112]	@ (8003674 <HAL_GPIO_Init+0x320>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	43db      	mvns	r3, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003626:	4a13      	ldr	r2, [pc, #76]	@ (8003674 <HAL_GPIO_Init+0x320>)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	fa22 f303 	lsr.w	r3, r2, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	f47f ae91 	bne.w	8003364 <HAL_GPIO_Init+0x10>
  }
}
 8003642:	bf00      	nop
 8003644:	bf00      	nop
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40021000 	.word	0x40021000
 8003654:	40010000 	.word	0x40010000
 8003658:	48000400 	.word	0x48000400
 800365c:	48000800 	.word	0x48000800
 8003660:	48000c00 	.word	0x48000c00
 8003664:	48001000 	.word	0x48001000
 8003668:	48001400 	.word	0x48001400
 800366c:	48001800 	.word	0x48001800
 8003670:	48001c00 	.word	0x48001c00
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	887b      	ldrh	r3, [r7, #2]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e001      	b.n	800369a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b8:	787b      	ldrb	r3, [r7, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036c4:	e002      	b.n	80036cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036c6:	887a      	ldrh	r2, [r7, #2]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ee:	4a05      	ldr	r2, [pc, #20]	@ (8003704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd f9c0 	bl	8000a7c <HAL_GPIO_EXTI_Callback>
  }
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40010400 	.word	0x40010400

08003708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e08d      	b.n	8003836 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe f84c 	bl	80017cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2224      	movs	r2, #36	@ 0x24
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003758:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003768:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d107      	bne.n	8003782 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	e006      	b.n	8003790 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800378e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d108      	bne.n	80037aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	e007      	b.n	80037ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69d9      	ldr	r1, [r3, #28]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	d138      	bne.n	80038c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800385e:	2302      	movs	r3, #2
 8003860:	e032      	b.n	80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2224      	movs	r2, #36	@ 0x24
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0201 	bic.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003890:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	e000      	b.n	80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038c6:	2302      	movs	r3, #2
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d139      	bne.n	800395e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e033      	b.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2224      	movs	r2, #36	@ 0x24
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003926:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	021b      	lsls	r3, r3, #8
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003970:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397c:	d102      	bne.n	8003984 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800397e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003982:	e00b      	b.n	800399c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003984:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003992:	d102      	bne.n	800399a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003998:	e000      	b.n	800399c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800399a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40007000 	.word	0x40007000

080039ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d141      	bne.n	8003a3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ba:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c6:	d131      	bne.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039c8:	4b47      	ldr	r3, [pc, #284]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039ce:	4a46      	ldr	r2, [pc, #280]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d8:	4b43      	ldr	r3, [pc, #268]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039e0:	4a41      	ldr	r2, [pc, #260]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80039e8:	4b40      	ldr	r3, [pc, #256]	@ (8003aec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2232      	movs	r2, #50	@ 0x32
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	4a3f      	ldr	r2, [pc, #252]	@ (8003af0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	0c9b      	lsrs	r3, r3, #18
 80039fa:	3301      	adds	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039fe:	e002      	b.n	8003a06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a06:	4b38      	ldr	r3, [pc, #224]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a12:	d102      	bne.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f2      	bne.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a26:	d158      	bne.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e057      	b.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a32:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a3c:	e04d      	b.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a44:	d141      	bne.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a46:	4b28      	ldr	r3, [pc, #160]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a52:	d131      	bne.n	8003ab8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a54:	4b24      	ldr	r3, [pc, #144]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a64:	4b20      	ldr	r3, [pc, #128]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2232      	movs	r2, #50	@ 0x32
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	0c9b      	lsrs	r3, r3, #18
 8003a86:	3301      	adds	r3, #1
 8003a88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8a:	e002      	b.n	8003a92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a9e:	d102      	bne.n	8003aa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f2      	bne.n	8003a8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab2:	d112      	bne.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e011      	b.n	8003adc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003abe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ac8:	e007      	b.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ad2:	4a05      	ldr	r2, [pc, #20]	@ (8003ae8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ad8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	20000000 	.word	0x20000000
 8003af0:	431bde83 	.word	0x431bde83

08003af4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f000 bc08 	b.w	8004318 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b08:	4b96      	ldr	r3, [pc, #600]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b12:	4b94      	ldr	r3, [pc, #592]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80e4 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4c>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	f040 808b 	bne.w	8003c4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	f040 8087 	bne.w	8003c4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b40:	4b88      	ldr	r3, [pc, #544]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x64>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e3df      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4b81      	ldr	r3, [pc, #516]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_RCC_OscConfig+0x7e>
 8003b68:	4b7e      	ldr	r3, [pc, #504]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b70:	e005      	b.n	8003b7e <HAL_RCC_OscConfig+0x8a>
 8003b72:	4b7c      	ldr	r3, [pc, #496]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d223      	bcs.n	8003bca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fdcc 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e3c0      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b96:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a72      	ldr	r2, [pc, #456]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	f043 0308 	orr.w	r3, r3, #8
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b70      	ldr	r3, [pc, #448]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	496d      	ldr	r1, [pc, #436]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	4968      	ldr	r1, [pc, #416]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e025      	b.n	8003c16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bca:	4b66      	ldr	r3, [pc, #408]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a65      	ldr	r2, [pc, #404]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b63      	ldr	r3, [pc, #396]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4960      	ldr	r1, [pc, #384]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003be8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	495b      	ldr	r1, [pc, #364]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fd8c 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e380      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c16:	f000 fcc1 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b51      	ldr	r3, [pc, #324]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4950      	ldr	r1, [pc, #320]	@ (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a4e      	ldr	r2, [pc, #312]	@ (8003d6c <HAL_RCC_OscConfig+0x278>)
 8003c34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c36:	4b4e      	ldr	r3, [pc, #312]	@ (8003d70 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe f806 	bl	8001c4c <HAL_InitTick>
 8003c40:	4603      	mov	r3, r0
 8003c42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d052      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	e364      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d032      	beq.n	8003cbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c56:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a42      	ldr	r2, [pc, #264]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c62:	f7fe f843 	bl	8001cec <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c6a:	f7fe f83f 	bl	8001cec <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e34d      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7c:	4b39      	ldr	r3, [pc, #228]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c88:	4b36      	ldr	r3, [pc, #216]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a35      	ldr	r2, [pc, #212]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	f043 0308 	orr.w	r3, r3, #8
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b33      	ldr	r3, [pc, #204]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	4930      	ldr	r1, [pc, #192]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	492b      	ldr	r1, [pc, #172]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
 8003cba:	e01a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cbc:	4b29      	ldr	r3, [pc, #164]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe f810 	bl	8001cec <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd0:	f7fe f80c 	bl	8001cec <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e31a      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1dc>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d073      	beq.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_OscConfig+0x21c>
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d10e      	bne.n	8003d28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d063      	beq.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d15f      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e2f7      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d30:	d106      	bne.n	8003d40 <HAL_RCC_OscConfig+0x24c>
 8003d32:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a0b      	ldr	r2, [pc, #44]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e025      	b.n	8003d8c <HAL_RCC_OscConfig+0x298>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d48:	d114      	bne.n	8003d74 <HAL_RCC_OscConfig+0x280>
 8003d4a:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a05      	ldr	r2, [pc, #20]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a02      	ldr	r2, [pc, #8]	@ (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e013      	b.n	8003d8c <HAL_RCC_OscConfig+0x298>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800839c 	.word	0x0800839c
 8003d6c:	20000000 	.word	0x20000000
 8003d70:	20000004 	.word	0x20000004
 8003d74:	4ba0      	ldr	r3, [pc, #640]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a9f      	ldr	r2, [pc, #636]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b9d      	ldr	r3, [pc, #628]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a9c      	ldr	r2, [pc, #624]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd ffaa 	bl	8001cec <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fd ffa6 	bl	8001cec <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	@ 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e2b4      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dae:	4b92      	ldr	r3, [pc, #584]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2a8>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd ff96 	bl	8001cec <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fd ff92 	bl	8001cec <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	@ 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e2a0      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd6:	4b88      	ldr	r3, [pc, #544]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2d0>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d060      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_OscConfig+0x310>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d116      	bne.n	8003e32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e04:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x328>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e27d      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4b76      	ldr	r3, [pc, #472]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	4973      	ldr	r1, [pc, #460]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e30:	e040      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fd ff51 	bl	8001cec <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7fd ff4d 	bl	8001cec <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e25b      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e60:	4b65      	ldr	r3, [pc, #404]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b62      	ldr	r3, [pc, #392]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	495f      	ldr	r1, [pc, #380]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	e018      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5c      	ldr	r2, [pc, #368]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd ff2d 	bl	8001cec <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd ff29 	bl	8001cec <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e237      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea8:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03c      	beq.n	8003f3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01c      	beq.n	8003f02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ece:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7fd ff08 	bl	8001cec <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee0:	f7fd ff04 	bl	8001cec <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e212      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef2:	4b41      	ldr	r3, [pc, #260]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x3ec>
 8003f00:	e01b      	b.n	8003f3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f02:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f08:	4a3b      	ldr	r2, [pc, #236]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fd feeb 	bl	8001cec <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7fd fee7 	bl	8001cec <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1f5      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f2c:	4b32      	ldr	r3, [pc, #200]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ef      	bne.n	8003f1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80a6 	beq.w	8004094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10d      	bne.n	8003f74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	4b27      	ldr	r3, [pc, #156]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f64:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f74:	4b21      	ldr	r3, [pc, #132]	@ (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d118      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f80:	4b1e      	ldr	r3, [pc, #120]	@ (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	@ (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8c:	f7fd feae 	bl	8001cec <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7fd feaa 	bl	8001cec <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1b8      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa6:	4b15      	ldr	r3, [pc, #84]	@ (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4d8>
 8003fba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fca:	e029      	b.n	8004020 <HAL_RCC_OscConfig+0x52c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	d115      	bne.n	8004000 <HAL_RCC_OscConfig+0x50c>
 8003fd4:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fe4:	4b04      	ldr	r3, [pc, #16]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fea:	4a03      	ldr	r2, [pc, #12]	@ (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ff4:	e014      	b.n	8004020 <HAL_RCC_OscConfig+0x52c>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	4b9d      	ldr	r3, [pc, #628]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	4a9c      	ldr	r2, [pc, #624]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004010:	4b99      	ldr	r3, [pc, #612]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	4a98      	ldr	r2, [pc, #608]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fd fe60 	bl	8001cec <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fd fe5c 	bl	8001cec <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e168      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	4b8c      	ldr	r3, [pc, #560]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ed      	beq.n	8004030 <HAL_RCC_OscConfig+0x53c>
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fd fe49 	bl	8001cec <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fd fe45 	bl	8001cec <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e151      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004074:	4b80      	ldr	r3, [pc, #512]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ed      	bne.n	800405e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004082:	7ffb      	ldrb	r3, [r7, #31]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004088:	4b7b      	ldr	r3, [pc, #492]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	4a7a      	ldr	r2, [pc, #488]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 800408e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03c      	beq.n	800411a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040a8:	4b73      	ldr	r3, [pc, #460]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80040aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ae:	4a72      	ldr	r2, [pc, #456]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fd fe18 	bl	8001cec <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c0:	f7fd fe14 	bl	8001cec <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e122      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d2:	4b69      	ldr	r3, [pc, #420]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80040d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ef      	beq.n	80040c0 <HAL_RCC_OscConfig+0x5cc>
 80040e0:	e01b      	b.n	800411a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e2:	4b65      	ldr	r3, [pc, #404]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80040e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040e8:	4a63      	ldr	r2, [pc, #396]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fd fdfb 	bl	8001cec <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fa:	f7fd fdf7 	bl	8001cec <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e105      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800410c:	4b5a      	ldr	r3, [pc, #360]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 800410e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1ef      	bne.n	80040fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80f9 	beq.w	8004316 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	2b02      	cmp	r3, #2
 800412a:	f040 80cf 	bne.w	80042cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800412e:	4b52      	ldr	r3, [pc, #328]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 0203 	and.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	429a      	cmp	r2, r3
 8004140:	d12c      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	3b01      	subs	r3, #1
 800414e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d123      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d11b      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d113      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d109      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	3b01      	subs	r3, #1
 8004196:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d071      	beq.n	8004280 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d068      	beq.n	8004274 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041a2:	4b35      	ldr	r3, [pc, #212]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d105      	bne.n	80041ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041ae:	4b32      	ldr	r3, [pc, #200]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e0ac      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041be:	4b2e      	ldr	r3, [pc, #184]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80041c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041ca:	f7fd fd8f 	bl	8001cec <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fd fd8b 	bl	8001cec <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e099      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e4:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f0      	bne.n	80041d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f0:	4b21      	ldr	r3, [pc, #132]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	4b21      	ldr	r3, [pc, #132]	@ (800427c <HAL_RCC_OscConfig+0x788>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004200:	3a01      	subs	r2, #1
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800420a:	0212      	lsls	r2, r2, #8
 800420c:	4311      	orrs	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0552      	lsls	r2, r2, #21
 8004218:	4311      	orrs	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800421e:	0852      	lsrs	r2, r2, #1
 8004220:	3a01      	subs	r2, #1
 8004222:	0652      	lsls	r2, r2, #25
 8004224:	4311      	orrs	r1, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800422a:	06d2      	lsls	r2, r2, #27
 800422c:	430a      	orrs	r2, r1
 800422e:	4912      	ldr	r1, [pc, #72]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004230:	4313      	orrs	r3, r2
 8004232:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004234:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0f      	ldr	r2, [pc, #60]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 800423a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004240:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a0c      	ldr	r2, [pc, #48]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800424a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800424c:	f7fd fd4e 	bl	8001cec <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fd4a 	bl	8001cec <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e058      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <HAL_RCC_OscConfig+0x784>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004272:	e050      	b.n	8004316 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e04f      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
 8004278:	40021000 	.word	0x40021000
 800427c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004280:	4b27      	ldr	r3, [pc, #156]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d144      	bne.n	8004316 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800428c:	4b24      	ldr	r3, [pc, #144]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a23      	ldr	r2, [pc, #140]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 8004292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004296:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004298:	4b21      	ldr	r3, [pc, #132]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a20      	ldr	r2, [pc, #128]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 800429e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042a4:	f7fd fd22 	bl	8001cec <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ac:	f7fd fd1e 	bl	8001cec <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e02c      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042be:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x7b8>
 80042ca:	e024      	b.n	8004316 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d01f      	beq.n	8004312 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a12      	ldr	r2, [pc, #72]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 80042d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fd fd05 	bl	8001cec <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fd fd01 	bl	8001cec <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e00f      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f8:	4b09      	ldr	r3, [pc, #36]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f0      	bne.n	80042e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004304:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	4905      	ldr	r1, [pc, #20]	@ (8004320 <HAL_RCC_OscConfig+0x82c>)
 800430a:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x830>)
 800430c:	4013      	ands	r3, r2
 800430e:	60cb      	str	r3, [r1, #12]
 8004310:	e001      	b.n	8004316 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	feeefffc 	.word	0xfeeefffc

08004328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e11d      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b90      	ldr	r3, [pc, #576]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b8d      	ldr	r3, [pc, #564]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	498b      	ldr	r1, [pc, #556]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b89      	ldr	r3, [pc, #548]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e105      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	4b81      	ldr	r3, [pc, #516]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004388:	429a      	cmp	r2, r3
 800438a:	d908      	bls.n	800439e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b7e      	ldr	r3, [pc, #504]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	497b      	ldr	r1, [pc, #492]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d079      	beq.n	800449e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d11e      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b75      	ldr	r3, [pc, #468]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0dc      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80043c2:	f000 fa09 	bl	80047d8 <RCC_GetSysClockFreqFromPLLSource>
 80043c6:	4603      	mov	r3, r0
 80043c8:	4a70      	ldr	r2, [pc, #448]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d946      	bls.n	800445c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80043ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d140      	bne.n	800445c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043da:	4b6b      	ldr	r3, [pc, #428]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043e2:	4a69      	ldr	r2, [pc, #420]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80043e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043ea:	2380      	movs	r3, #128	@ 0x80
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e035      	b.n	800445c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043f8:	4b63      	ldr	r3, [pc, #396]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d115      	bne.n	8004430 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0b9      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d107      	bne.n	8004420 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004410:	4b5d      	ldr	r3, [pc, #372]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0ad      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004420:	4b59      	ldr	r3, [pc, #356]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0a5      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004430:	f000 f8b4 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8004434:	4603      	mov	r3, r0
 8004436:	4a55      	ldr	r2, [pc, #340]	@ (800458c <HAL_RCC_ClockConfig+0x264>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d90f      	bls.n	800445c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800443c:	4b52      	ldr	r3, [pc, #328]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004448:	4b4f      	ldr	r3, [pc, #316]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004450:	4a4d      	ldr	r2, [pc, #308]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004456:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004458:	2380      	movs	r3, #128	@ 0x80
 800445a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800445c:	4b4a      	ldr	r3, [pc, #296]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f023 0203 	bic.w	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4947      	ldr	r1, [pc, #284]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446e:	f7fd fc3d 	bl	8001cec <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004474:	e00a      	b.n	800448c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004476:	f7fd fc39 	bl	8001cec <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e077      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448c:	4b3e      	ldr	r3, [pc, #248]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 020c 	and.w	r2, r3, #12
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	429a      	cmp	r2, r3
 800449c:	d1eb      	bne.n	8004476 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b80      	cmp	r3, #128	@ 0x80
 80044a2:	d105      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044a4:	4b38      	ldr	r3, [pc, #224]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a37      	ldr	r2, [pc, #220]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d010      	beq.n	80044de <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b31      	ldr	r3, [pc, #196]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d208      	bcs.n	80044de <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	492b      	ldr	r1, [pc, #172]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044de:	4b29      	ldr	r3, [pc, #164]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d210      	bcs.n	800450e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ec:	4b25      	ldr	r3, [pc, #148]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 020f 	bic.w	r2, r3, #15
 80044f4:	4923      	ldr	r1, [pc, #140]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fc:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <HAL_RCC_ClockConfig+0x25c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e036      	b.n	800457c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0304 	and.w	r3, r3, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451a:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4918      	ldr	r1, [pc, #96]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004538:	4b13      	ldr	r3, [pc, #76]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4910      	ldr	r1, [pc, #64]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800454c:	f000 f826 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <HAL_RCC_ClockConfig+0x260>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	490c      	ldr	r1, [pc, #48]	@ (8004590 <HAL_RCC_ClockConfig+0x268>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	4a0a      	ldr	r2, [pc, #40]	@ (8004594 <HAL_RCC_ClockConfig+0x26c>)
 800456a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <HAL_RCC_ClockConfig+0x270>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7fd fb6b 	bl	8001c4c <HAL_InitTick>
 8004576:	4603      	mov	r3, r0
 8004578:	73fb      	strb	r3, [r7, #15]

  return status;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40022000 	.word	0x40022000
 8004588:	40021000 	.word	0x40021000
 800458c:	04c4b400 	.word	0x04c4b400
 8004590:	0800839c 	.word	0x0800839c
 8004594:	20000000 	.word	0x20000000
 8004598:	20000004 	.word	0x20000004

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	@ 0x24
 80045a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	4b3e      	ldr	r3, [pc, #248]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b4:	4b3b      	ldr	r3, [pc, #236]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d121      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d11e      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045d0:	4b34      	ldr	r3, [pc, #208]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045dc:	4b31      	ldr	r3, [pc, #196]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e005      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045ec:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045f8:	4a2b      	ldr	r2, [pc, #172]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004600:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10d      	bne.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d102      	bne.n	800461a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004614:	4b25      	ldr	r3, [pc, #148]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	e004      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d101      	bne.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004620:	4b23      	ldr	r3, [pc, #140]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004622:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d134      	bne.n	8004694 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800462a:	4b1e      	ldr	r3, [pc, #120]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0xa6>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d003      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0xac>
 8004640:	e005      	b.n	800464e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004642:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004644:	617b      	str	r3, [r7, #20]
      break;
 8004646:	e005      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004648:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800464a:	617b      	str	r3, [r7, #20]
      break;
 800464c:	e002      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	617b      	str	r3, [r7, #20]
      break;
 8004652:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004654:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	3301      	adds	r3, #1
 8004660:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004662:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	fb03 f202 	mul.w	r2, r3, r2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	0e5b      	lsrs	r3, r3, #25
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	3301      	adds	r3, #1
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004694:	69bb      	ldr	r3, [r7, #24]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3724      	adds	r7, #36	@ 0x24
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	080083b4 	.word	0x080083b4
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	007a1200 	.word	0x007a1200

080046b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	@ (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000000 	.word	0x20000000

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046d0:	f7ff fff0 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	080083ac 	.word	0x080083ac

080046f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046fc:	f7ff ffda 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0adb      	lsrs	r3, r3, #11
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4904      	ldr	r1, [pc, #16]	@ (8004720 <HAL_RCC_GetPCLK2Freq+0x28>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004718:	4618      	mov	r0, r3
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000
 8004720:	080083ac 	.word	0x080083ac

08004724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004730:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800473c:	f7ff f916 	bl	800396c <HAL_PWREx_GetVoltageRange>
 8004740:	6178      	str	r0, [r7, #20]
 8004742:	e014      	b.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b22      	ldr	r3, [pc, #136]	@ (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	4a21      	ldr	r2, [pc, #132]	@ (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004750:	4b1f      	ldr	r3, [pc, #124]	@ (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800475c:	f7ff f906 	bl	800396c <HAL_PWREx_GetVoltageRange>
 8004760:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	4a1a      	ldr	r2, [pc, #104]	@ (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004774:	d10b      	bne.n	800478e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d913      	bls.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004780:	d902      	bls.n	8004788 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004782:	2302      	movs	r3, #2
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e00d      	b.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004788:	2301      	movs	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e00a      	b.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b7f      	cmp	r3, #127	@ 0x7f
 8004792:	d902      	bls.n	800479a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004794:	2302      	movs	r3, #2
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e004      	b.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b70      	cmp	r3, #112	@ 0x70
 800479e:	d101      	bne.n	80047a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047a0:	2301      	movs	r3, #1
 80047a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047a4:	4b0b      	ldr	r3, [pc, #44]	@ (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 020f 	bic.w	r2, r3, #15
 80047ac:	4909      	ldr	r1, [pc, #36]	@ (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047b4:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d001      	beq.n	80047c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40022000 	.word	0x40022000

080047d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047de:	4b2d      	ldr	r3, [pc, #180]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d00b      	beq.n	8004806 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d825      	bhi.n	8004840 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d008      	beq.n	800480c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d11f      	bne.n	8004840 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004800:	4b25      	ldr	r3, [pc, #148]	@ (8004898 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004802:	613b      	str	r3, [r7, #16]
    break;
 8004804:	e01f      	b.n	8004846 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004806:	4b25      	ldr	r3, [pc, #148]	@ (800489c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004808:	613b      	str	r3, [r7, #16]
    break;
 800480a:	e01c      	b.n	8004846 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800480c:	4b21      	ldr	r3, [pc, #132]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004818:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800481a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800481e:	0a1b      	lsrs	r3, r3, #8
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e005      	b.n	8004834 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004828:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	091b      	lsrs	r3, r3, #4
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004834:	4a1a      	ldr	r2, [pc, #104]	@ (80048a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483c:	613b      	str	r3, [r7, #16]
    break;
 800483e:	e002      	b.n	8004846 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
    break;
 8004844:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004846:	4b13      	ldr	r3, [pc, #76]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	3301      	adds	r3, #1
 8004852:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	fb03 f202 	mul.w	r2, r3, r2
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800486c:	4b09      	ldr	r3, [pc, #36]	@ (8004894 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	0e5b      	lsrs	r3, r3, #25
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	3301      	adds	r3, #1
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004886:	683b      	ldr	r3, [r7, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40021000 	.word	0x40021000
 8004898:	00f42400 	.word	0x00f42400
 800489c:	007a1200 	.word	0x007a1200
 80048a0:	080083b4 	.word	0x080083b4

080048a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048ac:	2300      	movs	r3, #0
 80048ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048b0:	2300      	movs	r3, #0
 80048b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d040      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c4:	2b80      	cmp	r3, #128	@ 0x80
 80048c6:	d02a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048c8:	2b80      	cmp	r3, #128	@ 0x80
 80048ca:	d825      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80048cc:	2b60      	cmp	r3, #96	@ 0x60
 80048ce:	d026      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048d0:	2b60      	cmp	r3, #96	@ 0x60
 80048d2:	d821      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d006      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80048d8:	2b40      	cmp	r3, #64	@ 0x40
 80048da:	d81d      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d009      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d010      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80048e4:	e018      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048e6:	4b89      	ldr	r3, [pc, #548]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	4a88      	ldr	r2, [pc, #544]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048f2:	e015      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb02 	bl	8004f04 <RCCEx_PLLSAI1_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004904:	e00c      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3320      	adds	r3, #32
 800490a:	2100      	movs	r1, #0
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fbed 	bl	80050ec <RCCEx_PLLSAI2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004916:	e003      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	74fb      	strb	r3, [r7, #19]
      break;
 800491c:	e000      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800491e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004920:	7cfb      	ldrb	r3, [r7, #19]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10b      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004926:	4b79      	ldr	r3, [pc, #484]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004928:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800492c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004934:	4975      	ldr	r1, [pc, #468]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800493c:	e001      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d047      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004956:	d030      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495c:	d82a      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800495e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004962:	d02a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004968:	d824      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800496a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800496e:	d008      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004974:	d81e      	bhi.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800497a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800497e:	d010      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004980:	e018      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004982:	4b62      	ldr	r3, [pc, #392]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	4a61      	ldr	r2, [pc, #388]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800498c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800498e:	e015      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2100      	movs	r1, #0
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fab4 	bl	8004f04 <RCCEx_PLLSAI1_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049a0:	e00c      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3320      	adds	r3, #32
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fb9f 	bl	80050ec <RCCEx_PLLSAI2_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049b2:	e003      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	74fb      	strb	r3, [r7, #19]
      break;
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80049ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049bc:	7cfb      	ldrb	r3, [r7, #19]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049c2:	4b52      	ldr	r3, [pc, #328]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d0:	494e      	ldr	r1, [pc, #312]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80049d8:	e001      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 809f 	beq.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ec:	2300      	movs	r3, #0
 80049ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049f0:	4b46      	ldr	r3, [pc, #280]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b41      	ldr	r3, [pc, #260]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0a:	4a40      	ldr	r2, [pc, #256]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a12:	4b3e      	ldr	r3, [pc, #248]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	60bb      	str	r3, [r7, #8]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a22:	4b3b      	ldr	r3, [pc, #236]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3a      	ldr	r2, [pc, #232]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2e:	f7fd f95d 	bl	8001cec <HAL_GetTick>
 8004a32:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a34:	e009      	b.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a36:	f7fd f959 	bl	8001cec <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d902      	bls.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	74fb      	strb	r3, [r7, #19]
        break;
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a4a:	4b31      	ldr	r3, [pc, #196]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ef      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004a56:	7cfb      	ldrb	r3, [r7, #19]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d15b      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a66:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01f      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d019      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a7a:	4b24      	ldr	r3, [pc, #144]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a86:	4b21      	ldr	r3, [pc, #132]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a96:	4b1d      	ldr	r3, [pc, #116]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa6:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d016      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd f918 	bl	8001cec <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f7fd f914 	bl	8001cec <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d902      	bls.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad6:	e006      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ec      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aec:	4b07      	ldr	r3, [pc, #28]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afc:	4903      	ldr	r1, [pc, #12]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b04:	e008      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	74bb      	strb	r3, [r7, #18]
 8004b0a:	e005      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b18:	7c7b      	ldrb	r3, [r7, #17]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b1e:	4ba0      	ldr	r3, [pc, #640]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b22:	4a9f      	ldr	r2, [pc, #636]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b36:	4b9a      	ldr	r3, [pc, #616]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f023 0203 	bic.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	4996      	ldr	r1, [pc, #600]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b58:	4b91      	ldr	r3, [pc, #580]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	f023 020c 	bic.w	r2, r3, #12
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	498e      	ldr	r1, [pc, #568]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b7a:	4b89      	ldr	r3, [pc, #548]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b88:	4985      	ldr	r1, [pc, #532]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b9c:	4b80      	ldr	r3, [pc, #512]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004baa:	497d      	ldr	r1, [pc, #500]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bbe:	4b78      	ldr	r3, [pc, #480]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bcc:	4974      	ldr	r1, [pc, #464]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004be0:	4b6f      	ldr	r3, [pc, #444]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bee:	496c      	ldr	r1, [pc, #432]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c02:	4b67      	ldr	r3, [pc, #412]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c10:	4963      	ldr	r1, [pc, #396]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c24:	4b5e      	ldr	r3, [pc, #376]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c32:	495b      	ldr	r1, [pc, #364]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c46:	4b56      	ldr	r3, [pc, #344]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c54:	4952      	ldr	r1, [pc, #328]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c68:	4b4d      	ldr	r3, [pc, #308]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c76:	494a      	ldr	r1, [pc, #296]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c8a:	4b45      	ldr	r3, [pc, #276]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	4941      	ldr	r1, [pc, #260]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cac:	4b3c      	ldr	r3, [pc, #240]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cb2:	f023 0203 	bic.w	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cba:	4939      	ldr	r1, [pc, #228]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d028      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cce:	4b34      	ldr	r3, [pc, #208]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cdc:	4930      	ldr	r1, [pc, #192]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cec:	d106      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cee:	4b2c      	ldr	r3, [pc, #176]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cf8:	60d3      	str	r3, [r2, #12]
 8004cfa:	e011      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f8f9 	bl	8004f04 <RCCEx_PLLSAI1_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d04d      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d34:	d108      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004d36:	4b1a      	ldr	r3, [pc, #104]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d3c:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d42:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d46:	e012      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004d48:	4b15      	ldr	r3, [pc, #84]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d4e:	4a14      	ldr	r2, [pc, #80]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d54:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d58:	4b11      	ldr	r3, [pc, #68]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d66:	490e      	ldr	r1, [pc, #56]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d76:	d106      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d78:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4a08      	ldr	r2, [pc, #32]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d82:	60d3      	str	r3, [r2, #12]
 8004d84:	e020      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d8e:	d109      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d90:	4b03      	ldr	r3, [pc, #12]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a02      	ldr	r2, [pc, #8]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9a:	60d3      	str	r3, [r2, #12]
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2101      	movs	r1, #1
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 f8a5 	bl	8004f04 <RCCEx_PLLSAI1_Config>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004dc4:	7cfb      	ldrb	r3, [r7, #19]
 8004dc6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d028      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004de2:	4947      	ldr	r1, [pc, #284]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004df2:	d106      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df4:	4b42      	ldr	r3, [pc, #264]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4a41      	ldr	r2, [pc, #260]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dfe:	60d3      	str	r3, [r2, #12]
 8004e00:	e011      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e0a:	d10c      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f876 	bl	8004f04 <RCCEx_PLLSAI1_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004e22:	7cfb      	ldrb	r3, [r7, #19]
 8004e24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01e      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e32:	4b33      	ldr	r3, [pc, #204]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e38:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e42:	492f      	ldr	r1, [pc, #188]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f851 	bl	8004f04 <RCCEx_PLLSAI1_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e7c:	4b20      	ldr	r3, [pc, #128]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e82:	f023 0204 	bic.w	r2, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8c:	491c      	ldr	r1, [pc, #112]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ea0:	4b17      	ldr	r3, [pc, #92]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ea6:	f023 0218 	bic.w	r2, r3, #24
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb0:	4913      	ldr	r1, [pc, #76]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d017      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed4:	490a      	ldr	r1, [pc, #40]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ee2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4a04      	ldr	r2, [pc, #16]	@ (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ef2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ef4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000

08004f04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f12:	4b72      	ldr	r3, [pc, #456]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00e      	beq.n	8004f3c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0203 	and.w	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d103      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
       ||
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d142      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
 8004f3a:	e03f      	b.n	8004fbc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d018      	beq.n	8004f76 <RCCEx_PLLSAI1_Config+0x72>
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d825      	bhi.n	8004f94 <RCCEx_PLLSAI1_Config+0x90>
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d002      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x4e>
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d009      	beq.n	8004f64 <RCCEx_PLLSAI1_Config+0x60>
 8004f50:	e020      	b.n	8004f94 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f52:	4b62      	ldr	r3, [pc, #392]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d11d      	bne.n	8004f9a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f62:	e01a      	b.n	8004f9a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f64:	4b5d      	ldr	r3, [pc, #372]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d116      	bne.n	8004f9e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f74:	e013      	b.n	8004f9e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f76:	4b59      	ldr	r3, [pc, #356]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10f      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f82:	4b56      	ldr	r3, [pc, #344]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f92:	e006      	b.n	8004fa2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      break;
 8004f98:	e004      	b.n	8004fa4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004fa2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d108      	bne.n	8004fbc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004faa:	4b4c      	ldr	r3, [pc, #304]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f023 0203 	bic.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4949      	ldr	r1, [pc, #292]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 8086 	bne.w	80050d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fc4:	4b45      	ldr	r3, [pc, #276]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a44      	ldr	r2, [pc, #272]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd0:	f7fc fe8c 	bl	8001cec <HAL_GetTick>
 8004fd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fd6:	e009      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fd8:	f7fc fe88 	bl	8001cec <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d902      	bls.n	8004fec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	73fb      	strb	r3, [r7, #15]
        break;
 8004fea:	e005      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fec:	4b3b      	ldr	r3, [pc, #236]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1ef      	bne.n	8004fd8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d168      	bne.n	80050d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d113      	bne.n	800502c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005004:	4b35      	ldr	r3, [pc, #212]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	4b35      	ldr	r3, [pc, #212]	@ (80050e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800500a:	4013      	ands	r3, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6892      	ldr	r2, [r2, #8]
 8005010:	0211      	lsls	r1, r2, #8
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68d2      	ldr	r2, [r2, #12]
 8005016:	06d2      	lsls	r2, r2, #27
 8005018:	4311      	orrs	r1, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6852      	ldr	r2, [r2, #4]
 800501e:	3a01      	subs	r2, #1
 8005020:	0112      	lsls	r2, r2, #4
 8005022:	430a      	orrs	r2, r1
 8005024:	492d      	ldr	r1, [pc, #180]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	610b      	str	r3, [r1, #16]
 800502a:	e02d      	b.n	8005088 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d115      	bne.n	800505e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005032:	4b2a      	ldr	r3, [pc, #168]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	4b2b      	ldr	r3, [pc, #172]	@ (80050e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005038:	4013      	ands	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6892      	ldr	r2, [r2, #8]
 800503e:	0211      	lsls	r1, r2, #8
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6912      	ldr	r2, [r2, #16]
 8005044:	0852      	lsrs	r2, r2, #1
 8005046:	3a01      	subs	r2, #1
 8005048:	0552      	lsls	r2, r2, #21
 800504a:	4311      	orrs	r1, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6852      	ldr	r2, [r2, #4]
 8005050:	3a01      	subs	r2, #1
 8005052:	0112      	lsls	r2, r2, #4
 8005054:	430a      	orrs	r2, r1
 8005056:	4921      	ldr	r1, [pc, #132]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005058:	4313      	orrs	r3, r2
 800505a:	610b      	str	r3, [r1, #16]
 800505c:	e014      	b.n	8005088 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800505e:	4b1f      	ldr	r3, [pc, #124]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	4b21      	ldr	r3, [pc, #132]	@ (80050e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005064:	4013      	ands	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6892      	ldr	r2, [r2, #8]
 800506a:	0211      	lsls	r1, r2, #8
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6952      	ldr	r2, [r2, #20]
 8005070:	0852      	lsrs	r2, r2, #1
 8005072:	3a01      	subs	r2, #1
 8005074:	0652      	lsls	r2, r2, #25
 8005076:	4311      	orrs	r1, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6852      	ldr	r2, [r2, #4]
 800507c:	3a01      	subs	r2, #1
 800507e:	0112      	lsls	r2, r2, #4
 8005080:	430a      	orrs	r2, r1
 8005082:	4916      	ldr	r1, [pc, #88]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005084:	4313      	orrs	r3, r2
 8005086:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005088:	4b14      	ldr	r3, [pc, #80]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a13      	ldr	r2, [pc, #76]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800508e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005092:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fc fe2a 	bl	8001cec <HAL_GetTick>
 8005098:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800509a:	e009      	b.n	80050b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800509c:	f7fc fe26 	bl	8001cec <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d902      	bls.n	80050b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	73fb      	strb	r3, [r7, #15]
          break;
 80050ae:	e005      	b.n	80050bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ef      	beq.n	800509c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	4904      	ldr	r1, [pc, #16]	@ (80050dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	07ff800f 	.word	0x07ff800f
 80050e4:	ff9f800f 	.word	0xff9f800f
 80050e8:	f9ff800f 	.word	0xf9ff800f

080050ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050fa:	4b72      	ldr	r3, [pc, #456]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00e      	beq.n	8005124 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005106:	4b6f      	ldr	r3, [pc, #444]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0203 	and.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d103      	bne.n	800511e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
       ||
 800511a:	2b00      	cmp	r3, #0
 800511c:	d142      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	73fb      	strb	r3, [r7, #15]
 8005122:	e03f      	b.n	80051a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b03      	cmp	r3, #3
 800512a:	d018      	beq.n	800515e <RCCEx_PLLSAI2_Config+0x72>
 800512c:	2b03      	cmp	r3, #3
 800512e:	d825      	bhi.n	800517c <RCCEx_PLLSAI2_Config+0x90>
 8005130:	2b01      	cmp	r3, #1
 8005132:	d002      	beq.n	800513a <RCCEx_PLLSAI2_Config+0x4e>
 8005134:	2b02      	cmp	r3, #2
 8005136:	d009      	beq.n	800514c <RCCEx_PLLSAI2_Config+0x60>
 8005138:	e020      	b.n	800517c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800513a:	4b62      	ldr	r3, [pc, #392]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d11d      	bne.n	8005182 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800514a:	e01a      	b.n	8005182 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800514c:	4b5d      	ldr	r3, [pc, #372]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005154:	2b00      	cmp	r3, #0
 8005156:	d116      	bne.n	8005186 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800515c:	e013      	b.n	8005186 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800515e:	4b59      	ldr	r3, [pc, #356]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800516a:	4b56      	ldr	r3, [pc, #344]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800517a:	e006      	b.n	800518a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
      break;
 8005180:	e004      	b.n	800518c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005182:	bf00      	nop
 8005184:	e002      	b.n	800518c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800518a:	bf00      	nop
    }

    if(status == HAL_OK)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d108      	bne.n	80051a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005192:	4b4c      	ldr	r3, [pc, #304]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f023 0203 	bic.w	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4949      	ldr	r1, [pc, #292]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f040 8086 	bne.w	80052b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051ac:	4b45      	ldr	r3, [pc, #276]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a44      	ldr	r2, [pc, #272]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b8:	f7fc fd98 	bl	8001cec <HAL_GetTick>
 80051bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051be:	e009      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051c0:	f7fc fd94 	bl	8001cec <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d902      	bls.n	80051d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	73fb      	strb	r3, [r7, #15]
        break;
 80051d2:	e005      	b.n	80051e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051d4:	4b3b      	ldr	r3, [pc, #236]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1ef      	bne.n	80051c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d168      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d113      	bne.n	8005214 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051ec:	4b35      	ldr	r3, [pc, #212]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	4b35      	ldr	r3, [pc, #212]	@ (80052c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6892      	ldr	r2, [r2, #8]
 80051f8:	0211      	lsls	r1, r2, #8
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68d2      	ldr	r2, [r2, #12]
 80051fe:	06d2      	lsls	r2, r2, #27
 8005200:	4311      	orrs	r1, r2
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6852      	ldr	r2, [r2, #4]
 8005206:	3a01      	subs	r2, #1
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	430a      	orrs	r2, r1
 800520c:	492d      	ldr	r1, [pc, #180]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800520e:	4313      	orrs	r3, r2
 8005210:	614b      	str	r3, [r1, #20]
 8005212:	e02d      	b.n	8005270 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d115      	bne.n	8005246 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800521a:	4b2a      	ldr	r3, [pc, #168]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800521c:	695a      	ldr	r2, [r3, #20]
 800521e:	4b2b      	ldr	r3, [pc, #172]	@ (80052cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6892      	ldr	r2, [r2, #8]
 8005226:	0211      	lsls	r1, r2, #8
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	6912      	ldr	r2, [r2, #16]
 800522c:	0852      	lsrs	r2, r2, #1
 800522e:	3a01      	subs	r2, #1
 8005230:	0552      	lsls	r2, r2, #21
 8005232:	4311      	orrs	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6852      	ldr	r2, [r2, #4]
 8005238:	3a01      	subs	r2, #1
 800523a:	0112      	lsls	r2, r2, #4
 800523c:	430a      	orrs	r2, r1
 800523e:	4921      	ldr	r1, [pc, #132]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005240:	4313      	orrs	r3, r2
 8005242:	614b      	str	r3, [r1, #20]
 8005244:	e014      	b.n	8005270 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005246:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	4b21      	ldr	r3, [pc, #132]	@ (80052d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6892      	ldr	r2, [r2, #8]
 8005252:	0211      	lsls	r1, r2, #8
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6952      	ldr	r2, [r2, #20]
 8005258:	0852      	lsrs	r2, r2, #1
 800525a:	3a01      	subs	r2, #1
 800525c:	0652      	lsls	r2, r2, #25
 800525e:	4311      	orrs	r1, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6852      	ldr	r2, [r2, #4]
 8005264:	3a01      	subs	r2, #1
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	430a      	orrs	r2, r1
 800526a:	4916      	ldr	r1, [pc, #88]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800526c:	4313      	orrs	r3, r2
 800526e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005270:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a13      	ldr	r2, [pc, #76]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fc fd36 	bl	8001cec <HAL_GetTick>
 8005280:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005282:	e009      	b.n	8005298 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005284:	f7fc fd32 	bl	8001cec <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d902      	bls.n	8005298 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	73fb      	strb	r3, [r7, #15]
          break;
 8005296:	e005      	b.n	80052a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005298:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ef      	beq.n	8005284 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052aa:	4b06      	ldr	r3, [pc, #24]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	4904      	ldr	r1, [pc, #16]	@ (80052c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000
 80052c8:	07ff800f 	.word	0x07ff800f
 80052cc:	ff9f800f 	.word	0xff9f800f
 80052d0:	f9ff800f 	.word	0xf9ff800f

080052d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e049      	b.n	800537a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fc fac4 	bl	8001888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f000 fca4 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d001      	beq.n	800539c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e047      	b.n	800542c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a23      	ldr	r2, [pc, #140]	@ (8005438 <HAL_TIM_Base_Start+0xb4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01d      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b6:	d018      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1f      	ldr	r2, [pc, #124]	@ (800543c <HAL_TIM_Base_Start+0xb8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005440 <HAL_TIM_Base_Start+0xbc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005444 <HAL_TIM_Base_Start+0xc0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1b      	ldr	r2, [pc, #108]	@ (8005448 <HAL_TIM_Base_Start+0xc4>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIM_Base_Start+0x66>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a19      	ldr	r2, [pc, #100]	@ (800544c <HAL_TIM_Base_Start+0xc8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d115      	bne.n	8005416 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	4b17      	ldr	r3, [pc, #92]	@ (8005450 <HAL_TIM_Base_Start+0xcc>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d015      	beq.n	8005428 <HAL_TIM_Base_Start+0xa4>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005402:	d011      	beq.n	8005428 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	e008      	b.n	8005428 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e000      	b.n	800542a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005428:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	00010007 	.word	0x00010007

08005454 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10f      	bne.n	800548c <HAL_TIM_Base_Stop+0x38>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	f240 4344 	movw	r3, #1092	@ 0x444
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d107      	bne.n	800548c <HAL_TIM_Base_Stop+0x38>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e04f      	b.n	800555c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a23      	ldr	r2, [pc, #140]	@ (8005568 <HAL_TIM_Base_Start_IT+0xc4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01d      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e6:	d018      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1f      	ldr	r2, [pc, #124]	@ (800556c <HAL_TIM_Base_Start_IT+0xc8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005570 <HAL_TIM_Base_Start_IT+0xcc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d00e      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1c      	ldr	r2, [pc, #112]	@ (8005574 <HAL_TIM_Base_Start_IT+0xd0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d009      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1b      	ldr	r2, [pc, #108]	@ (8005578 <HAL_TIM_Base_Start_IT+0xd4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d004      	beq.n	800551a <HAL_TIM_Base_Start_IT+0x76>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a19      	ldr	r2, [pc, #100]	@ (800557c <HAL_TIM_Base_Start_IT+0xd8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d115      	bne.n	8005546 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	4b17      	ldr	r3, [pc, #92]	@ (8005580 <HAL_TIM_Base_Start_IT+0xdc>)
 8005522:	4013      	ands	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b06      	cmp	r3, #6
 800552a:	d015      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0xb4>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005532:	d011      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	e008      	b.n	8005558 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e000      	b.n	800555a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40012c00 	.word	0x40012c00
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40013400 	.word	0x40013400
 800557c:	40014000 	.word	0x40014000
 8005580:	00010007 	.word	0x00010007

08005584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e049      	b.n	800562a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f841 	bl	8005632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 fb4c 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d020      	beq.n	80056aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01b      	beq.n	80056aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0202 	mvn.w	r2, #2
 800567a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fac6 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 8005696:	e005      	b.n	80056a4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fab8 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fac9 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d020      	beq.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01b      	beq.n	80056f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0204 	mvn.w	r2, #4
 80056c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2202      	movs	r2, #2
 80056cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 faa0 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 80056e2:	e005      	b.n	80056f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fa92 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 faa3 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d020      	beq.n	8005742 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01b      	beq.n	8005742 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0208 	mvn.w	r2, #8
 8005712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2204      	movs	r2, #4
 8005718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fa7a 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 800572e:	e005      	b.n	800573c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa6c 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa7d 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	d020      	beq.n	800578e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	d01b      	beq.n	800578e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f06f 0210 	mvn.w	r2, #16
 800575e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2208      	movs	r2, #8
 8005764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fa54 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 800577a:	e005      	b.n	8005788 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fa46 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa57 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00c      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f06f 0201 	mvn.w	r2, #1
 80057aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fb fa53 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00c      	beq.n	80057e0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fee8 	bl	80065b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00c      	beq.n	8005804 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fee0 	bl	80065c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa11 	bl	8005c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0320 	and.w	r3, r3, #32
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0220 	mvn.w	r2, #32
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fea8 	bl	800659c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800584c:	bf00      	nop
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800586e:	2302      	movs	r3, #2
 8005870:	e0ff      	b.n	8005a72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b14      	cmp	r3, #20
 800587e:	f200 80f0 	bhi.w	8005a62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005882:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005a63 	.word	0x08005a63
 8005890:	08005a63 	.word	0x08005a63
 8005894:	08005a63 	.word	0x08005a63
 8005898:	0800591d 	.word	0x0800591d
 800589c:	08005a63 	.word	0x08005a63
 80058a0:	08005a63 	.word	0x08005a63
 80058a4:	08005a63 	.word	0x08005a63
 80058a8:	0800595f 	.word	0x0800595f
 80058ac:	08005a63 	.word	0x08005a63
 80058b0:	08005a63 	.word	0x08005a63
 80058b4:	08005a63 	.word	0x08005a63
 80058b8:	0800599f 	.word	0x0800599f
 80058bc:	08005a63 	.word	0x08005a63
 80058c0:	08005a63 	.word	0x08005a63
 80058c4:	08005a63 	.word	0x08005a63
 80058c8:	080059e1 	.word	0x080059e1
 80058cc:	08005a63 	.word	0x08005a63
 80058d0:	08005a63 	.word	0x08005a63
 80058d4:	08005a63 	.word	0x08005a63
 80058d8:	08005a21 	.word	0x08005a21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fa62 	bl	8005dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	699a      	ldr	r2, [r3, #24]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0204 	bic.w	r2, r2, #4
 8005906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6999      	ldr	r1, [r3, #24]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	619a      	str	r2, [r3, #24]
      break;
 800591a:	e0a5      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fad2 	bl	8005ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6999      	ldr	r1, [r3, #24]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	619a      	str	r2, [r3, #24]
      break;
 800595c:	e084      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fb3b 	bl	8005fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69da      	ldr	r2, [r3, #28]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f042 0208 	orr.w	r2, r2, #8
 8005978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69da      	ldr	r2, [r3, #28]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0204 	bic.w	r2, r2, #4
 8005988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69d9      	ldr	r1, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	61da      	str	r2, [r3, #28]
      break;
 800599c:	e064      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fba3 	bl	80060f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69d9      	ldr	r1, [r3, #28]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	021a      	lsls	r2, r3, #8
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	61da      	str	r2, [r3, #28]
      break;
 80059de:	e043      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fbec 	bl	80061c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0204 	bic.w	r2, r2, #4
 8005a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a1e:	e023      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fc30 	bl	800628c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a4a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a60:	e002      	b.n	8005a68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
      break;
 8005a66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop

08005a7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x1c>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0b6      	b.n	8005c06 <HAL_TIM_ConfigClockSource+0x18a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad4:	d03e      	beq.n	8005b54 <HAL_TIM_ConfigClockSource+0xd8>
 8005ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ada:	f200 8087 	bhi.w	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae2:	f000 8086 	beq.w	8005bf2 <HAL_TIM_ConfigClockSource+0x176>
 8005ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aea:	d87f      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005aec:	2b70      	cmp	r3, #112	@ 0x70
 8005aee:	d01a      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0xaa>
 8005af0:	2b70      	cmp	r3, #112	@ 0x70
 8005af2:	d87b      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005af4:	2b60      	cmp	r3, #96	@ 0x60
 8005af6:	d050      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x11e>
 8005af8:	2b60      	cmp	r3, #96	@ 0x60
 8005afa:	d877      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005afc:	2b50      	cmp	r3, #80	@ 0x50
 8005afe:	d03c      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0xfe>
 8005b00:	2b50      	cmp	r3, #80	@ 0x50
 8005b02:	d873      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b04:	2b40      	cmp	r3, #64	@ 0x40
 8005b06:	d058      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x13e>
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d86f      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b0c:	2b30      	cmp	r3, #48	@ 0x30
 8005b0e:	d064      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b10:	2b30      	cmp	r3, #48	@ 0x30
 8005b12:	d86b      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d060      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d867      	bhi.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d05c      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d05a      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x15e>
 8005b24:	e062      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b36:	f000 fc89 	bl	800644c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	609a      	str	r2, [r3, #8]
      break;
 8005b52:	e04f      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b64:	f000 fc72 	bl	800644c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b76:	609a      	str	r2, [r3, #8]
      break;
 8005b78:	e03c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b86:	461a      	mov	r2, r3
 8005b88:	f000 fbe6 	bl	8006358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2150      	movs	r1, #80	@ 0x50
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fc3f 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005b98:	e02c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fc05 	bl	80063b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2160      	movs	r1, #96	@ 0x60
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fc2f 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e01c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 fbc6 	bl	8006358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2140      	movs	r1, #64	@ 0x40
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fc1f 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e00c      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4619      	mov	r1, r3
 8005be4:	4610      	mov	r0, r2
 8005be6:	f000 fc16 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005bea:	e003      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e000      	b.n	8005bf4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a46      	ldr	r2, [pc, #280]	@ (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a43      	ldr	r2, [pc, #268]	@ (8005d90 <TIM_Base_SetConfig+0x130>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a42      	ldr	r2, [pc, #264]	@ (8005d94 <TIM_Base_SetConfig+0x134>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a41      	ldr	r2, [pc, #260]	@ (8005d98 <TIM_Base_SetConfig+0x138>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a40      	ldr	r2, [pc, #256]	@ (8005d9c <TIM_Base_SetConfig+0x13c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d108      	bne.n	8005cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a35      	ldr	r2, [pc, #212]	@ (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01f      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc0:	d01b      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a32      	ldr	r2, [pc, #200]	@ (8005d90 <TIM_Base_SetConfig+0x130>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d017      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a31      	ldr	r2, [pc, #196]	@ (8005d94 <TIM_Base_SetConfig+0x134>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a30      	ldr	r2, [pc, #192]	@ (8005d98 <TIM_Base_SetConfig+0x138>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8005d9c <TIM_Base_SetConfig+0x13c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a2e      	ldr	r2, [pc, #184]	@ (8005da0 <TIM_Base_SetConfig+0x140>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a2d      	ldr	r2, [pc, #180]	@ (8005da4 <TIM_Base_SetConfig+0x144>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8005da8 <TIM_Base_SetConfig+0x148>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d108      	bne.n	8005d0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a16      	ldr	r2, [pc, #88]	@ (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00f      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <TIM_Base_SetConfig+0x13c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00b      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a17      	ldr	r2, [pc, #92]	@ (8005da0 <TIM_Base_SetConfig+0x140>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d007      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a16      	ldr	r2, [pc, #88]	@ (8005da4 <TIM_Base_SetConfig+0x144>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a15      	ldr	r2, [pc, #84]	@ (8005da8 <TIM_Base_SetConfig+0x148>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d105      	bne.n	8005d7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f023 0201 	bic.w	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	611a      	str	r2, [r3, #16]
  }
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40013400 	.word	0x40013400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800

08005dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0201 	bic.w	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f023 0302 	bic.w	r3, r3, #2
 8005df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb8 <TIM_OC1_SetConfig+0x10c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8005ebc <TIM_OC1_SetConfig+0x110>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec0 <TIM_OC1_SetConfig+0x114>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a29      	ldr	r2, [pc, #164]	@ (8005ec4 <TIM_OC1_SetConfig+0x118>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC1_SetConfig+0x80>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a28      	ldr	r2, [pc, #160]	@ (8005ec8 <TIM_OC1_SetConfig+0x11c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d10c      	bne.n	8005e46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f023 0308 	bic.w	r3, r3, #8
 8005e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f023 0304 	bic.w	r3, r3, #4
 8005e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb8 <TIM_OC1_SetConfig+0x10c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	@ (8005ebc <TIM_OC1_SetConfig+0x110>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a19      	ldr	r2, [pc, #100]	@ (8005ec0 <TIM_OC1_SetConfig+0x114>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a18      	ldr	r2, [pc, #96]	@ (8005ec4 <TIM_OC1_SetConfig+0x118>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC1_SetConfig+0xc2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a17      	ldr	r2, [pc, #92]	@ (8005ec8 <TIM_OC1_SetConfig+0x11c>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d111      	bne.n	8005e92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	621a      	str	r2, [r3, #32]
}
 8005eac:	bf00      	nop
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f023 0210 	bic.w	r2, r3, #16
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0320 	bic.w	r3, r3, #32
 8005f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a28      	ldr	r2, [pc, #160]	@ (8005fcc <TIM_OC2_SetConfig+0x100>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC2_SetConfig+0x6c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a27      	ldr	r2, [pc, #156]	@ (8005fd0 <TIM_OC2_SetConfig+0x104>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10d      	bne.n	8005f54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a1d      	ldr	r2, [pc, #116]	@ (8005fcc <TIM_OC2_SetConfig+0x100>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00f      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd0 <TIM_OC2_SetConfig+0x104>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d00b      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd4 <TIM_OC2_SetConfig+0x108>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d007      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd8 <TIM_OC2_SetConfig+0x10c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_OC2_SetConfig+0xb0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a19      	ldr	r2, [pc, #100]	@ (8005fdc <TIM_OC2_SetConfig+0x110>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d113      	bne.n	8005fa4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	621a      	str	r2, [r3, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40013400 	.word	0x40013400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40014400 	.word	0x40014400
 8005fdc:	40014800 	.word	0x40014800

08005fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800602c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a27      	ldr	r2, [pc, #156]	@ (80060dc <TIM_OC3_SetConfig+0xfc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d003      	beq.n	800604a <TIM_OC3_SetConfig+0x6a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a26      	ldr	r2, [pc, #152]	@ (80060e0 <TIM_OC3_SetConfig+0x100>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d10d      	bne.n	8006066 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1c      	ldr	r2, [pc, #112]	@ (80060dc <TIM_OC3_SetConfig+0xfc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00f      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1b      	ldr	r2, [pc, #108]	@ (80060e0 <TIM_OC3_SetConfig+0x100>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a1a      	ldr	r2, [pc, #104]	@ (80060e4 <TIM_OC3_SetConfig+0x104>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a19      	ldr	r2, [pc, #100]	@ (80060e8 <TIM_OC3_SetConfig+0x108>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_OC3_SetConfig+0xae>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a18      	ldr	r2, [pc, #96]	@ (80060ec <TIM_OC3_SetConfig+0x10c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d113      	bne.n	80060b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800609c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40014000 	.word	0x40014000
 80060e8:	40014400 	.word	0x40014400
 80060ec:	40014800 	.word	0x40014800

080060f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800611e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800612a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	021b      	lsls	r3, r3, #8
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800613e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	031b      	lsls	r3, r3, #12
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a18      	ldr	r2, [pc, #96]	@ (80061b0 <TIM_OC4_SetConfig+0xc0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00f      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a17      	ldr	r2, [pc, #92]	@ (80061b4 <TIM_OC4_SetConfig+0xc4>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a16      	ldr	r2, [pc, #88]	@ (80061b8 <TIM_OC4_SetConfig+0xc8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a15      	ldr	r2, [pc, #84]	@ (80061bc <TIM_OC4_SetConfig+0xcc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC4_SetConfig+0x84>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a14      	ldr	r2, [pc, #80]	@ (80061c0 <TIM_OC4_SetConfig+0xd0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d109      	bne.n	8006188 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800617a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	019b      	lsls	r3, r3, #6
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40014000 	.word	0x40014000
 80061bc:	40014400 	.word	0x40014400
 80061c0:	40014800 	.word	0x40014800

080061c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a17      	ldr	r2, [pc, #92]	@ (8006278 <TIM_OC5_SetConfig+0xb4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00f      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a16      	ldr	r2, [pc, #88]	@ (800627c <TIM_OC5_SetConfig+0xb8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00b      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a15      	ldr	r2, [pc, #84]	@ (8006280 <TIM_OC5_SetConfig+0xbc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a14      	ldr	r2, [pc, #80]	@ (8006284 <TIM_OC5_SetConfig+0xc0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d003      	beq.n	800623e <TIM_OC5_SetConfig+0x7a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a13      	ldr	r2, [pc, #76]	@ (8006288 <TIM_OC5_SetConfig+0xc4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d109      	bne.n	8006252 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006244:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	621a      	str	r2, [r3, #32]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40012c00 	.word	0x40012c00
 800627c:	40013400 	.word	0x40013400
 8006280:	40014000 	.word	0x40014000
 8006284:	40014400 	.word	0x40014400
 8006288:	40014800 	.word	0x40014800

0800628c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	051b      	lsls	r3, r3, #20
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a18      	ldr	r2, [pc, #96]	@ (8006344 <TIM_OC6_SetConfig+0xb8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00f      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a17      	ldr	r2, [pc, #92]	@ (8006348 <TIM_OC6_SetConfig+0xbc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00b      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a16      	ldr	r2, [pc, #88]	@ (800634c <TIM_OC6_SetConfig+0xc0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a15      	ldr	r2, [pc, #84]	@ (8006350 <TIM_OC6_SetConfig+0xc4>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC6_SetConfig+0x7c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a14      	ldr	r2, [pc, #80]	@ (8006354 <TIM_OC6_SetConfig+0xc8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d109      	bne.n	800631c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	029b      	lsls	r3, r3, #10
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800

08006358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f023 030a 	bic.w	r3, r3, #10
 8006394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	f023 0210 	bic.w	r2, r3, #16
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	f043 0307 	orr.w	r3, r3, #7
 8006438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	021a      	lsls	r2, r3, #8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	431a      	orrs	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4313      	orrs	r3, r2
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e068      	b.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d108      	bne.n	80064ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1e      	ldr	r2, [pc, #120]	@ (8006584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01d      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006516:	d018      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1b      	ldr	r2, [pc, #108]	@ (800658c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a1a      	ldr	r2, [pc, #104]	@ (8006590 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a18      	ldr	r2, [pc, #96]	@ (8006594 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a13      	ldr	r2, [pc, #76]	@ (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a14      	ldr	r2, [pc, #80]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d10c      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	4313      	orrs	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40012c00 	.word	0x40012c00
 8006588:	40013400 	.word	0x40013400
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40014000 	.word	0x40014000

0800659c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e042      	b.n	8006670 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7fb f9dd 	bl	80019bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2224      	movs	r2, #36	@ 0x24
 8006606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fbb2 	bl	8006d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 f8b3 	bl	8006794 <UART_SetConfig>
 800662e:	4603      	mov	r3, r0
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e01b      	b.n	8006670 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fc31 	bl	8006ed0 <UART_CheckIdleState>
 800666e:	4603      	mov	r3, r0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	@ 0x28
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668e:	2b20      	cmp	r3, #32
 8006690:	d17b      	bne.n	800678a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_UART_Transmit+0x26>
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e074      	b.n	800678c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2221      	movs	r2, #33	@ 0x21
 80066ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b2:	f7fb fb1b 	bl	8001cec <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d0:	d108      	bne.n	80066e4 <HAL_UART_Transmit+0x6c>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	61bb      	str	r3, [r7, #24]
 80066e2:	e003      	b.n	80066ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066ec:	e030      	b.n	8006750 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2180      	movs	r1, #128	@ 0x80
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 fc93 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2220      	movs	r2, #32
 8006708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e03d      	b.n	800678c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	881a      	ldrh	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006722:	b292      	uxth	r2, r2
 8006724:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	3302      	adds	r3, #2
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e007      	b.n	800673e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1c8      	bne.n	80066ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	2140      	movs	r1, #64	@ 0x40
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 fc5c 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e006      	b.n	800678c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	e000      	b.n	800678c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800678a:	2302      	movs	r3, #2
  }
}
 800678c:	4618      	mov	r0, r3
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006798:	b08c      	sub	sp, #48	@ 0x30
 800679a:	af00      	add	r7, sp, #0
 800679c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4baa      	ldr	r3, [pc, #680]	@ (8006a6c <UART_SetConfig+0x2d8>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067cc:	430b      	orrs	r3, r1
 80067ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a9f      	ldr	r2, [pc, #636]	@ (8006a70 <UART_SetConfig+0x2dc>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067fc:	4313      	orrs	r3, r2
 80067fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800680a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006814:	430b      	orrs	r3, r1
 8006816:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681e:	f023 010f 	bic.w	r1, r3, #15
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a90      	ldr	r2, [pc, #576]	@ (8006a74 <UART_SetConfig+0x2e0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d125      	bne.n	8006884 <UART_SetConfig+0xf0>
 8006838:	4b8f      	ldr	r3, [pc, #572]	@ (8006a78 <UART_SetConfig+0x2e4>)
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	2b03      	cmp	r3, #3
 8006844:	d81a      	bhi.n	800687c <UART_SetConfig+0xe8>
 8006846:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <UART_SetConfig+0xb8>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	0800685d 	.word	0x0800685d
 8006850:	0800686d 	.word	0x0800686d
 8006854:	08006865 	.word	0x08006865
 8006858:	08006875 	.word	0x08006875
 800685c:	2301      	movs	r3, #1
 800685e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006862:	e116      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006864:	2302      	movs	r3, #2
 8006866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800686a:	e112      	b.n	8006a92 <UART_SetConfig+0x2fe>
 800686c:	2304      	movs	r3, #4
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006872:	e10e      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006874:	2308      	movs	r3, #8
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800687a:	e10a      	b.n	8006a92 <UART_SetConfig+0x2fe>
 800687c:	2310      	movs	r3, #16
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006882:	e106      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7c      	ldr	r2, [pc, #496]	@ (8006a7c <UART_SetConfig+0x2e8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d138      	bne.n	8006900 <UART_SetConfig+0x16c>
 800688e:	4b7a      	ldr	r3, [pc, #488]	@ (8006a78 <UART_SetConfig+0x2e4>)
 8006890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	2b0c      	cmp	r3, #12
 800689a:	d82d      	bhi.n	80068f8 <UART_SetConfig+0x164>
 800689c:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <UART_SetConfig+0x110>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068d9 	.word	0x080068d9
 80068a8:	080068f9 	.word	0x080068f9
 80068ac:	080068f9 	.word	0x080068f9
 80068b0:	080068f9 	.word	0x080068f9
 80068b4:	080068e9 	.word	0x080068e9
 80068b8:	080068f9 	.word	0x080068f9
 80068bc:	080068f9 	.word	0x080068f9
 80068c0:	080068f9 	.word	0x080068f9
 80068c4:	080068e1 	.word	0x080068e1
 80068c8:	080068f9 	.word	0x080068f9
 80068cc:	080068f9 	.word	0x080068f9
 80068d0:	080068f9 	.word	0x080068f9
 80068d4:	080068f1 	.word	0x080068f1
 80068d8:	2300      	movs	r3, #0
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068de:	e0d8      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80068e0:	2302      	movs	r3, #2
 80068e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e6:	e0d4      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80068e8:	2304      	movs	r3, #4
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ee:	e0d0      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80068f0:	2308      	movs	r3, #8
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f6:	e0cc      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80068f8:	2310      	movs	r3, #16
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fe:	e0c8      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a5e      	ldr	r2, [pc, #376]	@ (8006a80 <UART_SetConfig+0x2ec>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d125      	bne.n	8006956 <UART_SetConfig+0x1c2>
 800690a:	4b5b      	ldr	r3, [pc, #364]	@ (8006a78 <UART_SetConfig+0x2e4>)
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006910:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006914:	2b30      	cmp	r3, #48	@ 0x30
 8006916:	d016      	beq.n	8006946 <UART_SetConfig+0x1b2>
 8006918:	2b30      	cmp	r3, #48	@ 0x30
 800691a:	d818      	bhi.n	800694e <UART_SetConfig+0x1ba>
 800691c:	2b20      	cmp	r3, #32
 800691e:	d00a      	beq.n	8006936 <UART_SetConfig+0x1a2>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d814      	bhi.n	800694e <UART_SetConfig+0x1ba>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <UART_SetConfig+0x19a>
 8006928:	2b10      	cmp	r3, #16
 800692a:	d008      	beq.n	800693e <UART_SetConfig+0x1aa>
 800692c:	e00f      	b.n	800694e <UART_SetConfig+0x1ba>
 800692e:	2300      	movs	r3, #0
 8006930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006934:	e0ad      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006936:	2302      	movs	r3, #2
 8006938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800693c:	e0a9      	b.n	8006a92 <UART_SetConfig+0x2fe>
 800693e:	2304      	movs	r3, #4
 8006940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006944:	e0a5      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006946:	2308      	movs	r3, #8
 8006948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694c:	e0a1      	b.n	8006a92 <UART_SetConfig+0x2fe>
 800694e:	2310      	movs	r3, #16
 8006950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006954:	e09d      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a4a      	ldr	r2, [pc, #296]	@ (8006a84 <UART_SetConfig+0x2f0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d125      	bne.n	80069ac <UART_SetConfig+0x218>
 8006960:	4b45      	ldr	r3, [pc, #276]	@ (8006a78 <UART_SetConfig+0x2e4>)
 8006962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006966:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800696a:	2bc0      	cmp	r3, #192	@ 0xc0
 800696c:	d016      	beq.n	800699c <UART_SetConfig+0x208>
 800696e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006970:	d818      	bhi.n	80069a4 <UART_SetConfig+0x210>
 8006972:	2b80      	cmp	r3, #128	@ 0x80
 8006974:	d00a      	beq.n	800698c <UART_SetConfig+0x1f8>
 8006976:	2b80      	cmp	r3, #128	@ 0x80
 8006978:	d814      	bhi.n	80069a4 <UART_SetConfig+0x210>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <UART_SetConfig+0x1f0>
 800697e:	2b40      	cmp	r3, #64	@ 0x40
 8006980:	d008      	beq.n	8006994 <UART_SetConfig+0x200>
 8006982:	e00f      	b.n	80069a4 <UART_SetConfig+0x210>
 8006984:	2300      	movs	r3, #0
 8006986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698a:	e082      	b.n	8006a92 <UART_SetConfig+0x2fe>
 800698c:	2302      	movs	r3, #2
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006992:	e07e      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006994:	2304      	movs	r3, #4
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699a:	e07a      	b.n	8006a92 <UART_SetConfig+0x2fe>
 800699c:	2308      	movs	r3, #8
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a2:	e076      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80069a4:	2310      	movs	r3, #16
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069aa:	e072      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a35      	ldr	r2, [pc, #212]	@ (8006a88 <UART_SetConfig+0x2f4>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d12a      	bne.n	8006a0c <UART_SetConfig+0x278>
 80069b6:	4b30      	ldr	r3, [pc, #192]	@ (8006a78 <UART_SetConfig+0x2e4>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069c4:	d01a      	beq.n	80069fc <UART_SetConfig+0x268>
 80069c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069ca:	d81b      	bhi.n	8006a04 <UART_SetConfig+0x270>
 80069cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d0:	d00c      	beq.n	80069ec <UART_SetConfig+0x258>
 80069d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d6:	d815      	bhi.n	8006a04 <UART_SetConfig+0x270>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <UART_SetConfig+0x250>
 80069dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069e0:	d008      	beq.n	80069f4 <UART_SetConfig+0x260>
 80069e2:	e00f      	b.n	8006a04 <UART_SetConfig+0x270>
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ea:	e052      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80069ec:	2302      	movs	r3, #2
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f2:	e04e      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80069f4:	2304      	movs	r3, #4
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	e04a      	b.n	8006a92 <UART_SetConfig+0x2fe>
 80069fc:	2308      	movs	r3, #8
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	e046      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0a:	e042      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a17      	ldr	r2, [pc, #92]	@ (8006a70 <UART_SetConfig+0x2dc>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d13a      	bne.n	8006a8c <UART_SetConfig+0x2f8>
 8006a16:	4b18      	ldr	r3, [pc, #96]	@ (8006a78 <UART_SetConfig+0x2e4>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a24:	d01a      	beq.n	8006a5c <UART_SetConfig+0x2c8>
 8006a26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a2a:	d81b      	bhi.n	8006a64 <UART_SetConfig+0x2d0>
 8006a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a30:	d00c      	beq.n	8006a4c <UART_SetConfig+0x2b8>
 8006a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a36:	d815      	bhi.n	8006a64 <UART_SetConfig+0x2d0>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <UART_SetConfig+0x2b0>
 8006a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a40:	d008      	beq.n	8006a54 <UART_SetConfig+0x2c0>
 8006a42:	e00f      	b.n	8006a64 <UART_SetConfig+0x2d0>
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	e022      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	e01e      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5a:	e01a      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a62:	e016      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e012      	b.n	8006a92 <UART_SetConfig+0x2fe>
 8006a6c:	cfff69f3 	.word	0xcfff69f3
 8006a70:	40008000 	.word	0x40008000
 8006a74:	40013800 	.word	0x40013800
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	40004400 	.word	0x40004400
 8006a80:	40004800 	.word	0x40004800
 8006a84:	40004c00 	.word	0x40004c00
 8006a88:	40005000 	.word	0x40005000
 8006a8c:	2310      	movs	r3, #16
 8006a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4aae      	ldr	r2, [pc, #696]	@ (8006d50 <UART_SetConfig+0x5bc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	f040 8097 	bne.w	8006bcc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d823      	bhi.n	8006aee <UART_SetConfig+0x35a>
 8006aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <UART_SetConfig+0x318>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006aef 	.word	0x08006aef
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006aef 	.word	0x08006aef
 8006abc:	08006adf 	.word	0x08006adf
 8006ac0:	08006aef 	.word	0x08006aef
 8006ac4:	08006aef 	.word	0x08006aef
 8006ac8:	08006aef 	.word	0x08006aef
 8006acc:	08006ae7 	.word	0x08006ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad0:	f7fd fdfc 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ad6:	e010      	b.n	8006afa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad8:	4b9e      	ldr	r3, [pc, #632]	@ (8006d54 <UART_SetConfig+0x5c0>)
 8006ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006adc:	e00d      	b.n	8006afa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ade:	f7fd fd5d 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8006ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ae4:	e009      	b.n	8006afa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006aec:	e005      	b.n	8006afa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006af8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f000 8130 	beq.w	8006d62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b06:	4a94      	ldr	r2, [pc, #592]	@ (8006d58 <UART_SetConfig+0x5c4>)
 8006b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	4413      	add	r3, r2
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d305      	bcc.n	8006b32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d903      	bls.n	8006b3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b38:	e113      	b.n	8006d62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	60bb      	str	r3, [r7, #8]
 8006b40:	60fa      	str	r2, [r7, #12]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	4a84      	ldr	r2, [pc, #528]	@ (8006d58 <UART_SetConfig+0x5c4>)
 8006b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2200      	movs	r2, #0
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b5c:	f7f9 fba8 	bl	80002b0 <__aeabi_uldivmod>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	020b      	lsls	r3, r1, #8
 8006b72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b76:	0202      	lsls	r2, r0, #8
 8006b78:	6979      	ldr	r1, [r7, #20]
 8006b7a:	6849      	ldr	r1, [r1, #4]
 8006b7c:	0849      	lsrs	r1, r1, #1
 8006b7e:	2000      	movs	r0, #0
 8006b80:	460c      	mov	r4, r1
 8006b82:	4605      	mov	r5, r0
 8006b84:	eb12 0804 	adds.w	r8, r2, r4
 8006b88:	eb43 0905 	adc.w	r9, r3, r5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	469a      	mov	sl, r3
 8006b94:	4693      	mov	fp, r2
 8006b96:	4652      	mov	r2, sl
 8006b98:	465b      	mov	r3, fp
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	f7f9 fb87 	bl	80002b0 <__aeabi_uldivmod>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bb0:	d308      	bcc.n	8006bc4 <UART_SetConfig+0x430>
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb8:	d204      	bcs.n	8006bc4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a3a      	ldr	r2, [r7, #32]
 8006bc0:	60da      	str	r2, [r3, #12]
 8006bc2:	e0ce      	b.n	8006d62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bca:	e0ca      	b.n	8006d62 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd4:	d166      	bne.n	8006ca4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d827      	bhi.n	8006c2e <UART_SetConfig+0x49a>
 8006bde:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <UART_SetConfig+0x450>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c09 	.word	0x08006c09
 8006be8:	08006c11 	.word	0x08006c11
 8006bec:	08006c19 	.word	0x08006c19
 8006bf0:	08006c2f 	.word	0x08006c2f
 8006bf4:	08006c1f 	.word	0x08006c1f
 8006bf8:	08006c2f 	.word	0x08006c2f
 8006bfc:	08006c2f 	.word	0x08006c2f
 8006c00:	08006c2f 	.word	0x08006c2f
 8006c04:	08006c27 	.word	0x08006c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c08:	f7fd fd60 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006c0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c0e:	e014      	b.n	8006c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c10:	f7fd fd72 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 8006c14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c16:	e010      	b.n	8006c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c18:	4b4e      	ldr	r3, [pc, #312]	@ (8006d54 <UART_SetConfig+0x5c0>)
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c1c:	e00d      	b.n	8006c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c1e:	f7fd fcbd 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8006c22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c24:	e009      	b.n	8006c3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c2c:	e005      	b.n	8006c3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 8090 	beq.w	8006d62 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	4a44      	ldr	r2, [pc, #272]	@ (8006d58 <UART_SetConfig+0x5c4>)
 8006c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c54:	005a      	lsls	r2, r3, #1
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	441a      	add	r2, r3
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c66:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	2b0f      	cmp	r3, #15
 8006c6c:	d916      	bls.n	8006c9c <UART_SetConfig+0x508>
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c74:	d212      	bcs.n	8006c9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	f023 030f 	bic.w	r3, r3, #15
 8006c7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	8bfb      	ldrh	r3, [r7, #30]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	8bfa      	ldrh	r2, [r7, #30]
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	e062      	b.n	8006d62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ca2:	e05e      	b.n	8006d62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d828      	bhi.n	8006cfe <UART_SetConfig+0x56a>
 8006cac:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb4 <UART_SetConfig+0x520>)
 8006cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb2:	bf00      	nop
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006ce1 	.word	0x08006ce1
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	08006cff 	.word	0x08006cff
 8006cc4:	08006cef 	.word	0x08006cef
 8006cc8:	08006cff 	.word	0x08006cff
 8006ccc:	08006cff 	.word	0x08006cff
 8006cd0:	08006cff 	.word	0x08006cff
 8006cd4:	08006cf7 	.word	0x08006cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd8:	f7fd fcf8 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8006cdc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cde:	e014      	b.n	8006d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce0:	f7fd fd0a 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 8006ce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ce6:	e010      	b.n	8006d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d54 <UART_SetConfig+0x5c0>)
 8006cea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cec:	e00d      	b.n	8006d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cee:	f7fd fc55 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8006cf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf4:	e009      	b.n	8006d0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cfc:	e005      	b.n	8006d0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d08:	bf00      	nop
    }

    if (pclk != 0U)
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d028      	beq.n	8006d62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	4a10      	ldr	r2, [pc, #64]	@ (8006d58 <UART_SetConfig+0x5c4>)
 8006d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	441a      	add	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	2b0f      	cmp	r3, #15
 8006d38:	d910      	bls.n	8006d5c <UART_SetConfig+0x5c8>
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d40:	d20c      	bcs.n	8006d5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60da      	str	r2, [r3, #12]
 8006d4c:	e009      	b.n	8006d62 <UART_SetConfig+0x5ce>
 8006d4e:	bf00      	nop
 8006d50:	40008000 	.word	0x40008000
 8006d54:	00f42400 	.word	0x00f42400
 8006d58:	080083e4 	.word	0x080083e4
      }
      else
      {
        ret = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2200      	movs	r2, #0
 8006d76:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d7e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3730      	adds	r7, #48	@ 0x30
 8006d86:	46bd      	mov	sp, r7
 8006d88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e8a:	d10a      	bne.n	8006ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b098      	sub	sp, #96	@ 0x60
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ee0:	f7fa ff04 	bl	8001cec <HAL_GetTick>
 8006ee4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d12f      	bne.n	8006f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006efc:	2200      	movs	r2, #0
 8006efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f88e 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d022      	beq.n	8006f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e6      	bne.n	8006f0e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e063      	b.n	800701c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d149      	bne.n	8006ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f857 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d03c      	beq.n	8006ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	623b      	str	r3, [r7, #32]
   return(result);
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3308      	adds	r3, #8
 8006fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3308      	adds	r3, #8
 8006fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fce:	61fa      	str	r2, [r7, #28]
 8006fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	69b9      	ldr	r1, [r7, #24]
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	617b      	str	r3, [r7, #20]
   return(result);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e5      	bne.n	8006fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e012      	b.n	800701c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3758      	adds	r7, #88	@ 0x58
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007034:	e04f      	b.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800703c:	d04b      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800703e:	f7fa fe55 	bl	8001cec <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	429a      	cmp	r2, r3
 800704c:	d302      	bcc.n	8007054 <UART_WaitOnFlagUntilTimeout+0x30>
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e04e      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d037      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b80      	cmp	r3, #128	@ 0x80
 800706a:	d034      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b40      	cmp	r3, #64	@ 0x40
 8007070:	d031      	beq.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69db      	ldr	r3, [r3, #28]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b08      	cmp	r3, #8
 800707e:	d110      	bne.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2208      	movs	r2, #8
 8007086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f838 	bl	80070fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2208      	movs	r2, #8
 8007092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e029      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070b0:	d111      	bne.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f81e 	bl	80070fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e00f      	b.n	80070f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	4013      	ands	r3, r2
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	bf0c      	ite	eq
 80070e6:	2301      	moveq	r3, #1
 80070e8:	2300      	movne	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d0a0      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070fe:	b480      	push	{r7}
 8007100:	b095      	sub	sp, #84	@ 0x54
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007124:	643b      	str	r3, [r7, #64]	@ 0x40
 8007126:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800712a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	61fb      	str	r3, [r7, #28]
   return(result);
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e3      	bne.n	8007138 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d118      	bne.n	80071aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	60bb      	str	r3, [r7, #8]
   return(result);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f023 0310 	bic.w	r3, r3, #16
 800718c:	647b      	str	r3, [r7, #68]	@ 0x44
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6979      	ldr	r1, [r7, #20]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	613b      	str	r3, [r7, #16]
   return(result);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e6      	bne.n	8007178 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071be:	bf00      	nop
 80071c0:	3754      	adds	r7, #84	@ 0x54
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80071dc:	2302      	movs	r3, #2
 80071de:	e027      	b.n	8007230 <HAL_UARTEx_DisableFifoMode+0x66>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2224      	movs	r2, #36	@ 0x24
 80071ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800720e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007250:	2302      	movs	r3, #2
 8007252:	e02d      	b.n	80072b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2224      	movs	r2, #36	@ 0x24
 8007260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0201 	bic.w	r2, r2, #1
 800727a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f84f 	bl	8007334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d101      	bne.n	80072d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e02d      	b.n	800732c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2224      	movs	r2, #36	@ 0x24
 80072dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	683a      	ldr	r2, [r7, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f811 	bl	8007334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007340:	2b00      	cmp	r3, #0
 8007342:	d108      	bne.n	8007356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007354:	e031      	b.n	80073ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007356:	2308      	movs	r3, #8
 8007358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800735a:	2308      	movs	r3, #8
 800735c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	0e5b      	lsrs	r3, r3, #25
 8007366:	b2db      	uxtb	r3, r3
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	0f5b      	lsrs	r3, r3, #29
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	7b3a      	ldrb	r2, [r7, #12]
 8007382:	4911      	ldr	r1, [pc, #68]	@ (80073c8 <UARTEx_SetNbDataToProcess+0x94>)
 8007384:	5c8a      	ldrb	r2, [r1, r2]
 8007386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800738a:	7b3a      	ldrb	r2, [r7, #12]
 800738c:	490f      	ldr	r1, [pc, #60]	@ (80073cc <UARTEx_SetNbDataToProcess+0x98>)
 800738e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007390:	fb93 f3f2 	sdiv	r3, r3, r2
 8007394:	b29a      	uxth	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	7b7a      	ldrb	r2, [r7, #13]
 80073a0:	4909      	ldr	r1, [pc, #36]	@ (80073c8 <UARTEx_SetNbDataToProcess+0x94>)
 80073a2:	5c8a      	ldrb	r2, [r1, r2]
 80073a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073a8:	7b7a      	ldrb	r2, [r7, #13]
 80073aa:	4908      	ldr	r1, [pc, #32]	@ (80073cc <UARTEx_SetNbDataToProcess+0x98>)
 80073ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	080083fc 	.word	0x080083fc
 80073cc:	08008404 	.word	0x08008404

080073d0 <arm_rfft_32_fast_init_f32>:
 80073d0:	b178      	cbz	r0, 80073f2 <arm_rfft_32_fast_init_f32+0x22>
 80073d2:	b430      	push	{r4, r5}
 80073d4:	4908      	ldr	r1, [pc, #32]	@ (80073f8 <arm_rfft_32_fast_init_f32+0x28>)
 80073d6:	4a09      	ldr	r2, [pc, #36]	@ (80073fc <arm_rfft_32_fast_init_f32+0x2c>)
 80073d8:	2310      	movs	r3, #16
 80073da:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80073de:	8003      	strh	r3, [r0, #0]
 80073e0:	2520      	movs	r5, #32
 80073e2:	2414      	movs	r4, #20
 80073e4:	4b06      	ldr	r3, [pc, #24]	@ (8007400 <arm_rfft_32_fast_init_f32+0x30>)
 80073e6:	8205      	strh	r5, [r0, #16]
 80073e8:	8184      	strh	r4, [r0, #12]
 80073ea:	6143      	str	r3, [r0, #20]
 80073ec:	bc30      	pop	{r4, r5}
 80073ee:	2000      	movs	r0, #0
 80073f0:	4770      	bx	lr
 80073f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073f6:	4770      	bx	lr
 80073f8:	080093bc 	.word	0x080093bc
 80073fc:	0800dcf4 	.word	0x0800dcf4
 8007400:	08016a74 	.word	0x08016a74

08007404 <arm_rfft_64_fast_init_f32>:
 8007404:	b178      	cbz	r0, 8007426 <arm_rfft_64_fast_init_f32+0x22>
 8007406:	b430      	push	{r4, r5}
 8007408:	4908      	ldr	r1, [pc, #32]	@ (800742c <arm_rfft_64_fast_init_f32+0x28>)
 800740a:	4a09      	ldr	r2, [pc, #36]	@ (8007430 <arm_rfft_64_fast_init_f32+0x2c>)
 800740c:	2320      	movs	r3, #32
 800740e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007412:	8003      	strh	r3, [r0, #0]
 8007414:	2540      	movs	r5, #64	@ 0x40
 8007416:	2430      	movs	r4, #48	@ 0x30
 8007418:	4b06      	ldr	r3, [pc, #24]	@ (8007434 <arm_rfft_64_fast_init_f32+0x30>)
 800741a:	8205      	strh	r5, [r0, #16]
 800741c:	8184      	strh	r4, [r0, #12]
 800741e:	6143      	str	r3, [r0, #20]
 8007420:	bc30      	pop	{r4, r5}
 8007422:	2000      	movs	r0, #0
 8007424:	4770      	bx	lr
 8007426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800742a:	4770      	bx	lr
 800742c:	0800b514 	.word	0x0800b514
 8007430:	08012574 	.word	0x08012574
 8007434:	0801b2f4 	.word	0x0801b2f4

08007438 <arm_rfft_256_fast_init_f32>:
 8007438:	b180      	cbz	r0, 800745c <arm_rfft_256_fast_init_f32+0x24>
 800743a:	b430      	push	{r4, r5}
 800743c:	4909      	ldr	r1, [pc, #36]	@ (8007464 <arm_rfft_256_fast_init_f32+0x2c>)
 800743e:	4a0a      	ldr	r2, [pc, #40]	@ (8007468 <arm_rfft_256_fast_init_f32+0x30>)
 8007440:	2380      	movs	r3, #128	@ 0x80
 8007442:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007446:	8003      	strh	r3, [r0, #0]
 8007448:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800744c:	24d0      	movs	r4, #208	@ 0xd0
 800744e:	4b07      	ldr	r3, [pc, #28]	@ (800746c <arm_rfft_256_fast_init_f32+0x34>)
 8007450:	8205      	strh	r5, [r0, #16]
 8007452:	8184      	strh	r4, [r0, #12]
 8007454:	6143      	str	r3, [r0, #20]
 8007456:	bc30      	pop	{r4, r5}
 8007458:	2000      	movs	r0, #0
 800745a:	4770      	bx	lr
 800745c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	0800921c 	.word	0x0800921c
 8007468:	0800d8f4 	.word	0x0800d8f4
 800746c:	08016674 	.word	0x08016674

08007470 <arm_rfft_512_fast_init_f32>:
 8007470:	b190      	cbz	r0, 8007498 <arm_rfft_512_fast_init_f32+0x28>
 8007472:	b430      	push	{r4, r5}
 8007474:	490a      	ldr	r1, [pc, #40]	@ (80074a0 <arm_rfft_512_fast_init_f32+0x30>)
 8007476:	4a0b      	ldr	r2, [pc, #44]	@ (80074a4 <arm_rfft_512_fast_init_f32+0x34>)
 8007478:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800747c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007480:	8003      	strh	r3, [r0, #0]
 8007482:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8007486:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800748a:	4b07      	ldr	r3, [pc, #28]	@ (80074a8 <arm_rfft_512_fast_init_f32+0x38>)
 800748c:	8205      	strh	r5, [r0, #16]
 800748e:	8184      	strh	r4, [r0, #12]
 8007490:	6143      	str	r3, [r0, #20]
 8007492:	bc30      	pop	{r4, r5}
 8007494:	2000      	movs	r0, #0
 8007496:	4770      	bx	lr
 8007498:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	0800b1a4 	.word	0x0800b1a4
 80074a4:	08011d74 	.word	0x08011d74
 80074a8:	0801aaf4 	.word	0x0801aaf4

080074ac <arm_rfft_1024_fast_init_f32>:
 80074ac:	b190      	cbz	r0, 80074d4 <arm_rfft_1024_fast_init_f32+0x28>
 80074ae:	b430      	push	{r4, r5}
 80074b0:	490a      	ldr	r1, [pc, #40]	@ (80074dc <arm_rfft_1024_fast_init_f32+0x30>)
 80074b2:	4a0b      	ldr	r2, [pc, #44]	@ (80074e0 <arm_rfft_1024_fast_init_f32+0x34>)
 80074b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074b8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80074bc:	8003      	strh	r3, [r0, #0]
 80074be:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80074c2:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80074c6:	4b07      	ldr	r3, [pc, #28]	@ (80074e4 <arm_rfft_1024_fast_init_f32+0x38>)
 80074c8:	8205      	strh	r5, [r0, #16]
 80074ca:	8184      	strh	r4, [r0, #12]
 80074cc:	6143      	str	r3, [r0, #20]
 80074ce:	bc30      	pop	{r4, r5}
 80074d0:	2000      	movs	r0, #0
 80074d2:	4770      	bx	lr
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	0800b574 	.word	0x0800b574
 80074e0:	08012674 	.word	0x08012674
 80074e4:	08013674 	.word	0x08013674

080074e8 <arm_rfft_2048_fast_init_f32>:
 80074e8:	b190      	cbz	r0, 8007510 <arm_rfft_2048_fast_init_f32+0x28>
 80074ea:	b430      	push	{r4, r5}
 80074ec:	490a      	ldr	r1, [pc, #40]	@ (8007518 <arm_rfft_2048_fast_init_f32+0x30>)
 80074ee:	4a0b      	ldr	r2, [pc, #44]	@ (800751c <arm_rfft_2048_fast_init_f32+0x34>)
 80074f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074f4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80074f8:	8003      	strh	r3, [r0, #0]
 80074fa:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80074fe:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8007502:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <arm_rfft_2048_fast_init_f32+0x38>)
 8007504:	8205      	strh	r5, [r0, #16]
 8007506:	8184      	strh	r4, [r0, #12]
 8007508:	6143      	str	r3, [r0, #20]
 800750a:	bc30      	pop	{r4, r5}
 800750c:	2000      	movs	r0, #0
 800750e:	4770      	bx	lr
 8007510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	0800840c 	.word	0x0800840c
 800751c:	0800b8f4 	.word	0x0800b8f4
 8007520:	08014674 	.word	0x08014674

08007524 <arm_rfft_4096_fast_init_f32>:
 8007524:	b190      	cbz	r0, 800754c <arm_rfft_4096_fast_init_f32+0x28>
 8007526:	b430      	push	{r4, r5}
 8007528:	490a      	ldr	r1, [pc, #40]	@ (8007554 <arm_rfft_4096_fast_init_f32+0x30>)
 800752a:	4a0b      	ldr	r2, [pc, #44]	@ (8007558 <arm_rfft_4096_fast_init_f32+0x34>)
 800752c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007530:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007534:	8003      	strh	r3, [r0, #0]
 8007536:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800753a:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800753e:	4b07      	ldr	r3, [pc, #28]	@ (800755c <arm_rfft_4096_fast_init_f32+0x38>)
 8007540:	8205      	strh	r5, [r0, #16]
 8007542:	8184      	strh	r4, [r0, #12]
 8007544:	6143      	str	r3, [r0, #20]
 8007546:	bc30      	pop	{r4, r5}
 8007548:	2000      	movs	r0, #0
 800754a:	4770      	bx	lr
 800754c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	080093e4 	.word	0x080093e4
 8007558:	0800dd74 	.word	0x0800dd74
 800755c:	08016af4 	.word	0x08016af4

08007560 <arm_rfft_fast_init_f32>:
 8007560:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007564:	d01f      	beq.n	80075a6 <arm_rfft_fast_init_f32+0x46>
 8007566:	d90b      	bls.n	8007580 <arm_rfft_fast_init_f32+0x20>
 8007568:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800756c:	d019      	beq.n	80075a2 <arm_rfft_fast_init_f32+0x42>
 800756e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007572:	d012      	beq.n	800759a <arm_rfft_fast_init_f32+0x3a>
 8007574:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007578:	d00d      	beq.n	8007596 <arm_rfft_fast_init_f32+0x36>
 800757a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800757e:	4770      	bx	lr
 8007580:	2940      	cmp	r1, #64	@ 0x40
 8007582:	d00c      	beq.n	800759e <arm_rfft_fast_init_f32+0x3e>
 8007584:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007588:	d003      	beq.n	8007592 <arm_rfft_fast_init_f32+0x32>
 800758a:	2920      	cmp	r1, #32
 800758c:	d1f5      	bne.n	800757a <arm_rfft_fast_init_f32+0x1a>
 800758e:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <arm_rfft_fast_init_f32+0x4c>)
 8007590:	4718      	bx	r3
 8007592:	4b07      	ldr	r3, [pc, #28]	@ (80075b0 <arm_rfft_fast_init_f32+0x50>)
 8007594:	4718      	bx	r3
 8007596:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <arm_rfft_fast_init_f32+0x54>)
 8007598:	4718      	bx	r3
 800759a:	4b07      	ldr	r3, [pc, #28]	@ (80075b8 <arm_rfft_fast_init_f32+0x58>)
 800759c:	4718      	bx	r3
 800759e:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <arm_rfft_fast_init_f32+0x5c>)
 80075a0:	e7f6      	b.n	8007590 <arm_rfft_fast_init_f32+0x30>
 80075a2:	4b07      	ldr	r3, [pc, #28]	@ (80075c0 <arm_rfft_fast_init_f32+0x60>)
 80075a4:	e7f4      	b.n	8007590 <arm_rfft_fast_init_f32+0x30>
 80075a6:	4b07      	ldr	r3, [pc, #28]	@ (80075c4 <arm_rfft_fast_init_f32+0x64>)
 80075a8:	e7f2      	b.n	8007590 <arm_rfft_fast_init_f32+0x30>
 80075aa:	bf00      	nop
 80075ac:	080073d1 	.word	0x080073d1
 80075b0:	08007439 	.word	0x08007439
 80075b4:	080074ad 	.word	0x080074ad
 80075b8:	08007525 	.word	0x08007525
 80075bc:	08007405 	.word	0x08007405
 80075c0:	080074e9 	.word	0x080074e9
 80075c4:	08007471 	.word	0x08007471

080075c8 <sniprintf>:
 80075c8:	b40c      	push	{r2, r3}
 80075ca:	b530      	push	{r4, r5, lr}
 80075cc:	4b17      	ldr	r3, [pc, #92]	@ (800762c <sniprintf+0x64>)
 80075ce:	1e0c      	subs	r4, r1, #0
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	b09d      	sub	sp, #116	@ 0x74
 80075d4:	da08      	bge.n	80075e8 <sniprintf+0x20>
 80075d6:	238b      	movs	r3, #139	@ 0x8b
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075de:	b01d      	add	sp, #116	@ 0x74
 80075e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e4:	b002      	add	sp, #8
 80075e6:	4770      	bx	lr
 80075e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075f0:	bf14      	ite	ne
 80075f2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80075f6:	4623      	moveq	r3, r4
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007600:	9002      	str	r0, [sp, #8]
 8007602:	9006      	str	r0, [sp, #24]
 8007604:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007608:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800760a:	ab21      	add	r3, sp, #132	@ 0x84
 800760c:	a902      	add	r1, sp, #8
 800760e:	4628      	mov	r0, r5
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	f000 f89d 	bl	8007750 <_svfiprintf_r>
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	bfbc      	itt	lt
 800761a:	238b      	movlt	r3, #139	@ 0x8b
 800761c:	602b      	strlt	r3, [r5, #0]
 800761e:	2c00      	cmp	r4, #0
 8007620:	d0dd      	beq.n	80075de <sniprintf+0x16>
 8007622:	9b02      	ldr	r3, [sp, #8]
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e7d9      	b.n	80075de <sniprintf+0x16>
 800762a:	bf00      	nop
 800762c:	2000000c 	.word	0x2000000c

08007630 <memset>:
 8007630:	4402      	add	r2, r0
 8007632:	4603      	mov	r3, r0
 8007634:	4293      	cmp	r3, r2
 8007636:	d100      	bne.n	800763a <memset+0xa>
 8007638:	4770      	bx	lr
 800763a:	f803 1b01 	strb.w	r1, [r3], #1
 800763e:	e7f9      	b.n	8007634 <memset+0x4>

08007640 <__errno>:
 8007640:	4b01      	ldr	r3, [pc, #4]	@ (8007648 <__errno+0x8>)
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	2000000c 	.word	0x2000000c

0800764c <__libc_init_array>:
 800764c:	b570      	push	{r4, r5, r6, lr}
 800764e:	4d0d      	ldr	r5, [pc, #52]	@ (8007684 <__libc_init_array+0x38>)
 8007650:	4c0d      	ldr	r4, [pc, #52]	@ (8007688 <__libc_init_array+0x3c>)
 8007652:	1b64      	subs	r4, r4, r5
 8007654:	10a4      	asrs	r4, r4, #2
 8007656:	2600      	movs	r6, #0
 8007658:	42a6      	cmp	r6, r4
 800765a:	d109      	bne.n	8007670 <__libc_init_array+0x24>
 800765c:	4d0b      	ldr	r5, [pc, #44]	@ (800768c <__libc_init_array+0x40>)
 800765e:	4c0c      	ldr	r4, [pc, #48]	@ (8007690 <__libc_init_array+0x44>)
 8007660:	f000 fd96 	bl	8008190 <_init>
 8007664:	1b64      	subs	r4, r4, r5
 8007666:	10a4      	asrs	r4, r4, #2
 8007668:	2600      	movs	r6, #0
 800766a:	42a6      	cmp	r6, r4
 800766c:	d105      	bne.n	800767a <__libc_init_array+0x2e>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	f855 3b04 	ldr.w	r3, [r5], #4
 8007674:	4798      	blx	r3
 8007676:	3601      	adds	r6, #1
 8007678:	e7ee      	b.n	8007658 <__libc_init_array+0xc>
 800767a:	f855 3b04 	ldr.w	r3, [r5], #4
 800767e:	4798      	blx	r3
 8007680:	3601      	adds	r6, #1
 8007682:	e7f2      	b.n	800766a <__libc_init_array+0x1e>
 8007684:	0801b430 	.word	0x0801b430
 8007688:	0801b430 	.word	0x0801b430
 800768c:	0801b430 	.word	0x0801b430
 8007690:	0801b434 	.word	0x0801b434

08007694 <__retarget_lock_acquire_recursive>:
 8007694:	4770      	bx	lr

08007696 <__retarget_lock_release_recursive>:
 8007696:	4770      	bx	lr

08007698 <__ssputs_r>:
 8007698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800769c:	688e      	ldr	r6, [r1, #8]
 800769e:	461f      	mov	r7, r3
 80076a0:	42be      	cmp	r6, r7
 80076a2:	680b      	ldr	r3, [r1, #0]
 80076a4:	4682      	mov	sl, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	4690      	mov	r8, r2
 80076aa:	d82d      	bhi.n	8007708 <__ssputs_r+0x70>
 80076ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80076b4:	d026      	beq.n	8007704 <__ssputs_r+0x6c>
 80076b6:	6965      	ldr	r5, [r4, #20]
 80076b8:	6909      	ldr	r1, [r1, #16]
 80076ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076be:	eba3 0901 	sub.w	r9, r3, r1
 80076c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076c6:	1c7b      	adds	r3, r7, #1
 80076c8:	444b      	add	r3, r9
 80076ca:	106d      	asrs	r5, r5, #1
 80076cc:	429d      	cmp	r5, r3
 80076ce:	bf38      	it	cc
 80076d0:	461d      	movcc	r5, r3
 80076d2:	0553      	lsls	r3, r2, #21
 80076d4:	d527      	bpl.n	8007726 <__ssputs_r+0x8e>
 80076d6:	4629      	mov	r1, r5
 80076d8:	f000 f958 	bl	800798c <_malloc_r>
 80076dc:	4606      	mov	r6, r0
 80076de:	b360      	cbz	r0, 800773a <__ssputs_r+0xa2>
 80076e0:	6921      	ldr	r1, [r4, #16]
 80076e2:	464a      	mov	r2, r9
 80076e4:	f000 fbc4 	bl	8007e70 <memcpy>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f2:	81a3      	strh	r3, [r4, #12]
 80076f4:	6126      	str	r6, [r4, #16]
 80076f6:	6165      	str	r5, [r4, #20]
 80076f8:	444e      	add	r6, r9
 80076fa:	eba5 0509 	sub.w	r5, r5, r9
 80076fe:	6026      	str	r6, [r4, #0]
 8007700:	60a5      	str	r5, [r4, #8]
 8007702:	463e      	mov	r6, r7
 8007704:	42be      	cmp	r6, r7
 8007706:	d900      	bls.n	800770a <__ssputs_r+0x72>
 8007708:	463e      	mov	r6, r7
 800770a:	6820      	ldr	r0, [r4, #0]
 800770c:	4632      	mov	r2, r6
 800770e:	4641      	mov	r1, r8
 8007710:	f000 fb84 	bl	8007e1c <memmove>
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	1b9b      	subs	r3, r3, r6
 8007718:	60a3      	str	r3, [r4, #8]
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	4433      	add	r3, r6
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	2000      	movs	r0, #0
 8007722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007726:	462a      	mov	r2, r5
 8007728:	f000 fb4a 	bl	8007dc0 <_realloc_r>
 800772c:	4606      	mov	r6, r0
 800772e:	2800      	cmp	r0, #0
 8007730:	d1e0      	bne.n	80076f4 <__ssputs_r+0x5c>
 8007732:	6921      	ldr	r1, [r4, #16]
 8007734:	4650      	mov	r0, sl
 8007736:	f000 fba9 	bl	8007e8c <_free_r>
 800773a:	230c      	movs	r3, #12
 800773c:	f8ca 3000 	str.w	r3, [sl]
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007746:	81a3      	strh	r3, [r4, #12]
 8007748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800774c:	e7e9      	b.n	8007722 <__ssputs_r+0x8a>
	...

08007750 <_svfiprintf_r>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	4698      	mov	r8, r3
 8007756:	898b      	ldrh	r3, [r1, #12]
 8007758:	061b      	lsls	r3, r3, #24
 800775a:	b09d      	sub	sp, #116	@ 0x74
 800775c:	4607      	mov	r7, r0
 800775e:	460d      	mov	r5, r1
 8007760:	4614      	mov	r4, r2
 8007762:	d510      	bpl.n	8007786 <_svfiprintf_r+0x36>
 8007764:	690b      	ldr	r3, [r1, #16]
 8007766:	b973      	cbnz	r3, 8007786 <_svfiprintf_r+0x36>
 8007768:	2140      	movs	r1, #64	@ 0x40
 800776a:	f000 f90f 	bl	800798c <_malloc_r>
 800776e:	6028      	str	r0, [r5, #0]
 8007770:	6128      	str	r0, [r5, #16]
 8007772:	b930      	cbnz	r0, 8007782 <_svfiprintf_r+0x32>
 8007774:	230c      	movs	r3, #12
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800777c:	b01d      	add	sp, #116	@ 0x74
 800777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007782:	2340      	movs	r3, #64	@ 0x40
 8007784:	616b      	str	r3, [r5, #20]
 8007786:	2300      	movs	r3, #0
 8007788:	9309      	str	r3, [sp, #36]	@ 0x24
 800778a:	2320      	movs	r3, #32
 800778c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007790:	f8cd 800c 	str.w	r8, [sp, #12]
 8007794:	2330      	movs	r3, #48	@ 0x30
 8007796:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007934 <_svfiprintf_r+0x1e4>
 800779a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800779e:	f04f 0901 	mov.w	r9, #1
 80077a2:	4623      	mov	r3, r4
 80077a4:	469a      	mov	sl, r3
 80077a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077aa:	b10a      	cbz	r2, 80077b0 <_svfiprintf_r+0x60>
 80077ac:	2a25      	cmp	r2, #37	@ 0x25
 80077ae:	d1f9      	bne.n	80077a4 <_svfiprintf_r+0x54>
 80077b0:	ebba 0b04 	subs.w	fp, sl, r4
 80077b4:	d00b      	beq.n	80077ce <_svfiprintf_r+0x7e>
 80077b6:	465b      	mov	r3, fp
 80077b8:	4622      	mov	r2, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff ff6b 	bl	8007698 <__ssputs_r>
 80077c2:	3001      	adds	r0, #1
 80077c4:	f000 80a7 	beq.w	8007916 <_svfiprintf_r+0x1c6>
 80077c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077ca:	445a      	add	r2, fp
 80077cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80077ce:	f89a 3000 	ldrb.w	r3, [sl]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 809f 	beq.w	8007916 <_svfiprintf_r+0x1c6>
 80077d8:	2300      	movs	r3, #0
 80077da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e2:	f10a 0a01 	add.w	sl, sl, #1
 80077e6:	9304      	str	r3, [sp, #16]
 80077e8:	9307      	str	r3, [sp, #28]
 80077ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80077f0:	4654      	mov	r4, sl
 80077f2:	2205      	movs	r2, #5
 80077f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f8:	484e      	ldr	r0, [pc, #312]	@ (8007934 <_svfiprintf_r+0x1e4>)
 80077fa:	f7f8 fd09 	bl	8000210 <memchr>
 80077fe:	9a04      	ldr	r2, [sp, #16]
 8007800:	b9d8      	cbnz	r0, 800783a <_svfiprintf_r+0xea>
 8007802:	06d0      	lsls	r0, r2, #27
 8007804:	bf44      	itt	mi
 8007806:	2320      	movmi	r3, #32
 8007808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800780c:	0711      	lsls	r1, r2, #28
 800780e:	bf44      	itt	mi
 8007810:	232b      	movmi	r3, #43	@ 0x2b
 8007812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007816:	f89a 3000 	ldrb.w	r3, [sl]
 800781a:	2b2a      	cmp	r3, #42	@ 0x2a
 800781c:	d015      	beq.n	800784a <_svfiprintf_r+0xfa>
 800781e:	9a07      	ldr	r2, [sp, #28]
 8007820:	4654      	mov	r4, sl
 8007822:	2000      	movs	r0, #0
 8007824:	f04f 0c0a 	mov.w	ip, #10
 8007828:	4621      	mov	r1, r4
 800782a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800782e:	3b30      	subs	r3, #48	@ 0x30
 8007830:	2b09      	cmp	r3, #9
 8007832:	d94b      	bls.n	80078cc <_svfiprintf_r+0x17c>
 8007834:	b1b0      	cbz	r0, 8007864 <_svfiprintf_r+0x114>
 8007836:	9207      	str	r2, [sp, #28]
 8007838:	e014      	b.n	8007864 <_svfiprintf_r+0x114>
 800783a:	eba0 0308 	sub.w	r3, r0, r8
 800783e:	fa09 f303 	lsl.w	r3, r9, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	46a2      	mov	sl, r4
 8007848:	e7d2      	b.n	80077f0 <_svfiprintf_r+0xa0>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	1d19      	adds	r1, r3, #4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	9103      	str	r1, [sp, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	bfbb      	ittet	lt
 8007856:	425b      	neglt	r3, r3
 8007858:	f042 0202 	orrlt.w	r2, r2, #2
 800785c:	9307      	strge	r3, [sp, #28]
 800785e:	9307      	strlt	r3, [sp, #28]
 8007860:	bfb8      	it	lt
 8007862:	9204      	strlt	r2, [sp, #16]
 8007864:	7823      	ldrb	r3, [r4, #0]
 8007866:	2b2e      	cmp	r3, #46	@ 0x2e
 8007868:	d10a      	bne.n	8007880 <_svfiprintf_r+0x130>
 800786a:	7863      	ldrb	r3, [r4, #1]
 800786c:	2b2a      	cmp	r3, #42	@ 0x2a
 800786e:	d132      	bne.n	80078d6 <_svfiprintf_r+0x186>
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	1d1a      	adds	r2, r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	9203      	str	r2, [sp, #12]
 8007878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800787c:	3402      	adds	r4, #2
 800787e:	9305      	str	r3, [sp, #20]
 8007880:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007944 <_svfiprintf_r+0x1f4>
 8007884:	7821      	ldrb	r1, [r4, #0]
 8007886:	2203      	movs	r2, #3
 8007888:	4650      	mov	r0, sl
 800788a:	f7f8 fcc1 	bl	8000210 <memchr>
 800788e:	b138      	cbz	r0, 80078a0 <_svfiprintf_r+0x150>
 8007890:	9b04      	ldr	r3, [sp, #16]
 8007892:	eba0 000a 	sub.w	r0, r0, sl
 8007896:	2240      	movs	r2, #64	@ 0x40
 8007898:	4082      	lsls	r2, r0
 800789a:	4313      	orrs	r3, r2
 800789c:	3401      	adds	r4, #1
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a4:	4824      	ldr	r0, [pc, #144]	@ (8007938 <_svfiprintf_r+0x1e8>)
 80078a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078aa:	2206      	movs	r2, #6
 80078ac:	f7f8 fcb0 	bl	8000210 <memchr>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d036      	beq.n	8007922 <_svfiprintf_r+0x1d2>
 80078b4:	4b21      	ldr	r3, [pc, #132]	@ (800793c <_svfiprintf_r+0x1ec>)
 80078b6:	bb1b      	cbnz	r3, 8007900 <_svfiprintf_r+0x1b0>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	3307      	adds	r3, #7
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c6:	4433      	add	r3, r6
 80078c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ca:	e76a      	b.n	80077a2 <_svfiprintf_r+0x52>
 80078cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d0:	460c      	mov	r4, r1
 80078d2:	2001      	movs	r0, #1
 80078d4:	e7a8      	b.n	8007828 <_svfiprintf_r+0xd8>
 80078d6:	2300      	movs	r3, #0
 80078d8:	3401      	adds	r4, #1
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	4619      	mov	r1, r3
 80078de:	f04f 0c0a 	mov.w	ip, #10
 80078e2:	4620      	mov	r0, r4
 80078e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e8:	3a30      	subs	r2, #48	@ 0x30
 80078ea:	2a09      	cmp	r2, #9
 80078ec:	d903      	bls.n	80078f6 <_svfiprintf_r+0x1a6>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0c6      	beq.n	8007880 <_svfiprintf_r+0x130>
 80078f2:	9105      	str	r1, [sp, #20]
 80078f4:	e7c4      	b.n	8007880 <_svfiprintf_r+0x130>
 80078f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078fa:	4604      	mov	r4, r0
 80078fc:	2301      	movs	r3, #1
 80078fe:	e7f0      	b.n	80078e2 <_svfiprintf_r+0x192>
 8007900:	ab03      	add	r3, sp, #12
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	462a      	mov	r2, r5
 8007906:	4b0e      	ldr	r3, [pc, #56]	@ (8007940 <_svfiprintf_r+0x1f0>)
 8007908:	a904      	add	r1, sp, #16
 800790a:	4638      	mov	r0, r7
 800790c:	f3af 8000 	nop.w
 8007910:	1c42      	adds	r2, r0, #1
 8007912:	4606      	mov	r6, r0
 8007914:	d1d6      	bne.n	80078c4 <_svfiprintf_r+0x174>
 8007916:	89ab      	ldrh	r3, [r5, #12]
 8007918:	065b      	lsls	r3, r3, #25
 800791a:	f53f af2d 	bmi.w	8007778 <_svfiprintf_r+0x28>
 800791e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007920:	e72c      	b.n	800777c <_svfiprintf_r+0x2c>
 8007922:	ab03      	add	r3, sp, #12
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	462a      	mov	r2, r5
 8007928:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <_svfiprintf_r+0x1f0>)
 800792a:	a904      	add	r1, sp, #16
 800792c:	4638      	mov	r0, r7
 800792e:	f000 f91b 	bl	8007b68 <_printf_i>
 8007932:	e7ed      	b.n	8007910 <_svfiprintf_r+0x1c0>
 8007934:	0801b3f4 	.word	0x0801b3f4
 8007938:	0801b3fe 	.word	0x0801b3fe
 800793c:	00000000 	.word	0x00000000
 8007940:	08007699 	.word	0x08007699
 8007944:	0801b3fa 	.word	0x0801b3fa

08007948 <sbrk_aligned>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4e0f      	ldr	r6, [pc, #60]	@ (8007988 <sbrk_aligned+0x40>)
 800794c:	460c      	mov	r4, r1
 800794e:	6831      	ldr	r1, [r6, #0]
 8007950:	4605      	mov	r5, r0
 8007952:	b911      	cbnz	r1, 800795a <sbrk_aligned+0x12>
 8007954:	f000 fa7c 	bl	8007e50 <_sbrk_r>
 8007958:	6030      	str	r0, [r6, #0]
 800795a:	4621      	mov	r1, r4
 800795c:	4628      	mov	r0, r5
 800795e:	f000 fa77 	bl	8007e50 <_sbrk_r>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d103      	bne.n	800796e <sbrk_aligned+0x26>
 8007966:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800796a:	4620      	mov	r0, r4
 800796c:	bd70      	pop	{r4, r5, r6, pc}
 800796e:	1cc4      	adds	r4, r0, #3
 8007970:	f024 0403 	bic.w	r4, r4, #3
 8007974:	42a0      	cmp	r0, r4
 8007976:	d0f8      	beq.n	800796a <sbrk_aligned+0x22>
 8007978:	1a21      	subs	r1, r4, r0
 800797a:	4628      	mov	r0, r5
 800797c:	f000 fa68 	bl	8007e50 <_sbrk_r>
 8007980:	3001      	adds	r0, #1
 8007982:	d1f2      	bne.n	800796a <sbrk_aligned+0x22>
 8007984:	e7ef      	b.n	8007966 <sbrk_aligned+0x1e>
 8007986:	bf00      	nop
 8007988:	20040e7c 	.word	0x20040e7c

0800798c <_malloc_r>:
 800798c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007990:	1ccd      	adds	r5, r1, #3
 8007992:	f025 0503 	bic.w	r5, r5, #3
 8007996:	3508      	adds	r5, #8
 8007998:	2d0c      	cmp	r5, #12
 800799a:	bf38      	it	cc
 800799c:	250c      	movcc	r5, #12
 800799e:	2d00      	cmp	r5, #0
 80079a0:	4606      	mov	r6, r0
 80079a2:	db01      	blt.n	80079a8 <_malloc_r+0x1c>
 80079a4:	42a9      	cmp	r1, r5
 80079a6:	d904      	bls.n	80079b2 <_malloc_r+0x26>
 80079a8:	230c      	movs	r3, #12
 80079aa:	6033      	str	r3, [r6, #0]
 80079ac:	2000      	movs	r0, #0
 80079ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a88 <_malloc_r+0xfc>
 80079b6:	f000 f9f7 	bl	8007da8 <__malloc_lock>
 80079ba:	f8d8 3000 	ldr.w	r3, [r8]
 80079be:	461c      	mov	r4, r3
 80079c0:	bb44      	cbnz	r4, 8007a14 <_malloc_r+0x88>
 80079c2:	4629      	mov	r1, r5
 80079c4:	4630      	mov	r0, r6
 80079c6:	f7ff ffbf 	bl	8007948 <sbrk_aligned>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	4604      	mov	r4, r0
 80079ce:	d158      	bne.n	8007a82 <_malloc_r+0xf6>
 80079d0:	f8d8 4000 	ldr.w	r4, [r8]
 80079d4:	4627      	mov	r7, r4
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	d143      	bne.n	8007a62 <_malloc_r+0xd6>
 80079da:	2c00      	cmp	r4, #0
 80079dc:	d04b      	beq.n	8007a76 <_malloc_r+0xea>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	4639      	mov	r1, r7
 80079e2:	4630      	mov	r0, r6
 80079e4:	eb04 0903 	add.w	r9, r4, r3
 80079e8:	f000 fa32 	bl	8007e50 <_sbrk_r>
 80079ec:	4581      	cmp	r9, r0
 80079ee:	d142      	bne.n	8007a76 <_malloc_r+0xea>
 80079f0:	6821      	ldr	r1, [r4, #0]
 80079f2:	1a6d      	subs	r5, r5, r1
 80079f4:	4629      	mov	r1, r5
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7ff ffa6 	bl	8007948 <sbrk_aligned>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d03a      	beq.n	8007a76 <_malloc_r+0xea>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	442b      	add	r3, r5
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	f8d8 3000 	ldr.w	r3, [r8]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	bb62      	cbnz	r2, 8007a68 <_malloc_r+0xdc>
 8007a0e:	f8c8 7000 	str.w	r7, [r8]
 8007a12:	e00f      	b.n	8007a34 <_malloc_r+0xa8>
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	1b52      	subs	r2, r2, r5
 8007a18:	d420      	bmi.n	8007a5c <_malloc_r+0xd0>
 8007a1a:	2a0b      	cmp	r2, #11
 8007a1c:	d917      	bls.n	8007a4e <_malloc_r+0xc2>
 8007a1e:	1961      	adds	r1, r4, r5
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	6025      	str	r5, [r4, #0]
 8007a24:	bf18      	it	ne
 8007a26:	6059      	strne	r1, [r3, #4]
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	bf08      	it	eq
 8007a2c:	f8c8 1000 	streq.w	r1, [r8]
 8007a30:	5162      	str	r2, [r4, r5]
 8007a32:	604b      	str	r3, [r1, #4]
 8007a34:	4630      	mov	r0, r6
 8007a36:	f000 f9bd 	bl	8007db4 <__malloc_unlock>
 8007a3a:	f104 000b 	add.w	r0, r4, #11
 8007a3e:	1d23      	adds	r3, r4, #4
 8007a40:	f020 0007 	bic.w	r0, r0, #7
 8007a44:	1ac2      	subs	r2, r0, r3
 8007a46:	bf1c      	itt	ne
 8007a48:	1a1b      	subne	r3, r3, r0
 8007a4a:	50a3      	strne	r3, [r4, r2]
 8007a4c:	e7af      	b.n	80079ae <_malloc_r+0x22>
 8007a4e:	6862      	ldr	r2, [r4, #4]
 8007a50:	42a3      	cmp	r3, r4
 8007a52:	bf0c      	ite	eq
 8007a54:	f8c8 2000 	streq.w	r2, [r8]
 8007a58:	605a      	strne	r2, [r3, #4]
 8007a5a:	e7eb      	b.n	8007a34 <_malloc_r+0xa8>
 8007a5c:	4623      	mov	r3, r4
 8007a5e:	6864      	ldr	r4, [r4, #4]
 8007a60:	e7ae      	b.n	80079c0 <_malloc_r+0x34>
 8007a62:	463c      	mov	r4, r7
 8007a64:	687f      	ldr	r7, [r7, #4]
 8007a66:	e7b6      	b.n	80079d6 <_malloc_r+0x4a>
 8007a68:	461a      	mov	r2, r3
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	d1fb      	bne.n	8007a68 <_malloc_r+0xdc>
 8007a70:	2300      	movs	r3, #0
 8007a72:	6053      	str	r3, [r2, #4]
 8007a74:	e7de      	b.n	8007a34 <_malloc_r+0xa8>
 8007a76:	230c      	movs	r3, #12
 8007a78:	6033      	str	r3, [r6, #0]
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f000 f99a 	bl	8007db4 <__malloc_unlock>
 8007a80:	e794      	b.n	80079ac <_malloc_r+0x20>
 8007a82:	6005      	str	r5, [r0, #0]
 8007a84:	e7d6      	b.n	8007a34 <_malloc_r+0xa8>
 8007a86:	bf00      	nop
 8007a88:	20040e80 	.word	0x20040e80

08007a8c <_printf_common>:
 8007a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	4616      	mov	r6, r2
 8007a92:	4698      	mov	r8, r3
 8007a94:	688a      	ldr	r2, [r1, #8]
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	bfb8      	it	lt
 8007aa0:	4613      	movlt	r3, r2
 8007aa2:	6033      	str	r3, [r6, #0]
 8007aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b10a      	cbz	r2, 8007ab2 <_printf_common+0x26>
 8007aae:	3301      	adds	r3, #1
 8007ab0:	6033      	str	r3, [r6, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	0699      	lsls	r1, r3, #26
 8007ab6:	bf42      	ittt	mi
 8007ab8:	6833      	ldrmi	r3, [r6, #0]
 8007aba:	3302      	addmi	r3, #2
 8007abc:	6033      	strmi	r3, [r6, #0]
 8007abe:	6825      	ldr	r5, [r4, #0]
 8007ac0:	f015 0506 	ands.w	r5, r5, #6
 8007ac4:	d106      	bne.n	8007ad4 <_printf_common+0x48>
 8007ac6:	f104 0a19 	add.w	sl, r4, #25
 8007aca:	68e3      	ldr	r3, [r4, #12]
 8007acc:	6832      	ldr	r2, [r6, #0]
 8007ace:	1a9b      	subs	r3, r3, r2
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dc26      	bgt.n	8007b22 <_printf_common+0x96>
 8007ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	3b00      	subs	r3, #0
 8007adc:	bf18      	it	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	0692      	lsls	r2, r2, #26
 8007ae2:	d42b      	bmi.n	8007b3c <_printf_common+0xb0>
 8007ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ae8:	4641      	mov	r1, r8
 8007aea:	4638      	mov	r0, r7
 8007aec:	47c8      	blx	r9
 8007aee:	3001      	adds	r0, #1
 8007af0:	d01e      	beq.n	8007b30 <_printf_common+0xa4>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	6922      	ldr	r2, [r4, #16]
 8007af6:	f003 0306 	and.w	r3, r3, #6
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	bf02      	ittt	eq
 8007afe:	68e5      	ldreq	r5, [r4, #12]
 8007b00:	6833      	ldreq	r3, [r6, #0]
 8007b02:	1aed      	subeq	r5, r5, r3
 8007b04:	68a3      	ldr	r3, [r4, #8]
 8007b06:	bf0c      	ite	eq
 8007b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b0c:	2500      	movne	r5, #0
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	bfc4      	itt	gt
 8007b12:	1a9b      	subgt	r3, r3, r2
 8007b14:	18ed      	addgt	r5, r5, r3
 8007b16:	2600      	movs	r6, #0
 8007b18:	341a      	adds	r4, #26
 8007b1a:	42b5      	cmp	r5, r6
 8007b1c:	d11a      	bne.n	8007b54 <_printf_common+0xc8>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e008      	b.n	8007b34 <_printf_common+0xa8>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4652      	mov	r2, sl
 8007b26:	4641      	mov	r1, r8
 8007b28:	4638      	mov	r0, r7
 8007b2a:	47c8      	blx	r9
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d103      	bne.n	8007b38 <_printf_common+0xac>
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b38:	3501      	adds	r5, #1
 8007b3a:	e7c6      	b.n	8007aca <_printf_common+0x3e>
 8007b3c:	18e1      	adds	r1, r4, r3
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	2030      	movs	r0, #48	@ 0x30
 8007b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b46:	4422      	add	r2, r4
 8007b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b50:	3302      	adds	r3, #2
 8007b52:	e7c7      	b.n	8007ae4 <_printf_common+0x58>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4622      	mov	r2, r4
 8007b58:	4641      	mov	r1, r8
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c8      	blx	r9
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d0e6      	beq.n	8007b30 <_printf_common+0xa4>
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7d9      	b.n	8007b1a <_printf_common+0x8e>
	...

08007b68 <_printf_i>:
 8007b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	7e0f      	ldrb	r7, [r1, #24]
 8007b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b70:	2f78      	cmp	r7, #120	@ 0x78
 8007b72:	4691      	mov	r9, r2
 8007b74:	4680      	mov	r8, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b7e:	d807      	bhi.n	8007b90 <_printf_i+0x28>
 8007b80:	2f62      	cmp	r7, #98	@ 0x62
 8007b82:	d80a      	bhi.n	8007b9a <_printf_i+0x32>
 8007b84:	2f00      	cmp	r7, #0
 8007b86:	f000 80d2 	beq.w	8007d2e <_printf_i+0x1c6>
 8007b8a:	2f58      	cmp	r7, #88	@ 0x58
 8007b8c:	f000 80b9 	beq.w	8007d02 <_printf_i+0x19a>
 8007b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b98:	e03a      	b.n	8007c10 <_printf_i+0xa8>
 8007b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d8f6      	bhi.n	8007b90 <_printf_i+0x28>
 8007ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ba8 <_printf_i+0x40>)
 8007ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007c15 	.word	0x08007c15
 8007bb0:	08007b91 	.word	0x08007b91
 8007bb4:	08007b91 	.word	0x08007b91
 8007bb8:	08007b91 	.word	0x08007b91
 8007bbc:	08007b91 	.word	0x08007b91
 8007bc0:	08007c15 	.word	0x08007c15
 8007bc4:	08007b91 	.word	0x08007b91
 8007bc8:	08007b91 	.word	0x08007b91
 8007bcc:	08007b91 	.word	0x08007b91
 8007bd0:	08007b91 	.word	0x08007b91
 8007bd4:	08007d15 	.word	0x08007d15
 8007bd8:	08007c3f 	.word	0x08007c3f
 8007bdc:	08007ccf 	.word	0x08007ccf
 8007be0:	08007b91 	.word	0x08007b91
 8007be4:	08007b91 	.word	0x08007b91
 8007be8:	08007d37 	.word	0x08007d37
 8007bec:	08007b91 	.word	0x08007b91
 8007bf0:	08007c3f 	.word	0x08007c3f
 8007bf4:	08007b91 	.word	0x08007b91
 8007bf8:	08007b91 	.word	0x08007b91
 8007bfc:	08007cd7 	.word	0x08007cd7
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	1d1a      	adds	r2, r3, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6032      	str	r2, [r6, #0]
 8007c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c10:	2301      	movs	r3, #1
 8007c12:	e09d      	b.n	8007d50 <_printf_i+0x1e8>
 8007c14:	6833      	ldr	r3, [r6, #0]
 8007c16:	6820      	ldr	r0, [r4, #0]
 8007c18:	1d19      	adds	r1, r3, #4
 8007c1a:	6031      	str	r1, [r6, #0]
 8007c1c:	0606      	lsls	r6, r0, #24
 8007c1e:	d501      	bpl.n	8007c24 <_printf_i+0xbc>
 8007c20:	681d      	ldr	r5, [r3, #0]
 8007c22:	e003      	b.n	8007c2c <_printf_i+0xc4>
 8007c24:	0645      	lsls	r5, r0, #25
 8007c26:	d5fb      	bpl.n	8007c20 <_printf_i+0xb8>
 8007c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	da03      	bge.n	8007c38 <_printf_i+0xd0>
 8007c30:	232d      	movs	r3, #45	@ 0x2d
 8007c32:	426d      	negs	r5, r5
 8007c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c38:	4859      	ldr	r0, [pc, #356]	@ (8007da0 <_printf_i+0x238>)
 8007c3a:	230a      	movs	r3, #10
 8007c3c:	e011      	b.n	8007c62 <_printf_i+0xfa>
 8007c3e:	6821      	ldr	r1, [r4, #0]
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	0608      	lsls	r0, r1, #24
 8007c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c48:	d402      	bmi.n	8007c50 <_printf_i+0xe8>
 8007c4a:	0649      	lsls	r1, r1, #25
 8007c4c:	bf48      	it	mi
 8007c4e:	b2ad      	uxthmi	r5, r5
 8007c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c52:	4853      	ldr	r0, [pc, #332]	@ (8007da0 <_printf_i+0x238>)
 8007c54:	6033      	str	r3, [r6, #0]
 8007c56:	bf14      	ite	ne
 8007c58:	230a      	movne	r3, #10
 8007c5a:	2308      	moveq	r3, #8
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c62:	6866      	ldr	r6, [r4, #4]
 8007c64:	60a6      	str	r6, [r4, #8]
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	bfa2      	ittt	ge
 8007c6a:	6821      	ldrge	r1, [r4, #0]
 8007c6c:	f021 0104 	bicge.w	r1, r1, #4
 8007c70:	6021      	strge	r1, [r4, #0]
 8007c72:	b90d      	cbnz	r5, 8007c78 <_printf_i+0x110>
 8007c74:	2e00      	cmp	r6, #0
 8007c76:	d04b      	beq.n	8007d10 <_printf_i+0x1a8>
 8007c78:	4616      	mov	r6, r2
 8007c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8007c82:	5dc7      	ldrb	r7, [r0, r7]
 8007c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c88:	462f      	mov	r7, r5
 8007c8a:	42bb      	cmp	r3, r7
 8007c8c:	460d      	mov	r5, r1
 8007c8e:	d9f4      	bls.n	8007c7a <_printf_i+0x112>
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d10b      	bne.n	8007cac <_printf_i+0x144>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	07df      	lsls	r7, r3, #31
 8007c98:	d508      	bpl.n	8007cac <_printf_i+0x144>
 8007c9a:	6923      	ldr	r3, [r4, #16]
 8007c9c:	6861      	ldr	r1, [r4, #4]
 8007c9e:	4299      	cmp	r1, r3
 8007ca0:	bfde      	ittt	le
 8007ca2:	2330      	movle	r3, #48	@ 0x30
 8007ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ca8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007cac:	1b92      	subs	r2, r2, r6
 8007cae:	6122      	str	r2, [r4, #16]
 8007cb0:	f8cd a000 	str.w	sl, [sp]
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	aa03      	add	r2, sp, #12
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4640      	mov	r0, r8
 8007cbc:	f7ff fee6 	bl	8007a8c <_printf_common>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d14a      	bne.n	8007d5a <_printf_i+0x1f2>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cc8:	b004      	add	sp, #16
 8007cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	4833      	ldr	r0, [pc, #204]	@ (8007da4 <_printf_i+0x23c>)
 8007cd8:	2778      	movs	r7, #120	@ 0x78
 8007cda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6831      	ldr	r1, [r6, #0]
 8007ce2:	061f      	lsls	r7, r3, #24
 8007ce4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ce8:	d402      	bmi.n	8007cf0 <_printf_i+0x188>
 8007cea:	065f      	lsls	r7, r3, #25
 8007cec:	bf48      	it	mi
 8007cee:	b2ad      	uxthmi	r5, r5
 8007cf0:	6031      	str	r1, [r6, #0]
 8007cf2:	07d9      	lsls	r1, r3, #31
 8007cf4:	bf44      	itt	mi
 8007cf6:	f043 0320 	orrmi.w	r3, r3, #32
 8007cfa:	6023      	strmi	r3, [r4, #0]
 8007cfc:	b11d      	cbz	r5, 8007d06 <_printf_i+0x19e>
 8007cfe:	2310      	movs	r3, #16
 8007d00:	e7ac      	b.n	8007c5c <_printf_i+0xf4>
 8007d02:	4827      	ldr	r0, [pc, #156]	@ (8007da0 <_printf_i+0x238>)
 8007d04:	e7e9      	b.n	8007cda <_printf_i+0x172>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	f023 0320 	bic.w	r3, r3, #32
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	e7f6      	b.n	8007cfe <_printf_i+0x196>
 8007d10:	4616      	mov	r6, r2
 8007d12:	e7bd      	b.n	8007c90 <_printf_i+0x128>
 8007d14:	6833      	ldr	r3, [r6, #0]
 8007d16:	6825      	ldr	r5, [r4, #0]
 8007d18:	6961      	ldr	r1, [r4, #20]
 8007d1a:	1d18      	adds	r0, r3, #4
 8007d1c:	6030      	str	r0, [r6, #0]
 8007d1e:	062e      	lsls	r6, r5, #24
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0x1c0>
 8007d24:	6019      	str	r1, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0x1c6>
 8007d28:	0668      	lsls	r0, r5, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0x1bc>
 8007d2c:	8019      	strh	r1, [r3, #0]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	4616      	mov	r6, r2
 8007d34:	e7bc      	b.n	8007cb0 <_printf_i+0x148>
 8007d36:	6833      	ldr	r3, [r6, #0]
 8007d38:	1d1a      	adds	r2, r3, #4
 8007d3a:	6032      	str	r2, [r6, #0]
 8007d3c:	681e      	ldr	r6, [r3, #0]
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	2100      	movs	r1, #0
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7f8 fa64 	bl	8000210 <memchr>
 8007d48:	b108      	cbz	r0, 8007d4e <_printf_i+0x1e6>
 8007d4a:	1b80      	subs	r0, r0, r6
 8007d4c:	6060      	str	r0, [r4, #4]
 8007d4e:	6863      	ldr	r3, [r4, #4]
 8007d50:	6123      	str	r3, [r4, #16]
 8007d52:	2300      	movs	r3, #0
 8007d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d58:	e7aa      	b.n	8007cb0 <_printf_i+0x148>
 8007d5a:	6923      	ldr	r3, [r4, #16]
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	47d0      	blx	sl
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0ad      	beq.n	8007cc4 <_printf_i+0x15c>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	079b      	lsls	r3, r3, #30
 8007d6c:	d413      	bmi.n	8007d96 <_printf_i+0x22e>
 8007d6e:	68e0      	ldr	r0, [r4, #12]
 8007d70:	9b03      	ldr	r3, [sp, #12]
 8007d72:	4298      	cmp	r0, r3
 8007d74:	bfb8      	it	lt
 8007d76:	4618      	movlt	r0, r3
 8007d78:	e7a6      	b.n	8007cc8 <_printf_i+0x160>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	4649      	mov	r1, r9
 8007d80:	4640      	mov	r0, r8
 8007d82:	47d0      	blx	sl
 8007d84:	3001      	adds	r0, #1
 8007d86:	d09d      	beq.n	8007cc4 <_printf_i+0x15c>
 8007d88:	3501      	adds	r5, #1
 8007d8a:	68e3      	ldr	r3, [r4, #12]
 8007d8c:	9903      	ldr	r1, [sp, #12]
 8007d8e:	1a5b      	subs	r3, r3, r1
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	dcf2      	bgt.n	8007d7a <_printf_i+0x212>
 8007d94:	e7eb      	b.n	8007d6e <_printf_i+0x206>
 8007d96:	2500      	movs	r5, #0
 8007d98:	f104 0619 	add.w	r6, r4, #25
 8007d9c:	e7f5      	b.n	8007d8a <_printf_i+0x222>
 8007d9e:	bf00      	nop
 8007da0:	0801b405 	.word	0x0801b405
 8007da4:	0801b416 	.word	0x0801b416

08007da8 <__malloc_lock>:
 8007da8:	4801      	ldr	r0, [pc, #4]	@ (8007db0 <__malloc_lock+0x8>)
 8007daa:	f7ff bc73 	b.w	8007694 <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	20040e78 	.word	0x20040e78

08007db4 <__malloc_unlock>:
 8007db4:	4801      	ldr	r0, [pc, #4]	@ (8007dbc <__malloc_unlock+0x8>)
 8007db6:	f7ff bc6e 	b.w	8007696 <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20040e78 	.word	0x20040e78

08007dc0 <_realloc_r>:
 8007dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc4:	4680      	mov	r8, r0
 8007dc6:	4615      	mov	r5, r2
 8007dc8:	460c      	mov	r4, r1
 8007dca:	b921      	cbnz	r1, 8007dd6 <_realloc_r+0x16>
 8007dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	f7ff bddb 	b.w	800798c <_malloc_r>
 8007dd6:	b92a      	cbnz	r2, 8007de4 <_realloc_r+0x24>
 8007dd8:	f000 f858 	bl	8007e8c <_free_r>
 8007ddc:	2400      	movs	r4, #0
 8007dde:	4620      	mov	r0, r4
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de4:	f000 f89c 	bl	8007f20 <_malloc_usable_size_r>
 8007de8:	4285      	cmp	r5, r0
 8007dea:	4606      	mov	r6, r0
 8007dec:	d802      	bhi.n	8007df4 <_realloc_r+0x34>
 8007dee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007df2:	d8f4      	bhi.n	8007dde <_realloc_r+0x1e>
 8007df4:	4629      	mov	r1, r5
 8007df6:	4640      	mov	r0, r8
 8007df8:	f7ff fdc8 	bl	800798c <_malloc_r>
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d0ec      	beq.n	8007ddc <_realloc_r+0x1c>
 8007e02:	42b5      	cmp	r5, r6
 8007e04:	462a      	mov	r2, r5
 8007e06:	4621      	mov	r1, r4
 8007e08:	bf28      	it	cs
 8007e0a:	4632      	movcs	r2, r6
 8007e0c:	f000 f830 	bl	8007e70 <memcpy>
 8007e10:	4621      	mov	r1, r4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f000 f83a 	bl	8007e8c <_free_r>
 8007e18:	463c      	mov	r4, r7
 8007e1a:	e7e0      	b.n	8007dde <_realloc_r+0x1e>

08007e1c <memmove>:
 8007e1c:	4288      	cmp	r0, r1
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	eb01 0402 	add.w	r4, r1, r2
 8007e24:	d902      	bls.n	8007e2c <memmove+0x10>
 8007e26:	4284      	cmp	r4, r0
 8007e28:	4623      	mov	r3, r4
 8007e2a:	d807      	bhi.n	8007e3c <memmove+0x20>
 8007e2c:	1e43      	subs	r3, r0, #1
 8007e2e:	42a1      	cmp	r1, r4
 8007e30:	d008      	beq.n	8007e44 <memmove+0x28>
 8007e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e3a:	e7f8      	b.n	8007e2e <memmove+0x12>
 8007e3c:	4402      	add	r2, r0
 8007e3e:	4601      	mov	r1, r0
 8007e40:	428a      	cmp	r2, r1
 8007e42:	d100      	bne.n	8007e46 <memmove+0x2a>
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e4e:	e7f7      	b.n	8007e40 <memmove+0x24>

08007e50 <_sbrk_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d06      	ldr	r5, [pc, #24]	@ (8007e6c <_sbrk_r+0x1c>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	f7f9 fe6c 	bl	8001b38 <_sbrk>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d102      	bne.n	8007e6a <_sbrk_r+0x1a>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	b103      	cbz	r3, 8007e6a <_sbrk_r+0x1a>
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	20040e84 	.word	0x20040e84

08007e70 <memcpy>:
 8007e70:	440a      	add	r2, r1
 8007e72:	4291      	cmp	r1, r2
 8007e74:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007e78:	d100      	bne.n	8007e7c <memcpy+0xc>
 8007e7a:	4770      	bx	lr
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e86:	4291      	cmp	r1, r2
 8007e88:	d1f9      	bne.n	8007e7e <memcpy+0xe>
 8007e8a:	bd10      	pop	{r4, pc}

08007e8c <_free_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4605      	mov	r5, r0
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d041      	beq.n	8007f18 <_free_r+0x8c>
 8007e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e98:	1f0c      	subs	r4, r1, #4
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfb8      	it	lt
 8007e9e:	18e4      	addlt	r4, r4, r3
 8007ea0:	f7ff ff82 	bl	8007da8 <__malloc_lock>
 8007ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f1c <_free_r+0x90>)
 8007ea6:	6813      	ldr	r3, [r2, #0]
 8007ea8:	b933      	cbnz	r3, 8007eb8 <_free_r+0x2c>
 8007eaa:	6063      	str	r3, [r4, #4]
 8007eac:	6014      	str	r4, [r2, #0]
 8007eae:	4628      	mov	r0, r5
 8007eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eb4:	f7ff bf7e 	b.w	8007db4 <__malloc_unlock>
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	d908      	bls.n	8007ece <_free_r+0x42>
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	1821      	adds	r1, r4, r0
 8007ec0:	428b      	cmp	r3, r1
 8007ec2:	bf01      	itttt	eq
 8007ec4:	6819      	ldreq	r1, [r3, #0]
 8007ec6:	685b      	ldreq	r3, [r3, #4]
 8007ec8:	1809      	addeq	r1, r1, r0
 8007eca:	6021      	streq	r1, [r4, #0]
 8007ecc:	e7ed      	b.n	8007eaa <_free_r+0x1e>
 8007ece:	461a      	mov	r2, r3
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	b10b      	cbz	r3, 8007ed8 <_free_r+0x4c>
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d9fa      	bls.n	8007ece <_free_r+0x42>
 8007ed8:	6811      	ldr	r1, [r2, #0]
 8007eda:	1850      	adds	r0, r2, r1
 8007edc:	42a0      	cmp	r0, r4
 8007ede:	d10b      	bne.n	8007ef8 <_free_r+0x6c>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	4401      	add	r1, r0
 8007ee4:	1850      	adds	r0, r2, r1
 8007ee6:	4283      	cmp	r3, r0
 8007ee8:	6011      	str	r1, [r2, #0]
 8007eea:	d1e0      	bne.n	8007eae <_free_r+0x22>
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	6053      	str	r3, [r2, #4]
 8007ef2:	4408      	add	r0, r1
 8007ef4:	6010      	str	r0, [r2, #0]
 8007ef6:	e7da      	b.n	8007eae <_free_r+0x22>
 8007ef8:	d902      	bls.n	8007f00 <_free_r+0x74>
 8007efa:	230c      	movs	r3, #12
 8007efc:	602b      	str	r3, [r5, #0]
 8007efe:	e7d6      	b.n	8007eae <_free_r+0x22>
 8007f00:	6820      	ldr	r0, [r4, #0]
 8007f02:	1821      	adds	r1, r4, r0
 8007f04:	428b      	cmp	r3, r1
 8007f06:	bf04      	itt	eq
 8007f08:	6819      	ldreq	r1, [r3, #0]
 8007f0a:	685b      	ldreq	r3, [r3, #4]
 8007f0c:	6063      	str	r3, [r4, #4]
 8007f0e:	bf04      	itt	eq
 8007f10:	1809      	addeq	r1, r1, r0
 8007f12:	6021      	streq	r1, [r4, #0]
 8007f14:	6054      	str	r4, [r2, #4]
 8007f16:	e7ca      	b.n	8007eae <_free_r+0x22>
 8007f18:	bd38      	pop	{r3, r4, r5, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20040e80 	.word	0x20040e80

08007f20 <_malloc_usable_size_r>:
 8007f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f24:	1f18      	subs	r0, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfbc      	itt	lt
 8007f2a:	580b      	ldrlt	r3, [r1, r0]
 8007f2c:	18c0      	addlt	r0, r0, r3
 8007f2e:	4770      	bx	lr

08007f30 <log2f>:
 8007f30:	b508      	push	{r3, lr}
 8007f32:	f000 f807 	bl	8007f44 <logf>
 8007f36:	eddf 7a02 	vldr	s15, [pc, #8]	@ 8007f40 <log2f+0x10>
 8007f3a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8007f3e:	bd08      	pop	{r3, pc}
 8007f40:	3f317218 	.word	0x3f317218

08007f44 <logf>:
 8007f44:	b508      	push	{r3, lr}
 8007f46:	ed2d 8b02 	vpush	{d8}
 8007f4a:	eeb0 8a40 	vmov.f32	s16, s0
 8007f4e:	f000 f82d 	bl	8007fac <__ieee754_logf>
 8007f52:	eeb4 8a48 	vcmp.f32	s16, s16
 8007f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5a:	d60f      	bvs.n	8007f7c <logf+0x38>
 8007f5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f64:	dc0a      	bgt.n	8007f7c <logf+0x38>
 8007f66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f6e:	d108      	bne.n	8007f82 <logf+0x3e>
 8007f70:	f7ff fb66 	bl	8007640 <__errno>
 8007f74:	2322      	movs	r3, #34	@ 0x22
 8007f76:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007f98 <logf+0x54>
 8007f7a:	6003      	str	r3, [r0, #0]
 8007f7c:	ecbd 8b02 	vpop	{d8}
 8007f80:	bd08      	pop	{r3, pc}
 8007f82:	f7ff fb5d 	bl	8007640 <__errno>
 8007f86:	ecbd 8b02 	vpop	{d8}
 8007f8a:	2321      	movs	r3, #33	@ 0x21
 8007f8c:	6003      	str	r3, [r0, #0]
 8007f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f92:	4802      	ldr	r0, [pc, #8]	@ (8007f9c <logf+0x58>)
 8007f94:	f000 b804 	b.w	8007fa0 <nanf>
 8007f98:	ff800000 	.word	0xff800000
 8007f9c:	0801b3f9 	.word	0x0801b3f9

08007fa0 <nanf>:
 8007fa0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007fa8 <nanf+0x8>
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	7fc00000 	.word	0x7fc00000

08007fac <__ieee754_logf>:
 8007fac:	ee10 3a10 	vmov	r3, s0
 8007fb0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8007fb4:	d106      	bne.n	8007fc4 <__ieee754_logf+0x18>
 8007fb6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8008150 <__ieee754_logf+0x1a4>
 8007fba:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8008154 <__ieee754_logf+0x1a8>
 8007fbe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007fc2:	4770      	bx	lr
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	da02      	bge.n	8007fd0 <__ieee754_logf+0x24>
 8007fca:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007fce:	e7f4      	b.n	8007fba <__ieee754_logf+0xe>
 8007fd0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007fd4:	db02      	blt.n	8007fdc <__ieee754_logf+0x30>
 8007fd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007fda:	4770      	bx	lr
 8007fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007fe0:	bfb8      	it	lt
 8007fe2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8008158 <__ieee754_logf+0x1ac>
 8007fe6:	485d      	ldr	r0, [pc, #372]	@ (800815c <__ieee754_logf+0x1b0>)
 8007fe8:	bfbe      	ittt	lt
 8007fea:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007fee:	f06f 0118 	mvnlt.w	r1, #24
 8007ff2:	ee17 2a90 	vmovlt	r2, s15
 8007ff6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8007ffa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007ffe:	4410      	add	r0, r2
 8008000:	bfa8      	it	ge
 8008002:	2100      	movge	r1, #0
 8008004:	3b7f      	subs	r3, #127	@ 0x7f
 8008006:	440b      	add	r3, r1
 8008008:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800800c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8008010:	4311      	orrs	r1, r2
 8008012:	ee00 1a10 	vmov	s0, r1
 8008016:	4952      	ldr	r1, [pc, #328]	@ (8008160 <__ieee754_logf+0x1b4>)
 8008018:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800801c:	f102 000f 	add.w	r0, r2, #15
 8008020:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008024:	4001      	ands	r1, r0
 8008026:	ee30 0a67 	vsub.f32	s0, s0, s15
 800802a:	bb89      	cbnz	r1, 8008090 <__ieee754_logf+0xe4>
 800802c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8008030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008034:	d10f      	bne.n	8008056 <__ieee754_logf+0xaa>
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 8087 	beq.w	800814a <__ieee754_logf+0x19e>
 800803c:	ee07 3a90 	vmov	s15, r3
 8008040:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8008164 <__ieee754_logf+0x1b8>
 8008044:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8008168 <__ieee754_logf+0x1bc>
 8008048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800804c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008050:	eea7 0a87 	vfma.f32	s0, s15, s14
 8008054:	4770      	bx	lr
 8008056:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800816c <__ieee754_logf+0x1c0>
 800805a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800805e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8008062:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800806a:	b913      	cbnz	r3, 8008072 <__ieee754_logf+0xc6>
 800806c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008070:	4770      	bx	lr
 8008072:	ee07 3a90 	vmov	s15, r3
 8008076:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008164 <__ieee754_logf+0x1b8>
 800807a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800807e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008082:	ee37 0a40 	vsub.f32	s0, s14, s0
 8008086:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008168 <__ieee754_logf+0x1bc>
 800808a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800808e:	4770      	bx	lr
 8008090:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8008094:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008098:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8008170 <__ieee754_logf+0x1c4>
 800809c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8008174 <__ieee754_logf+0x1c8>
 80080a0:	4935      	ldr	r1, [pc, #212]	@ (8008178 <__ieee754_logf+0x1cc>)
 80080a2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80080a6:	4411      	add	r1, r2
 80080a8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80080ac:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80080b0:	430a      	orrs	r2, r1
 80080b2:	2a00      	cmp	r2, #0
 80080b4:	ee07 3a90 	vmov	s15, r3
 80080b8:	ee26 5a06 	vmul.f32	s10, s12, s12
 80080bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80080c0:	ee25 7a05 	vmul.f32	s14, s10, s10
 80080c4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800817c <__ieee754_logf+0x1d0>
 80080c8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80080cc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008180 <__ieee754_logf+0x1d4>
 80080d0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80080d4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8008184 <__ieee754_logf+0x1d8>
 80080d8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80080dc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8008188 <__ieee754_logf+0x1dc>
 80080e0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80080e4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800818c <__ieee754_logf+0x1e0>
 80080e8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80080ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 80080f0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80080f4:	dd1a      	ble.n	800812c <__ieee754_logf+0x180>
 80080f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80080fa:	ee20 7a07 	vmul.f32	s14, s0, s14
 80080fe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8008102:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008106:	ee67 7a86 	vmul.f32	s15, s15, s12
 800810a:	b913      	cbnz	r3, 8008112 <__ieee754_logf+0x166>
 800810c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008110:	e7ac      	b.n	800806c <__ieee754_logf+0xc0>
 8008112:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8008164 <__ieee754_logf+0x1b8>
 8008116:	eee6 7a86 	vfma.f32	s15, s13, s12
 800811a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800811e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8008122:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8008168 <__ieee754_logf+0x1bc>
 8008126:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800812a:	4770      	bx	lr
 800812c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008130:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008134:	b913      	cbnz	r3, 800813c <__ieee754_logf+0x190>
 8008136:	ee30 0a67 	vsub.f32	s0, s0, s15
 800813a:	4770      	bx	lr
 800813c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8008164 <__ieee754_logf+0x1b8>
 8008140:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8008144:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008148:	e7eb      	b.n	8008122 <__ieee754_logf+0x176>
 800814a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8008154 <__ieee754_logf+0x1a8>
 800814e:	4770      	bx	lr
 8008150:	cc000000 	.word	0xcc000000
 8008154:	00000000 	.word	0x00000000
 8008158:	4c000000 	.word	0x4c000000
 800815c:	004afb20 	.word	0x004afb20
 8008160:	007ffff0 	.word	0x007ffff0
 8008164:	3717f7d1 	.word	0x3717f7d1
 8008168:	3f317180 	.word	0x3f317180
 800816c:	3eaaaaab 	.word	0x3eaaaaab
 8008170:	3e1cd04f 	.word	0x3e1cd04f
 8008174:	3e178897 	.word	0x3e178897
 8008178:	ffcf5c30 	.word	0xffcf5c30
 800817c:	3e638e29 	.word	0x3e638e29
 8008180:	3ecccccd 	.word	0x3ecccccd
 8008184:	3e3a3325 	.word	0x3e3a3325
 8008188:	3e924925 	.word	0x3e924925
 800818c:	3f2aaaab 	.word	0x3f2aaaab

08008190 <_init>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	bf00      	nop
 8008194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008196:	bc08      	pop	{r3}
 8008198:	469e      	mov	lr, r3
 800819a:	4770      	bx	lr

0800819c <_fini>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	bf00      	nop
 80081a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a2:	bc08      	pop	{r3}
 80081a4:	469e      	mov	lr, r3
 80081a6:	4770      	bx	lr
