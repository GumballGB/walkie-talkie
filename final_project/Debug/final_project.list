
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006acc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006c88  08006c88  00007c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf8  08006cf8  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006cf8  08006cf8  00007cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d00  08006d00  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d00  08006d00  00007d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d04  08006d04  00007d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006d08  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040cd0  2000000c  08006d14  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20040cdc  08006d14  00008cdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4bb  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eb3  00000000  00000000  000224f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  000253b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001223  00000000  00000000  00026ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c54d  00000000  00000000  00027ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b28c  00000000  00000000  00054230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011297b  00000000  00000000  0006f4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006380  00000000  00000000  00181e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001881fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006c70 	.word	0x08006c70

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08006c70 	.word	0x08006c70

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_GPIO_EXTI_Callback>:




//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af02      	add	r7, sp, #8
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]


	if (GPIO_Pin == B_BUTTON_Pin) {
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000538:	f040 808a 	bne.w	8000650 <HAL_GPIO_EXTI_Callback+0x128>


        // Check if the button is pressed
        if (HAL_GPIO_ReadPin(B_BUTTON_GPIO_Port, B_BUTTON_Pin) == GPIO_PIN_SET) {
 800053c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000540:	4845      	ldr	r0, [pc, #276]	@ (8000658 <HAL_GPIO_EXTI_Callback+0x130>)
 8000542:	f002 fd4b 	bl	8002fdc <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	f040 8081 	bne.w	8000650 <HAL_GPIO_EXTI_Callback+0x128>

            if (isRecording) {
 800054e:	4b43      	ldr	r3, [pc, #268]	@ (800065c <HAL_GPIO_EXTI_Callback+0x134>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d042      	beq.n	80005dc <HAL_GPIO_EXTI_Callback+0xb4>
                // Stop the current recording before starting a new one
                HAL_DFSDM_FilterRegularStop(&hdfsdm1_filter0);
 8000556:	4842      	ldr	r0, [pc, #264]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 8000558:	f001 feef 	bl	800233a <HAL_DFSDM_FilterRegularStop>

                HAL_TIM_Base_Stop(&htim3); //stop the timer already
 800055c:	4841      	ldr	r0, [pc, #260]	@ (8000664 <HAL_GPIO_EXTI_Callback+0x13c>)
 800055e:	f004 fc2b 	bl	8004db8 <HAL_TIM_Base_Stop>
                HAL_TIM_Base_Stop(&htim2);
 8000562:	4841      	ldr	r0, [pc, #260]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x140>)
 8000564:	f004 fc28 	bl	8004db8 <HAL_TIM_Base_Stop>

                isRecording = 0;
 8000568:	4b3c      	ldr	r3, [pc, #240]	@ (800065c <HAL_GPIO_EXTI_Callback+0x134>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]

                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000574:	483d      	ldr	r0, [pc, #244]	@ (800066c <HAL_GPIO_EXTI_Callback+0x144>)
 8000576:	f002 fd49 	bl	800300c <HAL_GPIO_WritePin>


                // Process recorded data
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 800057a:	2300      	movs	r3, #0
 800057c:	82fb      	strh	r3, [r7, #22]
 800057e:	e017      	b.n	80005b0 <HAL_GPIO_EXTI_Callback+0x88>
                  int32_t sample24 = RecBuf[i] >> 8;      // Convert to 24-bit signed
 8000580:	8afb      	ldrh	r3, [r7, #22]
 8000582:	4a3b      	ldr	r2, [pc, #236]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x148>)
 8000584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000588:	121b      	asrs	r3, r3, #8
 800058a:	613b      	str	r3, [r7, #16]
                  int16_t sample12 = RecBuf[i] >> 12;      // Extract top 12 bits
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	4a38      	ldr	r2, [pc, #224]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x148>)
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	131b      	asrs	r3, r3, #12
 8000596:	81fb      	strh	r3, [r7, #14]
                  uint16_t dacValue = (uint16_t)((sample12 + 2048)); // Convert signed to unsigned
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800059e:	81bb      	strh	r3, [r7, #12]
                  speakerWave[i] = dacValue;
 80005a0:	8afb      	ldrh	r3, [r7, #22]
 80005a2:	4934      	ldr	r1, [pc, #208]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x14c>)
 80005a4:	89ba      	ldrh	r2, [r7, #12]
 80005a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 80005aa:	8afb      	ldrh	r3, [r7, #22]
 80005ac:	3301      	adds	r3, #1
 80005ae:	82fb      	strh	r3, [r7, #22]
 80005b0:	8afb      	ldrh	r3, [r7, #22]
 80005b2:	f64a 4243 	movw	r2, #44099	@ 0xac43
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d9e2      	bls.n	8000580 <HAL_GPIO_EXTI_Callback+0x58>



                // Start playback after recording completes

                HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Ensure DAC DMA is stopped first
 80005ba:	2100      	movs	r1, #0
 80005bc:	482e      	ldr	r0, [pc, #184]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x150>)
 80005be:	f001 faa3 	bl	8001b08 <HAL_DAC_Stop_DMA>

                HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)speakerWave, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 80005c2:	2300      	movs	r3, #0
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	f64a 4344 	movw	r3, #44100	@ 0xac44
 80005ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x14c>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	482a      	ldr	r0, [pc, #168]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x150>)
 80005d0:	f001 f9ce 	bl	8001970 <HAL_DAC_Start_DMA>
                HAL_TIM_Base_Start(&htim2); // Start DAC trigger timer
 80005d4:	4824      	ldr	r0, [pc, #144]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x140>)
 80005d6:	f004 fb87 	bl	8004ce8 <HAL_TIM_Base_Start>
            }
        }


	}
}
 80005da:	e039      	b.n	8000650 <HAL_GPIO_EXTI_Callback+0x128>
                HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Stop any ongoing playback
 80005dc:	2100      	movs	r1, #0
 80005de:	4826      	ldr	r0, [pc, #152]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x150>)
 80005e0:	f001 fa92 	bl	8001b08 <HAL_DAC_Stop_DMA>
                HAL_TIM_Base_Stop(&htim2);
 80005e4:	4820      	ldr	r0, [pc, #128]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x140>)
 80005e6:	f004 fbe7 	bl	8004db8 <HAL_TIM_Base_Stop>
                HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 80005ea:	481d      	ldr	r0, [pc, #116]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 80005ec:	f001 ff42 	bl	8002474 <HAL_DFSDM_FilterRegularStop_DMA>
                while (HAL_DFSDM_FilterGetState(&hdfsdm1_filter0) != HAL_DFSDM_FILTER_STATE_READY);
 80005f0:	bf00      	nop
 80005f2:	481b      	ldr	r0, [pc, #108]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 80005f4:	f001 ff68 	bl	80024c8 <HAL_DFSDM_FilterGetState>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d1f9      	bne.n	80005f2 <HAL_GPIO_EXTI_Callback+0xca>
                memset(speakerWave, 2048, sizeof(speakerWave));  // Reset to silence (mid-scale)
 80005fe:	4a1f      	ldr	r2, [pc, #124]	@ (800067c <HAL_GPIO_EXTI_Callback+0x154>)
 8000600:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000604:	481b      	ldr	r0, [pc, #108]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000606:	f006 fb07 	bl	8006c18 <memset>
                HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE);
 800060a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800060e:	4918      	ldr	r1, [pc, #96]	@ (8000670 <HAL_GPIO_EXTI_Callback+0x148>)
 8000610:	4813      	ldr	r0, [pc, #76]	@ (8000660 <HAL_GPIO_EXTI_Callback+0x138>)
 8000612:	f001 fead 	bl	8002370 <HAL_DFSDM_FilterRegularStart_DMA>
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <HAL_GPIO_EXTI_Callback+0x144>)
 800061e:	f002 fcf5 	bl	800300c <HAL_GPIO_WritePin>
                HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)speakerWave, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 8000622:	2300      	movs	r3, #0
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800062a:	4a12      	ldr	r2, [pc, #72]	@ (8000674 <HAL_GPIO_EXTI_Callback+0x14c>)
 800062c:	2100      	movs	r1, #0
 800062e:	4812      	ldr	r0, [pc, #72]	@ (8000678 <HAL_GPIO_EXTI_Callback+0x150>)
 8000630:	f001 f99e 	bl	8001970 <HAL_DAC_Start_DMA>
                HAL_TIM_Base_Start_IT(&htim3); // Start recording timer, 5 seconds
 8000634:	480b      	ldr	r0, [pc, #44]	@ (8000664 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000636:	f004 fbe7 	bl	8004e08 <HAL_TIM_Base_Start_IT>
                HAL_TIM_Base_Start_IT(&htim2);
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <HAL_GPIO_EXTI_Callback+0x140>)
 800063c:	f004 fbe4 	bl	8004e08 <HAL_TIM_Base_Start_IT>
                recordingStartTime = HAL_GetTick();
 8000640:	f000 ffe0 	bl	8001604 <HAL_GetTick>
 8000644:	4603      	mov	r3, r0
 8000646:	4a0e      	ldr	r2, [pc, #56]	@ (8000680 <HAL_GPIO_EXTI_Callback+0x158>)
 8000648:	6013      	str	r3, [r2, #0]
                isRecording = 1;
 800064a:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_GPIO_EXTI_Callback+0x134>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	48000800 	.word	0x48000800
 800065c:	2002b420 	.word	0x2002b420
 8000660:	2000009c 	.word	0x2000009c
 8000664:	20000228 	.word	0x20000228
 8000668:	200001dc 	.word	0x200001dc
 800066c:	48000400 	.word	0x48000400
 8000670:	20000308 	.word	0x20000308
 8000674:	2002b424 	.word	0x2002b424
 8000678:	20000028 	.word	0x20000028
 800067c:	00015888 	.word	0x00015888
 8000680:	2002b41c 	.word	0x2002b41c

08000684 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM3) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d13c      	bne.n	8000710 <HAL_TIM_PeriodElapsedCallback+0x8c>
		// Check if 5 seconds have passed
		if (isRecording && (HAL_GetTick() - recordingStartTime) >= RECORDING_TIME) {
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d038      	beq.n	8000710 <HAL_TIM_PeriodElapsedCallback+0x8c>
 800069e:	f000 ffb1 	bl	8001604 <HAL_GetTick>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d92e      	bls.n	8000710 <HAL_TIM_PeriodElapsedCallback+0x8c>
			// Stop recording after 5 seconds
			HAL_DFSDM_FilterRegularStop(&hdfsdm1_filter0);
 80006b2:	481c      	ldr	r0, [pc, #112]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006b4:	f001 fe41 	bl	800233a <HAL_DFSDM_FilterRegularStop>
			// Toggle LED to indicate recording has stopped
			HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006be:	481a      	ldr	r0, [pc, #104]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006c0:	f002 fca4 	bl	800300c <HAL_GPIO_WritePin>
			isRecording = 0;
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]


            // Process recorded data
            for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	82fb      	strh	r3, [r7, #22]
 80006ce:	e017      	b.n	8000700 <HAL_TIM_PeriodElapsedCallback+0x7c>
              int32_t sample24 = RecBuf[i] >> 8;      // Convert to 24-bit signed
 80006d0:	8afb      	ldrh	r3, [r7, #22]
 80006d2:	4a16      	ldr	r2, [pc, #88]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d8:	121b      	asrs	r3, r3, #8
 80006da:	613b      	str	r3, [r7, #16]
              int16_t sample12 = RecBuf[i] >> 12;      // Extract top 12 bits
 80006dc:	8afb      	ldrh	r3, [r7, #22]
 80006de:	4a13      	ldr	r2, [pc, #76]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80006e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e4:	131b      	asrs	r3, r3, #12
 80006e6:	81fb      	strh	r3, [r7, #14]
              uint16_t dacValue = (uint16_t)((sample12 + 2048)); // Convert signed to unsigned
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80006ee:	81bb      	strh	r3, [r7, #12]
              speakerWave[i] = dacValue;
 80006f0:	8afb      	ldrh	r3, [r7, #22]
 80006f2:	490f      	ldr	r1, [pc, #60]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80006f4:	89ba      	ldrh	r2, [r7, #12]
 80006f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 80006fa:	8afb      	ldrh	r3, [r7, #22]
 80006fc:	3301      	adds	r3, #1
 80006fe:	82fb      	strh	r3, [r7, #22]
 8000700:	8afb      	ldrh	r3, [r7, #22]
 8000702:	f64a 4243 	movw	r2, #44099	@ 0xac43
 8000706:	4293      	cmp	r3, r2
 8000708:	d9e2      	bls.n	80006d0 <HAL_TIM_PeriodElapsedCallback+0x4c>
            }

            HAL_TIM_Base_Stop(&htim3);
 800070a:	480a      	ldr	r0, [pc, #40]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800070c:	f004 fb54 	bl	8004db8 <HAL_TIM_Base_Stop>


		}
	}

}
 8000710:	bf00      	nop
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40000400 	.word	0x40000400
 800071c:	2002b420 	.word	0x2002b420
 8000720:	2002b41c 	.word	0x2002b41c
 8000724:	2000009c 	.word	0x2000009c
 8000728:	48000400 	.word	0x48000400
 800072c:	20000308 	.word	0x20000308
 8000730:	2002b424 	.word	0x2002b424
 8000734:	20000228 	.word	0x20000228

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fef9 	bl	8001532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f81e 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 fac0 	bl	8000cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000748:	f000 fa8c 	bl	8000c64 <MX_DMA_Init>
  MX_I2C2_Init();
 800074c:	f000 f910 	bl	8000970 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000750:	f000 fa3c 	bl	8000bcc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000754:	f000 f94c 	bl	80009f0 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000758:	f000 f8a4 	bl	80008a4 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 800075c:	f000 f862 	bl	8000824 <MX_DAC1_Init>
  MX_TIM3_Init();
 8000760:	f000 f9bc 	bl	8000adc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  //HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) speakerWave, SAMPLE_COUNT, DAC_ALIGN_12B_R);

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC channel 1
 8000764:	2100      	movs	r1, #0
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <main+0x40>)
 8000768:	f001 f8af 	bl	80018ca <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <main+0x44>)
 800076e:	f004 fb4b 	bl	8004e08 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <main+0x3a>
 8000776:	bf00      	nop
 8000778:	20000028 	.word	0x20000028
 800077c:	200001dc 	.word	0x200001dc

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	@ 0x58
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2244      	movs	r2, #68	@ 0x44
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f006 fa42 	bl	8006c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007a6:	f002 fdb3 	bl	8003310 <HAL_PWREx_ControlVoltageScaling>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007b0:	f000 fb1a 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007b4:	2310      	movs	r3, #16
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007c0:	2360      	movs	r3, #96	@ 0x60
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007c8:	2301      	movs	r3, #1
 80007ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007d0:	2328      	movs	r3, #40	@ 0x28
 80007d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fe37 	bl	8003458 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007f0:	f000 fafa 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2303      	movs	r3, #3
 80007fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	2103      	movs	r1, #3
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fa3d 	bl	8003c8c <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000818:	f000 fae6 	bl	8000de8 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3758      	adds	r7, #88	@ 0x58
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	@ 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2228      	movs	r2, #40	@ 0x28
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f006 f9f1 	bl	8006c18 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_DAC1_Init+0x78>)
 8000838:	4a19      	ldr	r2, [pc, #100]	@ (80008a0 <MX_DAC1_Init+0x7c>)
 800083a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800083c:	4817      	ldr	r0, [pc, #92]	@ (800089c <MX_DAC1_Init+0x78>)
 800083e:	f001 f822 	bl	8001886 <HAL_DAC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000848:	f000 face 	bl	8000de8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000850:	230a      	movs	r3, #10
 8000852:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000854:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	4619      	mov	r1, r3
 800086c:	480b      	ldr	r0, [pc, #44]	@ (800089c <MX_DAC1_Init+0x78>)
 800086e:	f001 f9af 	bl	8001bd0 <HAL_DAC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 fab6 	bl	8000de8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2210      	movs	r2, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_DAC1_Init+0x78>)
 8000884:	f001 f9a4 	bl	8001bd0 <HAL_DAC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 faab 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000028 	.word	0x20000028
 80008a0:	40007400 	.word	0x40007400

080008a4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80008a8:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000960 <MX_DFSDM1_Init+0xbc>)
 80008ac:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80008ae:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80008ba:	4b28      	ldr	r3, [pc, #160]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008c0:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008c2:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80008c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 80008c8:	4b24      	ldr	r3, [pc, #144]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008ca:	22fa      	movs	r2, #250	@ 0xfa
 80008cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80008d4:	4821      	ldr	r0, [pc, #132]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 80008d6:	f001 fc11 	bl	80020fc <HAL_DFSDM_FilterInit>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80008e0:	f000 fa82 	bl	8000de8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008e6:	4a20      	ldr	r2, [pc, #128]	@ (8000968 <MX_DFSDM1_Init+0xc4>)
 80008e8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008f8:	2228      	movs	r2, #40	@ 0x28
 80008fa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000916:	2204      	movs	r2, #4
 8000918:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800091a:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000922:	2201      	movs	r2, #1
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000928:	2200      	movs	r2, #0
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800092c:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_DFSDM1_Init+0xc0>)
 8000934:	f001 fb22 	bl	8001f7c <HAL_DFSDM_ChannelInit>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800093e:	f000 fa53 	bl	8000de8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000942:	2201      	movs	r2, #1
 8000944:	4909      	ldr	r1, [pc, #36]	@ (800096c <MX_DFSDM1_Init+0xc8>)
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <MX_DFSDM1_Init+0xb8>)
 8000948:	f001 fcb2 	bl	80022b0 <HAL_DFSDM_FilterConfigRegChannel>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000952:	f000 fa49 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000009c 	.word	0x2000009c
 8000960:	40016100 	.word	0x40016100
 8000964:	200000f0 	.word	0x200000f0
 8000968:	40016040 	.word	0x40016040
 800096c:	00020004 	.word	0x00020004

08000970 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000974:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000976:	4a1c      	ldr	r2, [pc, #112]	@ (80009e8 <MX_I2C2_Init+0x78>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <MX_I2C2_Init+0x74>)
 800097c:	4a1b      	ldr	r2, [pc, #108]	@ (80009ec <MX_I2C2_Init+0x7c>)
 800097e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_I2C2_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000992:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <MX_I2C2_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_I2C2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009aa:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009ac:	f002 fb5e 	bl	800306c <HAL_I2C_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009b6:	f000 fa17 	bl	8000de8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009be:	f002 fbf0 	bl	80031a2 <HAL_I2CEx_ConfigAnalogFilter>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009c8:	f000 fa0e 	bl	8000de8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009cc:	2100      	movs	r1, #0
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_I2C2_Init+0x74>)
 80009d0:	f002 fc32 	bl	8003238 <HAL_I2CEx_ConfigDigitalFilter>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fa05 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000188 	.word	0x20000188
 80009e8:	40005800 	.word	0x40005800
 80009ec:	10d19ce4 	.word	0x10d19ce4

080009f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	@ 0x38
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (SYSTEM_FREQ / SAMPLE_RATE) - 1;
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a38:	f44f 622a 	mov.w	r2, #2720	@ 0xaa0
 8000a3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a4a:	4823      	ldr	r0, [pc, #140]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a4c:	f004 f8f4 	bl	8004c38 <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a56:	f000 f9c7 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a64:	4619      	mov	r1, r3
 8000a66:	481c      	ldr	r0, [pc, #112]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a68:	f004 fcba 	bl	80053e0 <HAL_TIM_ConfigClockSource>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a72:	f000 f9b9 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a76:	4818      	ldr	r0, [pc, #96]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a78:	f004 fa36 	bl	8004ee8 <HAL_TIM_PWM_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a82:	f000 f9b1 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a86:	2320      	movs	r3, #32
 8000a88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4810      	ldr	r0, [pc, #64]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000a96:	f005 f9ab 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000aa0:	f000 f9a2 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa4:	2360      	movs	r3, #96	@ 0x60
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000abc:	f004 fb7c 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ac6:	f000 f98f 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aca:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <MX_TIM2_Init+0xe8>)
 8000acc:	f000 fbde 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	@ 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200001dc 	.word	0x200001dc

08000adc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08e      	sub	sp, #56	@ 0x38
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b10:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc8 <MX_TIM3_Init+0xec>)
 8000b12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b16:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b36:	4823      	ldr	r0, [pc, #140]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b38:	f004 f87e 	bl	8004c38 <HAL_TIM_Base_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000b42:	f000 f951 	bl	8000de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b50:	4619      	mov	r1, r3
 8000b52:	481c      	ldr	r0, [pc, #112]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b54:	f004 fc44 	bl	80053e0 <HAL_TIM_ConfigClockSource>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b5e:	f000 f943 	bl	8000de8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b62:	4818      	ldr	r0, [pc, #96]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b64:	f004 f9c0 	bl	8004ee8 <HAL_TIM_PWM_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b6e:	f000 f93b 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4810      	ldr	r0, [pc, #64]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000b82:	f005 f935 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b8c:	f000 f92c 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b90:	2360      	movs	r3, #96	@ 0x60
 8000b92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4807      	ldr	r0, [pc, #28]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000ba8:	f004 fb06 	bl	80051b8 <HAL_TIM_PWM_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000bb2:	f000 f919 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bb6:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <MX_TIM3_Init+0xe8>)
 8000bb8:	f000 fb68 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000bbc:	bf00      	nop
 8000bbe:	3738      	adds	r7, #56	@ 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000228 	.word	0x20000228
 8000bc8:	40000400 	.word	0x40000400

08000bcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_USART1_UART_Init+0x94>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c16:	f005 f991 	bl	8005f3c <HAL_UART_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 f8e2 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c24:	2100      	movs	r1, #0
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c28:	f005 ff2c 	bl	8006a84 <HAL_UARTEx_SetTxFifoThreshold>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c32:	f000 f8d9 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c36:	2100      	movs	r1, #0
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c3a:	f005 ff61 	bl	8006b00 <HAL_UARTEx_SetRxFifoThreshold>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c44:	f000 f8d0 	bl	8000de8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_USART1_UART_Init+0x90>)
 8000c4a:	f005 fee2 	bl	8006a12 <HAL_UARTEx_DisableFifoMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c54:	f000 f8c8 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000274 	.word	0x20000274
 8000c60:	40013800 	.word	0x40013800

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <MX_DMA_Init+0x60>)
 8000c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6e:	4a15      	ldr	r2, [pc, #84]	@ (8000cc4 <MX_DMA_Init+0x60>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c76:	4b13      	ldr	r3, [pc, #76]	@ (8000cc4 <MX_DMA_Init+0x60>)
 8000c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <MX_DMA_Init+0x60>)
 8000c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <MX_DMA_Init+0x60>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <MX_DMA_Init+0x60>)
 8000c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	200b      	movs	r0, #11
 8000ca0:	f000 fdbb 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ca4:	200b      	movs	r0, #11
 8000ca6:	f000 fdd4 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	200c      	movs	r0, #12
 8000cb0:	f000 fdb3 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cb4:	200c      	movs	r0, #12
 8000cb6:	f000 fdcc 	bl	8001852 <HAL_NVIC_EnableIRQ>

}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	@ 0x28
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cde:	4b2f      	ldr	r3, [pc, #188]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000ce4:	f043 0310 	orr.w	r3, r3, #16
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4b2c      	ldr	r3, [pc, #176]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0310 	and.w	r3, r3, #16
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b29      	ldr	r3, [pc, #164]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a28      	ldr	r2, [pc, #160]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b26      	ldr	r3, [pc, #152]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b23      	ldr	r3, [pc, #140]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a22      	ldr	r2, [pc, #136]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b20      	ldr	r3, [pc, #128]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b1d      	ldr	r3, [pc, #116]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d44:	4816      	ldr	r0, [pc, #88]	@ (8000da0 <MX_GPIO_Init+0xd8>)
 8000d46:	f002 f961 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8000d4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4810      	ldr	r0, [pc, #64]	@ (8000da4 <MX_GPIO_Init+0xdc>)
 8000d62:	f001 ffa9 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 8000d66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4808      	ldr	r0, [pc, #32]	@ (8000da0 <MX_GPIO_Init+0xd8>)
 8000d80:	f001 ff9a 	bl	8002cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2028      	movs	r0, #40	@ 0x28
 8000d8a:	f000 fd46 	bl	800181a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d8e:	2028      	movs	r0, #40	@ 0x28
 8000d90:	f000 fd5f 	bl	8001852 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	@ 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48000800 	.word	0x48000800

08000da8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

	DmaRecHalfBuffCplt=1;
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]

}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	2002b418 	.word	0x2002b418

08000dc8 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

	DmaRecBuffCplt=1;
 8000dd0:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	701a      	strb	r2, [r3, #0]


}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2002b419 	.word	0x2002b419

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <HAL_MspInit+0x44>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e16:	4a08      	ldr	r2, [pc, #32]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2b      	ldr	r2, [pc, #172]	@ (8000f08 <HAL_DAC_MspInit+0xcc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d14f      	bne.n	8000efe <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <HAL_DAC_MspInit+0xd0>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e62:	4a2a      	ldr	r2, [pc, #168]	@ (8000f0c <HAL_DAC_MspInit+0xd0>)
 8000e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6a:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <HAL_DAC_MspInit+0xd0>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b25      	ldr	r3, [pc, #148]	@ (8000f0c <HAL_DAC_MspInit+0xd0>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a24      	ldr	r2, [pc, #144]	@ (8000f0c <HAL_DAC_MspInit+0xd0>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b22      	ldr	r3, [pc, #136]	@ (8000f0c <HAL_DAC_MspInit+0xd0>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e8e:	2330      	movs	r3, #48	@ 0x30
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f001 ff08 	bl	8002cb8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8000f14 <HAL_DAC_MspInit+0xd8>)
 8000eac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000eb0:	2206      	movs	r2, #6
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000eb6:	2210      	movs	r2, #16
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ec2:	2280      	movs	r2, #128	@ 0x80
 8000ec4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ecc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ed0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ed4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ed8:	2220      	movs	r2, #32
 8000eda:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000ee2:	480b      	ldr	r0, [pc, #44]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ee4:	f001 fc1a 	bl	800271c <HAL_DMA_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000eee:	f7ff ff7b 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <HAL_DAC_MspInit+0xd4>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40007400 	.word	0x40007400
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	2000003c 	.word	0x2000003c
 8000f14:	4002001c 	.word	0x4002001c

08000f18 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ae      	sub	sp, #184	@ 0xb8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2294      	movs	r2, #148	@ 0x94
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fe6d 	bl	8006c18 <memset>
  if(DFSDM1_Init == 0)
 8000f3e:	4b45      	ldr	r3, [pc, #276]	@ (8001054 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d14b      	bne.n	8000fde <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 f956 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000f62:	f7ff ff41 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000f66:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <HAL_DFSDM_FilterMspInit+0x140>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001058 <HAL_DFSDM_FilterMspInit+0x140>)
 8000f6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000f70:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <HAL_DFSDM_FilterMspInit+0x140>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d10b      	bne.n	8000f90 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f78:	4b38      	ldr	r3, [pc, #224]	@ (800105c <HAL_DFSDM_FilterMspInit+0x144>)
 8000f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7c:	4a37      	ldr	r2, [pc, #220]	@ (800105c <HAL_DFSDM_FilterMspInit+0x144>)
 8000f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f84:	4b35      	ldr	r3, [pc, #212]	@ (800105c <HAL_DFSDM_FilterMspInit+0x144>)
 8000f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	4b32      	ldr	r3, [pc, #200]	@ (800105c <HAL_DFSDM_FilterMspInit+0x144>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	4a31      	ldr	r2, [pc, #196]	@ (800105c <HAL_DFSDM_FilterMspInit+0x144>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	@ (800105c <HAL_DFSDM_FilterMspInit+0x144>)
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000fa8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000fac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4824      	ldr	r0, [pc, #144]	@ (8001060 <HAL_DFSDM_FilterMspInit+0x148>)
 8000fd0:	f001 fe72 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <HAL_DFSDM_FilterMspInit+0x13c>)
 8000fdc:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a20      	ldr	r2, [pc, #128]	@ (8001064 <HAL_DFSDM_FilterMspInit+0x14c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d130      	bne.n	800104a <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8000fea:	4a20      	ldr	r2, [pc, #128]	@ (800106c <HAL_DFSDM_FilterMspInit+0x154>)
 8000fec:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ff0:	2256      	movs	r2, #86	@ 0x56
 8000ff2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001002:	2280      	movs	r2, #128	@ 0x80
 8001004:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100c:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001014:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001018:	2220      	movs	r2, #32
 800101a:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001022:	4811      	ldr	r0, [pc, #68]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001024:	f001 fb7a 	bl	800271c <HAL_DMA_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 800102e:	f7ff fedb 	bl	8000de8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a0c      	ldr	r2, [pc, #48]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a09      	ldr	r2, [pc, #36]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_DFSDM_FilterMspInit+0x150>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 800104a:	bf00      	nop
 800104c:	37b8      	adds	r7, #184	@ 0xb8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20040cb0 	.word	0x20040cb0
 8001058:	20040cac 	.word	0x20040cac
 800105c:	40021000 	.word	0x40021000
 8001060:	48001000 	.word	0x48001000
 8001064:	40016100 	.word	0x40016100
 8001068:	20000128 	.word	0x20000128
 800106c:	40020008 	.word	0x40020008

08001070 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0ae      	sub	sp, #184	@ 0xb8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2294      	movs	r2, #148	@ 0x94
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f005 fdc1 	bl	8006c18 <memset>
  if(DFSDM1_Init == 0)
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d14b      	bne.n	8001136 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800109e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4618      	mov	r0, r3
 80010b0:	f003 f8aa 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010ba:	f7ff fe95 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80010be:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80010c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10b      	bne.n	80010e8 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80010d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80010d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010da:	6613      	str	r3, [r2, #96]	@ 0x60
 80010dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ec:	4a16      	ldr	r2, [pc, #88]	@ (8001148 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001100:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800111a:	2306      	movs	r3, #6
 800111c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001120:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001124:	4619      	mov	r1, r3
 8001126:	4809      	ldr	r0, [pc, #36]	@ (800114c <HAL_DFSDM_ChannelMspInit+0xdc>)
 8001128:	f001 fdc6 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800112c:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4a03      	ldr	r2, [pc, #12]	@ (8001140 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001134:	6013      	str	r3, [r2, #0]
  }

}
 8001136:	bf00      	nop
 8001138:	37b8      	adds	r7, #184	@ 0xb8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20040cb0 	.word	0x20040cb0
 8001144:	20040cac 	.word	0x20040cac
 8001148:	40021000 	.word	0x40021000
 800114c:	48001000 	.word	0x48001000

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ae      	sub	sp, #184	@ 0xb8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2294      	movs	r2, #148	@ 0x94
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f005 fd51 	bl	8006c18 <memset>
  if(hi2c->Instance==I2C2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <HAL_I2C_MspInit+0xb0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d13b      	bne.n	80011f8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001184:	2300      	movs	r3, #0
 8001186:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f003 f83b 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001198:	f7ff fe26 	bl	8000de8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <HAL_I2C_MspInit+0xb4>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	4a18      	ldr	r2, [pc, #96]	@ (8001204 <HAL_I2C_MspInit+0xb4>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <HAL_I2C_MspInit+0xb4>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011ce:	2304      	movs	r3, #4
 80011d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011d8:	4619      	mov	r1, r3
 80011da:	480b      	ldr	r0, [pc, #44]	@ (8001208 <HAL_I2C_MspInit+0xb8>)
 80011dc:	f001 fd6c 	bl	8002cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_I2C_MspInit+0xb4>)
 80011ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80011f8:	bf00      	nop
 80011fa:	37b8      	adds	r7, #184	@ 0xb8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005800 	.word	0x40005800
 8001204:	40021000 	.word	0x40021000
 8001208:	48000400 	.word	0x48000400

0800120c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800121c:	d114      	bne.n	8001248 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <HAL_TIM_Base_MspInit+0x78>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <HAL_TIM_Base_MspInit+0x78>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6593      	str	r3, [r2, #88]	@ 0x58
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <HAL_TIM_Base_MspInit+0x78>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	201c      	movs	r0, #28
 800123c:	f000 faed 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001240:	201c      	movs	r0, #28
 8001242:	f000 fb06 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001246:	e018      	b.n	800127a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_TIM_Base_MspInit+0x7c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d113      	bne.n	800127a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <HAL_TIM_Base_MspInit+0x78>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <HAL_TIM_Base_MspInit+0x78>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <HAL_TIM_Base_MspInit+0x78>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	201d      	movs	r0, #29
 8001270:	f000 fad3 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001274:	201d      	movs	r0, #29
 8001276:	f000 faec 	bl	8001852 <HAL_NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	40000400 	.word	0x40000400

0800128c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ac:	d11d      	bne.n	80012ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <HAL_TIM_MspPostInit+0xa8>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <HAL_TIM_MspPostInit+0xa8>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <HAL_TIM_MspPostInit+0xa8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012c6:	2301      	movs	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d6:	2301      	movs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012e4:	f001 fce8 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012e8:	e020      	b.n	800132c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <HAL_TIM_MspPostInit+0xac>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d11b      	bne.n	800132c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <HAL_TIM_MspPostInit+0xa8>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001334 <HAL_TIM_MspPostInit+0xa8>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <HAL_TIM_MspPostInit+0xa8>)
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800130c:	2310      	movs	r3, #16
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800131c:	2302      	movs	r3, #2
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	@ (800133c <HAL_TIM_MspPostInit+0xb0>)
 8001328:	f001 fcc6 	bl	8002cb8 <HAL_GPIO_Init>
}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000
 8001338:	40000400 	.word	0x40000400
 800133c:	48001000 	.word	0x48001000

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ae      	sub	sp, #184	@ 0xb8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	2294      	movs	r2, #148	@ 0x94
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fc59 	bl	8006c18 <memset>
  if(huart->Instance==USART1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <HAL_UART_MspInit+0xb0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d13a      	bne.n	80013e6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001370:	2301      	movs	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001374:	2300      	movs	r3, #0
 8001376:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4618      	mov	r0, r3
 800137e:	f002 ff43 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001388:	f7ff fd2e 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_UART_MspInit+0xb4>)
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	4a18      	ldr	r2, [pc, #96]	@ (80013f4 <HAL_UART_MspInit+0xb4>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001396:	6613      	str	r3, [r2, #96]	@ 0x60
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <HAL_UART_MspInit+0xb4>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800139c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <HAL_UART_MspInit+0xb4>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <HAL_UART_MspInit+0xb4>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_UART_MspInit+0xb4>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013bc:	23c0      	movs	r3, #192	@ 0xc0
 80013be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013d4:	2307      	movs	r3, #7
 80013d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013da:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <HAL_UART_MspInit+0xb8>)
 80013e2:	f001 fc69 	bl	8002cb8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80013e6:	bf00      	nop
 80013e8:	37b8      	adds	r7, #184	@ 0xb8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000400 	.word	0x48000400

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f000 f8c3 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <DMA1_Channel1_IRQHandler+0x10>)
 8001462:	f001 fada 	bl	8002a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000128 	.word	0x20000128

08001470 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <DMA1_Channel2_IRQHandler+0x10>)
 8001476:	f001 fad0 	bl	8002a1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000003c 	.word	0x2000003c

08001484 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <TIM2_IRQHandler+0x10>)
 800148a:	f003 fd8e 	bl	8004faa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001dc 	.word	0x200001dc

08001498 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800149c:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <TIM3_IRQHandler+0x10>)
 800149e:	f003 fd84 	bl	8004faa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000228 	.word	0x20000228

080014ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 80014b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014b4:	f001 fdc2 	bl	800303c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <SystemInit+0x20>)
 80014c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <SystemInit+0x20>)
 80014c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001518 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e4:	f7ff ffea 	bl	80014bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <LoopForever+0x6>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	@ (8001520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <LoopForever+0xe>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	@ (800152c <LoopForever+0x16>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150e:	f005 fb8b 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001512:	f7ff f911 	bl	8000738 <main>

08001516 <LoopForever>:

LoopForever:
    b LoopForever
 8001516:	e7fe      	b.n	8001516 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001518:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001524:	08006d08 	.word	0x08006d08
  ldr r2, =_sbss
 8001528:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800152c:	20040cdc 	.word	0x20040cdc

08001530 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_IRQHandler>

08001532 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 f961 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001542:	200f      	movs	r0, #15
 8001544:	f000 f80e 	bl	8001564 <HAL_InitTick>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e001      	b.n	8001558 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001554:	f7ff fc4e 	bl	8000df4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001558:	79fb      	ldrb	r3, [r7, #7]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <HAL_InitTick+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d023      	beq.n	80015c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001578:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_InitTick+0x70>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_InitTick+0x6c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001586:	fbb3 f3f1 	udiv	r3, r3, r1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f96d 	bl	800186e <HAL_SYSTICK_Config>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10f      	bne.n	80015ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d809      	bhi.n	80015b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f937 	bl	800181a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_InitTick+0x74>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e007      	b.n	80015c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
 80015b8:	e004      	b.n	80015c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e001      	b.n	80015c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	20040cb4 	.word	0x20040cb4

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	@ (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20040cb4 	.word	0x20040cb4

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	@ (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	@ (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	@ (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	@ (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff3e 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff8e 	bl	8001758 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff31 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e014      	b.n	80018c2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	791b      	ldrb	r3, [r3, #4]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d105      	bne.n	80018ae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fac7 	bl	8000e3c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	795b      	ldrb	r3, [r3, #5]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_DAC_Start+0x16>
 80018dc:	2302      	movs	r3, #2
 80018de:	e040      	b.n	8001962 <HAL_DAC_Start+0x98>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2201      	movs	r2, #1
 80018fa:	409a      	lsls	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001914:	2b02      	cmp	r3, #2
 8001916:	d11d      	bne.n	8001954 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	e014      	b.n	8001954 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2102      	movs	r1, #2
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	429a      	cmp	r2, r3
 8001942:	d107      	bne.n	8001954 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0202 	orr.w	r2, r2, #2
 8001952:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	795b      	ldrb	r3, [r3, #5]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_DAC_Start_DMA+0x1e>
 800198a:	2302      	movs	r3, #2
 800198c:	e0ab      	b.n	8001ae6 <HAL_DAC_Start_DMA+0x176>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2202      	movs	r2, #2
 8001998:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d12f      	bne.n	8001a00 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a52      	ldr	r2, [pc, #328]	@ (8001af0 <HAL_DAC_Start_DMA+0x180>)
 80019a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a51      	ldr	r2, [pc, #324]	@ (8001af4 <HAL_DAC_Start_DMA+0x184>)
 80019ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a50      	ldr	r2, [pc, #320]	@ (8001af8 <HAL_DAC_Start_DMA+0x188>)
 80019b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80019c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d013      	beq.n	80019f6 <HAL_DAC_Start_DMA+0x86>
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d845      	bhi.n	8001a60 <HAL_DAC_Start_DMA+0xf0>
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_DAC_Start_DMA+0x72>
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d005      	beq.n	80019ec <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80019e0:	e03e      	b.n	8001a60 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3308      	adds	r3, #8
 80019e8:	613b      	str	r3, [r7, #16]
        break;
 80019ea:	e03c      	b.n	8001a66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	330c      	adds	r3, #12
 80019f2:	613b      	str	r3, [r7, #16]
        break;
 80019f4:	e037      	b.n	8001a66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3310      	adds	r3, #16
 80019fc:	613b      	str	r3, [r7, #16]
        break;
 80019fe:	e032      	b.n	8001a66 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a3d      	ldr	r2, [pc, #244]	@ (8001afc <HAL_DAC_Start_DMA+0x18c>)
 8001a06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b00 <HAL_DAC_Start_DMA+0x190>)
 8001a0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a3b      	ldr	r2, [pc, #236]	@ (8001b04 <HAL_DAC_Start_DMA+0x194>)
 8001a16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a26:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d013      	beq.n	8001a56 <HAL_DAC_Start_DMA+0xe6>
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d817      	bhi.n	8001a64 <HAL_DAC_Start_DMA+0xf4>
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_DAC_Start_DMA+0xd2>
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d005      	beq.n	8001a4c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001a40:	e010      	b.n	8001a64 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3314      	adds	r3, #20
 8001a48:	613b      	str	r3, [r7, #16]
        break;
 8001a4a:	e00c      	b.n	8001a66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3318      	adds	r3, #24
 8001a52:	613b      	str	r3, [r7, #16]
        break;
 8001a54:	e007      	b.n	8001a66 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	331c      	adds	r3, #28
 8001a5c:	613b      	str	r3, [r7, #16]
        break;
 8001a5e:	e002      	b.n	8001a66 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001a60:	bf00      	nop
 8001a62:	e000      	b.n	8001a66 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001a64:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d111      	bne.n	8001a90 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6898      	ldr	r0, [r3, #8]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	f000 fef1 	bl	800286c <HAL_DMA_Start_IT>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]
 8001a8e:	e010      	b.n	8001ab2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001a9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	68d8      	ldr	r0, [r3, #12]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	f000 fedf 	bl	800286c <HAL_DMA_Start_IT>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2201      	movs	r2, #1
 8001acc:	409a      	lsls	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e005      	b.n	8001ae4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f043 0204 	orr.w	r2, r3, #4
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08001e69 	.word	0x08001e69
 8001af4:	08001e8b 	.word	0x08001e8b
 8001af8:	08001ea7 	.word	0x08001ea7
 8001afc:	08001f11 	.word	0x08001f11
 8001b00:	08001f33 	.word	0x08001f33
 8001b04:	08001f4f 	.word	0x08001f4f

08001b08 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6819      	ldr	r1, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 ff03 	bl	8002962 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e00c      	b.n	8001b88 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fef5 	bl	8002962 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001b86:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	795b      	ldrb	r3, [r3, #5]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_DAC_ConfigChannel+0x1c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e137      	b.n	8001e5c <HAL_DAC_ConfigChannel+0x28c>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	f040 8081 	bne.w	8001d04 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001c02:	f7ff fcff 	bl	8001604 <HAL_GetTick>
 8001c06:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d140      	bne.n	8001c90 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c0e:	e018      	b.n	8001c42 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c10:	f7ff fcf8 	bl	8001604 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d911      	bls.n	8001c42 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00a      	beq.n	8001c42 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	f043 0208 	orr.w	r2, r3, #8
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e10c      	b.n	8001e5c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1df      	bne.n	8001c10 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7ff fce3 	bl	800161c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	69d2      	ldr	r2, [r2, #28]
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c60:	e023      	b.n	8001caa <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c62:	f7ff fccf 	bl	8001604 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d90f      	bls.n	8001c90 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da0a      	bge.n	8001c90 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f043 0208 	orr.w	r2, r3, #8
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2203      	movs	r2, #3
 8001c8a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0e5      	b.n	8001e5c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	dbe3      	blt.n	8001c62 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7ff fcbe 	bl	800161c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	69d2      	ldr	r2, [r2, #28]
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	ea02 0103 	and.w	r1, r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	21ff      	movs	r1, #255	@ 0xff
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	ea02 0103 	and.w	r1, r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d11d      	bne.n	8001d48 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d12:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	221f      	movs	r2, #31
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69fa      	ldr	r2, [r7, #28]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43da      	mvns	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	400a      	ands	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dec:	d104      	bne.n	8001df8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e018      	b.n	8001e2a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d104      	bne.n	8001e0a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	e00f      	b.n	8001e2a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001e0a:	f002 f905 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8001e0e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4a14      	ldr	r2, [pc, #80]	@ (8001e64 <HAL_DAC_ConfigChannel+0x294>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d904      	bls.n	8001e22 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	e003      	b.n	8001e2a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001e28:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	22c0      	movs	r2, #192	@ 0xc0
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43da      	mvns	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	04c4b400 	.word	0x04c4b400

08001e68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e74:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f7ff fe8b 	bl	8001b92 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	711a      	strb	r2, [r3, #4]
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e96:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff fe84 	bl	8001ba6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff fe7a 	bl	8001bba <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	711a      	strb	r2, [r3, #4]
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff ffd8 	bl	8001ed4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	711a      	strb	r2, [r3, #4]
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff ffd1 	bl	8001ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff ffc7 	bl	8001efc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	711a      	strb	r2, [r3, #4]
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0ac      	b.n	80020e8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fad2 	bl	800253c <DFSDM_GetChannelFromInstance>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a55      	ldr	r2, [pc, #340]	@ (80020f0 <HAL_DFSDM_ChannelInit+0x174>)
 8001f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e09f      	b.n	80020e8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff f861 	bl	8001070 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001fae:	4b51      	ldr	r3, [pc, #324]	@ (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80020f4 <HAL_DFSDM_ChannelInit+0x178>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d125      	bne.n	800200c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fc6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001fca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4948      	ldr	r1, [pc, #288]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001fda:	4b47      	ldr	r3, [pc, #284]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a46      	ldr	r2, [pc, #280]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001fe0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001fe4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001fee:	4b42      	ldr	r3, [pc, #264]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	493f      	ldr	r1, [pc, #252]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002000:	4b3d      	ldr	r3, [pc, #244]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3c      	ldr	r2, [pc, #240]	@ (80020f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800200a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800201a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800202a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002030:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 020f 	bic.w	r2, r2, #15
 8002048:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002070:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f002 0207 	and.w	r2, r2, #7
 800209c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fa30 	bl	800253c <DFSDM_GetChannelFromInstance>
 80020dc:	4602      	mov	r2, r0
 80020de:	4904      	ldr	r1, [pc, #16]	@ (80020f0 <HAL_DFSDM_ChannelInit+0x174>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20040cbc 	.word	0x20040cbc
 80020f4:	20040cb8 	.word	0x20040cb8
 80020f8:	40016000 	.word	0x40016000

080020fc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0ca      	b.n	80022a4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a66      	ldr	r2, [pc, #408]	@ (80022ac <HAL_DFSDM_FilterInit+0x1b0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d109      	bne.n	800212c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800211c:	2b01      	cmp	r3, #1
 800211e:	d003      	beq.n	8002128 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0bb      	b.n	80022a4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe fee7 	bl	8000f18 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8002158:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7a1b      	ldrb	r3, [r3, #8]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d108      	bne.n	8002174 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e007      	b.n	8002184 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8002182:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7a5b      	ldrb	r3, [r3, #9]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d108      	bne.n	800219e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e007      	b.n	80021ae <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80021bc:	f023 0308 	bic.w	r3, r3, #8
 80021c0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d108      	bne.n	80021dc <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7c1b      	ldrb	r3, [r3, #16]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0210 	orr.w	r2, r2, #16
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e007      	b.n	8002206 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0210 	bic.w	r2, r2, #16
 8002204:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7c5b      	ldrb	r3, [r3, #17]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0220 	orr.w	r2, r2, #32
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0220 	bic.w	r2, r2, #32
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 800223e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8002242:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6959      	ldr	r1, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	3b01      	subs	r3, #1
 8002254:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002256:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800225e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699a      	ldr	r2, [r3, #24]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7c1a      	ldrb	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40016100 	.word	0x40016100

080022b0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d02e      	beq.n	8002328 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80022d0:	2bff      	cmp	r3, #255	@ 0xff
 80022d2:	d029      	beq.n	8002328 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022e6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10d      	bne.n	800230a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80022fc:	431a      	orrs	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e00a      	b.n	8002320 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
 8002326:	e001      	b.n	800232c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800232c:	7dfb      	ldrb	r3, [r7, #23]
}
 800232e:	4618      	mov	r0, r3
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_DFSDM_FilterRegularStop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b084      	sub	sp, #16
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800234c:	2b02      	cmp	r3, #2
 800234e:	d007      	beq.n	8002360 <HAL_DFSDM_FilterRegularStop+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002356:	2b04      	cmp	r3, #4
 8002358:	d002      	beq.n	8002360 <HAL_DFSDM_FilterRegularStop+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e002      	b.n	8002366 <HAL_DFSDM_FilterRegularStop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f98d 	bl	8002680 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	75fb      	strb	r3, [r7, #23]
 8002390:	e064      	b.n	800245c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800239c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023a0:	d002      	beq.n	80023a8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
 80023a6:	e059      	b.n	800245c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10e      	bne.n	80023ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10a      	bne.n	80023ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]
 80023cc:	e046      	b.n	800245c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d107      	bne.n	80023ee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d102      	bne.n	80023ee <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
 80023ec:	e036      	b.n	800245c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d004      	beq.n	8002402 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d12a      	bne.n	8002458 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002406:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002408:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002418:	2b20      	cmp	r3, #32
 800241a:	d101      	bne.n	8002420 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 800241c:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800241e:	e000      	b.n	8002422 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002420:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	331c      	adds	r3, #28
 8002432:	4619      	mov	r1, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f000 fa18 	bl	800286c <HAL_DMA_Start_IT>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d006      	beq.n	8002450 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	22ff      	movs	r2, #255	@ 0xff
 8002446:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800244e:	e005      	b.n	800245c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f8bf 	bl	80025d4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002456:	e001      	b.n	800245c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800245c:	7dfb      	ldrb	r3, [r7, #23]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	080024ff 	.word	0x080024ff
 800246c:	0800251b 	.word	0x0800251b
 8002470:	080024e3 	.word	0x080024e3

08002474 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002486:	2b02      	cmp	r3, #2
 8002488:	d007      	beq.n	800249a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002490:	2b04      	cmp	r3, #4
 8002492:	d002      	beq.n	800249a <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e007      	b.n	80024aa <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 fa5f 	bl	8002962 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8eb 	bl	8002680 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_DFSDM_FilterGetState>:
  * @brief  This function allows to get the current DFSDM filter handle state.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval DFSDM filter state.
  */
HAL_DFSDM_Filter_StateTypeDef HAL_DFSDM_FilterGetState(const DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Return DFSDM filter handle state */
  return hdfsdm_filter->State;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7fe fc59 	bl	8000da8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7fe fc5b 	bl	8000dc8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2203      	movs	r2, #3
 800252c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff ffc0 	bl	80024b4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d102      	bne.n	8002552 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	e02b      	b.n	80025aa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a19      	ldr	r2, [pc, #100]	@ (80025bc <DFSDM_GetChannelFromInstance+0x80>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d102      	bne.n	8002560 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e024      	b.n	80025aa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a17      	ldr	r2, [pc, #92]	@ (80025c0 <DFSDM_GetChannelFromInstance+0x84>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d102      	bne.n	800256e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002568:	2302      	movs	r3, #2
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e01d      	b.n	80025aa <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <DFSDM_GetChannelFromInstance+0x88>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d102      	bne.n	800257c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002576:	2304      	movs	r3, #4
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e016      	b.n	80025aa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a12      	ldr	r2, [pc, #72]	@ (80025c8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d102      	bne.n	800258a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002584:	2305      	movs	r3, #5
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e00f      	b.n	80025aa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a0f      	ldr	r2, [pc, #60]	@ (80025cc <DFSDM_GetChannelFromInstance+0x90>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d102      	bne.n	8002598 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002592:	2306      	movs	r3, #6
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e008      	b.n	80025aa <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <DFSDM_GetChannelFromInstance+0x94>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80025a0:	2307      	movs	r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e001      	b.n	80025aa <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80025a6:	2303      	movs	r3, #3
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40016000 	.word	0x40016000
 80025bc:	40016020 	.word	0x40016020
 80025c0:	40016040 	.word	0x40016040
 80025c4:	40016080 	.word	0x40016080
 80025c8:	400160a0 	.word	0x400160a0
 80025cc:	400160c0 	.word	0x400160c0
 80025d0:	400160e0 	.word	0x400160e0

080025d4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d108      	bne.n	80025f6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e033      	b.n	800265e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002614:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800262c:	2b03      	cmp	r3, #3
 800262e:	d116      	bne.n	800265e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0202 	orr.w	r2, r2, #2
 8002646:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <DFSDM_RegConvStart+0x84>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	e000      	b.n	800265a <DFSDM_RegConvStart+0x86>
 8002658:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <DFSDM_RegConvStart+0x98>
 8002668:	2202      	movs	r2, #2
 800266a:	e000      	b.n	800266e <DFSDM_RegConvStart+0x9a>
 800266c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269c:	2b01      	cmp	r3, #1
 800269e:	d107      	bne.n	80026b0 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 80026ae:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d116      	bne.n	80026f8 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0202 	orr.w	r2, r2, #2
 80026e0:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d102      	bne.n	80026f2 <DFSDM_RegConvStop+0x72>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f0:	e000      	b.n	80026f4 <DFSDM_RegConvStop+0x74>
 80026f2:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d101      	bne.n	8002706 <DFSDM_RegConvStop+0x86>
 8002702:	2201      	movs	r2, #1
 8002704:	e000      	b.n	8002708 <DFSDM_RegConvStop+0x88>
 8002706:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e08d      	b.n	800284a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	4b47      	ldr	r3, [pc, #284]	@ (8002854 <HAL_DMA_Init+0x138>)
 8002736:	429a      	cmp	r2, r3
 8002738:	d80f      	bhi.n	800275a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	4b45      	ldr	r3, [pc, #276]	@ (8002858 <HAL_DMA_Init+0x13c>)
 8002742:	4413      	add	r3, r2
 8002744:	4a45      	ldr	r2, [pc, #276]	@ (800285c <HAL_DMA_Init+0x140>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	009a      	lsls	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a42      	ldr	r2, [pc, #264]	@ (8002860 <HAL_DMA_Init+0x144>)
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40
 8002758:	e00e      	b.n	8002778 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	4b40      	ldr	r3, [pc, #256]	@ (8002864 <HAL_DMA_Init+0x148>)
 8002762:	4413      	add	r3, r2
 8002764:	4a3d      	ldr	r2, [pc, #244]	@ (800285c <HAL_DMA_Init+0x140>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	009a      	lsls	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a3c      	ldr	r2, [pc, #240]	@ (8002868 <HAL_DMA_Init+0x14c>)
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800278e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002792:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800279c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa12 	bl	8002bf4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027d8:	d102      	bne.n	80027e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_DMA_Init+0x104>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b04      	cmp	r3, #4
 8002804:	d80c      	bhi.n	8002820 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fa32 	bl	8002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e008      	b.n	8002832 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40020407 	.word	0x40020407
 8002858:	bffdfff8 	.word	0xbffdfff8
 800285c:	cccccccd 	.word	0xcccccccd
 8002860:	40020000 	.word	0x40020000
 8002864:	bffdfbf8 	.word	0xbffdfbf8
 8002868:	40020400 	.word	0x40020400

0800286c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_DMA_Start_IT+0x20>
 8002888:	2302      	movs	r3, #2
 800288a:	e066      	b.n	800295a <HAL_DMA_Start_IT+0xee>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d155      	bne.n	800294c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f957 	bl	8002b78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 020e 	orr.w	r2, r2, #14
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e00f      	b.n	8002904 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0204 	bic.w	r2, r2, #4
 80028f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 020a 	orr.w	r2, r2, #10
 8002902:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800291c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002920:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002938:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e005      	b.n	8002958 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002954:	2302      	movs	r3, #2
 8002956:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002958:	7dfb      	ldrb	r3, [r7, #23]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002962:	b480      	push	{r7}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d008      	beq.n	800298c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2204      	movs	r2, #4
 800297e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e040      	b.n	8002a0e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 020e 	bic.w	r2, r2, #14
 800299a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029aa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c0:	f003 021c 	and.w	r2, r3, #28
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	2101      	movs	r1, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f003 031c 	and.w	r3, r3, #28
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d026      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x7a>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d021      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f003 021c 	and.w	r2, r3, #28
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2104      	movs	r1, #4
 8002a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d071      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a92:	e06c      	b.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a98:	f003 031c 	and.w	r3, r3, #28
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02e      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xec>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d029      	beq.n	8002b06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10b      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 020a 	bic.w	r2, r2, #10
 8002ace:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002adc:	f003 021c 	and.w	r2, r3, #28
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d038      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b04:	e033      	b.n	8002b6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f003 031c 	and.w	r3, r3, #28
 8002b0e:	2208      	movs	r2, #8
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x156>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d025      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 020e 	bic.w	r2, r2, #14
 8002b32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	f003 021c 	and.w	r2, r3, #28
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
}
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b8e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ba0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f003 021c 	and.w	r2, r3, #28
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	2101      	movs	r1, #1
 8002bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d108      	bne.n	8002bd8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bd6:	e007      	b.n	8002be8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	60da      	str	r2, [r3, #12]
}
 8002be8:	bf00      	nop
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d80a      	bhi.n	8002c1e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c14:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6493      	str	r3, [r2, #72]	@ 0x48
 8002c1c:	e007      	b.n	8002c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	009a      	lsls	r2, r3, #2
 8002c26:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c28:	4413      	add	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3b08      	subs	r3, #8
 8002c36:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c44:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40020407 	.word	0x40020407
 8002c64:	4002081c 	.word	0x4002081c
 8002c68:	cccccccd 	.word	0xcccccccd
 8002c6c:	40020880 	.word	0x40020880

08002c70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a08      	ldr	r2, [pc, #32]	@ (8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c92:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	1000823f 	.word	0x1000823f
 8002cb4:	40020940 	.word	0x40020940

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc6:	e166      	b.n	8002f96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 8158 	beq.w	8002f90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d005      	beq.n	8002cf8 <HAL_GPIO_Init+0x40>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d130      	bne.n	8002d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d2e:	2201      	movs	r2, #1
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 0201 	and.w	r2, r3, #1
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d017      	beq.n	8002d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d123      	bne.n	8002dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	08da      	lsrs	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3208      	adds	r2, #8
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	6939      	ldr	r1, [r7, #16]
 8002de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80b2 	beq.w	8002f90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2c:	4b61      	ldr	r3, [pc, #388]	@ (8002fb4 <HAL_GPIO_Init+0x2fc>)
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e30:	4a60      	ldr	r2, [pc, #384]	@ (8002fb4 <HAL_GPIO_Init+0x2fc>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e38:	4b5e      	ldr	r3, [pc, #376]	@ (8002fb4 <HAL_GPIO_Init+0x2fc>)
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e44:	4a5c      	ldr	r2, [pc, #368]	@ (8002fb8 <HAL_GPIO_Init+0x300>)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e6e:	d02b      	beq.n	8002ec8 <HAL_GPIO_Init+0x210>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a52      	ldr	r2, [pc, #328]	@ (8002fbc <HAL_GPIO_Init+0x304>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d025      	beq.n	8002ec4 <HAL_GPIO_Init+0x20c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a51      	ldr	r2, [pc, #324]	@ (8002fc0 <HAL_GPIO_Init+0x308>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01f      	beq.n	8002ec0 <HAL_GPIO_Init+0x208>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a50      	ldr	r2, [pc, #320]	@ (8002fc4 <HAL_GPIO_Init+0x30c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d019      	beq.n	8002ebc <HAL_GPIO_Init+0x204>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a4f      	ldr	r2, [pc, #316]	@ (8002fc8 <HAL_GPIO_Init+0x310>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d013      	beq.n	8002eb8 <HAL_GPIO_Init+0x200>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a4e      	ldr	r2, [pc, #312]	@ (8002fcc <HAL_GPIO_Init+0x314>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00d      	beq.n	8002eb4 <HAL_GPIO_Init+0x1fc>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd0 <HAL_GPIO_Init+0x318>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d007      	beq.n	8002eb0 <HAL_GPIO_Init+0x1f8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd4 <HAL_GPIO_Init+0x31c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d101      	bne.n	8002eac <HAL_GPIO_Init+0x1f4>
 8002ea8:	2307      	movs	r3, #7
 8002eaa:	e00e      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002eac:	2308      	movs	r3, #8
 8002eae:	e00c      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002eb0:	2306      	movs	r3, #6
 8002eb2:	e00a      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002eb4:	2305      	movs	r3, #5
 8002eb6:	e008      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e006      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e004      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e002      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_GPIO_Init+0x212>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	f002 0203 	and.w	r2, r2, #3
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	4093      	lsls	r3, r2
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eda:	4937      	ldr	r1, [pc, #220]	@ (8002fb8 <HAL_GPIO_Init+0x300>)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f0c:	4a32      	ldr	r2, [pc, #200]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f12:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f36:	4a28      	ldr	r2, [pc, #160]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f3c:	4b26      	ldr	r3, [pc, #152]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f60:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f8a:	4a13      	ldr	r2, [pc, #76]	@ (8002fd8 <HAL_GPIO_Init+0x320>)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3301      	adds	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f ae91 	bne.w	8002cc8 <HAL_GPIO_Init+0x10>
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	48000400 	.word	0x48000400
 8002fc0:	48000800 	.word	0x48000800
 8002fc4:	48000c00 	.word	0x48000c00
 8002fc8:	48001000 	.word	0x48001000
 8002fcc:	48001400 	.word	0x48001400
 8002fd0:	48001800 	.word	0x48001800
 8002fd4:	48001c00 	.word	0x48001c00
 8002fd8:	40010400 	.word	0x40010400

08002fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e001      	b.n	8002ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003028:	e002      	b.n	8003030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003052:	4a05      	ldr	r2, [pc, #20]	@ (8003068 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa64 	bl	8000528 <HAL_GPIO_EXTI_Callback>
  }
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e08d      	b.n	800319a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe f85c 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	@ 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	e006      	b.n	80030f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80030f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d108      	bne.n	800310e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	e007      	b.n	800311e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800311c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800312c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003130:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003140:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69d9      	ldr	r1, [r3, #28]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a1a      	ldr	r2, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d138      	bne.n	800322a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e032      	b.n	800322c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2224      	movs	r2, #36	@ 0x24
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0201 	bic.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0201 	orr.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b20      	cmp	r3, #32
 800324c:	d139      	bne.n	80032c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003258:	2302      	movs	r3, #2
 800325a:	e033      	b.n	80032c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2224      	movs	r2, #36	@ 0x24
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800328a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032d4:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <HAL_PWREx_GetVoltageRange+0x3c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e0:	d102      	bne.n	80032e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80032e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032e6:	e00b      	b.n	8003300 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80032e8:	4b08      	ldr	r3, [pc, #32]	@ (800330c <HAL_PWREx_GetVoltageRange+0x3c>)
 80032ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032f6:	d102      	bne.n	80032fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80032f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032fc:	e000      	b.n	8003300 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80032fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40007000 	.word	0x40007000

08003310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d141      	bne.n	80033a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800331e:	4b4b      	ldr	r3, [pc, #300]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332a:	d131      	bne.n	8003390 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800332c:	4b47      	ldr	r3, [pc, #284]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003332:	4a46      	ldr	r2, [pc, #280]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003338:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800333c:	4b43      	ldr	r3, [pc, #268]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003344:	4a41      	ldr	r2, [pc, #260]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800334a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800334c:	4b40      	ldr	r3, [pc, #256]	@ (8003450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2232      	movs	r2, #50	@ 0x32
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	4a3f      	ldr	r2, [pc, #252]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	0c9b      	lsrs	r3, r3, #18
 800335e:	3301      	adds	r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003362:	e002      	b.n	800336a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3b01      	subs	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800336a:	4b38      	ldr	r3, [pc, #224]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003376:	d102      	bne.n	800337e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f2      	bne.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800337e:	4b33      	ldr	r3, [pc, #204]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800338a:	d158      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e057      	b.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003390:	4b2e      	ldr	r3, [pc, #184]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003396:	4a2d      	ldr	r2, [pc, #180]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800339c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80033a0:	e04d      	b.n	800343e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a8:	d141      	bne.n	800342e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033aa:	4b28      	ldr	r3, [pc, #160]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b6:	d131      	bne.n	800341c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033b8:	4b24      	ldr	r3, [pc, #144]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033be:	4a23      	ldr	r2, [pc, #140]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033c8:	4b20      	ldr	r3, [pc, #128]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033d0:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80033d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2232      	movs	r2, #50	@ 0x32
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	0c9b      	lsrs	r3, r3, #18
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ee:	e002      	b.n	80033f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033f6:	4b15      	ldr	r3, [pc, #84]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003402:	d102      	bne.n	800340a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f2      	bne.n	80033f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003416:	d112      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e011      	b.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800341c:	4b0b      	ldr	r3, [pc, #44]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003428:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800342c:	e007      	b.n	800343e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003436:	4a05      	ldr	r2, [pc, #20]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003438:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800343c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40007000 	.word	0x40007000
 8003450:	20000000 	.word	0x20000000
 8003454:	431bde83 	.word	0x431bde83

08003458 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f000 bc08 	b.w	8003c7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346c:	4b96      	ldr	r3, [pc, #600]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 030c 	and.w	r3, r3, #12
 8003474:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003476:	4b94      	ldr	r3, [pc, #592]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80e4 	beq.w	8003656 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4c>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b0c      	cmp	r3, #12
 8003498:	f040 808b 	bne.w	80035b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	f040 8087 	bne.w	80035b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034a4:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_OscConfig+0x64>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e3df      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	4b81      	ldr	r3, [pc, #516]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <HAL_RCC_OscConfig+0x7e>
 80034cc:	4b7e      	ldr	r3, [pc, #504]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034d4:	e005      	b.n	80034e2 <HAL_RCC_OscConfig+0x8a>
 80034d6:	4b7c      	ldr	r3, [pc, #496]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80034d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d223      	bcs.n	800352e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fdcc 	bl	8004088 <RCC_SetFlashLatencyFromMSIRange>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e3c0      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034fa:	4b73      	ldr	r3, [pc, #460]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a72      	ldr	r2, [pc, #456]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b70      	ldr	r3, [pc, #448]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	496d      	ldr	r1, [pc, #436]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003518:	4b6b      	ldr	r3, [pc, #428]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	4968      	ldr	r1, [pc, #416]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]
 800352c:	e025      	b.n	800357a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800352e:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a65      	ldr	r2, [pc, #404]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b63      	ldr	r3, [pc, #396]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	4960      	ldr	r1, [pc, #384]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003548:	4313      	orrs	r3, r2
 800354a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800354c:	4b5e      	ldr	r3, [pc, #376]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	495b      	ldr	r1, [pc, #364]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fd8c 	bl	8004088 <RCC_SetFlashLatencyFromMSIRange>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e380      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800357a:	f000 fcc1 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b51      	ldr	r3, [pc, #324]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	4950      	ldr	r1, [pc, #320]	@ (80036cc <HAL_RCC_OscConfig+0x274>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	4a4e      	ldr	r2, [pc, #312]	@ (80036d0 <HAL_RCC_OscConfig+0x278>)
 8003598:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800359a:	4b4e      	ldr	r3, [pc, #312]	@ (80036d4 <HAL_RCC_OscConfig+0x27c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd ffe0 	bl	8001564 <HAL_InitTick>
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d052      	beq.n	8003654 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	e364      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d032      	beq.n	8003620 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ba:	4b43      	ldr	r3, [pc, #268]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a42      	ldr	r2, [pc, #264]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035c6:	f7fe f81d 	bl	8001604 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ce:	f7fe f819 	bl	8001604 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e34d      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035e0:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ec:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a35      	ldr	r2, [pc, #212]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b33      	ldr	r3, [pc, #204]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4930      	ldr	r1, [pc, #192]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360a:	4b2f      	ldr	r3, [pc, #188]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	492b      	ldr	r1, [pc, #172]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
 800361e:	e01a      	b.n	8003656 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003620:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a28      	ldr	r2, [pc, #160]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800362c:	f7fd ffea 	bl	8001604 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003634:	f7fd ffe6 	bl	8001604 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e31a      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x1dc>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d073      	beq.n	800374a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d005      	beq.n	8003674 <HAL_RCC_OscConfig+0x21c>
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d10e      	bne.n	800368c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d10b      	bne.n	800368c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d063      	beq.n	8003748 <HAL_RCC_OscConfig+0x2f0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d15f      	bne.n	8003748 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e2f7      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003694:	d106      	bne.n	80036a4 <HAL_RCC_OscConfig+0x24c>
 8003696:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0b      	ldr	r2, [pc, #44]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	e025      	b.n	80036f0 <HAL_RCC_OscConfig+0x298>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036ac:	d114      	bne.n	80036d8 <HAL_RCC_OscConfig+0x280>
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a05      	ldr	r2, [pc, #20]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80036b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b03      	ldr	r3, [pc, #12]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a02      	ldr	r2, [pc, #8]	@ (80036c8 <HAL_RCC_OscConfig+0x270>)
 80036c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	e013      	b.n	80036f0 <HAL_RCC_OscConfig+0x298>
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08006c88 	.word	0x08006c88
 80036d0:	20000000 	.word	0x20000000
 80036d4:	20000004 	.word	0x20000004
 80036d8:	4ba0      	ldr	r3, [pc, #640]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a9f      	ldr	r2, [pc, #636]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80036de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4b9d      	ldr	r3, [pc, #628]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a9c      	ldr	r2, [pc, #624]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80036ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d013      	beq.n	8003720 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd ff84 	bl	8001604 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7fd ff80 	bl	8001604 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	@ 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e2b4      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003712:	4b92      	ldr	r3, [pc, #584]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0f0      	beq.n	8003700 <HAL_RCC_OscConfig+0x2a8>
 800371e:	e014      	b.n	800374a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fd ff70 	bl	8001604 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7fd ff6c 	bl	8001604 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e2a0      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373a:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x2d0>
 8003746:	e000      	b.n	800374a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d060      	beq.n	8003818 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d005      	beq.n	8003768 <HAL_RCC_OscConfig+0x310>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d119      	bne.n	8003796 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d116      	bne.n	8003796 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003768:	4b7c      	ldr	r3, [pc, #496]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_OscConfig+0x328>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e27d      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b76      	ldr	r3, [pc, #472]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	4973      	ldr	r1, [pc, #460]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003794:	e040      	b.n	8003818 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d023      	beq.n	80037e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800379e:	4b6f      	ldr	r3, [pc, #444]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6e      	ldr	r2, [pc, #440]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fd ff2b 	bl	8001604 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b2:	f7fd ff27 	bl	8001604 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e25b      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037c4:	4b65      	ldr	r3, [pc, #404]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d0:	4b62      	ldr	r3, [pc, #392]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	495f      	ldr	r1, [pc, #380]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
 80037e4:	e018      	b.n	8003818 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e6:	4b5d      	ldr	r3, [pc, #372]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5c      	ldr	r2, [pc, #368]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80037ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fd ff07 	bl	8001604 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fd ff03 	bl	8001604 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e237      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800380c:	4b53      	ldr	r3, [pc, #332]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f0      	bne.n	80037fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03c      	beq.n	800389e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01c      	beq.n	8003866 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800382c:	4b4b      	ldr	r3, [pc, #300]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 800382e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003832:	4a4a      	ldr	r2, [pc, #296]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fd fee2 	bl	8001604 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003844:	f7fd fede 	bl	8001604 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e212      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003858:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ef      	beq.n	8003844 <HAL_RCC_OscConfig+0x3ec>
 8003864:	e01b      	b.n	800389e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003866:	4b3d      	ldr	r3, [pc, #244]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800386c:	4a3b      	ldr	r2, [pc, #236]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7fd fec5 	bl	8001604 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387e:	f7fd fec1 	bl	8001604 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e1f5      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003890:	4b32      	ldr	r3, [pc, #200]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003892:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ef      	bne.n	800387e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80a6 	beq.w	80039f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ac:	2300      	movs	r3, #0
 80038ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038b0:	4b2a      	ldr	r3, [pc, #168]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10d      	bne.n	80038d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	4a26      	ldr	r2, [pc, #152]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c8:	4b24      	ldr	r3, [pc, #144]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d8:	4b21      	ldr	r3, [pc, #132]	@ (8003960 <HAL_RCC_OscConfig+0x508>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d118      	bne.n	8003916 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <HAL_RCC_OscConfig+0x508>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <HAL_RCC_OscConfig+0x508>)
 80038ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f0:	f7fd fe88 	bl	8001604 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f8:	f7fd fe84 	bl	8001604 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1b8      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390a:	4b15      	ldr	r3, [pc, #84]	@ (8003960 <HAL_RCC_OscConfig+0x508>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d108      	bne.n	8003930 <HAL_RCC_OscConfig+0x4d8>
 800391e:	4b0f      	ldr	r3, [pc, #60]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003924:	4a0d      	ldr	r2, [pc, #52]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800392e:	e029      	b.n	8003984 <HAL_RCC_OscConfig+0x52c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b05      	cmp	r3, #5
 8003936:	d115      	bne.n	8003964 <HAL_RCC_OscConfig+0x50c>
 8003938:	4b08      	ldr	r3, [pc, #32]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	4a07      	ldr	r2, [pc, #28]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394e:	4a03      	ldr	r2, [pc, #12]	@ (800395c <HAL_RCC_OscConfig+0x504>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003958:	e014      	b.n	8003984 <HAL_RCC_OscConfig+0x52c>
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000
 8003960:	40007000 	.word	0x40007000
 8003964:	4b9d      	ldr	r3, [pc, #628]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396a:	4a9c      	ldr	r2, [pc, #624]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003974:	4b99      	ldr	r3, [pc, #612]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397a:	4a98      	ldr	r2, [pc, #608]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 800397c:	f023 0304 	bic.w	r3, r3, #4
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d016      	beq.n	80039ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fd fe3a 	bl	8001604 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003994:	f7fd fe36 	bl	8001604 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e168      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039aa:	4b8c      	ldr	r3, [pc, #560]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ed      	beq.n	8003994 <HAL_RCC_OscConfig+0x53c>
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ba:	f7fd fe23 	bl	8001604 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fd fe1f 	bl	8001604 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e151      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d8:	4b80      	ldr	r3, [pc, #512]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ed      	bne.n	80039c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e6:	7ffb      	ldrb	r3, [r7, #31]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ec:	4b7b      	ldr	r3, [pc, #492]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	4a7a      	ldr	r2, [pc, #488]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 80039f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d03c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01c      	beq.n	8003a46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a0c:	4b73      	ldr	r3, [pc, #460]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a12:	4a72      	ldr	r2, [pc, #456]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fd fdf2 	bl	8001604 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a24:	f7fd fdee 	bl	8001604 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e122      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a36:	4b69      	ldr	r3, [pc, #420]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0ef      	beq.n	8003a24 <HAL_RCC_OscConfig+0x5cc>
 8003a44:	e01b      	b.n	8003a7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a46:	4b65      	ldr	r3, [pc, #404]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a4c:	4a63      	ldr	r2, [pc, #396]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a56:	f7fd fdd5 	bl	8001604 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a5e:	f7fd fdd1 	bl	8001604 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e105      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a70:	4b5a      	ldr	r3, [pc, #360]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ef      	bne.n	8003a5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80f9 	beq.w	8003c7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	f040 80cf 	bne.w	8003c30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a92:	4b52      	ldr	r3, [pc, #328]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0203 	and.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d12c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d123      	bne.n	8003b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d11b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d113      	bne.n	8003b00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d109      	bne.n	8003b00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	3b01      	subs	r3, #1
 8003afa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d071      	beq.n	8003be4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d068      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b06:	4b35      	ldr	r3, [pc, #212]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b12:	4b32      	ldr	r3, [pc, #200]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e0ac      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b22:	4b2e      	ldr	r3, [pc, #184]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2d      	ldr	r2, [pc, #180]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b2e:	f7fd fd69 	bl	8001604 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fd65 	bl	8001604 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e099      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b48:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f0      	bne.n	8003b36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b54:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_RCC_OscConfig+0x788>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b64:	3a01      	subs	r2, #1
 8003b66:	0112      	lsls	r2, r2, #4
 8003b68:	4311      	orrs	r1, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b6e:	0212      	lsls	r2, r2, #8
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b76:	0852      	lsrs	r2, r2, #1
 8003b78:	3a01      	subs	r2, #1
 8003b7a:	0552      	lsls	r2, r2, #21
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b82:	0852      	lsrs	r2, r2, #1
 8003b84:	3a01      	subs	r2, #1
 8003b86:	0652      	lsls	r2, r2, #25
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b8e:	06d2      	lsls	r2, r2, #27
 8003b90:	430a      	orrs	r2, r1
 8003b92:	4912      	ldr	r1, [pc, #72]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b98:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ba2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003baa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb0:	f7fd fd28 	bl	8001604 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd fd24 	bl	8001604 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e058      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bca:	4b04      	ldr	r3, [pc, #16]	@ (8003bdc <HAL_RCC_OscConfig+0x784>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bd6:	e050      	b.n	8003c7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e04f      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be4:	4b27      	ldr	r3, [pc, #156]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d144      	bne.n	8003c7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bf0:	4b24      	ldr	r3, [pc, #144]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a23      	ldr	r2, [pc, #140]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bfc:	4b21      	ldr	r3, [pc, #132]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a20      	ldr	r2, [pc, #128]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003c02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c08:	f7fd fcfc 	bl	8001604 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fd fcf8 	bl	8001604 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e02c      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c22:	4b18      	ldr	r3, [pc, #96]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x7b8>
 8003c2e:	e024      	b.n	8003c7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b0c      	cmp	r3, #12
 8003c34:	d01f      	beq.n	8003c76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c36:	4b13      	ldr	r3, [pc, #76]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a12      	ldr	r2, [pc, #72]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003c3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fd fcdf 	bl	8001604 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fd fcdb 	bl	8001604 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e00f      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c68:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	4905      	ldr	r1, [pc, #20]	@ (8003c84 <HAL_RCC_OscConfig+0x82c>)
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_RCC_OscConfig+0x830>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	60cb      	str	r3, [r1, #12]
 8003c74:	e001      	b.n	8003c7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	feeefffc 	.word	0xfeeefffc

08003c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e11d      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b90      	ldr	r3, [pc, #576]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d910      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 020f 	bic.w	r2, r3, #15
 8003cba:	498b      	ldr	r1, [pc, #556]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b89      	ldr	r3, [pc, #548]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e105      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d010      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b81      	ldr	r3, [pc, #516]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d908      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	497b      	ldr	r1, [pc, #492]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d079      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d11e      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d16:	4b75      	ldr	r3, [pc, #468]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e0dc      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003d26:	f000 fa09 	bl	800413c <RCC_GetSysClockFreqFromPLLSource>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4a70      	ldr	r2, [pc, #448]	@ (8003ef0 <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d946      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d32:	4b6e      	ldr	r3, [pc, #440]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d140      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d46:	4a69      	ldr	r2, [pc, #420]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d4e:	2380      	movs	r3, #128	@ 0x80
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e035      	b.n	8003dc0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5c:	4b63      	ldr	r3, [pc, #396]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d115      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0b9      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d74:	4b5d      	ldr	r3, [pc, #372]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0ad      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d84:	4b59      	ldr	r3, [pc, #356]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0a5      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003d94:	f000 f8b4 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4a55      	ldr	r2, [pc, #340]	@ (8003ef0 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d90f      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003da0:	4b52      	ldr	r3, [pc, #328]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dac:	4b4f      	ldr	r3, [pc, #316]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003db4:	4a4d      	ldr	r2, [pc, #308]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dbc:	2380      	movs	r3, #128	@ 0x80
 8003dbe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f023 0203 	bic.w	r2, r3, #3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4947      	ldr	r1, [pc, #284]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fc17 	bl	8001604 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd8:	e00a      	b.n	8003df0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dda:	f7fd fc13 	bl	8001604 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e077      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df0:	4b3e      	ldr	r3, [pc, #248]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 020c 	and.w	r2, r3, #12
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d1eb      	bne.n	8003dda <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b80      	cmp	r3, #128	@ 0x80
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e08:	4b38      	ldr	r3, [pc, #224]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a37      	ldr	r2, [pc, #220]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e12:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	4b31      	ldr	r3, [pc, #196]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d208      	bcs.n	8003e42 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b2e      	ldr	r3, [pc, #184]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	492b      	ldr	r1, [pc, #172]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e42:	4b29      	ldr	r3, [pc, #164]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d210      	bcs.n	8003e72 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e50:	4b25      	ldr	r3, [pc, #148]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 020f 	bic.w	r2, r3, #15
 8003e58:	4923      	ldr	r1, [pc, #140]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e60:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <HAL_RCC_ClockConfig+0x25c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e036      	b.n	8003ee0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	4918      	ldr	r1, [pc, #96]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d009      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9c:	4b13      	ldr	r3, [pc, #76]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4910      	ldr	r1, [pc, #64]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb0:	f000 f826 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003eec <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	490c      	ldr	r1, [pc, #48]	@ (8003ef4 <HAL_RCC_ClockConfig+0x268>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <HAL_RCC_ClockConfig+0x26c>)
 8003ece:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <HAL_RCC_ClockConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fb45 	bl	8001564 <HAL_InitTick>
 8003eda:	4603      	mov	r3, r0
 8003edc:	73fb      	strb	r3, [r7, #15]

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	04c4b400 	.word	0x04c4b400
 8003ef4:	08006c88 	.word	0x08006c88
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000004 	.word	0x20000004

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	@ 0x24
 8003f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f18:	4b3b      	ldr	r3, [pc, #236]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x34>
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d121      	bne.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d11e      	bne.n	8003f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f34:	4b34      	ldr	r3, [pc, #208]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d107      	bne.n	8003f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f40:	4b31      	ldr	r3, [pc, #196]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e005      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f50:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800400c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10d      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d102      	bne.n	8003f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f78:	4b25      	ldr	r3, [pc, #148]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	e004      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f84:	4b23      	ldr	r3, [pc, #140]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d134      	bne.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d003      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0xac>
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fa8:	617b      	str	r3, [r7, #20]
      break;
 8003faa:	e005      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fac:	4b19      	ldr	r3, [pc, #100]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fae:	617b      	str	r3, [r7, #20]
      break;
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	617b      	str	r3, [r7, #20]
      break;
 8003fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fb8:	4b13      	ldr	r3, [pc, #76]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fc6:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	fb03 f202 	mul.w	r2, r3, r2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fde:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	0e5b      	lsrs	r3, r3, #25
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	3301      	adds	r3, #1
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3724      	adds	r7, #36	@ 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	08006ca0 	.word	0x08006ca0
 8004010:	00f42400 	.word	0x00f42400
 8004014:	007a1200 	.word	0x007a1200

08004018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800401c:	4b03      	ldr	r3, [pc, #12]	@ (800402c <HAL_RCC_GetHCLKFreq+0x14>)
 800401e:	681b      	ldr	r3, [r3, #0]
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000000 	.word	0x20000000

08004030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004034:	f7ff fff0 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4904      	ldr	r1, [pc, #16]	@ (8004058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	08006c98 	.word	0x08006c98

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004060:	f7ff ffda 	bl	8004018 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0adb      	lsrs	r3, r3, #11
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4904      	ldr	r1, [pc, #16]	@ (8004084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	08006c98 	.word	0x08006c98

08004088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004094:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040a0:	f7ff f916 	bl	80032d0 <HAL_PWREx_GetVoltageRange>
 80040a4:	6178      	str	r0, [r7, #20]
 80040a6:	e014      	b.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040a8:	4b22      	ldr	r3, [pc, #136]	@ (8004134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ac:	4a21      	ldr	r2, [pc, #132]	@ (8004134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040c0:	f7ff f906 	bl	80032d0 <HAL_PWREx_GetVoltageRange>
 80040c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004134 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80040cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d8:	d10b      	bne.n	80040f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d913      	bls.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80040e4:	d902      	bls.n	80040ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040e6:	2302      	movs	r3, #2
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e00d      	b.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e00a      	b.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80040f6:	d902      	bls.n	80040fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80040f8:	2302      	movs	r3, #2
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	e004      	b.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b70      	cmp	r3, #112	@ 0x70
 8004102:	d101      	bne.n	8004108 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004104:	2301      	movs	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 020f 	bic.w	r2, r3, #15
 8004110:	4909      	ldr	r1, [pc, #36]	@ (8004138 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004118:	4b07      	ldr	r3, [pc, #28]	@ (8004138 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d001      	beq.n	800412a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	40022000 	.word	0x40022000

0800413c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004142:	4b2d      	ldr	r3, [pc, #180]	@ (80041f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d00b      	beq.n	800416a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d825      	bhi.n	80041a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d008      	beq.n	8004170 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d11f      	bne.n	80041a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004164:	4b25      	ldr	r3, [pc, #148]	@ (80041fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004166:	613b      	str	r3, [r7, #16]
    break;
 8004168:	e01f      	b.n	80041aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800416a:	4b25      	ldr	r3, [pc, #148]	@ (8004200 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800416c:	613b      	str	r3, [r7, #16]
    break;
 800416e:	e01c      	b.n	80041aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004170:	4b21      	ldr	r3, [pc, #132]	@ (80041f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d107      	bne.n	800418c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800417c:	4b1e      	ldr	r3, [pc, #120]	@ (80041f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e005      	b.n	8004198 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800418c:	4b1a      	ldr	r3, [pc, #104]	@ (80041f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004198:	4a1a      	ldr	r2, [pc, #104]	@ (8004204 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a0:	613b      	str	r3, [r7, #16]
    break;
 80041a2:	e002      	b.n	80041aa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	613b      	str	r3, [r7, #16]
    break;
 80041a8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041aa:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	3301      	adds	r3, #1
 80041b6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041b8:	4b0f      	ldr	r3, [pc, #60]	@ (80041f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	fb03 f202 	mul.w	r2, r3, r2
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041d0:	4b09      	ldr	r3, [pc, #36]	@ (80041f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	0e5b      	lsrs	r3, r3, #25
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	3301      	adds	r3, #1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80041ea:	683b      	ldr	r3, [r7, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40021000 	.word	0x40021000
 80041fc:	00f42400 	.word	0x00f42400
 8004200:	007a1200 	.word	0x007a1200
 8004204:	08006ca0 	.word	0x08006ca0

08004208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004210:	2300      	movs	r3, #0
 8004212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004214:	2300      	movs	r3, #0
 8004216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004220:	2b00      	cmp	r3, #0
 8004222:	d040      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004228:	2b80      	cmp	r3, #128	@ 0x80
 800422a:	d02a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800422c:	2b80      	cmp	r3, #128	@ 0x80
 800422e:	d825      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004230:	2b60      	cmp	r3, #96	@ 0x60
 8004232:	d026      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004234:	2b60      	cmp	r3, #96	@ 0x60
 8004236:	d821      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004238:	2b40      	cmp	r3, #64	@ 0x40
 800423a:	d006      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800423c:	2b40      	cmp	r3, #64	@ 0x40
 800423e:	d81d      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004240:	2b00      	cmp	r3, #0
 8004242:	d009      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d010      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004248:	e018      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800424a:	4b89      	ldr	r3, [pc, #548]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4a88      	ldr	r2, [pc, #544]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004256:	e015      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fb02 	bl	8004868 <RCCEx_PLLSAI1_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004268:	e00c      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3320      	adds	r3, #32
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fbed 	bl	8004a50 <RCCEx_PLLSAI2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800427a:	e003      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	74fb      	strb	r3, [r7, #19]
      break;
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800428a:	4b79      	ldr	r3, [pc, #484]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800428c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004290:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004298:	4975      	ldr	r1, [pc, #468]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80042a0:	e001      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d047      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ba:	d030      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c0:	d82a      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042c6:	d02a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80042c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042cc:	d824      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d2:	d008      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80042d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d8:	d81e      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80042de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042e2:	d010      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042e4:	e018      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042e6:	4b62      	ldr	r3, [pc, #392]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	4a61      	ldr	r2, [pc, #388]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80042f2:	e015      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fab4 	bl	8004868 <RCCEx_PLLSAI1_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004304:	e00c      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3320      	adds	r3, #32
 800430a:	2100      	movs	r1, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fb9f 	bl	8004a50 <RCCEx_PLLSAI2_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004316:	e003      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	74fb      	strb	r3, [r7, #19]
      break;
 800431c:	e000      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800431e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004320:	7cfb      	ldrb	r3, [r7, #19]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004326:	4b52      	ldr	r3, [pc, #328]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800432c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004334:	494e      	ldr	r1, [pc, #312]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800433c:	e001      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 809f 	beq.w	800448e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004350:	2300      	movs	r3, #0
 8004352:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004354:	4b46      	ldr	r3, [pc, #280]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004364:	2300      	movs	r3, #0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00d      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	4b41      	ldr	r3, [pc, #260]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800436c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436e:	4a40      	ldr	r2, [pc, #256]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004374:	6593      	str	r3, [r2, #88]	@ 0x58
 8004376:	4b3e      	ldr	r3, [pc, #248]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004382:	2301      	movs	r3, #1
 8004384:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004386:	4b3b      	ldr	r3, [pc, #236]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3a      	ldr	r2, [pc, #232]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800438c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004392:	f7fd f937 	bl	8001604 <HAL_GetTick>
 8004396:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004398:	e009      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439a:	f7fd f933 	bl	8001604 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d902      	bls.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	74fb      	strb	r3, [r7, #19]
        break;
 80043ac:	e005      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043ae:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ef      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d15b      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01f      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d019      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043de:	4b24      	ldr	r3, [pc, #144]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ea:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004400:	4a1b      	ldr	r2, [pc, #108]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800440a:	4a19      	ldr	r2, [pc, #100]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d016      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fd f8f2 	bl	8001604 <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004422:	e00b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fd f8ee 	bl	8001604 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d902      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	74fb      	strb	r3, [r7, #19]
            break;
 800443a:	e006      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443c:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0ec      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10c      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004450:	4b07      	ldr	r3, [pc, #28]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004456:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004460:	4903      	ldr	r1, [pc, #12]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004468:	e008      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	74bb      	strb	r3, [r7, #18]
 800446e:	e005      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004470:	40021000 	.word	0x40021000
 8004474:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800447c:	7c7b      	ldrb	r3, [r7, #17]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d105      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004482:	4ba0      	ldr	r3, [pc, #640]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	4a9f      	ldr	r2, [pc, #636]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800448c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800449a:	4b9a      	ldr	r3, [pc, #616]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a0:	f023 0203 	bic.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a8:	4996      	ldr	r1, [pc, #600]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044bc:	4b91      	ldr	r3, [pc, #580]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c2:	f023 020c 	bic.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	498e      	ldr	r1, [pc, #568]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044de:	4b89      	ldr	r3, [pc, #548]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ec:	4985      	ldr	r1, [pc, #532]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004500:	4b80      	ldr	r3, [pc, #512]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004506:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450e:	497d      	ldr	r1, [pc, #500]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004522:	4b78      	ldr	r3, [pc, #480]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004530:	4974      	ldr	r1, [pc, #464]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004544:	4b6f      	ldr	r3, [pc, #444]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004552:	496c      	ldr	r1, [pc, #432]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004566:	4b67      	ldr	r3, [pc, #412]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004574:	4963      	ldr	r1, [pc, #396]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004588:	4b5e      	ldr	r3, [pc, #376]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004596:	495b      	ldr	r1, [pc, #364]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045aa:	4b56      	ldr	r3, [pc, #344]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b8:	4952      	ldr	r1, [pc, #328]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	494a      	ldr	r1, [pc, #296]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045ee:	4b45      	ldr	r3, [pc, #276]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	4941      	ldr	r1, [pc, #260]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004610:	4b3c      	ldr	r3, [pc, #240]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004612:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461e:	4939      	ldr	r1, [pc, #228]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d028      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004632:	4b34      	ldr	r3, [pc, #208]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004638:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004640:	4930      	ldr	r1, [pc, #192]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004650:	d106      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004652:	4b2c      	ldr	r3, [pc, #176]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	4a2b      	ldr	r2, [pc, #172]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800465c:	60d3      	str	r3, [r2, #12]
 800465e:	e011      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004664:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004668:	d10c      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3304      	adds	r3, #4
 800466e:	2101      	movs	r1, #1
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f8f9 	bl	8004868 <RCCEx_PLLSAI1_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004680:	7cfb      	ldrb	r3, [r7, #19]
 8004682:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d04d      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004698:	d108      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800469a:	4b1a      	ldr	r3, [pc, #104]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800469c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046a0:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80046aa:	e012      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80046ac:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046b2:	4a14      	ldr	r2, [pc, #80]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80046bc:	4b11      	ldr	r3, [pc, #68]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046ca:	490e      	ldr	r1, [pc, #56]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046da:	d106      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046dc:	4b09      	ldr	r3, [pc, #36]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a08      	ldr	r2, [pc, #32]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046e6:	60d3      	str	r3, [r2, #12]
 80046e8:	e020      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046f2:	d109      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046f4:	4b03      	ldr	r3, [pc, #12]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4a02      	ldr	r2, [pc, #8]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fe:	60d3      	str	r3, [r2, #12]
 8004700:	e014      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800470c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004710:	d10c      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	2101      	movs	r1, #1
 8004718:	4618      	mov	r0, r3
 800471a:	f000 f8a5 	bl	8004868 <RCCEx_PLLSAI1_Config>
 800471e:	4603      	mov	r3, r0
 8004720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004722:	7cfb      	ldrb	r3, [r7, #19]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d028      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004738:	4b4a      	ldr	r3, [pc, #296]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004746:	4947      	ldr	r1, [pc, #284]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004756:	d106      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004758:	4b42      	ldr	r3, [pc, #264]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	4a41      	ldr	r2, [pc, #260]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004762:	60d3      	str	r3, [r2, #12]
 8004764:	e011      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800476a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800476e:	d10c      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3304      	adds	r3, #4
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f876 	bl	8004868 <RCCEx_PLLSAI1_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d01e      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004796:	4b33      	ldr	r3, [pc, #204]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a6:	492f      	ldr	r1, [pc, #188]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	2102      	movs	r1, #2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 f851 	bl	8004868 <RCCEx_PLLSAI1_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047ca:	7cfb      	ldrb	r3, [r7, #19]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00b      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047e0:	4b20      	ldr	r3, [pc, #128]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047e6:	f023 0204 	bic.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f0:	491c      	ldr	r1, [pc, #112]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004804:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004806:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800480a:	f023 0218 	bic.w	r2, r3, #24
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004814:	4913      	ldr	r1, [pc, #76]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d017      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004828:	4b0e      	ldr	r3, [pc, #56]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800482e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004838:	490a      	ldr	r1, [pc, #40]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800484a:	d105      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484c:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a04      	ldr	r2, [pc, #16]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004856:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004858:	7cbb      	ldrb	r3, [r7, #18]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000

08004868 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004876:	4b72      	ldr	r3, [pc, #456]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00e      	beq.n	80048a0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004882:	4b6f      	ldr	r3, [pc, #444]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0203 	and.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d103      	bne.n	800489a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
       ||
 8004896:	2b00      	cmp	r3, #0
 8004898:	d142      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
 800489e:	e03f      	b.n	8004920 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d018      	beq.n	80048da <RCCEx_PLLSAI1_Config+0x72>
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d825      	bhi.n	80048f8 <RCCEx_PLLSAI1_Config+0x90>
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d002      	beq.n	80048b6 <RCCEx_PLLSAI1_Config+0x4e>
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d009      	beq.n	80048c8 <RCCEx_PLLSAI1_Config+0x60>
 80048b4:	e020      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048b6:	4b62      	ldr	r3, [pc, #392]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11d      	bne.n	80048fe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048c6:	e01a      	b.n	80048fe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048c8:	4b5d      	ldr	r3, [pc, #372]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048d8:	e013      	b.n	8004902 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048da:	4b59      	ldr	r3, [pc, #356]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048e6:	4b56      	ldr	r3, [pc, #344]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d109      	bne.n	8004906 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048f6:	e006      	b.n	8004906 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	e004      	b.n	8004908 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80048fe:	bf00      	nop
 8004900:	e002      	b.n	8004908 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004902:	bf00      	nop
 8004904:	e000      	b.n	8004908 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004906:	bf00      	nop
    }

    if(status == HAL_OK)
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800490e:	4b4c      	ldr	r3, [pc, #304]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4949      	ldr	r1, [pc, #292]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 8086 	bne.w	8004a34 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004928:	4b45      	ldr	r3, [pc, #276]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a44      	ldr	r2, [pc, #272]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 800492e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004934:	f7fc fe66 	bl	8001604 <HAL_GetTick>
 8004938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800493a:	e009      	b.n	8004950 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800493c:	f7fc fe62 	bl	8001604 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d902      	bls.n	8004950 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	73fb      	strb	r3, [r7, #15]
        break;
 800494e:	e005      	b.n	800495c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004950:	4b3b      	ldr	r3, [pc, #236]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ef      	bne.n	800493c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d168      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d113      	bne.n	8004990 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004968:	4b35      	ldr	r3, [pc, #212]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	4b35      	ldr	r3, [pc, #212]	@ (8004a44 <RCCEx_PLLSAI1_Config+0x1dc>)
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6892      	ldr	r2, [r2, #8]
 8004974:	0211      	lsls	r1, r2, #8
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	68d2      	ldr	r2, [r2, #12]
 800497a:	06d2      	lsls	r2, r2, #27
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6852      	ldr	r2, [r2, #4]
 8004982:	3a01      	subs	r2, #1
 8004984:	0112      	lsls	r2, r2, #4
 8004986:	430a      	orrs	r2, r1
 8004988:	492d      	ldr	r1, [pc, #180]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 800498a:	4313      	orrs	r3, r2
 800498c:	610b      	str	r3, [r1, #16]
 800498e:	e02d      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d115      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004996:	4b2a      	ldr	r3, [pc, #168]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	4b2b      	ldr	r3, [pc, #172]	@ (8004a48 <RCCEx_PLLSAI1_Config+0x1e0>)
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6892      	ldr	r2, [r2, #8]
 80049a2:	0211      	lsls	r1, r2, #8
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6912      	ldr	r2, [r2, #16]
 80049a8:	0852      	lsrs	r2, r2, #1
 80049aa:	3a01      	subs	r2, #1
 80049ac:	0552      	lsls	r2, r2, #21
 80049ae:	4311      	orrs	r1, r2
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6852      	ldr	r2, [r2, #4]
 80049b4:	3a01      	subs	r2, #1
 80049b6:	0112      	lsls	r2, r2, #4
 80049b8:	430a      	orrs	r2, r1
 80049ba:	4921      	ldr	r1, [pc, #132]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]
 80049c0:	e014      	b.n	80049ec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	4b21      	ldr	r3, [pc, #132]	@ (8004a4c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6892      	ldr	r2, [r2, #8]
 80049ce:	0211      	lsls	r1, r2, #8
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6952      	ldr	r2, [r2, #20]
 80049d4:	0852      	lsrs	r2, r2, #1
 80049d6:	3a01      	subs	r2, #1
 80049d8:	0652      	lsls	r2, r2, #25
 80049da:	4311      	orrs	r1, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6852      	ldr	r2, [r2, #4]
 80049e0:	3a01      	subs	r2, #1
 80049e2:	0112      	lsls	r2, r2, #4
 80049e4:	430a      	orrs	r2, r1
 80049e6:	4916      	ldr	r1, [pc, #88]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80049ec:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a13      	ldr	r2, [pc, #76]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fc fe04 	bl	8001604 <HAL_GetTick>
 80049fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049fe:	e009      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a00:	f7fc fe00 	bl	8001604 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d902      	bls.n	8004a14 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	73fb      	strb	r3, [r7, #15]
          break;
 8004a12:	e005      	b.n	8004a20 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a14:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ef      	beq.n	8004a00 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a26:	4b06      	ldr	r3, [pc, #24]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	4904      	ldr	r1, [pc, #16]	@ (8004a40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	07ff800f 	.word	0x07ff800f
 8004a48:	ff9f800f 	.word	0xff9f800f
 8004a4c:	f9ff800f 	.word	0xf9ff800f

08004a50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a5e:	4b72      	ldr	r3, [pc, #456]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00e      	beq.n	8004a88 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0203 	and.w	r2, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d103      	bne.n	8004a82 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d142      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	e03f      	b.n	8004b08 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d018      	beq.n	8004ac2 <RCCEx_PLLSAI2_Config+0x72>
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d825      	bhi.n	8004ae0 <RCCEx_PLLSAI2_Config+0x90>
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d002      	beq.n	8004a9e <RCCEx_PLLSAI2_Config+0x4e>
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d009      	beq.n	8004ab0 <RCCEx_PLLSAI2_Config+0x60>
 8004a9c:	e020      	b.n	8004ae0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a9e:	4b62      	ldr	r3, [pc, #392]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11d      	bne.n	8004ae6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aae:	e01a      	b.n	8004ae6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d116      	bne.n	8004aea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac0:	e013      	b.n	8004aea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ac2:	4b59      	ldr	r3, [pc, #356]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10f      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ace:	4b56      	ldr	r3, [pc, #344]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ade:	e006      	b.n	8004aee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae4:	e004      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e002      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004aee:	bf00      	nop
    }

    if(status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004af6:	4b4c      	ldr	r3, [pc, #304]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4949      	ldr	r1, [pc, #292]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 8086 	bne.w	8004c1c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b10:	4b45      	ldr	r3, [pc, #276]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a44      	ldr	r2, [pc, #272]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1c:	f7fc fd72 	bl	8001604 <HAL_GetTick>
 8004b20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b22:	e009      	b.n	8004b38 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b24:	f7fc fd6e 	bl	8001604 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d902      	bls.n	8004b38 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	73fb      	strb	r3, [r7, #15]
        break;
 8004b36:	e005      	b.n	8004b44 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b38:	4b3b      	ldr	r3, [pc, #236]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ef      	bne.n	8004b24 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d168      	bne.n	8004c1c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d113      	bne.n	8004b78 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b50:	4b35      	ldr	r3, [pc, #212]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b52:	695a      	ldr	r2, [r3, #20]
 8004b54:	4b35      	ldr	r3, [pc, #212]	@ (8004c2c <RCCEx_PLLSAI2_Config+0x1dc>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6892      	ldr	r2, [r2, #8]
 8004b5c:	0211      	lsls	r1, r2, #8
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68d2      	ldr	r2, [r2, #12]
 8004b62:	06d2      	lsls	r2, r2, #27
 8004b64:	4311      	orrs	r1, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6852      	ldr	r2, [r2, #4]
 8004b6a:	3a01      	subs	r2, #1
 8004b6c:	0112      	lsls	r2, r2, #4
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	492d      	ldr	r1, [pc, #180]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	614b      	str	r3, [r1, #20]
 8004b76:	e02d      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d115      	bne.n	8004baa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	4b2b      	ldr	r3, [pc, #172]	@ (8004c30 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6892      	ldr	r2, [r2, #8]
 8004b8a:	0211      	lsls	r1, r2, #8
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6912      	ldr	r2, [r2, #16]
 8004b90:	0852      	lsrs	r2, r2, #1
 8004b92:	3a01      	subs	r2, #1
 8004b94:	0552      	lsls	r2, r2, #21
 8004b96:	4311      	orrs	r1, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6852      	ldr	r2, [r2, #4]
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0112      	lsls	r2, r2, #4
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	4921      	ldr	r1, [pc, #132]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	614b      	str	r3, [r1, #20]
 8004ba8:	e014      	b.n	8004bd4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004baa:	4b1f      	ldr	r3, [pc, #124]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	4b21      	ldr	r3, [pc, #132]	@ (8004c34 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6892      	ldr	r2, [r2, #8]
 8004bb6:	0211      	lsls	r1, r2, #8
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6952      	ldr	r2, [r2, #20]
 8004bbc:	0852      	lsrs	r2, r2, #1
 8004bbe:	3a01      	subs	r2, #1
 8004bc0:	0652      	lsls	r2, r2, #25
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6852      	ldr	r2, [r2, #4]
 8004bc8:	3a01      	subs	r2, #1
 8004bca:	0112      	lsls	r2, r2, #4
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	4916      	ldr	r1, [pc, #88]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bd4:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a13      	ldr	r2, [pc, #76]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fc fd10 	bl	8001604 <HAL_GetTick>
 8004be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004be6:	e009      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004be8:	f7fc fd0c 	bl	8001604 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d902      	bls.n	8004bfc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8004bfa:	e005      	b.n	8004c08 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ef      	beq.n	8004be8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	4904      	ldr	r1, [pc, #16]	@ (8004c28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	07ff800f 	.word	0x07ff800f
 8004c30:	ff9f800f 	.word	0xff9f800f
 8004c34:	f9ff800f 	.word	0xf9ff800f

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e049      	b.n	8004cde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fc fad4 	bl	800120c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 fca4 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
	...

08004ce8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d001      	beq.n	8004d00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e047      	b.n	8004d90 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	@ (8004d9c <HAL_TIM_Base_Start+0xb4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01d      	beq.n	8004d4e <HAL_TIM_Base_Start+0x66>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d1a:	d018      	beq.n	8004d4e <HAL_TIM_Base_Start+0x66>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a1f      	ldr	r2, [pc, #124]	@ (8004da0 <HAL_TIM_Base_Start+0xb8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <HAL_TIM_Base_Start+0x66>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004da4 <HAL_TIM_Base_Start+0xbc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00e      	beq.n	8004d4e <HAL_TIM_Base_Start+0x66>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1c      	ldr	r2, [pc, #112]	@ (8004da8 <HAL_TIM_Base_Start+0xc0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <HAL_TIM_Base_Start+0x66>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <HAL_TIM_Base_Start+0xc4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <HAL_TIM_Base_Start+0x66>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a19      	ldr	r2, [pc, #100]	@ (8004db0 <HAL_TIM_Base_Start+0xc8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d115      	bne.n	8004d7a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	4b17      	ldr	r3, [pc, #92]	@ (8004db4 <HAL_TIM_Base_Start+0xcc>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d015      	beq.n	8004d8c <HAL_TIM_Base_Start+0xa4>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d66:	d011      	beq.n	8004d8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d78:	e008      	b.n	8004d8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e000      	b.n	8004d8e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000800 	.word	0x40000800
 8004da8:	40000c00 	.word	0x40000c00
 8004dac:	40013400 	.word	0x40013400
 8004db0:	40014000 	.word	0x40014000
 8004db4:	00010007 	.word	0x00010007

08004db8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <HAL_TIM_Base_Stop+0x38>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6a1a      	ldr	r2, [r3, #32]
 8004dd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_TIM_Base_Stop+0x38>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0201 	bic.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
	...

08004e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d001      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e04f      	b.n	8004ec0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a23      	ldr	r2, [pc, #140]	@ (8004ecc <HAL_TIM_Base_Start_IT+0xc4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01d      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x76>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4a:	d018      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x76>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x76>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x76>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x76>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004edc <HAL_TIM_Base_Start_IT+0xd4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x76>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d115      	bne.n	8004eaa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	4b17      	ldr	r3, [pc, #92]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b06      	cmp	r3, #6
 8004e8e:	d015      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0xb4>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e96:	d011      	beq.n	8004ebc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	e008      	b.n	8004ebc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e000      	b.n	8004ebe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40013400 	.word	0x40013400
 8004ee0:	40014000 	.word	0x40014000
 8004ee4:	00010007 	.word	0x00010007

08004ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e049      	b.n	8004f8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f841 	bl	8004f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f000 fb4c 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01b      	beq.n	800500e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f06f 0202 	mvn.w	r2, #2
 8004fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fac6 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8004ffa:	e005      	b.n	8005008 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fab8 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fac9 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d01b      	beq.n	800505a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f06f 0204 	mvn.w	r2, #4
 800502a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 faa0 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8005046:	e005      	b.n	8005054 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa92 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 faa3 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01b      	beq.n	80050a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0208 	mvn.w	r2, #8
 8005076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2204      	movs	r2, #4
 800507c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa7a 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8005092:	e005      	b.n	80050a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa6c 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa7d 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01b      	beq.n	80050f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f06f 0210 	mvn.w	r2, #16
 80050c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2208      	movs	r2, #8
 80050c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fa54 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 80050de:	e005      	b.n	80050ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fa46 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa57 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00c      	beq.n	8005116 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f06f 0201 	mvn.w	r2, #1
 800510e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fb fab7 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d104      	bne.n	800512a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fee8 	bl	8005f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fee0 	bl	8005f28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa11 	bl	80055ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00c      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0220 	mvn.w	r2, #32
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fea8 	bl	8005f00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e0ff      	b.n	80053d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b14      	cmp	r3, #20
 80051e2:	f200 80f0 	bhi.w	80053c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051e6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005241 	.word	0x08005241
 80051f0:	080053c7 	.word	0x080053c7
 80051f4:	080053c7 	.word	0x080053c7
 80051f8:	080053c7 	.word	0x080053c7
 80051fc:	08005281 	.word	0x08005281
 8005200:	080053c7 	.word	0x080053c7
 8005204:	080053c7 	.word	0x080053c7
 8005208:	080053c7 	.word	0x080053c7
 800520c:	080052c3 	.word	0x080052c3
 8005210:	080053c7 	.word	0x080053c7
 8005214:	080053c7 	.word	0x080053c7
 8005218:	080053c7 	.word	0x080053c7
 800521c:	08005303 	.word	0x08005303
 8005220:	080053c7 	.word	0x080053c7
 8005224:	080053c7 	.word	0x080053c7
 8005228:	080053c7 	.word	0x080053c7
 800522c:	08005345 	.word	0x08005345
 8005230:	080053c7 	.word	0x080053c7
 8005234:	080053c7 	.word	0x080053c7
 8005238:	080053c7 	.word	0x080053c7
 800523c:	08005385 	.word	0x08005385
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fa62 	bl	8005710 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0208 	orr.w	r2, r2, #8
 800525a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0204 	bic.w	r2, r2, #4
 800526a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6999      	ldr	r1, [r3, #24]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	619a      	str	r2, [r3, #24]
      break;
 800527e:	e0a5      	b.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fad2 	bl	8005830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800529a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6999      	ldr	r1, [r3, #24]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	021a      	lsls	r2, r3, #8
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	619a      	str	r2, [r3, #24]
      break;
 80052c0:	e084      	b.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fb3b 	bl	8005944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0208 	orr.w	r2, r2, #8
 80052dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0204 	bic.w	r2, r2, #4
 80052ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69d9      	ldr	r1, [r3, #28]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	61da      	str	r2, [r3, #28]
      break;
 8005300:	e064      	b.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68b9      	ldr	r1, [r7, #8]
 8005308:	4618      	mov	r0, r3
 800530a:	f000 fba3 	bl	8005a54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800531c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800532c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69d9      	ldr	r1, [r3, #28]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	021a      	lsls	r2, r3, #8
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	61da      	str	r2, [r3, #28]
      break;
 8005342:	e043      	b.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fbec 	bl	8005b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0208 	orr.w	r2, r2, #8
 800535e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005382:	e023      	b.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fc30 	bl	8005bf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800539e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053c4:	e002      	b.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
      break;
 80053ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop

080053e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_ConfigClockSource+0x1c>
 80053f8:	2302      	movs	r3, #2
 80053fa:	e0b6      	b.n	800556a <HAL_TIM_ConfigClockSource+0x18a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800541a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800541e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005438:	d03e      	beq.n	80054b8 <HAL_TIM_ConfigClockSource+0xd8>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800543e:	f200 8087 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005446:	f000 8086 	beq.w	8005556 <HAL_TIM_ConfigClockSource+0x176>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544e:	d87f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005450:	2b70      	cmp	r3, #112	@ 0x70
 8005452:	d01a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xaa>
 8005454:	2b70      	cmp	r3, #112	@ 0x70
 8005456:	d87b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005458:	2b60      	cmp	r3, #96	@ 0x60
 800545a:	d050      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x11e>
 800545c:	2b60      	cmp	r3, #96	@ 0x60
 800545e:	d877      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005460:	2b50      	cmp	r3, #80	@ 0x50
 8005462:	d03c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0xfe>
 8005464:	2b50      	cmp	r3, #80	@ 0x50
 8005466:	d873      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d058      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x13e>
 800546c:	2b40      	cmp	r3, #64	@ 0x40
 800546e:	d86f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005470:	2b30      	cmp	r3, #48	@ 0x30
 8005472:	d064      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15e>
 8005474:	2b30      	cmp	r3, #48	@ 0x30
 8005476:	d86b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d060      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15e>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d867      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05c      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15e>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d05a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15e>
 8005488:	e062      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	f000 fc89 	bl	8005db0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
      break;
 80054b6:	e04f      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	f000 fc72 	bl	8005db0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80054da:	609a      	str	r2, [r3, #8]
      break;
 80054dc:	e03c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 fbe6 	bl	8005cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2150      	movs	r1, #80	@ 0x50
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fc3f 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 80054fc:	e02c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550a:	461a      	mov	r2, r3
 800550c:	f000 fc05 	bl	8005d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2160      	movs	r1, #96	@ 0x60
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fc2f 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 800551c:	e01c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	461a      	mov	r2, r3
 800552c:	f000 fbc6 	bl	8005cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2140      	movs	r1, #64	@ 0x40
 8005536:	4618      	mov	r0, r3
 8005538:	f000 fc1f 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 800553c:	e00c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 fc16 	bl	8005d7a <TIM_ITRx_SetConfig>
      break;
 800554e:	e003      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e000      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a46      	ldr	r2, [pc, #280]	@ (80056f0 <TIM_Base_SetConfig+0x12c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a43      	ldr	r2, [pc, #268]	@ (80056f4 <TIM_Base_SetConfig+0x130>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a42      	ldr	r2, [pc, #264]	@ (80056f8 <TIM_Base_SetConfig+0x134>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a41      	ldr	r2, [pc, #260]	@ (80056fc <TIM_Base_SetConfig+0x138>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a40      	ldr	r2, [pc, #256]	@ (8005700 <TIM_Base_SetConfig+0x13c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a35      	ldr	r2, [pc, #212]	@ (80056f0 <TIM_Base_SetConfig+0x12c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005624:	d01b      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a32      	ldr	r2, [pc, #200]	@ (80056f4 <TIM_Base_SetConfig+0x130>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d017      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a31      	ldr	r2, [pc, #196]	@ (80056f8 <TIM_Base_SetConfig+0x134>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a30      	ldr	r2, [pc, #192]	@ (80056fc <TIM_Base_SetConfig+0x138>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00f      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2f      	ldr	r2, [pc, #188]	@ (8005700 <TIM_Base_SetConfig+0x13c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00b      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2e      	ldr	r2, [pc, #184]	@ (8005704 <TIM_Base_SetConfig+0x140>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d007      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2d      	ldr	r2, [pc, #180]	@ (8005708 <TIM_Base_SetConfig+0x144>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d003      	beq.n	800565e <TIM_Base_SetConfig+0x9a>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2c      	ldr	r2, [pc, #176]	@ (800570c <TIM_Base_SetConfig+0x148>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d108      	bne.n	8005670 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005664:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <TIM_Base_SetConfig+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a18      	ldr	r2, [pc, #96]	@ (8005700 <TIM_Base_SetConfig+0x13c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <TIM_Base_SetConfig+0x140>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a16      	ldr	r2, [pc, #88]	@ (8005708 <TIM_Base_SetConfig+0x144>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a15      	ldr	r2, [pc, #84]	@ (800570c <TIM_Base_SetConfig+0x148>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d105      	bne.n	80056e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]
  }
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800
 80056fc:	40000c00 	.word	0x40000c00
 8005700:	40013400 	.word	0x40013400
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800

08005710 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f023 0201 	bic.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800573e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 0302 	bic.w	r3, r3, #2
 800575c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	4313      	orrs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a2c      	ldr	r2, [pc, #176]	@ (800581c <TIM_OC1_SetConfig+0x10c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00f      	beq.n	8005790 <TIM_OC1_SetConfig+0x80>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a2b      	ldr	r2, [pc, #172]	@ (8005820 <TIM_OC1_SetConfig+0x110>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00b      	beq.n	8005790 <TIM_OC1_SetConfig+0x80>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a2a      	ldr	r2, [pc, #168]	@ (8005824 <TIM_OC1_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d007      	beq.n	8005790 <TIM_OC1_SetConfig+0x80>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a29      	ldr	r2, [pc, #164]	@ (8005828 <TIM_OC1_SetConfig+0x118>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d003      	beq.n	8005790 <TIM_OC1_SetConfig+0x80>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a28      	ldr	r2, [pc, #160]	@ (800582c <TIM_OC1_SetConfig+0x11c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d10c      	bne.n	80057aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 0308 	bic.w	r3, r3, #8
 8005796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 0304 	bic.w	r3, r3, #4
 80057a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	@ (800581c <TIM_OC1_SetConfig+0x10c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_OC1_SetConfig+0xc2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005820 <TIM_OC1_SetConfig+0x110>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_OC1_SetConfig+0xc2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a19      	ldr	r2, [pc, #100]	@ (8005824 <TIM_OC1_SetConfig+0x114>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_OC1_SetConfig+0xc2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a18      	ldr	r2, [pc, #96]	@ (8005828 <TIM_OC1_SetConfig+0x118>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC1_SetConfig+0xc2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a17      	ldr	r2, [pc, #92]	@ (800582c <TIM_OC1_SetConfig+0x11c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40013400 	.word	0x40013400
 8005824:	40014000 	.word	0x40014000
 8005828:	40014400 	.word	0x40014400
 800582c:	40014800 	.word	0x40014800

08005830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f023 0210 	bic.w	r2, r3, #16
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0320 	bic.w	r3, r3, #32
 800587e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a28      	ldr	r2, [pc, #160]	@ (8005930 <TIM_OC2_SetConfig+0x100>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC2_SetConfig+0x6c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a27      	ldr	r2, [pc, #156]	@ (8005934 <TIM_OC2_SetConfig+0x104>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005930 <TIM_OC2_SetConfig+0x100>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00f      	beq.n	80058e0 <TIM_OC2_SetConfig+0xb0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005934 <TIM_OC2_SetConfig+0x104>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_OC2_SetConfig+0xb0>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005938 <TIM_OC2_SetConfig+0x108>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_OC2_SetConfig+0xb0>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a1a      	ldr	r2, [pc, #104]	@ (800593c <TIM_OC2_SetConfig+0x10c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC2_SetConfig+0xb0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a19      	ldr	r2, [pc, #100]	@ (8005940 <TIM_OC2_SetConfig+0x110>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d113      	bne.n	8005908 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800

08005944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0303 	bic.w	r3, r3, #3
 800597e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a27      	ldr	r2, [pc, #156]	@ (8005a40 <TIM_OC3_SetConfig+0xfc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_OC3_SetConfig+0x6a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a26      	ldr	r2, [pc, #152]	@ (8005a44 <TIM_OC3_SetConfig+0x100>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10d      	bne.n	80059ca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005a40 <TIM_OC3_SetConfig+0xfc>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00f      	beq.n	80059f2 <TIM_OC3_SetConfig+0xae>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a44 <TIM_OC3_SetConfig+0x100>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00b      	beq.n	80059f2 <TIM_OC3_SetConfig+0xae>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <TIM_OC3_SetConfig+0x104>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d007      	beq.n	80059f2 <TIM_OC3_SetConfig+0xae>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a19      	ldr	r2, [pc, #100]	@ (8005a4c <TIM_OC3_SetConfig+0x108>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d003      	beq.n	80059f2 <TIM_OC3_SetConfig+0xae>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <TIM_OC3_SetConfig+0x10c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d113      	bne.n	8005a1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40013400 	.word	0x40013400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800

08005a54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <TIM_OC4_SetConfig+0xc0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00f      	beq.n	8005ad8 <TIM_OC4_SetConfig+0x84>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a17      	ldr	r2, [pc, #92]	@ (8005b18 <TIM_OC4_SetConfig+0xc4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00b      	beq.n	8005ad8 <TIM_OC4_SetConfig+0x84>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <TIM_OC4_SetConfig+0xc8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d007      	beq.n	8005ad8 <TIM_OC4_SetConfig+0x84>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a15      	ldr	r2, [pc, #84]	@ (8005b20 <TIM_OC4_SetConfig+0xcc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC4_SetConfig+0x84>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a14      	ldr	r2, [pc, #80]	@ (8005b24 <TIM_OC4_SetConfig+0xd0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d109      	bne.n	8005aec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	019b      	lsls	r3, r3, #6
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40013400 	.word	0x40013400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800

08005b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	041b      	lsls	r3, r3, #16
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a17      	ldr	r2, [pc, #92]	@ (8005bdc <TIM_OC5_SetConfig+0xb4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00f      	beq.n	8005ba2 <TIM_OC5_SetConfig+0x7a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a16      	ldr	r2, [pc, #88]	@ (8005be0 <TIM_OC5_SetConfig+0xb8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <TIM_OC5_SetConfig+0x7a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a15      	ldr	r2, [pc, #84]	@ (8005be4 <TIM_OC5_SetConfig+0xbc>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <TIM_OC5_SetConfig+0x7a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a14      	ldr	r2, [pc, #80]	@ (8005be8 <TIM_OC5_SetConfig+0xc0>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC5_SetConfig+0x7a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a13      	ldr	r2, [pc, #76]	@ (8005bec <TIM_OC5_SetConfig+0xc4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d109      	bne.n	8005bb6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40013400 	.word	0x40013400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	051b      	lsls	r3, r3, #20
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a18      	ldr	r2, [pc, #96]	@ (8005ca8 <TIM_OC6_SetConfig+0xb8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00f      	beq.n	8005c6c <TIM_OC6_SetConfig+0x7c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a17      	ldr	r2, [pc, #92]	@ (8005cac <TIM_OC6_SetConfig+0xbc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_OC6_SetConfig+0x7c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a16      	ldr	r2, [pc, #88]	@ (8005cb0 <TIM_OC6_SetConfig+0xc0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_OC6_SetConfig+0x7c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	@ (8005cb4 <TIM_OC6_SetConfig+0xc4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_OC6_SetConfig+0x7c>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a14      	ldr	r2, [pc, #80]	@ (8005cb8 <TIM_OC6_SetConfig+0xc8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d109      	bne.n	8005c80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	029b      	lsls	r3, r3, #10
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40012c00 	.word	0x40012c00
 8005cac:	40013400 	.word	0x40013400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800

08005cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0201 	bic.w	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 030a 	bic.w	r3, r3, #10
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	bf00      	nop
 8005d10:	371c      	adds	r7, #28
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b087      	sub	sp, #28
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f023 0210 	bic.w	r2, r3, #16
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	031b      	lsls	r3, r3, #12
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b085      	sub	sp, #20
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f043 0307 	orr.w	r3, r3, #7
 8005d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	021a      	lsls	r2, r3, #8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	609a      	str	r2, [r3, #8]
}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e068      	b.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2d      	ldr	r2, [pc, #180]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01d      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e7a:	d018      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00e      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a18      	ldr	r2, [pc, #96]	@ (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d009      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	@ (8005eec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d004      	beq.n	8005eae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a14      	ldr	r2, [pc, #80]	@ (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10c      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40013400 	.word	0x40013400
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40014000 	.word	0x40014000

08005f00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e042      	b.n	8005fd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fb f9ed 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2224      	movs	r2, #36	@ 0x24
 8005f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fb24 	bl	80065d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f825 	bl	8005fdc <UART_SetConfig>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d101      	bne.n	8005f9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e01b      	b.n	8005fd4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fba3 	bl	8006718 <UART_CheckIdleState>
 8005fd2:	4603      	mov	r3, r0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe0:	b08c      	sub	sp, #48	@ 0x30
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	4313      	orrs	r3, r2
 8006002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4baa      	ldr	r3, [pc, #680]	@ (80062b4 <UART_SetConfig+0x2d8>)
 800600c:	4013      	ands	r3, r2
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006014:	430b      	orrs	r3, r1
 8006016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a9f      	ldr	r2, [pc, #636]	@ (80062b8 <UART_SetConfig+0x2dc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d004      	beq.n	8006048 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006044:	4313      	orrs	r3, r2
 8006046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006052:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800605c:	430b      	orrs	r3, r1
 800605e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006066:	f023 010f 	bic.w	r1, r3, #15
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a90      	ldr	r2, [pc, #576]	@ (80062bc <UART_SetConfig+0x2e0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d125      	bne.n	80060cc <UART_SetConfig+0xf0>
 8006080:	4b8f      	ldr	r3, [pc, #572]	@ (80062c0 <UART_SetConfig+0x2e4>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b03      	cmp	r3, #3
 800608c:	d81a      	bhi.n	80060c4 <UART_SetConfig+0xe8>
 800608e:	a201      	add	r2, pc, #4	@ (adr r2, 8006094 <UART_SetConfig+0xb8>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060a5 	.word	0x080060a5
 8006098:	080060b5 	.word	0x080060b5
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	2301      	movs	r3, #1
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060aa:	e116      	b.n	80062da <UART_SetConfig+0x2fe>
 80060ac:	2302      	movs	r3, #2
 80060ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b2:	e112      	b.n	80062da <UART_SetConfig+0x2fe>
 80060b4:	2304      	movs	r3, #4
 80060b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ba:	e10e      	b.n	80062da <UART_SetConfig+0x2fe>
 80060bc:	2308      	movs	r3, #8
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060c2:	e10a      	b.n	80062da <UART_SetConfig+0x2fe>
 80060c4:	2310      	movs	r3, #16
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ca:	e106      	b.n	80062da <UART_SetConfig+0x2fe>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a7c      	ldr	r2, [pc, #496]	@ (80062c4 <UART_SetConfig+0x2e8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d138      	bne.n	8006148 <UART_SetConfig+0x16c>
 80060d6:	4b7a      	ldr	r3, [pc, #488]	@ (80062c0 <UART_SetConfig+0x2e4>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060dc:	f003 030c 	and.w	r3, r3, #12
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	d82d      	bhi.n	8006140 <UART_SetConfig+0x164>
 80060e4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <UART_SetConfig+0x110>)
 80060e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ea:	bf00      	nop
 80060ec:	08006121 	.word	0x08006121
 80060f0:	08006141 	.word	0x08006141
 80060f4:	08006141 	.word	0x08006141
 80060f8:	08006141 	.word	0x08006141
 80060fc:	08006131 	.word	0x08006131
 8006100:	08006141 	.word	0x08006141
 8006104:	08006141 	.word	0x08006141
 8006108:	08006141 	.word	0x08006141
 800610c:	08006129 	.word	0x08006129
 8006110:	08006141 	.word	0x08006141
 8006114:	08006141 	.word	0x08006141
 8006118:	08006141 	.word	0x08006141
 800611c:	08006139 	.word	0x08006139
 8006120:	2300      	movs	r3, #0
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006126:	e0d8      	b.n	80062da <UART_SetConfig+0x2fe>
 8006128:	2302      	movs	r3, #2
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612e:	e0d4      	b.n	80062da <UART_SetConfig+0x2fe>
 8006130:	2304      	movs	r3, #4
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006136:	e0d0      	b.n	80062da <UART_SetConfig+0x2fe>
 8006138:	2308      	movs	r3, #8
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613e:	e0cc      	b.n	80062da <UART_SetConfig+0x2fe>
 8006140:	2310      	movs	r3, #16
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006146:	e0c8      	b.n	80062da <UART_SetConfig+0x2fe>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a5e      	ldr	r2, [pc, #376]	@ (80062c8 <UART_SetConfig+0x2ec>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d125      	bne.n	800619e <UART_SetConfig+0x1c2>
 8006152:	4b5b      	ldr	r3, [pc, #364]	@ (80062c0 <UART_SetConfig+0x2e4>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006158:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800615c:	2b30      	cmp	r3, #48	@ 0x30
 800615e:	d016      	beq.n	800618e <UART_SetConfig+0x1b2>
 8006160:	2b30      	cmp	r3, #48	@ 0x30
 8006162:	d818      	bhi.n	8006196 <UART_SetConfig+0x1ba>
 8006164:	2b20      	cmp	r3, #32
 8006166:	d00a      	beq.n	800617e <UART_SetConfig+0x1a2>
 8006168:	2b20      	cmp	r3, #32
 800616a:	d814      	bhi.n	8006196 <UART_SetConfig+0x1ba>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <UART_SetConfig+0x19a>
 8006170:	2b10      	cmp	r3, #16
 8006172:	d008      	beq.n	8006186 <UART_SetConfig+0x1aa>
 8006174:	e00f      	b.n	8006196 <UART_SetConfig+0x1ba>
 8006176:	2300      	movs	r3, #0
 8006178:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800617c:	e0ad      	b.n	80062da <UART_SetConfig+0x2fe>
 800617e:	2302      	movs	r3, #2
 8006180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006184:	e0a9      	b.n	80062da <UART_SetConfig+0x2fe>
 8006186:	2304      	movs	r3, #4
 8006188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800618c:	e0a5      	b.n	80062da <UART_SetConfig+0x2fe>
 800618e:	2308      	movs	r3, #8
 8006190:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006194:	e0a1      	b.n	80062da <UART_SetConfig+0x2fe>
 8006196:	2310      	movs	r3, #16
 8006198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619c:	e09d      	b.n	80062da <UART_SetConfig+0x2fe>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a4a      	ldr	r2, [pc, #296]	@ (80062cc <UART_SetConfig+0x2f0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d125      	bne.n	80061f4 <UART_SetConfig+0x218>
 80061a8:	4b45      	ldr	r3, [pc, #276]	@ (80062c0 <UART_SetConfig+0x2e4>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80061b4:	d016      	beq.n	80061e4 <UART_SetConfig+0x208>
 80061b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061b8:	d818      	bhi.n	80061ec <UART_SetConfig+0x210>
 80061ba:	2b80      	cmp	r3, #128	@ 0x80
 80061bc:	d00a      	beq.n	80061d4 <UART_SetConfig+0x1f8>
 80061be:	2b80      	cmp	r3, #128	@ 0x80
 80061c0:	d814      	bhi.n	80061ec <UART_SetConfig+0x210>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <UART_SetConfig+0x1f0>
 80061c6:	2b40      	cmp	r3, #64	@ 0x40
 80061c8:	d008      	beq.n	80061dc <UART_SetConfig+0x200>
 80061ca:	e00f      	b.n	80061ec <UART_SetConfig+0x210>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d2:	e082      	b.n	80062da <UART_SetConfig+0x2fe>
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061da:	e07e      	b.n	80062da <UART_SetConfig+0x2fe>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e2:	e07a      	b.n	80062da <UART_SetConfig+0x2fe>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	e076      	b.n	80062da <UART_SetConfig+0x2fe>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f2:	e072      	b.n	80062da <UART_SetConfig+0x2fe>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a35      	ldr	r2, [pc, #212]	@ (80062d0 <UART_SetConfig+0x2f4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d12a      	bne.n	8006254 <UART_SetConfig+0x278>
 80061fe:	4b30      	ldr	r3, [pc, #192]	@ (80062c0 <UART_SetConfig+0x2e4>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006204:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800620c:	d01a      	beq.n	8006244 <UART_SetConfig+0x268>
 800620e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006212:	d81b      	bhi.n	800624c <UART_SetConfig+0x270>
 8006214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006218:	d00c      	beq.n	8006234 <UART_SetConfig+0x258>
 800621a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800621e:	d815      	bhi.n	800624c <UART_SetConfig+0x270>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <UART_SetConfig+0x250>
 8006224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006228:	d008      	beq.n	800623c <UART_SetConfig+0x260>
 800622a:	e00f      	b.n	800624c <UART_SetConfig+0x270>
 800622c:	2300      	movs	r3, #0
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006232:	e052      	b.n	80062da <UART_SetConfig+0x2fe>
 8006234:	2302      	movs	r3, #2
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623a:	e04e      	b.n	80062da <UART_SetConfig+0x2fe>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006242:	e04a      	b.n	80062da <UART_SetConfig+0x2fe>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624a:	e046      	b.n	80062da <UART_SetConfig+0x2fe>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006252:	e042      	b.n	80062da <UART_SetConfig+0x2fe>
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a17      	ldr	r2, [pc, #92]	@ (80062b8 <UART_SetConfig+0x2dc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d13a      	bne.n	80062d4 <UART_SetConfig+0x2f8>
 800625e:	4b18      	ldr	r3, [pc, #96]	@ (80062c0 <UART_SetConfig+0x2e4>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006264:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006268:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800626c:	d01a      	beq.n	80062a4 <UART_SetConfig+0x2c8>
 800626e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006272:	d81b      	bhi.n	80062ac <UART_SetConfig+0x2d0>
 8006274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006278:	d00c      	beq.n	8006294 <UART_SetConfig+0x2b8>
 800627a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800627e:	d815      	bhi.n	80062ac <UART_SetConfig+0x2d0>
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <UART_SetConfig+0x2b0>
 8006284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006288:	d008      	beq.n	800629c <UART_SetConfig+0x2c0>
 800628a:	e00f      	b.n	80062ac <UART_SetConfig+0x2d0>
 800628c:	2300      	movs	r3, #0
 800628e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006292:	e022      	b.n	80062da <UART_SetConfig+0x2fe>
 8006294:	2302      	movs	r3, #2
 8006296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629a:	e01e      	b.n	80062da <UART_SetConfig+0x2fe>
 800629c:	2304      	movs	r3, #4
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a2:	e01a      	b.n	80062da <UART_SetConfig+0x2fe>
 80062a4:	2308      	movs	r3, #8
 80062a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062aa:	e016      	b.n	80062da <UART_SetConfig+0x2fe>
 80062ac:	2310      	movs	r3, #16
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b2:	e012      	b.n	80062da <UART_SetConfig+0x2fe>
 80062b4:	cfff69f3 	.word	0xcfff69f3
 80062b8:	40008000 	.word	0x40008000
 80062bc:	40013800 	.word	0x40013800
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40004400 	.word	0x40004400
 80062c8:	40004800 	.word	0x40004800
 80062cc:	40004c00 	.word	0x40004c00
 80062d0:	40005000 	.word	0x40005000
 80062d4:	2310      	movs	r3, #16
 80062d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4aae      	ldr	r2, [pc, #696]	@ (8006598 <UART_SetConfig+0x5bc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	f040 8097 	bne.w	8006414 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062ea:	2b08      	cmp	r3, #8
 80062ec:	d823      	bhi.n	8006336 <UART_SetConfig+0x35a>
 80062ee:	a201      	add	r2, pc, #4	@ (adr r2, 80062f4 <UART_SetConfig+0x318>)
 80062f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006337 	.word	0x08006337
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006337 	.word	0x08006337
 8006304:	08006327 	.word	0x08006327
 8006308:	08006337 	.word	0x08006337
 800630c:	08006337 	.word	0x08006337
 8006310:	08006337 	.word	0x08006337
 8006314:	0800632f 	.word	0x0800632f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fd fe8a 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 800631c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800631e:	e010      	b.n	8006342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006320:	4b9e      	ldr	r3, [pc, #632]	@ (800659c <UART_SetConfig+0x5c0>)
 8006322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006324:	e00d      	b.n	8006342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006326:	f7fd fdeb 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 800632a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800632c:	e009      	b.n	8006342 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006334:	e005      	b.n	8006342 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006340:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8130 	beq.w	80065aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634e:	4a94      	ldr	r2, [pc, #592]	@ (80065a0 <UART_SetConfig+0x5c4>)
 8006350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006354:	461a      	mov	r2, r3
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	fbb3 f3f2 	udiv	r3, r3, r2
 800635c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	4413      	add	r3, r2
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	429a      	cmp	r2, r3
 800636c:	d305      	bcc.n	800637a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	429a      	cmp	r2, r3
 8006378:	d903      	bls.n	8006382 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006380:	e113      	b.n	80065aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	2200      	movs	r2, #0
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	60fa      	str	r2, [r7, #12]
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	4a84      	ldr	r2, [pc, #528]	@ (80065a0 <UART_SetConfig+0x5c4>)
 8006390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006394:	b29b      	uxth	r3, r3
 8006396:	2200      	movs	r2, #0
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063a4:	f7f9 ff2a 	bl	80001fc <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4610      	mov	r0, r2
 80063ae:	4619      	mov	r1, r3
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	020b      	lsls	r3, r1, #8
 80063ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063be:	0202      	lsls	r2, r0, #8
 80063c0:	6979      	ldr	r1, [r7, #20]
 80063c2:	6849      	ldr	r1, [r1, #4]
 80063c4:	0849      	lsrs	r1, r1, #1
 80063c6:	2000      	movs	r0, #0
 80063c8:	460c      	mov	r4, r1
 80063ca:	4605      	mov	r5, r0
 80063cc:	eb12 0804 	adds.w	r8, r2, r4
 80063d0:	eb43 0905 	adc.w	r9, r3, r5
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	469a      	mov	sl, r3
 80063dc:	4693      	mov	fp, r2
 80063de:	4652      	mov	r2, sl
 80063e0:	465b      	mov	r3, fp
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7f9 ff09 	bl	80001fc <__aeabi_uldivmod>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4613      	mov	r3, r2
 80063f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f8:	d308      	bcc.n	800640c <UART_SetConfig+0x430>
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006400:	d204      	bcs.n	800640c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e0ce      	b.n	80065aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006412:	e0ca      	b.n	80065aa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800641c:	d166      	bne.n	80064ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800641e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006422:	2b08      	cmp	r3, #8
 8006424:	d827      	bhi.n	8006476 <UART_SetConfig+0x49a>
 8006426:	a201      	add	r2, pc, #4	@ (adr r2, 800642c <UART_SetConfig+0x450>)
 8006428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642c:	08006451 	.word	0x08006451
 8006430:	08006459 	.word	0x08006459
 8006434:	08006461 	.word	0x08006461
 8006438:	08006477 	.word	0x08006477
 800643c:	08006467 	.word	0x08006467
 8006440:	08006477 	.word	0x08006477
 8006444:	08006477 	.word	0x08006477
 8006448:	08006477 	.word	0x08006477
 800644c:	0800646f 	.word	0x0800646f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006450:	f7fd fdee 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8006454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006456:	e014      	b.n	8006482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006458:	f7fd fe00 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800645e:	e010      	b.n	8006482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006460:	4b4e      	ldr	r3, [pc, #312]	@ (800659c <UART_SetConfig+0x5c0>)
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006464:	e00d      	b.n	8006482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006466:	f7fd fd4b 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 800646a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800646c:	e009      	b.n	8006482 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006474:	e005      	b.n	8006482 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8090 	beq.w	80065aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	4a44      	ldr	r2, [pc, #272]	@ (80065a0 <UART_SetConfig+0x5c4>)
 8006490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006494:	461a      	mov	r2, r3
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	fbb3 f3f2 	udiv	r3, r3, r2
 800649c:	005a      	lsls	r2, r3, #1
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	441a      	add	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	2b0f      	cmp	r3, #15
 80064b4:	d916      	bls.n	80064e4 <UART_SetConfig+0x508>
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064bc:	d212      	bcs.n	80064e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f023 030f 	bic.w	r3, r3, #15
 80064c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	8bfb      	ldrh	r3, [r7, #30]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	8bfa      	ldrh	r2, [r7, #30]
 80064e0:	60da      	str	r2, [r3, #12]
 80064e2:	e062      	b.n	80065aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064ea:	e05e      	b.n	80065aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d828      	bhi.n	8006546 <UART_SetConfig+0x56a>
 80064f4:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <UART_SetConfig+0x520>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006521 	.word	0x08006521
 8006500:	08006529 	.word	0x08006529
 8006504:	08006531 	.word	0x08006531
 8006508:	08006547 	.word	0x08006547
 800650c:	08006537 	.word	0x08006537
 8006510:	08006547 	.word	0x08006547
 8006514:	08006547 	.word	0x08006547
 8006518:	08006547 	.word	0x08006547
 800651c:	0800653f 	.word	0x0800653f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006520:	f7fd fd86 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8006524:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006526:	e014      	b.n	8006552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006528:	f7fd fd98 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 800652c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800652e:	e010      	b.n	8006552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006530:	4b1a      	ldr	r3, [pc, #104]	@ (800659c <UART_SetConfig+0x5c0>)
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006534:	e00d      	b.n	8006552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006536:	f7fd fce3 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 800653a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800653c:	e009      	b.n	8006552 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006544:	e005      	b.n	8006552 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006550:	bf00      	nop
    }

    if (pclk != 0U)
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	2b00      	cmp	r3, #0
 8006556:	d028      	beq.n	80065aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	4a10      	ldr	r2, [pc, #64]	@ (80065a0 <UART_SetConfig+0x5c4>)
 800655e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006562:	461a      	mov	r2, r3
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	fbb3 f2f2 	udiv	r2, r3, r2
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	441a      	add	r2, r3
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	fbb2 f3f3 	udiv	r3, r2, r3
 800657a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	2b0f      	cmp	r3, #15
 8006580:	d910      	bls.n	80065a4 <UART_SetConfig+0x5c8>
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006588:	d20c      	bcs.n	80065a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	b29a      	uxth	r2, r3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60da      	str	r2, [r3, #12]
 8006594:	e009      	b.n	80065aa <UART_SetConfig+0x5ce>
 8006596:	bf00      	nop
 8006598:	40008000 	.word	0x40008000
 800659c:	00f42400 	.word	0x00f42400
 80065a0:	08006cd0 	.word	0x08006cd0
      }
      else
      {
        ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2200      	movs	r2, #0
 80065c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3730      	adds	r7, #48	@ 0x30
 80065ce:	46bd      	mov	sp, r7
 80065d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	f003 0308 	and.w	r3, r3, #8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00a      	beq.n	80065fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00a      	beq.n	8006686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d01a      	beq.n	80066ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066d2:	d10a      	bne.n	80066ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b098      	sub	sp, #96	@ 0x60
 800671c:	af02      	add	r7, sp, #8
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006728:	f7fa ff6c 	bl	8001604 <HAL_GetTick>
 800672c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b08      	cmp	r3, #8
 800673a:	d12f      	bne.n	800679c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800673c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	2200      	movs	r2, #0
 8006746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f88e 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d022      	beq.n	800679c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800676a:	653b      	str	r3, [r7, #80]	@ 0x50
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006774:	647b      	str	r3, [r7, #68]	@ 0x44
 8006776:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800677a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e6      	bne.n	8006756 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e063      	b.n	8006864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d149      	bne.n	800683e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b2:	2200      	movs	r2, #0
 80067b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f857 	bl	800686c <UART_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d03c      	beq.n	800683e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	623b      	str	r3, [r7, #32]
   return(result);
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e6      	bne.n	80067c4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	60fb      	str	r3, [r7, #12]
   return(result);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006816:	61fa      	str	r2, [r7, #28]
 8006818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	69b9      	ldr	r1, [r7, #24]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	617b      	str	r3, [r7, #20]
   return(result);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e012      	b.n	8006864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3758      	adds	r7, #88	@ 0x58
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687c:	e04f      	b.n	800691e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d04b      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006886:	f7fa febd 	bl	8001604 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <UART_WaitOnFlagUntilTimeout+0x30>
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e04e      	b.n	800693e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d037      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b80      	cmp	r3, #128	@ 0x80
 80068b2:	d034      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0xb2>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b40      	cmp	r3, #64	@ 0x40
 80068b8:	d031      	beq.n	800691e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d110      	bne.n	80068ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2208      	movs	r2, #8
 80068ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f838 	bl	8006946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2208      	movs	r2, #8
 80068da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e029      	b.n	800693e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f8:	d111      	bne.n	800691e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f81e 	bl	8006946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2220      	movs	r2, #32
 800690e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e00f      	b.n	800693e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4013      	ands	r3, r2
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	429a      	cmp	r2, r3
 800692c:	bf0c      	ite	eq
 800692e:	2301      	moveq	r3, #1
 8006930:	2300      	movne	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	429a      	cmp	r2, r3
 800693a:	d0a0      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006946:	b480      	push	{r7}
 8006948:	b095      	sub	sp, #84	@ 0x54
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800696c:	643b      	str	r3, [r7, #64]	@ 0x40
 800696e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006972:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e6      	bne.n	800694e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e3      	bne.n	8006980 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d118      	bne.n	80069f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f023 0310 	bic.w	r3, r3, #16
 80069d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069de:	61bb      	str	r3, [r7, #24]
 80069e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6979      	ldr	r1, [r7, #20]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	613b      	str	r3, [r7, #16]
   return(result);
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e6      	bne.n	80069c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a06:	bf00      	nop
 8006a08:	3754      	adds	r7, #84	@ 0x54
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e027      	b.n	8006a78 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2224      	movs	r2, #36	@ 0x24
 8006a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0201 	bic.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e02d      	b.n	8006af8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2224      	movs	r2, #36	@ 0x24
 8006aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0201 	bic.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f84f 	bl	8006b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e02d      	b.n	8006b74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	@ 0x24
 8006b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0201 	bic.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f811 	bl	8006b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d108      	bne.n	8006b9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b9c:	e031      	b.n	8006c02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b9e:	2308      	movs	r3, #8
 8006ba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	0e5b      	lsrs	r3, r3, #25
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	0f5b      	lsrs	r3, r3, #29
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	7b3a      	ldrb	r2, [r7, #12]
 8006bca:	4911      	ldr	r1, [pc, #68]	@ (8006c10 <UARTEx_SetNbDataToProcess+0x94>)
 8006bcc:	5c8a      	ldrb	r2, [r1, r2]
 8006bce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bd2:	7b3a      	ldrb	r2, [r7, #12]
 8006bd4:	490f      	ldr	r1, [pc, #60]	@ (8006c14 <UARTEx_SetNbDataToProcess+0x98>)
 8006bd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	7b7a      	ldrb	r2, [r7, #13]
 8006be8:	4909      	ldr	r1, [pc, #36]	@ (8006c10 <UARTEx_SetNbDataToProcess+0x94>)
 8006bea:	5c8a      	ldrb	r2, [r1, r2]
 8006bec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bf0:	7b7a      	ldrb	r2, [r7, #13]
 8006bf2:	4908      	ldr	r1, [pc, #32]	@ (8006c14 <UARTEx_SetNbDataToProcess+0x98>)
 8006bf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	08006ce8 	.word	0x08006ce8
 8006c14:	08006cf0 	.word	0x08006cf0

08006c18 <memset>:
 8006c18:	4402      	add	r2, r0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d100      	bne.n	8006c22 <memset+0xa>
 8006c20:	4770      	bx	lr
 8006c22:	f803 1b01 	strb.w	r1, [r3], #1
 8006c26:	e7f9      	b.n	8006c1c <memset+0x4>

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c60 <__libc_init_array+0x38>)
 8006c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c64 <__libc_init_array+0x3c>)
 8006c2e:	1b64      	subs	r4, r4, r5
 8006c30:	10a4      	asrs	r4, r4, #2
 8006c32:	2600      	movs	r6, #0
 8006c34:	42a6      	cmp	r6, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	4d0b      	ldr	r5, [pc, #44]	@ (8006c68 <__libc_init_array+0x40>)
 8006c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c6c <__libc_init_array+0x44>)
 8006c3c:	f000 f818 	bl	8006c70 <_init>
 8006c40:	1b64      	subs	r4, r4, r5
 8006c42:	10a4      	asrs	r4, r4, #2
 8006c44:	2600      	movs	r6, #0
 8006c46:	42a6      	cmp	r6, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c50:	4798      	blx	r3
 8006c52:	3601      	adds	r6, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5a:	4798      	blx	r3
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	08006d00 	.word	0x08006d00
 8006c64:	08006d00 	.word	0x08006d00
 8006c68:	08006d00 	.word	0x08006d00
 8006c6c:	08006d04 	.word	0x08006d04

08006c70 <_init>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	bf00      	nop
 8006c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c76:	bc08      	pop	{r3}
 8006c78:	469e      	mov	lr, r3
 8006c7a:	4770      	bx	lr

08006c7c <_fini>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr
