
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bac  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dd8  08005dd8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005dd8  08005dd8  00006dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de0  08005de0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de0  08005de0  00006de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005de8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002270  2000000c  08005df4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  08005df4  0000727c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018689  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a39  00000000  00000000  0001f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00022100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001101  00000000  00000000  00023690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af7b  00000000  00000000  00024791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019766  00000000  00000000  0004f70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c201  00000000  00000000  00068e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d28  00000000  00000000  001750b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0017ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005d50 	.word	0x08005d50

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005d50 	.word	0x08005d50

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == B_BUTTON_Pin) {
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004fc:	d104      	bne.n	8000508 <HAL_GPIO_EXTI_Callback+0x1c>

			// Toggle LED for debug
			HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);
 80004fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000502:	4803      	ldr	r0, [pc, #12]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x24>)
 8000504:	f001 fee6 	bl	80022d4 <HAL_GPIO_TogglePin>
		}

}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	48000400 	.word	0x48000400

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint16_t i = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fdfa 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f853 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fa35 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f000 fa09 	bl	8000940 <MX_DMA_Init>
  MX_I2C2_Init();
 800052e:	f000 f905 	bl	800073c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000532:	f000 f9b9 	bl	80008a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000536:	f000 f941 	bl	80007bc <MX_TIM2_Init>
  MX_DFSDM1_Init();
 800053a:	f000 f899 	bl	8000670 <MX_DFSDM1_Init>


  /* USER CODE BEGIN 2 */


  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE);
 800053e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000542:	491d      	ldr	r1, [pc, #116]	@ (80005b8 <main+0xa4>)
 8000544:	481d      	ldr	r0, [pc, #116]	@ (80005bc <main+0xa8>)
 8000546:	f001 f94d 	bl	80017e4 <HAL_DFSDM_FilterRegularStart_DMA>
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */



		if (DmaRecHalfBuffCplt == 1) {
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <main+0xac>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d115      	bne.n	800057e <main+0x6a>

			for(i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 8000552:	2300      	movs	r3, #0
 8000554:	80fb      	strh	r3, [r7, #6]
 8000556:	e00b      	b.n	8000570 <main+0x5c>
				PlayBuf[i] = RecBuf[i]>>8;
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <main+0xa4>)
 800055c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	1212      	asrs	r2, r2, #8
 8000564:	4917      	ldr	r1, [pc, #92]	@ (80005c4 <main+0xb0>)
 8000566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i=0; i<AUDIO_BUFFER_SIZE/2; i++)
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	3301      	adds	r3, #1
 800056e:	80fb      	strh	r3, [r7, #6]
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000576:	d3ef      	bcc.n	8000558 <main+0x44>


			DmaRecHalfBuffCplt=0;
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <main+0xac>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
		}

		if (DmaRecBuffCplt == 1) {
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <main+0xb4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d1e1      	bne.n	800054a <main+0x36>


			for(i=AUDIO_BUFFER_SIZE/2; i<AUDIO_BUFFER_SIZE; i++)
 8000586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800058a:	80fb      	strh	r3, [r7, #6]
 800058c:	e00b      	b.n	80005a6 <main+0x92>
				PlayBuf[i] = RecBuf[i]>>8;
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <main+0xa4>)
 8000592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	1212      	asrs	r2, r2, #8
 800059a:	490a      	ldr	r1, [pc, #40]	@ (80005c4 <main+0xb0>)
 800059c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(i=AUDIO_BUFFER_SIZE/2; i<AUDIO_BUFFER_SIZE; i++)
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	3301      	adds	r3, #1
 80005a4:	80fb      	strh	r3, [r7, #6]
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005ac:	d3ef      	bcc.n	800058e <main+0x7a>


			DmaRecBuffCplt=0;
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <main+0xb4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
		if (DmaRecHalfBuffCplt == 1) {
 80005b4:	e7c9      	b.n	800054a <main+0x36>
 80005b6:	bf00      	nop
 80005b8:	20000248 	.word	0x20000248
 80005bc:	20000028 	.word	0x20000028
 80005c0:	20002248 	.word	0x20002248
 80005c4:	20001248 	.word	0x20001248
 80005c8:	20002249 	.word	0x20002249

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	@ 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	@ 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fb8c 	bl	8005cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f2:	f001 fff3 	bl	80025dc <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 fa66 	bl	8000acc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000600:	2310      	movs	r3, #16
 8000602:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800060c:	2360      	movs	r3, #96	@ 0x60
 800060e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000614:	2301      	movs	r3, #1
 8000616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000618:	2301      	movs	r3, #1
 800061a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800061c:	2328      	movs	r3, #40	@ 0x28
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4618      	mov	r0, r3
 8000632:	f002 f877 	bl	8002724 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800063c:	f000 fa46 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2303      	movs	r3, #3
 8000646:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2103      	movs	r1, #3
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fc7d 	bl	8002f58 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000664:	f000 fa32 	bl	8000acc <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	@ 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000674:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000676:	4a2d      	ldr	r2, [pc, #180]	@ (800072c <MX_DFSDM1_Init+0xbc>)
 8000678:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800067a:	4b2b      	ldr	r3, [pc, #172]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000680:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000682:	2201      	movs	r2, #1
 8000684:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000686:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000688:	2201      	movs	r2, #1
 800068a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800068c:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 800068e:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000692:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 8000694:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000696:	22fa      	movs	r2, #250	@ 0xfa
 8000698:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800069a:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 800069c:	2201      	movs	r2, #1
 800069e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80006a0:	4821      	ldr	r0, [pc, #132]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 80006a2:	f000 ff7f 	bl	80015a4 <HAL_DFSDM_FilterInit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80006ac:	f000 fa0e 	bl	8000acc <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <MX_DFSDM1_Init+0xc4>)
 80006b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006c4:	2228      	movs	r2, #40	@ 0x28
 80006c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006ce:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80006d4:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80006ec:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_DFSDM1_Init+0xc0>)
 8000700:	f000 fe90 	bl	8001424 <HAL_DFSDM_ChannelInit>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800070a:	f000 f9df 	bl	8000acc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800070e:	2201      	movs	r2, #1
 8000710:	4909      	ldr	r1, [pc, #36]	@ (8000738 <MX_DFSDM1_Init+0xc8>)
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_DFSDM1_Init+0xb8>)
 8000714:	f001 f820 	bl	8001758 <HAL_DFSDM_FilterConfigRegChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 800071e:	f000 f9d5 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000028 	.word	0x20000028
 800072c:	40016100 	.word	0x40016100
 8000730:	2000007c 	.word	0x2000007c
 8000734:	40016040 	.word	0x40016040
 8000738:	00020004 	.word	0x00020004

0800073c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	@ (80007b4 <MX_I2C2_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <MX_I2C2_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <MX_I2C2_Init+0x74>)
 8000778:	f001 fdde 	bl	8002338 <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 f9a3 	bl	8000acc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800078a:	f001 fe70 	bl	800246e <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 f99a 	bl	8000acc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_I2C2_Init+0x74>)
 800079c:	f001 feb2 	bl	8002504 <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 f991 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000114 	.word	0x20000114
 80007b4:	40005800 	.word	0x40005800
 80007b8:	10d19ce4 	.word	0x10d19ce4

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	@ 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000802:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000808:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080a:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000810:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000816:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000818:	f003 fb74 	bl	8003f04 <HAL_TIM_Base_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f953 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000830:	4619      	mov	r1, r3
 8000832:	481c      	ldr	r0, [pc, #112]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000834:	f003 fe3a 	bl	80044ac <HAL_TIM_ConfigClockSource>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800083e:	f000 f945 	bl	8000acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000842:	4818      	ldr	r0, [pc, #96]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000844:	f003 fbb5 	bl	8003fb2 <HAL_TIM_PWM_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800084e:	f000 f93d 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000852:	2320      	movs	r3, #32
 8000854:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4810      	ldr	r0, [pc, #64]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000862:	f004 fb35 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800086c:	f000 f92e 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000870:	2360      	movs	r3, #96	@ 0x60
 8000872:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4807      	ldr	r0, [pc, #28]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000888:	f003 fcfc 	bl	8004284 <HAL_TIM_PWM_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000892:	f000 f91b 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000896:	4803      	ldr	r0, [pc, #12]	@ (80008a4 <MX_TIM2_Init+0xe8>)
 8000898:	f000 fb24 	bl	8000ee4 <HAL_TIM_MspPostInit>

}
 800089c:	bf00      	nop
 800089e:	3738      	adds	r7, #56	@ 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000168 	.word	0x20000168

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_USART1_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008f2:	f004 fb93 	bl	800501c <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008fc:	f000 f8e6 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000904:	f005 f92e 	bl	8005b64 <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800090e:	f000 f8dd 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000916:	f005 f963 	bl	8005be0 <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 f8d4 	bl	8000acc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000926:	f005 f8e4 	bl	8005af2 <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f8cc 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001b4 	.word	0x200001b4
 800093c:	40013800 	.word	0x40013800

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000946:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_DMA_Init+0x50>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	4a11      	ldr	r2, [pc, #68]	@ (8000990 <MX_DMA_Init+0x50>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	6493      	str	r3, [r2, #72]	@ 0x48
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DMA_Init+0x50>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_DMA_Init+0x50>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000962:	4a0b      	ldr	r2, [pc, #44]	@ (8000990 <MX_DMA_Init+0x50>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6493      	str	r3, [r2, #72]	@ 0x48
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_DMA_Init+0x50>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	200b      	movs	r0, #11
 800097c:	f000 fd1b 	bl	80013b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000980:	200b      	movs	r0, #11
 8000982:	f000 fd34 	bl	80013ee <HAL_NVIC_EnableIRQ>

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b35      	ldr	r3, [pc, #212]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a34      	ldr	r2, [pc, #208]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009da:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009e0:	f043 0310 	orr.w	r3, r3, #16
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <MX_GPIO_Init+0xec>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <MX_GPIO_Init+0xec>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_GPIO_Init+0xec>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <MX_GPIO_Init+0xec>)
 8000a10:	f043 0308 	orr.w	r3, r3, #8
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_GPIO_Init+0xec>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0308 	and.w	r3, r3, #8
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a28:	4816      	ldr	r0, [pc, #88]	@ (8000a84 <MX_GPIO_Init+0xf0>)
 8000a2a:	f001 fc3b 	bl	80022a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4810      	ldr	r0, [pc, #64]	@ (8000a88 <MX_GPIO_Init+0xf4>)
 8000a46:	f001 fa9b 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 8000a4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4808      	ldr	r0, [pc, #32]	@ (8000a84 <MX_GPIO_Init+0xf0>)
 8000a64:	f001 fa8c 	bl	8001f80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2028      	movs	r0, #40	@ 0x28
 8000a6e:	f000 fca2 	bl	80013b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a72:	2028      	movs	r0, #40	@ 0x28
 8000a74:	f000 fcbb 	bl	80013ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	@ 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800

08000a8c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);

	DmaRecHalfBuffCplt=1;
 8000a94:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20002248 	.word	0x20002248

08000aac <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_TogglePin(G_LED2_GPIO_Port, G_LED2_Pin);

	DmaRecBuffCplt=1;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20002249 	.word	0x20002249

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0b0      	sub	sp, #192	@ 0xc0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	2294      	movs	r2, #148	@ 0x94
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 f8d9 	bl	8005cf8 <memset>
  if(DFSDM1_Init == 0)
 8000b46:	4b55      	ldr	r3, [pc, #340]	@ (8000c9c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d16c      	bne.n	8000c28 <HAL_DFSDM_FilterMspInit+0x108>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000b4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5a:	f107 0318 	add.w	r3, r7, #24
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fcb8 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000b6a:	f7ff ffaf 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000b6e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ca0 <HAL_DFSDM_FilterMspInit+0x180>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	4a4a      	ldr	r2, [pc, #296]	@ (8000ca0 <HAL_DFSDM_FilterMspInit+0x180>)
 8000b76:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b78:	4b49      	ldr	r3, [pc, #292]	@ (8000ca0 <HAL_DFSDM_FilterMspInit+0x180>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d10b      	bne.n	8000b98 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b80:	4b48      	ldr	r3, [pc, #288]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b84:	4a47      	ldr	r2, [pc, #284]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b98:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	4a41      	ldr	r2, [pc, #260]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb4:	4a3b      	ldr	r2, [pc, #236]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ca4 <HAL_DFSDM_FilterMspInit+0x184>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    PD3     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000bc8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000be2:	2306      	movs	r3, #6
 8000be4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bec:	4619      	mov	r1, r3
 8000bee:	482e      	ldr	r0, [pc, #184]	@ (8000ca8 <HAL_DFSDM_FilterMspInit+0x188>)
 8000bf0:	f001 f9c6 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c16:	4619      	mov	r1, r3
 8000c18:	4824      	ldr	r0, [pc, #144]	@ (8000cac <HAL_DFSDM_FilterMspInit+0x18c>)
 8000c1a:	f001 f9b1 	bl	8001f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <HAL_DFSDM_FilterMspInit+0x17c>)
 8000c26:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a20      	ldr	r2, [pc, #128]	@ (8000cb0 <HAL_DFSDM_FilterMspInit+0x190>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d130      	bne.n	8000c94 <HAL_DFSDM_FilterMspInit+0x174>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c34:	4a20      	ldr	r2, [pc, #128]	@ (8000cb8 <HAL_DFSDM_FilterMspInit+0x198>)
 8000c36:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c3a:	2256      	movs	r2, #86	@ 0x56
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c5e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000c60:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c62:	2220      	movs	r2, #32
 8000c64:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c6e:	f000 ff15 	bl	8001a9c <HAL_DMA_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_DFSDM_FilterMspInit+0x15c>
    {
      Error_Handler();
 8000c78:	f7ff ff28 	bl	8000acc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c82:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c8e:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <HAL_DFSDM_FilterMspInit+0x194>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 8000c94:	bf00      	nop
 8000c96:	37c0      	adds	r7, #192	@ 0xc0
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20002250 	.word	0x20002250
 8000ca0:	2000224c 	.word	0x2000224c
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48001000 	.word	0x48001000
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	40016100 	.word	0x40016100
 8000cb4:	200000b4 	.word	0x200000b4
 8000cb8:	40020008 	.word	0x40020008

08000cbc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b0b0      	sub	sp, #192	@ 0xc0
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	2294      	movs	r2, #148	@ 0x94
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 f80b 	bl	8005cf8 <memset>
  if(DFSDM1_Init == 0)
 8000ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8000dcc <HAL_DFSDM_ChannelMspInit+0x110>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d16c      	bne.n	8000dc4 <HAL_DFSDM_ChannelMspInit+0x108>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000cea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fbea 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d06:	f7ff fee1 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000d12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <HAL_DFSDM_ChannelMspInit+0x114>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10b      	bne.n	8000d34 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d20:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d26:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d28:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a26      	ldr	r2, [pc, #152]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d40:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d50:	4a20      	ldr	r2, [pc, #128]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <HAL_DFSDM_ChannelMspInit+0x118>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    PD3     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000d64:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000d68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d7e:	2306      	movs	r3, #6
 8000d80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8000d8c:	f001 f8f8 	bl	8001f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d90:	2308      	movs	r3, #8
 8000d92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000da8:	2306      	movs	r3, #6
 8000daa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000db2:	4619      	mov	r1, r3
 8000db4:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <HAL_DFSDM_ChannelMspInit+0x120>)
 8000db6:	f001 f8e3 	bl	8001f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <HAL_DFSDM_ChannelMspInit+0x110>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4a02      	ldr	r2, [pc, #8]	@ (8000dcc <HAL_DFSDM_ChannelMspInit+0x110>)
 8000dc2:	6013      	str	r3, [r2, #0]
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	37c0      	adds	r7, #192	@ 0xc0
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20002250 	.word	0x20002250
 8000dd0:	2000224c 	.word	0x2000224c
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48001000 	.word	0x48001000
 8000ddc:	48000c00 	.word	0x48000c00

08000de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ae      	sub	sp, #184	@ 0xb8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2294      	movs	r2, #148	@ 0x94
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f004 ff79 	bl	8005cf8 <memset>
  if(hi2c->Instance==I2C2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a21      	ldr	r2, [pc, #132]	@ (8000e90 <HAL_I2C_MspInit+0xb0>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d13b      	bne.n	8000e88 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e10:	2380      	movs	r3, #128	@ 0x80
 8000e12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fb59 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e28:	f7ff fe50 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_I2C_MspInit+0xb4>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e30:	4a18      	ldr	r2, [pc, #96]	@ (8000e94 <HAL_I2C_MspInit+0xb4>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_I2C_MspInit+0xb4>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e44:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480b      	ldr	r0, [pc, #44]	@ (8000e98 <HAL_I2C_MspInit+0xb8>)
 8000e6c:	f001 f888 	bl	8001f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_I2C_MspInit+0xb4>)
 8000e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e74:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_I2C_MspInit+0xb4>)
 8000e76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <HAL_I2C_MspInit+0xb4>)
 8000e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e88:	bf00      	nop
 8000e8a:	37b8      	adds	r7, #184	@ 0xb8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40005800 	.word	0x40005800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400

08000e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eac:	d113      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x44>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x44>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_TIM_Base_MspInit+0x44>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	201c      	movs	r0, #28
 8000ecc:	f000 fa73 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed0:	201c      	movs	r0, #28
 8000ed2:	f000 fa8c 	bl	80013ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f04:	d11c      	bne.n	8000f40 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <HAL_TIM_MspPostInit+0x64>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_TIM_MspPostInit+0x64>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_TIM_MspPostInit+0x64>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3c:	f001 f820 	bl	8001f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0ae      	sub	sp, #184	@ 0xb8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	2294      	movs	r2, #148	@ 0x94
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fec3 	bl	8005cf8 <memset>
  if(huart->Instance==USART1)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <HAL_UART_MspInit+0xb0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d13a      	bne.n	8000ff2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f80:	2300      	movs	r3, #0
 8000f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 faa3 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f94:	f7ff fd9a 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_UART_MspInit+0xb4>)
 8000f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9c:	4a18      	ldr	r2, [pc, #96]	@ (8001000 <HAL_UART_MspInit+0xb4>)
 8000f9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa4:	4b16      	ldr	r3, [pc, #88]	@ (8001000 <HAL_UART_MspInit+0xb4>)
 8000fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <HAL_UART_MspInit+0xb4>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <HAL_UART_MspInit+0xb4>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbc:	4b10      	ldr	r3, [pc, #64]	@ (8001000 <HAL_UART_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc8:	23c0      	movs	r3, #192	@ 0xc0
 8000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <HAL_UART_MspInit+0xb8>)
 8000fee:	f000 ffc7 	bl	8001f80 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ff2:	bf00      	nop
 8000ff4:	37b8      	adds	r7, #184	@ 0xb8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105e:	f000 f8af 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <DMA1_Channel1_IRQHandler+0x10>)
 800106e:	f000 fe38 	bl	8001ce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000b4 	.word	0x200000b4

0800107c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <TIM2_IRQHandler+0x10>)
 8001082:	f002 fff7 	bl	8004074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000168 	.word	0x20000168

08001090 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 8001094:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001098:	f001 f936 	bl	8002308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff ffea 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	@ (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f004 fe09 	bl	8005d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff fa0d 	bl	8000514 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001108:	08005de8 	.word	0x08005de8
  ldr r2, =_sbss
 800110c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001110:	2000227c 	.word	0x2000227c

08001114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f93d 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f80e 	bl	8001148 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fcce 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d023      	beq.n	80011a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_InitTick+0x70>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f949 	bl	800140a <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d809      	bhi.n	8001198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800118c:	f000 f913 	bl	80013b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_InitTick+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e007      	b.n	80011a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e004      	b.n	80011a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e001      	b.n	80011a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20002254 	.word	0x20002254

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20002254 	.word	0x20002254

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	@ (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff29 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff3e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0ac      	b.n	8001590 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fa8c 	bl	8001958 <DFSDM_GetChannelFromInstance>
 8001440:	4603      	mov	r3, r0
 8001442:	4a55      	ldr	r2, [pc, #340]	@ (8001598 <HAL_DFSDM_ChannelInit+0x174>)
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e09f      	b.n	8001590 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fc33 	bl	8000cbc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001456:	4b51      	ldr	r3, [pc, #324]	@ (800159c <HAL_DFSDM_ChannelInit+0x178>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a4f      	ldr	r2, [pc, #316]	@ (800159c <HAL_DFSDM_ChannelInit+0x178>)
 800145e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001460:	4b4e      	ldr	r3, [pc, #312]	@ (800159c <HAL_DFSDM_ChannelInit+0x178>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d125      	bne.n	80014b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001468:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a4c      	ldr	r2, [pc, #304]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800146e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001472:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001474:	4b4a      	ldr	r3, [pc, #296]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4948      	ldr	r1, [pc, #288]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800147e:	4313      	orrs	r3, r2
 8001480:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001488:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800148c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d108      	bne.n	80014a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001496:	4b42      	ldr	r3, [pc, #264]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	3b01      	subs	r3, #1
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	493f      	ldr	r1, [pc, #252]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80014a8:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a3c      	ldr	r2, [pc, #240]	@ (80015a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80014ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80014c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6819      	ldr	r1, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80014d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 020f 	bic.w	r2, r2, #15
 80014f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6819      	ldr	r1, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001518:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6899      	ldr	r1, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	3b01      	subs	r3, #1
 800152a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f002 0207 	and.w	r2, r2, #7
 8001544:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001550:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001558:	431a      	orrs	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001570:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f9ea 	bl	8001958 <DFSDM_GetChannelFromInstance>
 8001584:	4602      	mov	r2, r0
 8001586:	4904      	ldr	r1, [pc, #16]	@ (8001598 <HAL_DFSDM_ChannelInit+0x174>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000225c 	.word	0x2000225c
 800159c:	20002258 	.word	0x20002258
 80015a0:	40016000 	.word	0x40016000

080015a4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0ca      	b.n	800174c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a66      	ldr	r2, [pc, #408]	@ (8001754 <HAL_DFSDM_FilterInit+0x1b0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d109      	bne.n	80015d4 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d003      	beq.n	80015d0 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0bb      	b.n	800174c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fa97 	bl	8000b20 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8001600:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7a1b      	ldrb	r3, [r3, #8]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e007      	b.n	800162c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800162a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7a5b      	ldrb	r3, [r3, #9]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	e007      	b.n	8001656 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001664:	f023 0308 	bic.w	r3, r3, #8
 8001668:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d108      	bne.n	8001684 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7c1b      	ldrb	r3, [r3, #16]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d108      	bne.n	800169e <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0210 	orr.w	r2, r2, #16
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	e007      	b.n	80016ae <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0210 	bic.w	r2, r2, #16
 80016ac:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	7c5b      	ldrb	r3, [r3, #17]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d108      	bne.n	80016c8 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0220 	orr.w	r2, r2, #32
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0220 	bic.w	r2, r2, #32
 80016d6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 80016e6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80016ea:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6959      	ldr	r1, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80016fe:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001704:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001706:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7c1a      	ldrb	r2, [r3, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40016100 	.word	0x40016100

08001758 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d02e      	beq.n	80017d0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001778:	2bff      	cmp	r3, #255	@ 0xff
 800177a:	d029      	beq.n	80017d0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800178a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178e:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10d      	bne.n	80017b2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80017a4:	431a      	orrs	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e00a      	b.n	80017c8 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6819      	ldr	r1, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ce:	e001      	b.n	80017d4 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	371c      	adds	r7, #28
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	75fb      	strb	r3, [r7, #23]
 8001804:	e064      	b.n	80018d0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001810:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001814:	d002      	beq.n	800181c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e059      	b.n	80018d0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10e      	bne.n	8001842 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d002      	beq.n	8001842 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	75fb      	strb	r3, [r7, #23]
 8001840:	e046      	b.n	80018d0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10b      	bne.n	8001862 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001858:	2b20      	cmp	r3, #32
 800185a:	d102      	bne.n	8001862 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	75fb      	strb	r3, [r7, #23]
 8001860:	e036      	b.n	80018d0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d004      	beq.n	8001876 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001872:	2b03      	cmp	r3, #3
 8001874:	d12a      	bne.n	80018cc <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187a:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 800187c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	4a17      	ldr	r2, [pc, #92]	@ (80018e0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001884:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800188c:	2b20      	cmp	r3, #32
 800188e:	d101      	bne.n	8001894 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001892:	e000      	b.n	8001896 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001894:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	331c      	adds	r3, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	68ba      	ldr	r2, [r7, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f000 f99e 	bl	8001bec <HAL_DMA_Start_IT>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	22ff      	movs	r2, #255	@ 0xff
 80018ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80018c2:	e005      	b.n	80018d0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f893 	bl	80019f0 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80018ca:	e001      	b.n	80018d0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	08001919 	.word	0x08001919
 80018e0:	08001935 	.word	0x08001935
 80018e4:	080018fd 	.word	0x080018fd

080018e8 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7ff f8be 	bl	8000a8c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001924:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f7ff f8c0 	bl	8000aac <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2203      	movs	r2, #3
 8001946:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff ffcd 	bl	80018e8 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a1c      	ldr	r2, [pc, #112]	@ (80019d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d102      	bne.n	800196e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	e02b      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a19      	ldr	r2, [pc, #100]	@ (80019d8 <DFSDM_GetChannelFromInstance+0x80>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d102      	bne.n	800197c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e024      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <DFSDM_GetChannelFromInstance+0x84>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d102      	bne.n	800198a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001984:	2302      	movs	r3, #2
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e01d      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <DFSDM_GetChannelFromInstance+0x88>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d102      	bne.n	8001998 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001992:	2304      	movs	r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e016      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d102      	bne.n	80019a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80019a0:	2305      	movs	r3, #5
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e00f      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a0f      	ldr	r2, [pc, #60]	@ (80019e8 <DFSDM_GetChannelFromInstance+0x90>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d102      	bne.n	80019b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80019ae:	2306      	movs	r3, #6
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e008      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <DFSDM_GetChannelFromInstance+0x94>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d102      	bne.n	80019c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80019bc:	2307      	movs	r3, #7
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e001      	b.n	80019c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80019c2:	2303      	movs	r3, #3
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40016000 	.word	0x40016000
 80019d8:	40016020 	.word	0x40016020
 80019dc:	40016040 	.word	0x40016040
 80019e0:	40016080 	.word	0x40016080
 80019e4:	400160a0 	.word	0x400160a0
 80019e8:	400160c0 	.word	0x400160c0
 80019ec:	400160e0 	.word	0x400160e0

080019f0 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d108      	bne.n	8001a12 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e033      	b.n	8001a7a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001a30:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0201 	orr.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d116      	bne.n	8001a7a <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d107      	bne.n	8001a64 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0202 	orr.w	r2, r2, #2
 8001a62:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <DFSDM_RegConvStart+0x84>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	e000      	b.n	8001a76 <DFSDM_RegConvStart+0x86>
 8001a74:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <DFSDM_RegConvStart+0x98>
 8001a84:	2202      	movs	r2, #2
 8001a86:	e000      	b.n	8001a8a <DFSDM_RegConvStart+0x9a>
 8001a88:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e08d      	b.n	8001bca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b47      	ldr	r3, [pc, #284]	@ (8001bd4 <HAL_DMA_Init+0x138>)
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d80f      	bhi.n	8001ada <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b45      	ldr	r3, [pc, #276]	@ (8001bd8 <HAL_DMA_Init+0x13c>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a45      	ldr	r2, [pc, #276]	@ (8001bdc <HAL_DMA_Init+0x140>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	091b      	lsrs	r3, r3, #4
 8001acc:	009a      	lsls	r2, r3, #2
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a42      	ldr	r2, [pc, #264]	@ (8001be0 <HAL_DMA_Init+0x144>)
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ad8:	e00e      	b.n	8001af8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b40      	ldr	r3, [pc, #256]	@ (8001be4 <HAL_DMA_Init+0x148>)
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8001bdc <HAL_DMA_Init+0x140>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	009a      	lsls	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a3c      	ldr	r2, [pc, #240]	@ (8001be8 <HAL_DMA_Init+0x14c>)
 8001af6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f9b6 	bl	8001ebc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b58:	d102      	bne.n	8001b60 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001b74:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d010      	beq.n	8001ba0 <HAL_DMA_Init+0x104>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d80c      	bhi.n	8001ba0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f9d6 	bl	8001f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	e008      	b.n	8001bb2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40020407 	.word	0x40020407
 8001bd8:	bffdfff8 	.word	0xbffdfff8
 8001bdc:	cccccccd 	.word	0xcccccccd
 8001be0:	40020000 	.word	0x40020000
 8001be4:	bffdfbf8 	.word	0xbffdfbf8
 8001be8:	40020400 	.word	0x40020400

08001bec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_DMA_Start_IT+0x20>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e066      	b.n	8001cda <HAL_DMA_Start_IT+0xee>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d155      	bne.n	8001ccc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 f8fb 	bl	8001e40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 020e 	orr.w	r2, r2, #14
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	e00f      	b.n	8001c84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0204 	bic.w	r2, r2, #4
 8001c72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 020a 	orr.w	r2, r2, #10
 8001c82:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ca0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cb8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e005      	b.n	8001cd8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	f003 031c 	and.w	r3, r3, #28
 8001d02:	2204      	movs	r2, #4
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d026      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7a>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d021      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0204 	bic.w	r2, r2, #4
 8001d34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f003 021c 	and.w	r2, r3, #28
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	2104      	movs	r1, #4
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d071      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d5a:	e06c      	b.n	8001e36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d60:	f003 031c 	and.w	r3, r3, #28
 8001d64:	2202      	movs	r2, #2
 8001d66:	409a      	lsls	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d02e      	beq.n	8001dce <HAL_DMA_IRQHandler+0xec>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d029      	beq.n	8001dce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 020a 	bic.w	r2, r2, #10
 8001d96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da4:	f003 021c 	and.w	r2, r3, #28
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	2102      	movs	r1, #2
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d038      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001dcc:	e033      	b.n	8001e36 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f003 031c 	and.w	r3, r3, #28
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x156>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d025      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 020e 	bic.w	r2, r2, #14
 8001dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e00:	f003 021c 	and.w	r2, r3, #28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	2101      	movs	r1, #1
 8001e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
}
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e68:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f003 021c 	and.w	r2, r3, #28
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	2101      	movs	r1, #1
 8001e78:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d108      	bne.n	8001ea0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e9e:	e007      	b.n	8001eb0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d80a      	bhi.n	8001ee6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001edc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ee4:	e007      	b.n	8001ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	009a      	lsls	r2, r3, #2
 8001eee:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ef0:	4413      	add	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	3b08      	subs	r3, #8
 8001efe:	4a0c      	ldr	r2, [pc, #48]	@ (8001f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2201      	movs	r2, #1
 8001f16:	409a      	lsls	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40020407 	.word	0x40020407
 8001f2c:	4002081c 	.word	0x4002081c
 8001f30:	cccccccd 	.word	0xcccccccd
 8001f34:	40020880 	.word	0x40020880

08001f38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f5a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2201      	movs	r2, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	1000823f 	.word	0x1000823f
 8001f7c:	40020940 	.word	0x40020940

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	e166      	b.n	800225e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8158 	beq.w	8002258 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d005      	beq.n	8001fc0 <HAL_GPIO_Init+0x40>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d130      	bne.n	8002022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 0201 	and.w	r2, r3, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b03      	cmp	r3, #3
 800202c:	d017      	beq.n	800205e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d123      	bne.n	80020b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	08da      	lsrs	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3208      	adds	r2, #8
 80020ac:	6939      	ldr	r1, [r7, #16]
 80020ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0203 	and.w	r2, r3, #3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80b2 	beq.w	8002258 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f4:	4b61      	ldr	r3, [pc, #388]	@ (800227c <HAL_GPIO_Init+0x2fc>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	4a60      	ldr	r2, [pc, #384]	@ (800227c <HAL_GPIO_Init+0x2fc>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002100:	4b5e      	ldr	r3, [pc, #376]	@ (800227c <HAL_GPIO_Init+0x2fc>)
 8002102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800210c:	4a5c      	ldr	r2, [pc, #368]	@ (8002280 <HAL_GPIO_Init+0x300>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002136:	d02b      	beq.n	8002190 <HAL_GPIO_Init+0x210>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a52      	ldr	r2, [pc, #328]	@ (8002284 <HAL_GPIO_Init+0x304>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d025      	beq.n	800218c <HAL_GPIO_Init+0x20c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a51      	ldr	r2, [pc, #324]	@ (8002288 <HAL_GPIO_Init+0x308>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d01f      	beq.n	8002188 <HAL_GPIO_Init+0x208>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a50      	ldr	r2, [pc, #320]	@ (800228c <HAL_GPIO_Init+0x30c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d019      	beq.n	8002184 <HAL_GPIO_Init+0x204>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a4f      	ldr	r2, [pc, #316]	@ (8002290 <HAL_GPIO_Init+0x310>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d013      	beq.n	8002180 <HAL_GPIO_Init+0x200>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a4e      	ldr	r2, [pc, #312]	@ (8002294 <HAL_GPIO_Init+0x314>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00d      	beq.n	800217c <HAL_GPIO_Init+0x1fc>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a4d      	ldr	r2, [pc, #308]	@ (8002298 <HAL_GPIO_Init+0x318>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d007      	beq.n	8002178 <HAL_GPIO_Init+0x1f8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a4c      	ldr	r2, [pc, #304]	@ (800229c <HAL_GPIO_Init+0x31c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d101      	bne.n	8002174 <HAL_GPIO_Init+0x1f4>
 8002170:	2307      	movs	r3, #7
 8002172:	e00e      	b.n	8002192 <HAL_GPIO_Init+0x212>
 8002174:	2308      	movs	r3, #8
 8002176:	e00c      	b.n	8002192 <HAL_GPIO_Init+0x212>
 8002178:	2306      	movs	r3, #6
 800217a:	e00a      	b.n	8002192 <HAL_GPIO_Init+0x212>
 800217c:	2305      	movs	r3, #5
 800217e:	e008      	b.n	8002192 <HAL_GPIO_Init+0x212>
 8002180:	2304      	movs	r3, #4
 8002182:	e006      	b.n	8002192 <HAL_GPIO_Init+0x212>
 8002184:	2303      	movs	r3, #3
 8002186:	e004      	b.n	8002192 <HAL_GPIO_Init+0x212>
 8002188:	2302      	movs	r3, #2
 800218a:	e002      	b.n	8002192 <HAL_GPIO_Init+0x212>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_GPIO_Init+0x212>
 8002190:	2300      	movs	r3, #0
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	f002 0203 	and.w	r2, r2, #3
 8002198:	0092      	lsls	r2, r2, #2
 800219a:	4093      	lsls	r3, r2
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021a2:	4937      	ldr	r1, [pc, #220]	@ (8002280 <HAL_GPIO_Init+0x300>)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b0:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021d4:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021da:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021fe:	4a28      	ldr	r2, [pc, #160]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002204:	4b26      	ldr	r3, [pc, #152]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002228:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800222e:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002252:	4a13      	ldr	r2, [pc, #76]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa22 f303 	lsr.w	r3, r2, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f47f ae91 	bne.w	8001f90 <HAL_GPIO_Init+0x10>
  }
}
 800226e:	bf00      	nop
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000
 8002284:	48000400 	.word	0x48000400
 8002288:	48000800 	.word	0x48000800
 800228c:	48000c00 	.word	0x48000c00
 8002290:	48001000 	.word	0x48001000
 8002294:	48001400 	.word	0x48001400
 8002298:	48001800 	.word	0x48001800
 800229c:	48001c00 	.word	0x48001c00
 80022a0:	40010400 	.word	0x40010400

080022a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
 80022b0:	4613      	mov	r3, r2
 80022b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b4:	787b      	ldrb	r3, [r7, #1]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4013      	ands	r3, r2
 80022ec:	041a      	lsls	r2, r3, #16
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43d9      	mvns	r1, r3
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	400b      	ands	r3, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800231e:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe f8e0 	bl	80004ec <HAL_GPIO_EXTI_Callback>
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e08d      	b.n	8002466 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fd3e 	bl	8000de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	@ 0x24
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002388:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002398:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	e006      	b.n	80023c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d108      	bne.n	80023da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	e007      	b.n	80023ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800240c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69d9      	ldr	r1, [r3, #28]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1a      	ldr	r2, [r3, #32]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	d138      	bne.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800248e:	2302      	movs	r3, #2
 8002490:	e032      	b.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2224      	movs	r2, #36	@ 0x24
 800249e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6819      	ldr	r1, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
  }
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	d139      	bne.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002524:	2302      	movs	r3, #2
 8002526:	e033      	b.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2224      	movs	r2, #36	@ 0x24
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0201 	bic.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002556:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800258e:	2302      	movs	r3, #2
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025a0:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ac:	d102      	bne.n	80025b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80025ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025b2:	e00b      	b.n	80025cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80025b4:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c2:	d102      	bne.n	80025ca <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80025c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025c8:	e000      	b.n	80025cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80025ca:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40007000 	.word	0x40007000

080025dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d141      	bne.n	800266e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f6:	d131      	bne.n	800265c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80025f8:	4b47      	ldr	r3, [pc, #284]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025fe:	4a46      	ldr	r2, [pc, #280]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002604:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002608:	4b43      	ldr	r3, [pc, #268]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002610:	4a41      	ldr	r2, [pc, #260]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002616:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002618:	4b40      	ldr	r3, [pc, #256]	@ (800271c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2232      	movs	r2, #50	@ 0x32
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	4a3f      	ldr	r2, [pc, #252]	@ (8002720 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	0c9b      	lsrs	r3, r3, #18
 800262a:	3301      	adds	r3, #1
 800262c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800262e:	e002      	b.n	8002636 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3b01      	subs	r3, #1
 8002634:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002636:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800263e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002642:	d102      	bne.n	800264a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f2      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800264a:	4b33      	ldr	r3, [pc, #204]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002656:	d158      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e057      	b.n	800270c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800265c:	4b2e      	ldr	r3, [pc, #184]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002662:	4a2d      	ldr	r2, [pc, #180]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800266c:	e04d      	b.n	800270a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002674:	d141      	bne.n	80026fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002676:	4b28      	ldr	r3, [pc, #160]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800267e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002682:	d131      	bne.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800268a:	4a23      	ldr	r2, [pc, #140]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002690:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002694:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800269c:	4a1e      	ldr	r2, [pc, #120]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026a4:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2232      	movs	r2, #50	@ 0x32
 80026aa:	fb02 f303 	mul.w	r3, r2, r3
 80026ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002720 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	0c9b      	lsrs	r3, r3, #18
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ba:	e002      	b.n	80026c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3b01      	subs	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ce:	d102      	bne.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f2      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026e2:	d112      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e011      	b.n	800270c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80026f8:	e007      	b.n	800270a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026fa:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002702:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002704:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002708:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40007000 	.word	0x40007000
 800271c:	20000000 	.word	0x20000000
 8002720:	431bde83 	.word	0x431bde83

08002724 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f000 bc08 	b.w	8002f48 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002738:	4b96      	ldr	r3, [pc, #600]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002742:	4b94      	ldr	r3, [pc, #592]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80e4 	beq.w	8002922 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <HAL_RCC_OscConfig+0x4c>
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	f040 808b 	bne.w	800287e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2b01      	cmp	r3, #1
 800276c:	f040 8087 	bne.w	800287e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002770:	4b88      	ldr	r3, [pc, #544]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_OscConfig+0x64>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e3df      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	4b81      	ldr	r3, [pc, #516]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_RCC_OscConfig+0x7e>
 8002798:	4b7e      	ldr	r3, [pc, #504]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a0:	e005      	b.n	80027ae <HAL_RCC_OscConfig+0x8a>
 80027a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d223      	bcs.n	80027fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fdcc 	bl	8003354 <RCC_SetFlashLatencyFromMSIRange>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e3c0      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c6:	4b73      	ldr	r3, [pc, #460]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a72      	ldr	r2, [pc, #456]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b70      	ldr	r3, [pc, #448]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	496d      	ldr	r1, [pc, #436]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	4968      	ldr	r1, [pc, #416]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	e025      	b.n	8002846 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fa:	4b66      	ldr	r3, [pc, #408]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a65      	ldr	r2, [pc, #404]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b63      	ldr	r3, [pc, #396]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4960      	ldr	r1, [pc, #384]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002818:	4b5e      	ldr	r3, [pc, #376]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	495b      	ldr	r1, [pc, #364]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fd8c 	bl	8003354 <RCC_SetFlashLatencyFromMSIRange>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e380      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002846:	f000 fcc1 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b51      	ldr	r3, [pc, #324]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4950      	ldr	r1, [pc, #320]	@ (8002998 <HAL_RCC_OscConfig+0x274>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a4e      	ldr	r2, [pc, #312]	@ (800299c <HAL_RCC_OscConfig+0x278>)
 8002864:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002866:	4b4e      	ldr	r3, [pc, #312]	@ (80029a0 <HAL_RCC_OscConfig+0x27c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fc6c 	bl	8001148 <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d052      	beq.n	8002920 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	e364      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d032      	beq.n	80028ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002886:	4b43      	ldr	r3, [pc, #268]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a42      	ldr	r2, [pc, #264]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002892:	f7fe fca9 	bl	80011e8 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800289a:	f7fe fca5 	bl	80011e8 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e34d      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ac:	4b39      	ldr	r3, [pc, #228]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a35      	ldr	r2, [pc, #212]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028be:	f043 0308 	orr.w	r3, r3, #8
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b33      	ldr	r3, [pc, #204]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4930      	ldr	r1, [pc, #192]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	492b      	ldr	r1, [pc, #172]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
 80028ea:	e01a      	b.n	8002922 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ec:	4b29      	ldr	r3, [pc, #164]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fc76 	bl	80011e8 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002900:	f7fe fc72 	bl	80011e8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e31a      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1dc>
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d073      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x21c>
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d10e      	bne.n	8002958 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d063      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d15f      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e2f7      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x24c>
 8002962:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e025      	b.n	80029bc <HAL_RCC_OscConfig+0x298>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002978:	d114      	bne.n	80029a4 <HAL_RCC_OscConfig+0x280>
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b03      	ldr	r3, [pc, #12]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a02      	ldr	r2, [pc, #8]	@ (8002994 <HAL_RCC_OscConfig+0x270>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e013      	b.n	80029bc <HAL_RCC_OscConfig+0x298>
 8002994:	40021000 	.word	0x40021000
 8002998:	08005d68 	.word	0x08005d68
 800299c:	20000000 	.word	0x20000000
 80029a0:	20000004 	.word	0x20000004
 80029a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a9f      	ldr	r2, [pc, #636]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b9d      	ldr	r3, [pc, #628]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a9c      	ldr	r2, [pc, #624]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fc10 	bl	80011e8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe fc0c 	bl	80011e8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e2b4      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4b92      	ldr	r3, [pc, #584]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x2a8>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fbfc 	bl	80011e8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fbf8 	bl	80011e8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e2a0      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a06:	4b88      	ldr	r3, [pc, #544]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2d0>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d060      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x310>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d116      	bne.n	8002a62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	4b7c      	ldr	r3, [pc, #496]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x328>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e27d      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b76      	ldr	r3, [pc, #472]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	4973      	ldr	r1, [pc, #460]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	e040      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d023      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe fbb7 	bl	80011e8 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe fbb3 	bl	80011e8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e25b      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b62      	ldr	r3, [pc, #392]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	495f      	ldr	r1, [pc, #380]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fb93 	bl	80011e8 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fb8f 	bl	80011e8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e237      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d01c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af8:	4b4b      	ldr	r3, [pc, #300]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afe:	4a4a      	ldr	r2, [pc, #296]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b08:	f7fe fb6e 	bl	80011e8 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b10:	f7fe fb6a 	bl	80011e8 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e212      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b22:	4b41      	ldr	r3, [pc, #260]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ef      	beq.n	8002b10 <HAL_RCC_OscConfig+0x3ec>
 8002b30:	e01b      	b.n	8002b6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b32:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b38:	4a3b      	ldr	r2, [pc, #236]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe fb51 	bl	80011e8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fb4d 	bl	80011e8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1f5      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5c:	4b32      	ldr	r3, [pc, #200]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ef      	bne.n	8002b4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a6 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	4a26      	ldr	r2, [pc, #152]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b94:	4b24      	ldr	r3, [pc, #144]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba4:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d118      	bne.n	8002be2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fb14 	bl	80011e8 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe fb10 	bl	80011e8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1b8      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd6:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <HAL_RCC_OscConfig+0x508>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_RCC_OscConfig+0x4d8>
 8002bea:	4b0f      	ldr	r3, [pc, #60]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bfa:	e029      	b.n	8002c50 <HAL_RCC_OscConfig+0x52c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d115      	bne.n	8002c30 <HAL_RCC_OscConfig+0x50c>
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1a:	4a03      	ldr	r2, [pc, #12]	@ (8002c28 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c24:	e014      	b.n	8002c50 <HAL_RCC_OscConfig+0x52c>
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	4b9d      	ldr	r3, [pc, #628]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	4a9c      	ldr	r2, [pc, #624]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c40:	4b99      	ldr	r3, [pc, #612]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	4a98      	ldr	r2, [pc, #608]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d016      	beq.n	8002c86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe fac6 	bl	80011e8 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe fac2 	bl	80011e8 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e168      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c76:	4b8c      	ldr	r3, [pc, #560]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ed      	beq.n	8002c60 <HAL_RCC_OscConfig+0x53c>
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7fe faaf 	bl	80011e8 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe faab 	bl	80011e8 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e151      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca4:	4b80      	ldr	r3, [pc, #512]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ed      	bne.n	8002c8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	4a7a      	ldr	r2, [pc, #488]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd8:	4b73      	ldr	r3, [pc, #460]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cde:	4a72      	ldr	r2, [pc, #456]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe fa7e 	bl	80011e8 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cf0:	f7fe fa7a 	bl	80011e8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e122      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d02:	4b69      	ldr	r3, [pc, #420]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ef      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x5cc>
 8002d10:	e01b      	b.n	8002d4a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d12:	4b65      	ldr	r3, [pc, #404]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d18:	4a63      	ldr	r2, [pc, #396]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe fa61 	bl	80011e8 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d2a:	f7fe fa5d 	bl	80011e8 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e105      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ef      	bne.n	8002d2a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80f9 	beq.w	8002f46 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	f040 80cf 	bne.w	8002efc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d5e:	4b52      	ldr	r3, [pc, #328]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 0203 	and.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d12c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d123      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d11b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d113      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	3b01      	subs	r3, #1
 8002db2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d109      	bne.n	8002dcc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d071      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d068      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dd2:	4b35      	ldr	r3, [pc, #212]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002dde:	4b32      	ldr	r3, [pc, #200]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0ac      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dee:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002df4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dfa:	f7fe f9f5 	bl	80011e8 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe f9f1 	bl	80011e8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e099      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e14:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <HAL_RCC_OscConfig+0x788>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	4311      	orrs	r1, r2
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e3a:	0212      	lsls	r2, r2, #8
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e42:	0852      	lsrs	r2, r2, #1
 8002e44:	3a01      	subs	r2, #1
 8002e46:	0552      	lsls	r2, r2, #21
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e4e:	0852      	lsrs	r2, r2, #1
 8002e50:	3a01      	subs	r2, #1
 8002e52:	0652      	lsls	r2, r2, #25
 8002e54:	4311      	orrs	r1, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e5a:	06d2      	lsls	r2, r2, #27
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	4912      	ldr	r1, [pc, #72]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e64:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e7c:	f7fe f9b4 	bl	80011e8 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe f9b0 	bl	80011e8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e058      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <HAL_RCC_OscConfig+0x784>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea2:	e050      	b.n	8002f46 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e04f      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb0:	4b27      	ldr	r3, [pc, #156]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d144      	bne.n	8002f46 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ebc:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a23      	ldr	r2, [pc, #140]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec8:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a20      	ldr	r2, [pc, #128]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed4:	f7fe f988 	bl	80011e8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe f984 	bl	80011e8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e02c      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x7b8>
 8002efa:	e024      	b.n	8002f46 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d01f      	beq.n	8002f42 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b13      	ldr	r3, [pc, #76]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a12      	ldr	r2, [pc, #72]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002f08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fe f96b 	bl	80011e8 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe f967 	bl	80011e8 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e00f      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f0      	bne.n	8002f16 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	4905      	ldr	r1, [pc, #20]	@ (8002f50 <HAL_RCC_OscConfig+0x82c>)
 8002f3a:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_RCC_OscConfig+0x830>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60cb      	str	r3, [r1, #12]
 8002f40:	e001      	b.n	8002f46 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3720      	adds	r7, #32
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	feeefffc 	.word	0xfeeefffc

08002f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e11d      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b90      	ldr	r3, [pc, #576]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 020f 	bic.w	r2, r3, #15
 8002f86:	498b      	ldr	r1, [pc, #556]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b89      	ldr	r3, [pc, #548]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e105      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b81      	ldr	r3, [pc, #516]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	497b      	ldr	r1, [pc, #492]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d079      	beq.n	80030ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d11e      	bne.n	8003020 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	4b75      	ldr	r3, [pc, #468]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0dc      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002ff2:	f000 fa09 	bl	8003408 <RCC_GetSysClockFreqFromPLLSource>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4a70      	ldr	r2, [pc, #448]	@ (80031bc <HAL_RCC_ClockConfig+0x264>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d946      	bls.n	800308c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ffe:	4b6e      	ldr	r3, [pc, #440]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d140      	bne.n	800308c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800300a:	4b6b      	ldr	r3, [pc, #428]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003012:	4a69      	ldr	r2, [pc, #420]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003018:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e035      	b.n	800308c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003028:	4b63      	ldr	r3, [pc, #396]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0b9      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003040:	4b5d      	ldr	r3, [pc, #372]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0ad      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003050:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0a5      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003060:	f000 f8b4 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8003064:	4603      	mov	r3, r0
 8003066:	4a55      	ldr	r2, [pc, #340]	@ (80031bc <HAL_RCC_ClockConfig+0x264>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d90f      	bls.n	800308c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800306c:	4b52      	ldr	r3, [pc, #328]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003078:	4b4f      	ldr	r3, [pc, #316]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003080:	4a4d      	ldr	r2, [pc, #308]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003086:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003088:	2380      	movs	r3, #128	@ 0x80
 800308a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800308c:	4b4a      	ldr	r3, [pc, #296]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 0203 	bic.w	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4947      	ldr	r1, [pc, #284]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309e:	f7fe f8a3 	bl	80011e8 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a6:	f7fe f89f 	bl	80011e8 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e077      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030bc:	4b3e      	ldr	r3, [pc, #248]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 020c 	and.w	r2, r3, #12
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d1eb      	bne.n	80030a6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b80      	cmp	r3, #128	@ 0x80
 80030d2:	d105      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030d4:	4b38      	ldr	r3, [pc, #224]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a37      	ldr	r2, [pc, #220]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 80030da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030de:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	4b31      	ldr	r3, [pc, #196]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d208      	bcs.n	800310e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030fc:	4b2e      	ldr	r3, [pc, #184]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	492b      	ldr	r1, [pc, #172]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800310e:	4b29      	ldr	r3, [pc, #164]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d210      	bcs.n	800313e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311c:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f023 020f 	bic.w	r2, r3, #15
 8003124:	4923      	ldr	r1, [pc, #140]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312c:	4b21      	ldr	r3, [pc, #132]	@ (80031b4 <HAL_RCC_ClockConfig+0x25c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e036      	b.n	80031ac <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314a:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4918      	ldr	r1, [pc, #96]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003168:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4910      	ldr	r1, [pc, #64]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800317c:	f000 f826 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_RCC_ClockConfig+0x260>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	490c      	ldr	r1, [pc, #48]	@ (80031c0 <HAL_RCC_ClockConfig+0x268>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
 8003198:	4a0a      	ldr	r2, [pc, #40]	@ (80031c4 <HAL_RCC_ClockConfig+0x26c>)
 800319a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800319c:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <HAL_RCC_ClockConfig+0x270>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd ffd1 	bl	8001148 <HAL_InitTick>
 80031a6:	4603      	mov	r3, r0
 80031a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40022000 	.word	0x40022000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	04c4b400 	.word	0x04c4b400
 80031c0:	08005d68 	.word	0x08005d68
 80031c4:	20000000 	.word	0x20000000
 80031c8:	20000004 	.word	0x20000004

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	@ 0x24
 80031d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	2300      	movs	r3, #0
 80031d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031da:	4b3e      	ldr	r3, [pc, #248]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d121      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d11e      	bne.n	800323e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003200:	4b34      	ldr	r3, [pc, #208]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d107      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800320c:	4b31      	ldr	r3, [pc, #196]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	e005      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800321c:	4b2d      	ldr	r3, [pc, #180]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003228:	4a2b      	ldr	r2, [pc, #172]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d102      	bne.n	800324a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003244:	4b25      	ldr	r3, [pc, #148]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	e004      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d101      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003250:	4b23      	ldr	r3, [pc, #140]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003252:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d134      	bne.n	80032c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800325a:	4b1e      	ldr	r3, [pc, #120]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d003      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0xa6>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d003      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0xac>
 8003270:	e005      	b.n	800327e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003272:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003274:	617b      	str	r3, [r7, #20]
      break;
 8003276:	e005      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003278:	4b19      	ldr	r3, [pc, #100]	@ (80032e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800327a:	617b      	str	r3, [r7, #20]
      break;
 800327c:	e002      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	617b      	str	r3, [r7, #20]
      break;
 8003282:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003284:	4b13      	ldr	r3, [pc, #76]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3301      	adds	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003292:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	fb03 f202 	mul.w	r2, r3, r2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032aa:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	0e5b      	lsrs	r3, r3, #25
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	3301      	adds	r3, #1
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032c4:	69bb      	ldr	r3, [r7, #24]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3724      	adds	r7, #36	@ 0x24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40021000 	.word	0x40021000
 80032d8:	08005d80 	.word	0x08005d80
 80032dc:	00f42400 	.word	0x00f42400
 80032e0:	007a1200 	.word	0x007a1200

080032e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000000 	.word	0x20000000

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003300:	f7ff fff0 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0a1b      	lsrs	r3, r3, #8
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4904      	ldr	r1, [pc, #16]	@ (8003324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	08005d78 	.word	0x08005d78

08003328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800332c:	f7ff ffda 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	0adb      	lsrs	r3, r3, #11
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	4904      	ldr	r1, [pc, #16]	@ (8003350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000
 8003350:	08005d78 	.word	0x08005d78

08003354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800335c:	2300      	movs	r3, #0
 800335e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003360:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800336c:	f7ff f916 	bl	800259c <HAL_PWREx_GetVoltageRange>
 8003370:	6178      	str	r0, [r7, #20]
 8003372:	e014      	b.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	4a21      	ldr	r2, [pc, #132]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003380:	4b1f      	ldr	r3, [pc, #124]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800338c:	f7ff f906 	bl	800259c <HAL_PWREx_GetVoltageRange>
 8003390:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003392:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003398:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800339c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a4:	d10b      	bne.n	80033be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b80      	cmp	r3, #128	@ 0x80
 80033aa:	d913      	bls.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80033b0:	d902      	bls.n	80033b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b2:	2302      	movs	r3, #2
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e00d      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b8:	2301      	movs	r3, #1
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e00a      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80033c2:	d902      	bls.n	80033ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80033c4:	2302      	movs	r3, #2
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e004      	b.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b70      	cmp	r3, #112	@ 0x70
 80033ce:	d101      	bne.n	80033d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 020f 	bic.w	r2, r3, #15
 80033dc:	4909      	ldr	r1, [pc, #36]	@ (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033e4:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	40022000 	.word	0x40022000

08003408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800340e:	4b2d      	ldr	r3, [pc, #180]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d00b      	beq.n	8003436 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d825      	bhi.n	8003470 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d008      	beq.n	800343c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d11f      	bne.n	8003470 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003430:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003432:	613b      	str	r3, [r7, #16]
    break;
 8003434:	e01f      	b.n	8003476 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003436:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003438:	613b      	str	r3, [r7, #16]
    break;
 800343a:	e01c      	b.n	8003476 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800343c:	4b21      	ldr	r3, [pc, #132]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003448:	4b1e      	ldr	r3, [pc, #120]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800344a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e005      	b.n	8003464 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003458:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003464:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346c:	613b      	str	r3, [r7, #16]
    break;
 800346e:	e002      	b.n	8003476 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	613b      	str	r3, [r7, #16]
    break;
 8003474:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003476:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	3301      	adds	r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003484:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	fb03 f202 	mul.w	r2, r3, r2
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0e5b      	lsrs	r3, r3, #25
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	3301      	adds	r3, #1
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80034b6:	683b      	ldr	r3, [r7, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40021000 	.word	0x40021000
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200
 80034d0:	08005d80 	.word	0x08005d80

080034d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034dc:	2300      	movs	r3, #0
 80034de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034e0:	2300      	movs	r3, #0
 80034e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d040      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f4:	2b80      	cmp	r3, #128	@ 0x80
 80034f6:	d02a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034f8:	2b80      	cmp	r3, #128	@ 0x80
 80034fa:	d825      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80034fc:	2b60      	cmp	r3, #96	@ 0x60
 80034fe:	d026      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003500:	2b60      	cmp	r3, #96	@ 0x60
 8003502:	d821      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003504:	2b40      	cmp	r3, #64	@ 0x40
 8003506:	d006      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003508:	2b40      	cmp	r3, #64	@ 0x40
 800350a:	d81d      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d009      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003510:	2b20      	cmp	r3, #32
 8003512:	d010      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003514:	e018      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003516:	4b89      	ldr	r3, [pc, #548]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4a88      	ldr	r2, [pc, #544]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003522:	e015      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fb02 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003534:	e00c      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3320      	adds	r3, #32
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fbed 	bl	8003d1c <RCCEx_PLLSAI2_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003546:	e003      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	74fb      	strb	r3, [r7, #19]
      break;
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800354e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003556:	4b79      	ldr	r3, [pc, #484]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003558:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800355c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003564:	4975      	ldr	r1, [pc, #468]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800356c:	e001      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d047      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003586:	d030      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358c:	d82a      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800358e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003592:	d02a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003594:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003598:	d824      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800359a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359e:	d008      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a4:	d81e      	bhi.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ae:	d010      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035b0:	e018      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035b2:	4b62      	ldr	r3, [pc, #392]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4a61      	ldr	r2, [pc, #388]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035be:	e015      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3304      	adds	r3, #4
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fab4 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d0:	e00c      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3320      	adds	r3, #32
 80035d6:	2100      	movs	r1, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 fb9f 	bl	8003d1c <RCCEx_PLLSAI2_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035e2:	e003      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	74fb      	strb	r3, [r7, #19]
      break;
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80035ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035f2:	4b52      	ldr	r3, [pc, #328]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003600:	494e      	ldr	r1, [pc, #312]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003608:	e001      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 809f 	beq.w	800375a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361c:	2300      	movs	r3, #0
 800361e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003620:	4b46      	ldr	r3, [pc, #280]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	4a40      	ldr	r2, [pc, #256]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003640:	6593      	str	r3, [r2, #88]	@ 0x58
 8003642:	4b3e      	ldr	r3, [pc, #248]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003652:	4b3b      	ldr	r3, [pc, #236]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3a      	ldr	r2, [pc, #232]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800365c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800365e:	f7fd fdc3 	bl	80011e8 <HAL_GetTick>
 8003662:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003664:	e009      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fd fdbf 	bl	80011e8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d902      	bls.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	74fb      	strb	r3, [r7, #19]
        break;
 8003678:	e005      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800367a:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ef      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d15b      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800368c:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01f      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d019      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036b6:	4b21      	ldr	r3, [pc, #132]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036bc:	4a1f      	ldr	r2, [pc, #124]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036c6:	4b1d      	ldr	r3, [pc, #116]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036cc:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036d6:	4a19      	ldr	r2, [pc, #100]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d016      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e8:	f7fd fd7e 	bl	80011e8 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ee:	e00b      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fd fd7a 	bl	80011e8 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d902      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	74fb      	strb	r3, [r7, #19]
            break;
 8003706:	e006      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ec      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10c      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800371c:	4b07      	ldr	r3, [pc, #28]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800371e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003722:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372c:	4903      	ldr	r1, [pc, #12]	@ (800373c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003734:	e008      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	74bb      	strb	r3, [r7, #18]
 800373a:	e005      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800373c:	40021000 	.word	0x40021000
 8003740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003748:	7c7b      	ldrb	r3, [r7, #17]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800374e:	4ba0      	ldr	r3, [pc, #640]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003752:	4a9f      	ldr	r2, [pc, #636]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003758:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003766:	4b9a      	ldr	r3, [pc, #616]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f023 0203 	bic.w	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	4996      	ldr	r1, [pc, #600]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003788:	4b91      	ldr	r3, [pc, #580]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f023 020c 	bic.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	498e      	ldr	r1, [pc, #568]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037aa:	4b89      	ldr	r3, [pc, #548]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b8:	4985      	ldr	r1, [pc, #532]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037cc:	4b80      	ldr	r3, [pc, #512]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037da:	497d      	ldr	r1, [pc, #500]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ee:	4b78      	ldr	r3, [pc, #480]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	4974      	ldr	r1, [pc, #464]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003810:	4b6f      	ldr	r3, [pc, #444]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381e:	496c      	ldr	r1, [pc, #432]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003832:	4b67      	ldr	r3, [pc, #412]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003840:	4963      	ldr	r1, [pc, #396]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003854:	4b5e      	ldr	r3, [pc, #376]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003862:	495b      	ldr	r1, [pc, #364]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003876:	4b56      	ldr	r3, [pc, #344]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003884:	4952      	ldr	r1, [pc, #328]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003898:	4b4d      	ldr	r3, [pc, #308]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a6:	494a      	ldr	r1, [pc, #296]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ba:	4b45      	ldr	r3, [pc, #276]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c8:	4941      	ldr	r1, [pc, #260]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038dc:	4b3c      	ldr	r3, [pc, #240]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	4939      	ldr	r1, [pc, #228]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d028      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038fe:	4b34      	ldr	r3, [pc, #208]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003904:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390c:	4930      	ldr	r1, [pc, #192]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800391c:	d106      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391e:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	4a2b      	ldr	r2, [pc, #172]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003924:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003928:	60d3      	str	r3, [r2, #12]
 800392a:	e011      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003930:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003934:	d10c      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3304      	adds	r3, #4
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f8f9 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d04d      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003964:	d108      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003966:	4b1a      	ldr	r3, [pc, #104]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003968:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800396c:	4a18      	ldr	r2, [pc, #96]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800396e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003972:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003976:	e012      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003978:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800397a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800397e:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003984:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003988:	4b11      	ldr	r3, [pc, #68]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003996:	490e      	ldr	r1, [pc, #56]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039a6:	d106      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a8:	4b09      	ldr	r3, [pc, #36]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a08      	ldr	r2, [pc, #32]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039b2:	60d3      	str	r3, [r2, #12]
 80039b4:	e020      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039be:	d109      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039c0:	4b03      	ldr	r3, [pc, #12]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a02      	ldr	r2, [pc, #8]	@ (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ca:	60d3      	str	r3, [r2, #12]
 80039cc:	e014      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 f8a5 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d028      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a04:	4b4a      	ldr	r3, [pc, #296]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a12:	4947      	ldr	r1, [pc, #284]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a24:	4b42      	ldr	r3, [pc, #264]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4a41      	ldr	r2, [pc, #260]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a2e:	60d3      	str	r3, [r2, #12]
 8003a30:	e011      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a3a:	d10c      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f876 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01e      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a62:	4b33      	ldr	r3, [pc, #204]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a68:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a72:	492f      	ldr	r1, [pc, #188]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 f851 	bl	8003b34 <RCCEx_PLLSAI1_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00b      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aac:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ab2:	f023 0204 	bic.w	r2, r3, #4
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003abc:	491c      	ldr	r1, [pc, #112]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ad0:	4b17      	ldr	r3, [pc, #92]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ad6:	f023 0218 	bic.w	r2, r3, #24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae0:	4913      	ldr	r1, [pc, #76]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003af4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b04:	490a      	ldr	r1, [pc, #40]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b16:	d105      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b24:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b42:	4b72      	ldr	r3, [pc, #456]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0203 	and.w	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d103      	bne.n	8003b66 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
       ||
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d142      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
 8003b6a:	e03f      	b.n	8003bec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d018      	beq.n	8003ba6 <RCCEx_PLLSAI1_Config+0x72>
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d825      	bhi.n	8003bc4 <RCCEx_PLLSAI1_Config+0x90>
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d002      	beq.n	8003b82 <RCCEx_PLLSAI1_Config+0x4e>
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d009      	beq.n	8003b94 <RCCEx_PLLSAI1_Config+0x60>
 8003b80:	e020      	b.n	8003bc4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b82:	4b62      	ldr	r3, [pc, #392]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11d      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b92:	e01a      	b.n	8003bca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b94:	4b5d      	ldr	r3, [pc, #372]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d116      	bne.n	8003bce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba4:	e013      	b.n	8003bce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ba6:	4b59      	ldr	r3, [pc, #356]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bb2:	4b56      	ldr	r3, [pc, #344]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bc2:	e006      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e004      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003bd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bda:	4b4c      	ldr	r3, [pc, #304]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4949      	ldr	r1, [pc, #292]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 8086 	bne.w	8003d00 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bf4:	4b45      	ldr	r3, [pc, #276]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a44      	ldr	r2, [pc, #272]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bfa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fd faf2 	bl	80011e8 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c06:	e009      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c08:	f7fd faee 	bl	80011e8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d902      	bls.n	8003c1c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	73fb      	strb	r3, [r7, #15]
        break;
 8003c1a:	e005      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1ef      	bne.n	8003c08 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d168      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d113      	bne.n	8003c5c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c34:	4b35      	ldr	r3, [pc, #212]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	4b35      	ldr	r3, [pc, #212]	@ (8003d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6892      	ldr	r2, [r2, #8]
 8003c40:	0211      	lsls	r1, r2, #8
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68d2      	ldr	r2, [r2, #12]
 8003c46:	06d2      	lsls	r2, r2, #27
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6852      	ldr	r2, [r2, #4]
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0112      	lsls	r2, r2, #4
 8003c52:	430a      	orrs	r2, r1
 8003c54:	492d      	ldr	r1, [pc, #180]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	610b      	str	r3, [r1, #16]
 8003c5a:	e02d      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d115      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c62:	4b2a      	ldr	r3, [pc, #168]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	4b2b      	ldr	r3, [pc, #172]	@ (8003d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6892      	ldr	r2, [r2, #8]
 8003c6e:	0211      	lsls	r1, r2, #8
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	6912      	ldr	r2, [r2, #16]
 8003c74:	0852      	lsrs	r2, r2, #1
 8003c76:	3a01      	subs	r2, #1
 8003c78:	0552      	lsls	r2, r2, #21
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6852      	ldr	r2, [r2, #4]
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4921      	ldr	r1, [pc, #132]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	610b      	str	r3, [r1, #16]
 8003c8c:	e014      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	4b21      	ldr	r3, [pc, #132]	@ (8003d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6892      	ldr	r2, [r2, #8]
 8003c9a:	0211      	lsls	r1, r2, #8
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6952      	ldr	r2, [r2, #20]
 8003ca0:	0852      	lsrs	r2, r2, #1
 8003ca2:	3a01      	subs	r2, #1
 8003ca4:	0652      	lsls	r2, r2, #25
 8003ca6:	4311      	orrs	r1, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6852      	ldr	r2, [r2, #4]
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4916      	ldr	r1, [pc, #88]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd fa90 	bl	80011e8 <HAL_GetTick>
 8003cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cca:	e009      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ccc:	f7fd fa8c 	bl	80011e8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d902      	bls.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cde:	e005      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ef      	beq.n	8003ccc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4904      	ldr	r1, [pc, #16]	@ (8003d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	07ff800f 	.word	0x07ff800f
 8003d14:	ff9f800f 	.word	0xff9f800f
 8003d18:	f9ff800f 	.word	0xf9ff800f

08003d1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d2a:	4b72      	ldr	r3, [pc, #456]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00e      	beq.n	8003d54 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d36:	4b6f      	ldr	r3, [pc, #444]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d103      	bne.n	8003d4e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
       ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d142      	bne.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
 8003d52:	e03f      	b.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d018      	beq.n	8003d8e <RCCEx_PLLSAI2_Config+0x72>
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d825      	bhi.n	8003dac <RCCEx_PLLSAI2_Config+0x90>
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d002      	beq.n	8003d6a <RCCEx_PLLSAI2_Config+0x4e>
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d009      	beq.n	8003d7c <RCCEx_PLLSAI2_Config+0x60>
 8003d68:	e020      	b.n	8003dac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d6a:	4b62      	ldr	r3, [pc, #392]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d11d      	bne.n	8003db2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7a:	e01a      	b.n	8003db2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d7c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d116      	bne.n	8003db6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e013      	b.n	8003db6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d8e:	4b59      	ldr	r3, [pc, #356]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d9a:	4b56      	ldr	r3, [pc, #344]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003daa:	e006      	b.n	8003dba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      break;
 8003db0:	e004      	b.n	8003dbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003db2:	bf00      	nop
 8003db4:	e002      	b.n	8003dbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003dc2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f023 0203 	bic.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4949      	ldr	r1, [pc, #292]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 8086 	bne.w	8003ee8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ddc:	4b45      	ldr	r3, [pc, #276]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a44      	ldr	r2, [pc, #272]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de8:	f7fd f9fe 	bl	80011e8 <HAL_GetTick>
 8003dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dee:	e009      	b.n	8003e04 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003df0:	f7fd f9fa 	bl	80011e8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d902      	bls.n	8003e04 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	73fb      	strb	r3, [r7, #15]
        break;
 8003e02:	e005      	b.n	8003e10 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e04:	4b3b      	ldr	r3, [pc, #236]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1ef      	bne.n	8003df0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d168      	bne.n	8003ee8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d113      	bne.n	8003e44 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	4b35      	ldr	r3, [pc, #212]	@ (8003ef8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6892      	ldr	r2, [r2, #8]
 8003e28:	0211      	lsls	r1, r2, #8
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	06d2      	lsls	r2, r2, #27
 8003e30:	4311      	orrs	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6852      	ldr	r2, [r2, #4]
 8003e36:	3a01      	subs	r2, #1
 8003e38:	0112      	lsls	r2, r2, #4
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	492d      	ldr	r1, [pc, #180]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	614b      	str	r3, [r1, #20]
 8003e42:	e02d      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d115      	bne.n	8003e76 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <RCCEx_PLLSAI2_Config+0x1e0>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6892      	ldr	r2, [r2, #8]
 8003e56:	0211      	lsls	r1, r2, #8
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6912      	ldr	r2, [r2, #16]
 8003e5c:	0852      	lsrs	r2, r2, #1
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	0552      	lsls	r2, r2, #21
 8003e62:	4311      	orrs	r1, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6852      	ldr	r2, [r2, #4]
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	4921      	ldr	r1, [pc, #132]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	614b      	str	r3, [r1, #20]
 8003e74:	e014      	b.n	8003ea0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e76:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	0211      	lsls	r1, r2, #8
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6952      	ldr	r2, [r2, #20]
 8003e88:	0852      	lsrs	r2, r2, #1
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	0652      	lsls	r2, r2, #25
 8003e8e:	4311      	orrs	r1, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6852      	ldr	r2, [r2, #4]
 8003e94:	3a01      	subs	r2, #1
 8003e96:	0112      	lsls	r2, r2, #4
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	4916      	ldr	r1, [pc, #88]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003ea0:	4b14      	ldr	r3, [pc, #80]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a13      	ldr	r2, [pc, #76]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fd f99c 	bl	80011e8 <HAL_GetTick>
 8003eb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003eb2:	e009      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003eb4:	f7fd f998 	bl	80011e8 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d902      	bls.n	8003ec8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ec6:	e005      	b.n	8003ed4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ef      	beq.n	8003eb4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4904      	ldr	r1, [pc, #16]	@ (8003ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	07ff800f 	.word	0x07ff800f
 8003efc:	ff9f800f 	.word	0xff9f800f
 8003f00:	f9ff800f 	.word	0xf9ff800f

08003f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e049      	b.n	8003faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fc ffb6 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	4619      	mov	r1, r3
 8003f42:	4610      	mov	r0, r2
 8003f44:	f000 fbae 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e049      	b.n	8004058 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f841 	bl	8004060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f000 fb57 	bl	80046a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d020      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01b      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0202 	mvn.w	r2, #2
 80040a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fad1 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fac3 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fad4 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d020      	beq.n	8004124 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01b      	beq.n	8004124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0204 	mvn.w	r2, #4
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 faab 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa9d 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 faae 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d020      	beq.n	8004170 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01b      	beq.n	8004170 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0208 	mvn.w	r2, #8
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2204      	movs	r2, #4
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa85 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fa77 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fa88 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	2b00      	cmp	r3, #0
 8004178:	d020      	beq.n	80041bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01b      	beq.n	80041bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0210 	mvn.w	r2, #16
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2208      	movs	r2, #8
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fa5f 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa51 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa62 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0201 	mvn.w	r2, #1
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa2f 	bl	800463e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fef3 	bl	8004ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 feeb 	bl	8005008 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800424e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fa1c 	bl	800468e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0220 	mvn.w	r2, #32
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 feb3 	bl	8004fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0ff      	b.n	80044a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b14      	cmp	r3, #20
 80042ae:	f200 80f0 	bhi.w	8004492 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042b2:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	0800430d 	.word	0x0800430d
 80042bc:	08004493 	.word	0x08004493
 80042c0:	08004493 	.word	0x08004493
 80042c4:	08004493 	.word	0x08004493
 80042c8:	0800434d 	.word	0x0800434d
 80042cc:	08004493 	.word	0x08004493
 80042d0:	08004493 	.word	0x08004493
 80042d4:	08004493 	.word	0x08004493
 80042d8:	0800438f 	.word	0x0800438f
 80042dc:	08004493 	.word	0x08004493
 80042e0:	08004493 	.word	0x08004493
 80042e4:	08004493 	.word	0x08004493
 80042e8:	080043cf 	.word	0x080043cf
 80042ec:	08004493 	.word	0x08004493
 80042f0:	08004493 	.word	0x08004493
 80042f4:	08004493 	.word	0x08004493
 80042f8:	08004411 	.word	0x08004411
 80042fc:	08004493 	.word	0x08004493
 8004300:	08004493 	.word	0x08004493
 8004304:	08004493 	.word	0x08004493
 8004308:	08004451 	.word	0x08004451
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa6c 	bl	80047f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0204 	bic.w	r2, r2, #4
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	619a      	str	r2, [r3, #24]
      break;
 800434a:	e0a5      	b.n	8004498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fadc 	bl	8004910 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
      break;
 800438c:	e084      	b.n	8004498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fb45 	bl	8004a24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0208 	orr.w	r2, r2, #8
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0204 	bic.w	r2, r2, #4
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	61da      	str	r2, [r3, #28]
      break;
 80043cc:	e064      	b.n	8004498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fbad 	bl	8004b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
      break;
 800440e:	e043      	b.n	8004498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fbf6 	bl	8004c08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0208 	orr.w	r2, r2, #8
 800442a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0204 	bic.w	r2, r2, #4
 800443a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800444e:	e023      	b.n	8004498 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc3a 	bl	8004cd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004490:	e002      	b.n	8004498 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	75fb      	strb	r3, [r7, #23]
      break;
 8004496:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop

080044ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_ConfigClockSource+0x1c>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0b6      	b.n	8004636 <HAL_TIM_ConfigClockSource+0x18a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004504:	d03e      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0xd8>
 8004506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800450a:	f200 8087 	bhi.w	800461c <HAL_TIM_ConfigClockSource+0x170>
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004512:	f000 8086 	beq.w	8004622 <HAL_TIM_ConfigClockSource+0x176>
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800451a:	d87f      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x170>
 800451c:	2b70      	cmp	r3, #112	@ 0x70
 800451e:	d01a      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0xaa>
 8004520:	2b70      	cmp	r3, #112	@ 0x70
 8004522:	d87b      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x170>
 8004524:	2b60      	cmp	r3, #96	@ 0x60
 8004526:	d050      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0x11e>
 8004528:	2b60      	cmp	r3, #96	@ 0x60
 800452a:	d877      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x170>
 800452c:	2b50      	cmp	r3, #80	@ 0x50
 800452e:	d03c      	beq.n	80045aa <HAL_TIM_ConfigClockSource+0xfe>
 8004530:	2b50      	cmp	r3, #80	@ 0x50
 8004532:	d873      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x170>
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d058      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0x13e>
 8004538:	2b40      	cmp	r3, #64	@ 0x40
 800453a:	d86f      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x170>
 800453c:	2b30      	cmp	r3, #48	@ 0x30
 800453e:	d064      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x15e>
 8004540:	2b30      	cmp	r3, #48	@ 0x30
 8004542:	d86b      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x170>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d060      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x15e>
 8004548:	2b20      	cmp	r3, #32
 800454a:	d867      	bhi.n	800461c <HAL_TIM_ConfigClockSource+0x170>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05c      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x15e>
 8004550:	2b10      	cmp	r3, #16
 8004552:	d05a      	beq.n	800460a <HAL_TIM_ConfigClockSource+0x15e>
 8004554:	e062      	b.n	800461c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004566:	f000 fc93 	bl	8004e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]
      break;
 8004582:	e04f      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004594:	f000 fc7c 	bl	8004e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045a6:	609a      	str	r2, [r3, #8]
      break;
 80045a8:	e03c      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	461a      	mov	r2, r3
 80045b8:	f000 fbf0 	bl	8004d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2150      	movs	r1, #80	@ 0x50
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fc49 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 80045c8:	e02c      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d6:	461a      	mov	r2, r3
 80045d8:	f000 fc0f 	bl	8004dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2160      	movs	r1, #96	@ 0x60
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fc39 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 80045e8:	e01c      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	461a      	mov	r2, r3
 80045f8:	f000 fbd0 	bl	8004d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2140      	movs	r1, #64	@ 0x40
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fc29 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 8004608:	e00c      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f000 fc20 	bl	8004e5a <TIM_ITRx_SetConfig>
      break;
 800461a:	e003      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
      break;
 8004620:	e000      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a46      	ldr	r2, [pc, #280]	@ (80047d0 <TIM_Base_SetConfig+0x12c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a43      	ldr	r2, [pc, #268]	@ (80047d4 <TIM_Base_SetConfig+0x130>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a42      	ldr	r2, [pc, #264]	@ (80047d8 <TIM_Base_SetConfig+0x134>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a41      	ldr	r2, [pc, #260]	@ (80047dc <TIM_Base_SetConfig+0x138>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a40      	ldr	r2, [pc, #256]	@ (80047e0 <TIM_Base_SetConfig+0x13c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a35      	ldr	r2, [pc, #212]	@ (80047d0 <TIM_Base_SetConfig+0x12c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01f      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004704:	d01b      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a32      	ldr	r2, [pc, #200]	@ (80047d4 <TIM_Base_SetConfig+0x130>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d017      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a31      	ldr	r2, [pc, #196]	@ (80047d8 <TIM_Base_SetConfig+0x134>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a30      	ldr	r2, [pc, #192]	@ (80047dc <TIM_Base_SetConfig+0x138>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00f      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2f      	ldr	r2, [pc, #188]	@ (80047e0 <TIM_Base_SetConfig+0x13c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2e      	ldr	r2, [pc, #184]	@ (80047e4 <TIM_Base_SetConfig+0x140>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2d      	ldr	r2, [pc, #180]	@ (80047e8 <TIM_Base_SetConfig+0x144>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_Base_SetConfig+0x9a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2c      	ldr	r2, [pc, #176]	@ (80047ec <TIM_Base_SetConfig+0x148>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d108      	bne.n	8004750 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a16      	ldr	r2, [pc, #88]	@ (80047d0 <TIM_Base_SetConfig+0x12c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00f      	beq.n	800479c <TIM_Base_SetConfig+0xf8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a18      	ldr	r2, [pc, #96]	@ (80047e0 <TIM_Base_SetConfig+0x13c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d00b      	beq.n	800479c <TIM_Base_SetConfig+0xf8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a17      	ldr	r2, [pc, #92]	@ (80047e4 <TIM_Base_SetConfig+0x140>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d007      	beq.n	800479c <TIM_Base_SetConfig+0xf8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a16      	ldr	r2, [pc, #88]	@ (80047e8 <TIM_Base_SetConfig+0x144>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0xf8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <TIM_Base_SetConfig+0x148>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d103      	bne.n	80047a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f023 0201 	bic.w	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]
  }
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40000400 	.word	0x40000400
 80047d8:	40000800 	.word	0x40000800
 80047dc:	40000c00 	.word	0x40000c00
 80047e0:	40013400 	.word	0x40013400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800

080047f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f023 0201 	bic.w	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800481e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 0302 	bic.w	r3, r3, #2
 800483c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a2c      	ldr	r2, [pc, #176]	@ (80048fc <TIM_OC1_SetConfig+0x10c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_OC1_SetConfig+0x80>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a2b      	ldr	r2, [pc, #172]	@ (8004900 <TIM_OC1_SetConfig+0x110>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00b      	beq.n	8004870 <TIM_OC1_SetConfig+0x80>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a2a      	ldr	r2, [pc, #168]	@ (8004904 <TIM_OC1_SetConfig+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_OC1_SetConfig+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a29      	ldr	r2, [pc, #164]	@ (8004908 <TIM_OC1_SetConfig+0x118>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_OC1_SetConfig+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a28      	ldr	r2, [pc, #160]	@ (800490c <TIM_OC1_SetConfig+0x11c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10c      	bne.n	800488a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0308 	bic.w	r3, r3, #8
 8004876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f023 0304 	bic.w	r3, r3, #4
 8004888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1b      	ldr	r2, [pc, #108]	@ (80048fc <TIM_OC1_SetConfig+0x10c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_OC1_SetConfig+0xc2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1a      	ldr	r2, [pc, #104]	@ (8004900 <TIM_OC1_SetConfig+0x110>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_OC1_SetConfig+0xc2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a19      	ldr	r2, [pc, #100]	@ (8004904 <TIM_OC1_SetConfig+0x114>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_OC1_SetConfig+0xc2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a18      	ldr	r2, [pc, #96]	@ (8004908 <TIM_OC1_SetConfig+0x118>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC1_SetConfig+0xc2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a17      	ldr	r2, [pc, #92]	@ (800490c <TIM_OC1_SetConfig+0x11c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d111      	bne.n	80048d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	621a      	str	r2, [r3, #32]
}
 80048f0:	bf00      	nop
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	40012c00 	.word	0x40012c00
 8004900:	40013400 	.word	0x40013400
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800

08004910 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f023 0210 	bic.w	r2, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0320 	bic.w	r3, r3, #32
 800495e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a28      	ldr	r2, [pc, #160]	@ (8004a10 <TIM_OC2_SetConfig+0x100>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC2_SetConfig+0x6c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a27      	ldr	r2, [pc, #156]	@ (8004a14 <TIM_OC2_SetConfig+0x104>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10d      	bne.n	8004998 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <TIM_OC2_SetConfig+0x100>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00f      	beq.n	80049c0 <TIM_OC2_SetConfig+0xb0>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <TIM_OC2_SetConfig+0x104>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <TIM_OC2_SetConfig+0xb0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <TIM_OC2_SetConfig+0x108>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_OC2_SetConfig+0xb0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a1c <TIM_OC2_SetConfig+0x10c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_OC2_SetConfig+0xb0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a19      	ldr	r2, [pc, #100]	@ (8004a20 <TIM_OC2_SetConfig+0x110>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d113      	bne.n	80049e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40013400 	.word	0x40013400
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800

08004a24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a27      	ldr	r2, [pc, #156]	@ (8004b20 <TIM_OC3_SetConfig+0xfc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_OC3_SetConfig+0x6a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a26      	ldr	r2, [pc, #152]	@ (8004b24 <TIM_OC3_SetConfig+0x100>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d10d      	bne.n	8004aaa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1c      	ldr	r2, [pc, #112]	@ (8004b20 <TIM_OC3_SetConfig+0xfc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00f      	beq.n	8004ad2 <TIM_OC3_SetConfig+0xae>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b24 <TIM_OC3_SetConfig+0x100>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00b      	beq.n	8004ad2 <TIM_OC3_SetConfig+0xae>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a1a      	ldr	r2, [pc, #104]	@ (8004b28 <TIM_OC3_SetConfig+0x104>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <TIM_OC3_SetConfig+0xae>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	@ (8004b2c <TIM_OC3_SetConfig+0x108>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d003      	beq.n	8004ad2 <TIM_OC3_SetConfig+0xae>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a18      	ldr	r2, [pc, #96]	@ (8004b30 <TIM_OC3_SetConfig+0x10c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d113      	bne.n	8004afa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40013400 	.word	0x40013400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	031b      	lsls	r3, r3, #12
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <TIM_OC4_SetConfig+0xc0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00f      	beq.n	8004bb8 <TIM_OC4_SetConfig+0x84>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <TIM_OC4_SetConfig+0xc4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00b      	beq.n	8004bb8 <TIM_OC4_SetConfig+0x84>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <TIM_OC4_SetConfig+0xc8>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d007      	beq.n	8004bb8 <TIM_OC4_SetConfig+0x84>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <TIM_OC4_SetConfig+0xcc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d003      	beq.n	8004bb8 <TIM_OC4_SetConfig+0x84>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a14      	ldr	r2, [pc, #80]	@ (8004c04 <TIM_OC4_SetConfig+0xd0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d109      	bne.n	8004bcc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800

08004c08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	@ (8004cbc <TIM_OC5_SetConfig+0xb4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <TIM_OC5_SetConfig+0x7a>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a16      	ldr	r2, [pc, #88]	@ (8004cc0 <TIM_OC5_SetConfig+0xb8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_OC5_SetConfig+0x7a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a15      	ldr	r2, [pc, #84]	@ (8004cc4 <TIM_OC5_SetConfig+0xbc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_OC5_SetConfig+0x7a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a14      	ldr	r2, [pc, #80]	@ (8004cc8 <TIM_OC5_SetConfig+0xc0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_OC5_SetConfig+0x7a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ccc <TIM_OC5_SetConfig+0xc4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d109      	bne.n	8004c96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40013400 	.word	0x40013400
 8004cc4:	40014000 	.word	0x40014000
 8004cc8:	40014400 	.word	0x40014400
 8004ccc:	40014800 	.word	0x40014800

08004cd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	021b      	lsls	r3, r3, #8
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	051b      	lsls	r3, r3, #20
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a18      	ldr	r2, [pc, #96]	@ (8004d88 <TIM_OC6_SetConfig+0xb8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00f      	beq.n	8004d4c <TIM_OC6_SetConfig+0x7c>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	@ (8004d8c <TIM_OC6_SetConfig+0xbc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_OC6_SetConfig+0x7c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a16      	ldr	r2, [pc, #88]	@ (8004d90 <TIM_OC6_SetConfig+0xc0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_OC6_SetConfig+0x7c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a15      	ldr	r2, [pc, #84]	@ (8004d94 <TIM_OC6_SetConfig+0xc4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_OC6_SetConfig+0x7c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a14      	ldr	r2, [pc, #80]	@ (8004d98 <TIM_OC6_SetConfig+0xc8>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d109      	bne.n	8004d60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	029b      	lsls	r3, r3, #10
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40013400 	.word	0x40013400
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800

08004d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 0201 	bic.w	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 030a 	bic.w	r3, r3, #10
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f023 0210 	bic.w	r2, r3, #16
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	031b      	lsls	r3, r3, #12
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f043 0307 	orr.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]
}
 8004e84:	bf00      	nop
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	021a      	lsls	r2, r3, #8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	609a      	str	r2, [r3, #8]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e068      	b.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d004      	beq.n	8004f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2d      	ldr	r2, [pc, #180]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d108      	bne.n	8004f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01d      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5a:	d018      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00e      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a18      	ldr	r2, [pc, #96]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d009      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a13      	ldr	r2, [pc, #76]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d004      	beq.n	8004f8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a14      	ldr	r2, [pc, #80]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40014000 	.word	0x40014000

08004fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e042      	b.n	80050b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fb ff83 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	@ 0x24
 800504a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fb24 	bl	80056b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f825 	bl	80050bc <UART_SetConfig>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e01b      	b.n	80050b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800508a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800509a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fba3 	bl	80057f8 <UART_CheckIdleState>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c0:	b08c      	sub	sp, #48	@ 0x30
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	431a      	orrs	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4baa      	ldr	r3, [pc, #680]	@ (8005394 <UART_SetConfig+0x2d8>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a9f      	ldr	r2, [pc, #636]	@ (8005398 <UART_SetConfig+0x2dc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005124:	4313      	orrs	r3, r2
 8005126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005132:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800513c:	430b      	orrs	r3, r1
 800513e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005146:	f023 010f 	bic.w	r1, r3, #15
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a90      	ldr	r2, [pc, #576]	@ (800539c <UART_SetConfig+0x2e0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d125      	bne.n	80051ac <UART_SetConfig+0xf0>
 8005160:	4b8f      	ldr	r3, [pc, #572]	@ (80053a0 <UART_SetConfig+0x2e4>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d81a      	bhi.n	80051a4 <UART_SetConfig+0xe8>
 800516e:	a201      	add	r2, pc, #4	@ (adr r2, 8005174 <UART_SetConfig+0xb8>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005185 	.word	0x08005185
 8005178:	08005195 	.word	0x08005195
 800517c:	0800518d 	.word	0x0800518d
 8005180:	0800519d 	.word	0x0800519d
 8005184:	2301      	movs	r3, #1
 8005186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800518a:	e116      	b.n	80053ba <UART_SetConfig+0x2fe>
 800518c:	2302      	movs	r3, #2
 800518e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005192:	e112      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800519a:	e10e      	b.n	80053ba <UART_SetConfig+0x2fe>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051a2:	e10a      	b.n	80053ba <UART_SetConfig+0x2fe>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051aa:	e106      	b.n	80053ba <UART_SetConfig+0x2fe>
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a7c      	ldr	r2, [pc, #496]	@ (80053a4 <UART_SetConfig+0x2e8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d138      	bne.n	8005228 <UART_SetConfig+0x16c>
 80051b6:	4b7a      	ldr	r3, [pc, #488]	@ (80053a0 <UART_SetConfig+0x2e4>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d82d      	bhi.n	8005220 <UART_SetConfig+0x164>
 80051c4:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <UART_SetConfig+0x110>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	08005201 	.word	0x08005201
 80051d0:	08005221 	.word	0x08005221
 80051d4:	08005221 	.word	0x08005221
 80051d8:	08005221 	.word	0x08005221
 80051dc:	08005211 	.word	0x08005211
 80051e0:	08005221 	.word	0x08005221
 80051e4:	08005221 	.word	0x08005221
 80051e8:	08005221 	.word	0x08005221
 80051ec:	08005209 	.word	0x08005209
 80051f0:	08005221 	.word	0x08005221
 80051f4:	08005221 	.word	0x08005221
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005219 	.word	0x08005219
 8005200:	2300      	movs	r3, #0
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005206:	e0d8      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005208:	2302      	movs	r3, #2
 800520a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800520e:	e0d4      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005210:	2304      	movs	r3, #4
 8005212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005216:	e0d0      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005218:	2308      	movs	r3, #8
 800521a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800521e:	e0cc      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005220:	2310      	movs	r3, #16
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005226:	e0c8      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a5e      	ldr	r2, [pc, #376]	@ (80053a8 <UART_SetConfig+0x2ec>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d125      	bne.n	800527e <UART_SetConfig+0x1c2>
 8005232:	4b5b      	ldr	r3, [pc, #364]	@ (80053a0 <UART_SetConfig+0x2e4>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005238:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800523c:	2b30      	cmp	r3, #48	@ 0x30
 800523e:	d016      	beq.n	800526e <UART_SetConfig+0x1b2>
 8005240:	2b30      	cmp	r3, #48	@ 0x30
 8005242:	d818      	bhi.n	8005276 <UART_SetConfig+0x1ba>
 8005244:	2b20      	cmp	r3, #32
 8005246:	d00a      	beq.n	800525e <UART_SetConfig+0x1a2>
 8005248:	2b20      	cmp	r3, #32
 800524a:	d814      	bhi.n	8005276 <UART_SetConfig+0x1ba>
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <UART_SetConfig+0x19a>
 8005250:	2b10      	cmp	r3, #16
 8005252:	d008      	beq.n	8005266 <UART_SetConfig+0x1aa>
 8005254:	e00f      	b.n	8005276 <UART_SetConfig+0x1ba>
 8005256:	2300      	movs	r3, #0
 8005258:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800525c:	e0ad      	b.n	80053ba <UART_SetConfig+0x2fe>
 800525e:	2302      	movs	r3, #2
 8005260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005264:	e0a9      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005266:	2304      	movs	r3, #4
 8005268:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526c:	e0a5      	b.n	80053ba <UART_SetConfig+0x2fe>
 800526e:	2308      	movs	r3, #8
 8005270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005274:	e0a1      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005276:	2310      	movs	r3, #16
 8005278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800527c:	e09d      	b.n	80053ba <UART_SetConfig+0x2fe>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a4a      	ldr	r2, [pc, #296]	@ (80053ac <UART_SetConfig+0x2f0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d125      	bne.n	80052d4 <UART_SetConfig+0x218>
 8005288:	4b45      	ldr	r3, [pc, #276]	@ (80053a0 <UART_SetConfig+0x2e4>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005292:	2bc0      	cmp	r3, #192	@ 0xc0
 8005294:	d016      	beq.n	80052c4 <UART_SetConfig+0x208>
 8005296:	2bc0      	cmp	r3, #192	@ 0xc0
 8005298:	d818      	bhi.n	80052cc <UART_SetConfig+0x210>
 800529a:	2b80      	cmp	r3, #128	@ 0x80
 800529c:	d00a      	beq.n	80052b4 <UART_SetConfig+0x1f8>
 800529e:	2b80      	cmp	r3, #128	@ 0x80
 80052a0:	d814      	bhi.n	80052cc <UART_SetConfig+0x210>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <UART_SetConfig+0x1f0>
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d008      	beq.n	80052bc <UART_SetConfig+0x200>
 80052aa:	e00f      	b.n	80052cc <UART_SetConfig+0x210>
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b2:	e082      	b.n	80053ba <UART_SetConfig+0x2fe>
 80052b4:	2302      	movs	r3, #2
 80052b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ba:	e07e      	b.n	80053ba <UART_SetConfig+0x2fe>
 80052bc:	2304      	movs	r3, #4
 80052be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c2:	e07a      	b.n	80053ba <UART_SetConfig+0x2fe>
 80052c4:	2308      	movs	r3, #8
 80052c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ca:	e076      	b.n	80053ba <UART_SetConfig+0x2fe>
 80052cc:	2310      	movs	r3, #16
 80052ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d2:	e072      	b.n	80053ba <UART_SetConfig+0x2fe>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a35      	ldr	r2, [pc, #212]	@ (80053b0 <UART_SetConfig+0x2f4>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d12a      	bne.n	8005334 <UART_SetConfig+0x278>
 80052de:	4b30      	ldr	r3, [pc, #192]	@ (80053a0 <UART_SetConfig+0x2e4>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ec:	d01a      	beq.n	8005324 <UART_SetConfig+0x268>
 80052ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052f2:	d81b      	bhi.n	800532c <UART_SetConfig+0x270>
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f8:	d00c      	beq.n	8005314 <UART_SetConfig+0x258>
 80052fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052fe:	d815      	bhi.n	800532c <UART_SetConfig+0x270>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <UART_SetConfig+0x250>
 8005304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005308:	d008      	beq.n	800531c <UART_SetConfig+0x260>
 800530a:	e00f      	b.n	800532c <UART_SetConfig+0x270>
 800530c:	2300      	movs	r3, #0
 800530e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005312:	e052      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005314:	2302      	movs	r3, #2
 8005316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800531a:	e04e      	b.n	80053ba <UART_SetConfig+0x2fe>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005322:	e04a      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532a:	e046      	b.n	80053ba <UART_SetConfig+0x2fe>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005332:	e042      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a17      	ldr	r2, [pc, #92]	@ (8005398 <UART_SetConfig+0x2dc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d13a      	bne.n	80053b4 <UART_SetConfig+0x2f8>
 800533e:	4b18      	ldr	r3, [pc, #96]	@ (80053a0 <UART_SetConfig+0x2e4>)
 8005340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005344:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800534c:	d01a      	beq.n	8005384 <UART_SetConfig+0x2c8>
 800534e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005352:	d81b      	bhi.n	800538c <UART_SetConfig+0x2d0>
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005358:	d00c      	beq.n	8005374 <UART_SetConfig+0x2b8>
 800535a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800535e:	d815      	bhi.n	800538c <UART_SetConfig+0x2d0>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <UART_SetConfig+0x2b0>
 8005364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005368:	d008      	beq.n	800537c <UART_SetConfig+0x2c0>
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x2d0>
 800536c:	2300      	movs	r3, #0
 800536e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005372:	e022      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005374:	2302      	movs	r3, #2
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800537a:	e01e      	b.n	80053ba <UART_SetConfig+0x2fe>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005382:	e01a      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800538a:	e016      	b.n	80053ba <UART_SetConfig+0x2fe>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005392:	e012      	b.n	80053ba <UART_SetConfig+0x2fe>
 8005394:	cfff69f3 	.word	0xcfff69f3
 8005398:	40008000 	.word	0x40008000
 800539c:	40013800 	.word	0x40013800
 80053a0:	40021000 	.word	0x40021000
 80053a4:	40004400 	.word	0x40004400
 80053a8:	40004800 	.word	0x40004800
 80053ac:	40004c00 	.word	0x40004c00
 80053b0:	40005000 	.word	0x40005000
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4aae      	ldr	r2, [pc, #696]	@ (8005678 <UART_SetConfig+0x5bc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	f040 8097 	bne.w	80054f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d823      	bhi.n	8005416 <UART_SetConfig+0x35a>
 80053ce:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <UART_SetConfig+0x318>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005417 	.word	0x08005417
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005417 	.word	0x08005417
 80053e4:	08005407 	.word	0x08005407
 80053e8:	08005417 	.word	0x08005417
 80053ec:	08005417 	.word	0x08005417
 80053f0:	08005417 	.word	0x08005417
 80053f4:	0800540f 	.word	0x0800540f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7fd ff80 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80053fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053fe:	e010      	b.n	8005422 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005400:	4b9e      	ldr	r3, [pc, #632]	@ (800567c <UART_SetConfig+0x5c0>)
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005404:	e00d      	b.n	8005422 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005406:	f7fd fee1 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800540a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800540c:	e009      	b.n	8005422 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005414:	e005      	b.n	8005422 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8130 	beq.w	800568a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542e:	4a94      	ldr	r2, [pc, #592]	@ (8005680 <UART_SetConfig+0x5c4>)
 8005430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005434:	461a      	mov	r2, r3
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	fbb3 f3f2 	udiv	r3, r3, r2
 800543c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	4413      	add	r3, r2
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	429a      	cmp	r2, r3
 800544c:	d305      	bcc.n	800545a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	429a      	cmp	r2, r3
 8005458:	d903      	bls.n	8005462 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005460:	e113      	b.n	800568a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005464:	2200      	movs	r2, #0
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	60fa      	str	r2, [r7, #12]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	4a84      	ldr	r2, [pc, #528]	@ (8005680 <UART_SetConfig+0x5c4>)
 8005470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005474:	b29b      	uxth	r3, r3
 8005476:	2200      	movs	r2, #0
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005480:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005484:	f7fa feba 	bl	80001fc <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4610      	mov	r0, r2
 800548e:	4619      	mov	r1, r3
 8005490:	f04f 0200 	mov.w	r2, #0
 8005494:	f04f 0300 	mov.w	r3, #0
 8005498:	020b      	lsls	r3, r1, #8
 800549a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800549e:	0202      	lsls	r2, r0, #8
 80054a0:	6979      	ldr	r1, [r7, #20]
 80054a2:	6849      	ldr	r1, [r1, #4]
 80054a4:	0849      	lsrs	r1, r1, #1
 80054a6:	2000      	movs	r0, #0
 80054a8:	460c      	mov	r4, r1
 80054aa:	4605      	mov	r5, r0
 80054ac:	eb12 0804 	adds.w	r8, r2, r4
 80054b0:	eb43 0905 	adc.w	r9, r3, r5
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	469a      	mov	sl, r3
 80054bc:	4693      	mov	fp, r2
 80054be:	4652      	mov	r2, sl
 80054c0:	465b      	mov	r3, fp
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fa fe99 	bl	80001fc <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4613      	mov	r3, r2
 80054d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054d8:	d308      	bcc.n	80054ec <UART_SetConfig+0x430>
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e0:	d204      	bcs.n	80054ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a3a      	ldr	r2, [r7, #32]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	e0ce      	b.n	800568a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054f2:	e0ca      	b.n	800568a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054fc:	d166      	bne.n	80055cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80054fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005502:	2b08      	cmp	r3, #8
 8005504:	d827      	bhi.n	8005556 <UART_SetConfig+0x49a>
 8005506:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <UART_SetConfig+0x450>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005531 	.word	0x08005531
 8005510:	08005539 	.word	0x08005539
 8005514:	08005541 	.word	0x08005541
 8005518:	08005557 	.word	0x08005557
 800551c:	08005547 	.word	0x08005547
 8005520:	08005557 	.word	0x08005557
 8005524:	08005557 	.word	0x08005557
 8005528:	08005557 	.word	0x08005557
 800552c:	0800554f 	.word	0x0800554f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005530:	f7fd fee4 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005534:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005536:	e014      	b.n	8005562 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005538:	f7fd fef6 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 800553c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800553e:	e010      	b.n	8005562 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005540:	4b4e      	ldr	r3, [pc, #312]	@ (800567c <UART_SetConfig+0x5c0>)
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005544:	e00d      	b.n	8005562 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005546:	f7fd fe41 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800554a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800554c:	e009      	b.n	8005562 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800554e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005552:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005554:	e005      	b.n	8005562 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005560:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8090 	beq.w	800568a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	4a44      	ldr	r2, [pc, #272]	@ (8005680 <UART_SetConfig+0x5c4>)
 8005570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005574:	461a      	mov	r2, r3
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	fbb3 f3f2 	udiv	r3, r3, r2
 800557c:	005a      	lsls	r2, r3, #1
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	441a      	add	r2, r3
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b0f      	cmp	r3, #15
 8005594:	d916      	bls.n	80055c4 <UART_SetConfig+0x508>
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800559c:	d212      	bcs.n	80055c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	f023 030f 	bic.w	r3, r3, #15
 80055a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	8bfb      	ldrh	r3, [r7, #30]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	8bfa      	ldrh	r2, [r7, #30]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	e062      	b.n	800568a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055ca:	e05e      	b.n	800568a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d828      	bhi.n	8005626 <UART_SetConfig+0x56a>
 80055d4:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <UART_SetConfig+0x520>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005611 	.word	0x08005611
 80055e8:	08005627 	.word	0x08005627
 80055ec:	08005617 	.word	0x08005617
 80055f0:	08005627 	.word	0x08005627
 80055f4:	08005627 	.word	0x08005627
 80055f8:	08005627 	.word	0x08005627
 80055fc:	0800561f 	.word	0x0800561f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005600:	f7fd fe7c 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 8005604:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005606:	e014      	b.n	8005632 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7fd fe8e 	bl	8003328 <HAL_RCC_GetPCLK2Freq>
 800560c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800560e:	e010      	b.n	8005632 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005610:	4b1a      	ldr	r3, [pc, #104]	@ (800567c <UART_SetConfig+0x5c0>)
 8005612:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005614:	e00d      	b.n	8005632 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005616:	f7fd fdd9 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800561a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800561c:	e009      	b.n	8005632 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005624:	e005      	b.n	8005632 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005630:	bf00      	nop
    }

    if (pclk != 0U)
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	2b00      	cmp	r3, #0
 8005636:	d028      	beq.n	800568a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	4a10      	ldr	r2, [pc, #64]	@ (8005680 <UART_SetConfig+0x5c4>)
 800563e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005642:	461a      	mov	r2, r3
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	fbb3 f2f2 	udiv	r2, r3, r2
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	441a      	add	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	2b0f      	cmp	r3, #15
 8005660:	d910      	bls.n	8005684 <UART_SetConfig+0x5c8>
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005668:	d20c      	bcs.n	8005684 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	b29a      	uxth	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	e009      	b.n	800568a <UART_SetConfig+0x5ce>
 8005676:	bf00      	nop
 8005678:	40008000 	.word	0x40008000
 800567c:	00f42400 	.word	0x00f42400
 8005680:	08005db0 	.word	0x08005db0
      }
      else
      {
        ret = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2201      	movs	r2, #1
 800568e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2201      	movs	r2, #1
 8005696:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2200      	movs	r2, #0
 80056a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80056a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3730      	adds	r7, #48	@ 0x30
 80056ae:	46bd      	mov	sp, r7
 80056b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080056b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01a      	beq.n	80057ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057b2:	d10a      	bne.n	80057ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b098      	sub	sp, #96	@ 0x60
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005808:	f7fb fcee 	bl	80011e8 <HAL_GetTick>
 800580c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d12f      	bne.n	800587c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800581c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f88e 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d022      	beq.n	800587c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800584a:	653b      	str	r3, [r7, #80]	@ 0x50
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005854:	647b      	str	r3, [r7, #68]	@ 0x44
 8005856:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800585a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e6      	bne.n	8005836 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e063      	b.n	8005944 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b04      	cmp	r3, #4
 8005888:	d149      	bne.n	800591e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800588a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005892:	2200      	movs	r2, #0
 8005894:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f857 	bl	800594c <UART_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d03c      	beq.n	800591e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	623b      	str	r3, [r7, #32]
   return(result);
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e6      	bne.n	80058a4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f6:	61fa      	str	r2, [r7, #28]
 80058f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	69b9      	ldr	r1, [r7, #24]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	617b      	str	r3, [r7, #20]
   return(result);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e012      	b.n	8005944 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3758      	adds	r7, #88	@ 0x58
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595c:	e04f      	b.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005964:	d04b      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005966:	f7fb fc3f 	bl	80011e8 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	429a      	cmp	r2, r3
 8005974:	d302      	bcc.n	800597c <UART_WaitOnFlagUntilTimeout+0x30>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e04e      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	2b00      	cmp	r3, #0
 800598c:	d037      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b80      	cmp	r3, #128	@ 0x80
 8005992:	d034      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b40      	cmp	r3, #64	@ 0x40
 8005998:	d031      	beq.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d110      	bne.n	80059ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2208      	movs	r2, #8
 80059ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f838 	bl	8005a26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2208      	movs	r2, #8
 80059ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e029      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d8:	d111      	bne.n	80059fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f81e 	bl	8005a26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e00f      	b.n	8005a1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4013      	ands	r3, r2
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	bf0c      	ite	eq
 8005a0e:	2301      	moveq	r3, #1
 8005a10:	2300      	movne	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d0a0      	beq.n	800595e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b095      	sub	sp, #84	@ 0x54
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e3      	bne.n	8005a60 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d118      	bne.n	8005ad2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f023 0310 	bic.w	r3, r3, #16
 8005ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005abe:	61bb      	str	r3, [r7, #24]
 8005ac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6979      	ldr	r1, [r7, #20]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	613b      	str	r3, [r7, #16]
   return(result);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e6      	bne.n	8005aa0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005ae6:	bf00      	nop
 8005ae8:	3754      	adds	r7, #84	@ 0x54
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b085      	sub	sp, #20
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e027      	b.n	8005b58 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	@ 0x24
 8005b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e02d      	b.n	8005bd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2224      	movs	r2, #36	@ 0x24
 8005b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f84f 	bl	8005c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e02d      	b.n	8005c54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2224      	movs	r2, #36	@ 0x24
 8005c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f811 	bl	8005c5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d108      	bne.n	8005c7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c7c:	e031      	b.n	8005ce2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c7e:	2308      	movs	r3, #8
 8005c80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c82:	2308      	movs	r3, #8
 8005c84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	0e5b      	lsrs	r3, r3, #25
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	0f5b      	lsrs	r3, r3, #29
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ca6:	7bbb      	ldrb	r3, [r7, #14]
 8005ca8:	7b3a      	ldrb	r2, [r7, #12]
 8005caa:	4911      	ldr	r1, [pc, #68]	@ (8005cf0 <UARTEx_SetNbDataToProcess+0x94>)
 8005cac:	5c8a      	ldrb	r2, [r1, r2]
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cb2:	7b3a      	ldrb	r2, [r7, #12]
 8005cb4:	490f      	ldr	r1, [pc, #60]	@ (8005cf4 <UARTEx_SetNbDataToProcess+0x98>)
 8005cb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	7b7a      	ldrb	r2, [r7, #13]
 8005cc8:	4909      	ldr	r1, [pc, #36]	@ (8005cf0 <UARTEx_SetNbDataToProcess+0x94>)
 8005cca:	5c8a      	ldrb	r2, [r1, r2]
 8005ccc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cd0:	7b7a      	ldrb	r2, [r7, #13]
 8005cd2:	4908      	ldr	r1, [pc, #32]	@ (8005cf4 <UARTEx_SetNbDataToProcess+0x98>)
 8005cd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	08005dc8 	.word	0x08005dc8
 8005cf4:	08005dd0 	.word	0x08005dd0

08005cf8 <memset>:
 8005cf8:	4402      	add	r2, r0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <memset+0xa>
 8005d00:	4770      	bx	lr
 8005d02:	f803 1b01 	strb.w	r1, [r3], #1
 8005d06:	e7f9      	b.n	8005cfc <memset+0x4>

08005d08 <__libc_init_array>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005d40 <__libc_init_array+0x38>)
 8005d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005d44 <__libc_init_array+0x3c>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	2600      	movs	r6, #0
 8005d14:	42a6      	cmp	r6, r4
 8005d16:	d109      	bne.n	8005d2c <__libc_init_array+0x24>
 8005d18:	4d0b      	ldr	r5, [pc, #44]	@ (8005d48 <__libc_init_array+0x40>)
 8005d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005d4c <__libc_init_array+0x44>)
 8005d1c:	f000 f818 	bl	8005d50 <_init>
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	2600      	movs	r6, #0
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	d105      	bne.n	8005d36 <__libc_init_array+0x2e>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d30:	4798      	blx	r3
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7ee      	b.n	8005d14 <__libc_init_array+0xc>
 8005d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3a:	4798      	blx	r3
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	e7f2      	b.n	8005d26 <__libc_init_array+0x1e>
 8005d40:	08005de0 	.word	0x08005de0
 8005d44:	08005de0 	.word	0x08005de0
 8005d48:	08005de0 	.word	0x08005de0
 8005d4c:	08005de4 	.word	0x08005de4

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
