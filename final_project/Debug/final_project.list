
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076c4  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08007884  08007884  00008884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a50  08007a50  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a58  08007a58  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a58  08007a58  00008a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00008a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007a60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00097034  2000005c  08007abc  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20097090  08007abc  00009090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6ba  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f95  00000000  00000000  00023746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  000266e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001242  00000000  00000000  00027e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca7f  00000000  00000000  00029062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b843  00000000  00000000  00055ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001134f4  00000000  00000000  00071324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00184818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006954  00000000  00000000  0018485c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0018b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800786c 	.word	0x0800786c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	0800786c 	.word	0x0800786c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <UART_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Helper function to send strings over UART
void UART_Print(const char *message) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe0b 	bl	8000200 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <UART_Print+0x28>)
 80005f6:	f005 fdd9 	bl	80061ac <HAL_UART_Transmit>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200002c4 	.word	0x200002c4

08000608 <UART_Print_Error>:


// This is insanely helpful to solve a lot of problem
void UART_Print_Error(const char *message, HAL_StatusTypeDef status) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	@ 0x50
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
    char err_buf[64];
    snprintf(err_buf, sizeof(err_buf), "%s (Error: %d)\r\n", message, status);
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	f107 0008 	add.w	r0, r7, #8
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <UART_Print_Error+0x44>)
 8000620:	2140      	movs	r1, #64	@ 0x40
 8000622:	f006 fc6f 	bl	8006f04 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)err_buf, strlen(err_buf), HAL_MAX_DELAY);
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fde8 	bl	8000200 <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	f107 0108 	add.w	r1, r7, #8
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <UART_Print_Error+0x48>)
 800063e:	f005 fdb5 	bl	80061ac <HAL_UART_Transmit>
}
 8000642:	bf00      	nop
 8000644:	3748      	adds	r7, #72	@ 0x48
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	08007884 	.word	0x08007884
 8000650:	200002c4 	.word	0x200002c4

08000654 <HAL_GPIO_EXTI_Callback>:

//Button Interrupt, Toggle LED for debug
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]

	// if button is 0 -> NOT on recording mode, ready to record
	// if button is 1 -> Recording


	if (GPIO_Pin == B_BUTTON_Pin) {
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000664:	f040 809a 	bne.w	800079c <HAL_GPIO_EXTI_Callback+0x148>


        // Check if the button is pressed
        if (HAL_GPIO_ReadPin(B_BUTTON_GPIO_Port, B_BUTTON_Pin) == GPIO_PIN_SET) {
 8000668:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066c:	484d      	ldr	r0, [pc, #308]	@ (80007a4 <HAL_GPIO_EXTI_Callback+0x150>)
 800066e:	f002 fd9d 	bl	80031ac <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b01      	cmp	r3, #1
 8000676:	f040 8091 	bne.w	800079c <HAL_GPIO_EXTI_Callback+0x148>

        	//ready to record. It also means we need to wipe out any recBuf
        	if (button_state == 0) {
 800067a:	4b4b      	ldr	r3, [pc, #300]	@ (80007a8 <HAL_GPIO_EXTI_Callback+0x154>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d130      	bne.n	80006e4 <HAL_GPIO_EXTI_Callback+0x90>

				UART_Print("[recording...]\r\n");
 8000682:	484a      	ldr	r0, [pc, #296]	@ (80007ac <HAL_GPIO_EXTI_Callback+0x158>)
 8000684:	f7ff ffaa 	bl	80005dc <UART_Print>

                //just in case stop DMA
                //stop the timer now
                HAL_TIM_Base_Stop(&htim2);
 8000688:	4849      	ldr	r0, [pc, #292]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800068a:	f004 fc7d 	bl	8004f88 <HAL_TIM_Base_Stop>
                HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1); // Ensure DAC DMA is stopped first
 800068e:	2100      	movs	r1, #0
 8000690:	4848      	ldr	r0, [pc, #288]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0x160>)
 8000692:	f001 fb2d 	bl	8001cf0 <HAL_DAC_Stop_DMA>
                HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);  // Ensure DFSDM DMA is stopped
 8000696:	4848      	ldr	r0, [pc, #288]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000698:	f001 ffe0 	bl	800265c <HAL_DFSDM_FilterRegularStop_DMA>


				//clear Buffers
                memset(RecBuf, 0, sizeof(RecBuf));  // Uncomment if needed
 800069c:	4a47      	ldr	r2, [pc, #284]	@ (80007bc <HAL_GPIO_EXTI_Callback+0x168>)
 800069e:	2100      	movs	r1, #0
 80006a0:	4847      	ldr	r0, [pc, #284]	@ (80007c0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80006a2:	f006 fc65 	bl	8006f70 <memset>
                memset(speakerWave, 2048, sizeof(speakerWave));  // Reset to silence (mid-scale)
 80006a6:	4a47      	ldr	r2, [pc, #284]	@ (80007c4 <HAL_GPIO_EXTI_Callback+0x170>)
 80006a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ac:	4846      	ldr	r0, [pc, #280]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x174>)
 80006ae:	f006 fc5f 	bl	8006f70 <memset>
//                // Reinitialize DFSDM completely
//                MX_DFSDM1_Init();
//                MX_DMA_Init(); // Reinitialize DMA as well

                //lit the LED
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006b8:	4844      	ldr	r0, [pc, #272]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x178>)
 80006ba:	f002 fd8f 	bl	80031dc <HAL_GPIO_WritePin>

                //start the microphone DMA

                // Start DMA with fresh configuration
                if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RecBuf, AUDIO_BUFFER_SIZE) != HAL_OK) {
 80006be:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80006c2:	493f      	ldr	r1, [pc, #252]	@ (80007c0 <HAL_GPIO_EXTI_Callback+0x16c>)
 80006c4:	483c      	ldr	r0, [pc, #240]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0x164>)
 80006c6:	f001 ff47 	bl	8002558 <HAL_DFSDM_FilterRegularStart_DMA>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <HAL_GPIO_EXTI_Callback+0x82>
                    UART_Print("DFSDM start failed!\r\n");
 80006d0:	483f      	ldr	r0, [pc, #252]	@ (80007d0 <HAL_GPIO_EXTI_Callback+0x17c>)
 80006d2:	f7ff ff83 	bl	80005dc <UART_Print>
                }


                HAL_TIM_Base_Start(&htim2); // Start DAC trigger timer
 80006d6:	4836      	ldr	r0, [pc, #216]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 80006d8:	f004 fbee 	bl	8004eb8 <HAL_TIM_Base_Start>




        		button_state = 1;
 80006dc:	4b32      	ldr	r3, [pc, #200]	@ (80007a8 <HAL_GPIO_EXTI_Callback+0x154>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]

        }


	}
}
 80006e2:	e05b      	b.n	800079c <HAL_GPIO_EXTI_Callback+0x148>
        	else if (button_state == 1) {
 80006e4:	4b30      	ldr	r3, [pc, #192]	@ (80007a8 <HAL_GPIO_EXTI_Callback+0x154>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d157      	bne.n	800079c <HAL_GPIO_EXTI_Callback+0x148>
                UART_Print("[processing audio...]\r\n");
 80006ec:	4839      	ldr	r0, [pc, #228]	@ (80007d4 <HAL_GPIO_EXTI_Callback+0x180>)
 80006ee:	f7ff ff75 	bl	80005dc <UART_Print>
                HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f8:	4834      	ldr	r0, [pc, #208]	@ (80007cc <HAL_GPIO_EXTI_Callback+0x178>)
 80006fa:	f002 fd6f 	bl	80031dc <HAL_GPIO_WritePin>
                HAL_DFSDM_FilterRegularStop(&hdfsdm1_filter0);
 80006fe:	482e      	ldr	r0, [pc, #184]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000700:	f001 ff0f 	bl	8002522 <HAL_DFSDM_FilterRegularStop>
                HAL_TIM_Base_Stop(&htim2);
 8000704:	482a      	ldr	r0, [pc, #168]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000706:	f004 fc3f 	bl	8004f88 <HAL_TIM_Base_Stop>
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 800070a:	2300      	movs	r3, #0
 800070c:	83fb      	strh	r3, [r7, #30]
 800070e:	e02e      	b.n	800076e <HAL_GPIO_EXTI_Callback+0x11a>
                	int32_t sample24 = RecBuf[i] >> 8;
 8000710:	8bfb      	ldrh	r3, [r7, #30]
 8000712:	4a2b      	ldr	r2, [pc, #172]	@ (80007c0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000718:	121b      	asrs	r3, r3, #8
 800071a:	613b      	str	r3, [r7, #16]
                	 int16_t sample12 = sample24 >> 12;
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	131b      	asrs	r3, r3, #12
 8000720:	81fb      	strh	r3, [r7, #14]
                	 int32_t boostedSample = sample12 * BOOST_FACTOR;
 8000722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	61bb      	str	r3, [r7, #24]
                	 if (boostedSample > 2047) {
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000730:	db03      	blt.n	800073a <HAL_GPIO_EXTI_Callback+0xe6>
                	     boostedSample = 2047;  // Max positive value for 12-bit DAC
 8000732:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	e005      	b.n	8000746 <HAL_GPIO_EXTI_Callback+0xf2>
                	 } else if (boostedSample < -2048) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000740:	da01      	bge.n	8000746 <HAL_GPIO_EXTI_Callback+0xf2>
                	     boostedSample = -2048; // Max negative value for 12-bit DAC
 8000742:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <HAL_GPIO_EXTI_Callback+0x184>)
 8000744:	61bb      	str	r3, [r7, #24]
                	    uint16_t dacValue = (uint16_t)(boostedSample + 2048);
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800074e:	82fb      	strh	r3, [r7, #22]
                	    if (dacValue > 4095) {
 8000750:	8afb      	ldrh	r3, [r7, #22]
 8000752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000756:	d302      	bcc.n	800075e <HAL_GPIO_EXTI_Callback+0x10a>
                	        dacValue = 4095; // Maximum value for 12-bit DAC
 8000758:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800075c:	82fb      	strh	r3, [r7, #22]
                	    speakerWave[i] = dacValue;
 800075e:	8bfb      	ldrh	r3, [r7, #30]
 8000760:	4919      	ldr	r1, [pc, #100]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000762:	8afa      	ldrh	r2, [r7, #22]
 8000764:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < AUDIO_BUFFER_SIZE; i++) {
 8000768:	8bfb      	ldrh	r3, [r7, #30]
 800076a:	3301      	adds	r3, #1
 800076c:	83fb      	strh	r3, [r7, #30]
 800076e:	8bfb      	ldrh	r3, [r7, #30]
 8000770:	f64a 4243 	movw	r2, #44099	@ 0xac43
 8000774:	4293      	cmp	r3, r2
 8000776:	d9cb      	bls.n	8000710 <HAL_GPIO_EXTI_Callback+0xbc>
				UART_Print("[playing back...]\r\n");
 8000778:	4818      	ldr	r0, [pc, #96]	@ (80007dc <HAL_GPIO_EXTI_Callback+0x188>)
 800077a:	f7ff ff2f 	bl	80005dc <UART_Print>
                HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint16_t*)speakerWave, AUDIO_BUFFER_SIZE, DAC_ALIGN_12B_R);
 800077e:	2300      	movs	r3, #0
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8000786:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000788:	2100      	movs	r1, #0
 800078a:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0x160>)
 800078c:	f001 f9e4 	bl	8001b58 <HAL_DAC_Start_DMA>
                HAL_TIM_Base_Start(&htim2); // Start DAC trigger timer
 8000790:	4807      	ldr	r0, [pc, #28]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000792:	f004 fb91 	bl	8004eb8 <HAL_TIM_Base_Start>
                button_state = 0;
 8000796:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <HAL_GPIO_EXTI_Callback+0x154>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	48000800 	.word	0x48000800
 80007a8:	2000035a 	.word	0x2000035a
 80007ac:	08007898 	.word	0x08007898
 80007b0:	2000022c 	.word	0x2000022c
 80007b4:	20000078 	.word	0x20000078
 80007b8:	200000ec 	.word	0x200000ec
 80007bc:	0002b110 	.word	0x0002b110
 80007c0:	2000035c 	.word	0x2000035c
 80007c4:	0006baa8 	.word	0x0006baa8
 80007c8:	2002b46c 	.word	0x2002b46c
 80007cc:	48000400 	.word	0x48000400
 80007d0:	080078ac 	.word	0x080078ac
 80007d4:	080078c4 	.word	0x080078c4
 80007d8:	fffff800 	.word	0xfffff800
 80007dc:	080078dc 	.word	0x080078dc

080007e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]


}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b090      	sub	sp, #64	@ 0x40
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 ff8e 	bl	800171a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f85f 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 fb1f 	bl	8000e44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000806:	f000 faeb 	bl	8000de0 <MX_DMA_Init>
  MX_I2C2_Init();
 800080a:	f000 f96f 	bl	8000aec <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800080e:	f000 fa9b 	bl	8000d48 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000812:	f000 f9ab 	bl	8000b6c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8000816:	f000 f8e5 	bl	80009e4 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 800081a:	f000 f8a3 	bl	8000964 <MX_DAC1_Init>
  MX_TIM3_Init();
 800081e:	f000 fa1b 	bl	8000c58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    // Initialize UART and send welcome message
  UART_Print("\r\nAudio Recorder/Player Ready\r\n");
 8000822:	481b      	ldr	r0, [pc, #108]	@ (8000890 <main+0x9c>)
 8000824:	f7ff feda 	bl	80005dc <UART_Print>
  UART_Print("Press button to start recording\r\n");
 8000828:	481a      	ldr	r0, [pc, #104]	@ (8000894 <main+0xa0>)
 800082a:	f7ff fed7 	bl	80005dc <UART_Print>
  UART_Print("Press button again to play back\r\n\r\n");
 800082e:	481a      	ldr	r0, [pc, #104]	@ (8000898 <main+0xa4>)
 8000830:	f7ff fed4 	bl	80005dc <UART_Print>


  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1); // Start DAC channel 1
 8000834:	2100      	movs	r1, #0
 8000836:	4819      	ldr	r0, [pc, #100]	@ (800089c <main+0xa8>)
 8000838:	f001 f93b 	bl	8001ab2 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800083c:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <main+0xac>)
 800083e:	f004 fbcb 	bl	8004fd8 <HAL_TIM_Base_Start_IT>


  memset(RecBuf, 0, sizeof(RecBuf));  // Uncomment if needed
 8000842:	4a18      	ldr	r2, [pc, #96]	@ (80008a4 <main+0xb0>)
 8000844:	2100      	movs	r1, #0
 8000846:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <main+0xb4>)
 8000848:	f006 fb92 	bl	8006f70 <memset>
  memset(speakerWave, 2048, sizeof(speakerWave));  // Reset to silence (mid-scale)
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <main+0xb8>)
 800084e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000852:	4817      	ldr	r0, [pc, #92]	@ (80008b0 <main+0xbc>)
 8000854:	f006 fb8c 	bl	8006f70 <memset>

	  	// Something very important to know is that when the microphone captures stuff, it is
	    // the DFSDM module, captures the PDM data. which is 32bits. However, it is converted
	  	// to 16-bit SIGNED PCM format, where the microphone outputs data in 2's complement.
		    // Debug output - show first sample value
    if(button_state == 1) { // Only when recording
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <main+0xc0>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d112      	bne.n	8000886 <main+0x92>
        char dbg_msg[64];
        snprintf(dbg_msg, sizeof(dbg_msg), "First sample: %ld\r\n", RecBuf[0]);
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <main+0xb4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4638      	mov	r0, r7
 8000866:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <main+0xc4>)
 8000868:	2140      	movs	r1, #64	@ 0x40
 800086a:	f006 fb4b 	bl	8006f04 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)dbg_msg, strlen(dbg_msg), HAL_MAX_DELAY);
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fcc5 	bl	8000200 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	b29a      	uxth	r2, r3
 800087a:	4639      	mov	r1, r7
 800087c:	f04f 33ff 	mov.w	r3, #4294967295
 8000880:	480e      	ldr	r0, [pc, #56]	@ (80008bc <main+0xc8>)
 8000882:	f005 fc93 	bl	80061ac <HAL_UART_Transmit>
    }
    HAL_Delay(500);
 8000886:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800088a:	f000 ffbb 	bl	8001804 <HAL_Delay>
    if(button_state == 1) { // Only when recording
 800088e:	e7e3      	b.n	8000858 <main+0x64>
 8000890:	080078f0 	.word	0x080078f0
 8000894:	08007910 	.word	0x08007910
 8000898:	08007934 	.word	0x08007934
 800089c:	20000078 	.word	0x20000078
 80008a0:	2000022c 	.word	0x2000022c
 80008a4:	0002b110 	.word	0x0002b110
 80008a8:	2000035c 	.word	0x2000035c
 80008ac:	0006baa8 	.word	0x0006baa8
 80008b0:	2002b46c 	.word	0x2002b46c
 80008b4:	2000035a 	.word	0x2000035a
 80008b8:	08007958 	.word	0x08007958
 80008bc:	200002c4 	.word	0x200002c4

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b096      	sub	sp, #88	@ 0x58
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2244      	movs	r2, #68	@ 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f006 fb4e 	bl	8006f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	463b      	mov	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008e6:	f002 fdfb 	bl	80034e0 <HAL_PWREx_ControlVoltageScaling>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008f0:	f000 fb38 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008f4:	2310      	movs	r3, #16
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000900:	2360      	movs	r3, #96	@ 0x60
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000908:	2301      	movs	r3, #1
 800090a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000910:	2328      	movs	r3, #40	@ 0x28
 8000912:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fe7f 	bl	8003628 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000930:	f000 fb18 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2303      	movs	r3, #3
 800093a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	2103      	movs	r1, #3
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fa85 	bl	8003e5c <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000958:	f000 fb04 	bl	8000f64 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3758      	adds	r7, #88	@ 0x58
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2228      	movs	r2, #40	@ 0x28
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f006 fafd 	bl	8006f70 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_DAC1_Init+0x78>)
 8000978:	4a19      	ldr	r2, [pc, #100]	@ (80009e0 <MX_DAC1_Init+0x7c>)
 800097a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800097c:	4817      	ldr	r0, [pc, #92]	@ (80009dc <MX_DAC1_Init+0x78>)
 800097e:	f001 f876 	bl	8001a6e <HAL_DAC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000988:	f000 faec 	bl	8000f64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000990:	230a      	movs	r3, #10
 8000992:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000998:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <MX_DAC1_Init+0x78>)
 80009ae:	f001 fa03 	bl	8001db8 <HAL_DAC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 fad4 	bl	8000f64 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	2210      	movs	r2, #16
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	@ (80009dc <MX_DAC1_Init+0x78>)
 80009c4:	f001 f9f8 	bl	8001db8 <HAL_DAC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 fac9 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000078 	.word	0x20000078
 80009e0:	40007400 	.word	0x40007400

080009e4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80009ea:	4b38      	ldr	r3, [pc, #224]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 80009ec:	4a38      	ldr	r2, [pc, #224]	@ (8000ad0 <MX_DFSDM1_Init+0xec>)
 80009ee:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80009f0:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80009f6:	4b35      	ldr	r3, [pc, #212]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80009fc:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000a02:	4b32      	ldr	r3, [pc, #200]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 8000a04:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000a08:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 250;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 8000a0c:	22fa      	movs	r2, #250	@ 0xfa
 8000a0e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24

  //CHANGED to know why Filter is not starting again.
  status = HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000a16:	482d      	ldr	r0, [pc, #180]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 8000a18:	f001 fc64 	bl	80022e4 <HAL_DFSDM_FilterInit>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK) {
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d006      	beq.n	8000a34 <MX_DFSDM1_Init+0x50>
        UART_Print_Error("Filter Init Failed", status);
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482a      	ldr	r0, [pc, #168]	@ (8000ad4 <MX_DFSDM1_Init+0xf0>)
 8000a2c:	f7ff fdec 	bl	8000608 <UART_Print_Error>
        Error_Handler();
 8000a30:	f000 fa98 	bl	8000f64 <Error_Handler>
    }


  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000a34:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a36:	4a29      	ldr	r2, [pc, #164]	@ (8000adc <MX_DFSDM1_Init+0xf8>)
 8000a38:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a40:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a48:	2228      	movs	r2, #40	@ 0x28
 8000a4a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	631a      	str	r2, [r3, #48]	@ 0x30


    status = HAL_DFSDM_ChannelInit(&hdfsdm1_channel2);
 8000a82:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <MX_DFSDM1_Init+0xf4>)
 8000a84:	f001 fb6e 	bl	8002164 <HAL_DFSDM_ChannelInit>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK) {
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d006      	beq.n	8000aa0 <MX_DFSDM1_Init+0xbc>
        UART_Print_Error("Channel Init Failed", status);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4619      	mov	r1, r3
 8000a96:	4812      	ldr	r0, [pc, #72]	@ (8000ae0 <MX_DFSDM1_Init+0xfc>)
 8000a98:	f7ff fdb6 	bl	8000608 <UART_Print_Error>
        Error_Handler();
 8000a9c:	f000 fa62 	bl	8000f64 <Error_Handler>
    }

    /* Associate channel with filter */
    status = HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4910      	ldr	r1, [pc, #64]	@ (8000ae4 <MX_DFSDM1_Init+0x100>)
 8000aa4:	4809      	ldr	r0, [pc, #36]	@ (8000acc <MX_DFSDM1_Init+0xe8>)
 8000aa6:	f001 fcf7 	bl	8002498 <HAL_DFSDM_FilterConfigRegChannel>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
    if(status != HAL_OK) {
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <MX_DFSDM1_Init+0xde>
        UART_Print_Error("Filter Config Failed", status);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <MX_DFSDM1_Init+0x104>)
 8000aba:	f7ff fda5 	bl	8000608 <UART_Print_Error>
        Error_Handler();
 8000abe:	f000 fa51 	bl	8000f64 <Error_Handler>
    }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000ec 	.word	0x200000ec
 8000ad0:	40016100 	.word	0x40016100
 8000ad4:	0800796c 	.word	0x0800796c
 8000ad8:	20000140 	.word	0x20000140
 8000adc:	40016040 	.word	0x40016040
 8000ae0:	08007980 	.word	0x08007980
 8000ae4:	00020004 	.word	0x00020004
 8000ae8:	08007994 	.word	0x08007994

08000aec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b64 <MX_I2C2_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <MX_I2C2_Init+0x7c>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b26:	480e      	ldr	r0, [pc, #56]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b28:	f002 fb88 	bl	800323c <HAL_I2C_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b32:	f000 fa17 	bl	8000f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b3a:	f002 fc1a 	bl	8003372 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f000 fa0e 	bl	8000f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_I2C2_Init+0x74>)
 8000b4c:	f002 fc5c 	bl	8003408 <HAL_I2CEx_ConfigDigitalFilter>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 fa05 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200001d8 	.word	0x200001d8
 8000b64:	40005800 	.word	0x40005800
 8000b68:	10d19ce4 	.word	0x10d19ce4

08000b6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	@ 0x38
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000ba0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ba4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TIMER_PERIOD - 1) * 4;
 8000bb2:	4b28      	ldr	r3, [pc, #160]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000bb4:	f641 4254 	movw	r2, #7252	@ 0x1c54
 8000bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b26      	ldr	r3, [pc, #152]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc6:	4823      	ldr	r0, [pc, #140]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000bc8:	f004 f91e 	bl	8004e08 <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f000 f9c7 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000be0:	4619      	mov	r1, r3
 8000be2:	481c      	ldr	r0, [pc, #112]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000be4:	f004 fce4 	bl	80055b0 <HAL_TIM_ConfigClockSource>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bee:	f000 f9b9 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bf2:	4818      	ldr	r0, [pc, #96]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000bf4:	f004 fa60 	bl	80050b8 <HAL_TIM_PWM_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bfe:	f000 f9b1 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c02:	2320      	movs	r3, #32
 8000c04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000c12:	f005 f9d5 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c1c:	f000 f9a2 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c20:	2360      	movs	r3, #96	@ 0x60
 8000c22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	4619      	mov	r1, r3
 8000c36:	4807      	ldr	r0, [pc, #28]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000c38:	f004 fba6 	bl	8005388 <HAL_TIM_PWM_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c42:	f000 f98f 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <MX_TIM2_Init+0xe8>)
 8000c48:	f000 fbde 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8000c4c:	bf00      	nop
 8000c4e:	3738      	adds	r7, #56	@ 0x38
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000022c 	.word	0x2000022c

08000c58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	@ 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 031c 	add.w	r3, r7, #28
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000d44 <MX_TIM3_Init+0xec>)
 8000c8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000c92:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000ca0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b24      	ldr	r3, [pc, #144]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cb2:	4823      	ldr	r0, [pc, #140]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000cb4:	f004 f8a8 	bl	8004e08 <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f000 f951 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481c      	ldr	r0, [pc, #112]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000cd0:	f004 fc6e 	bl	80055b0 <HAL_TIM_ConfigClockSource>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000cda:	f000 f943 	bl	8000f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cde:	4818      	ldr	r0, [pc, #96]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000ce0:	f004 f9ea 	bl	80050b8 <HAL_TIM_PWM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000cea:	f000 f93b 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4810      	ldr	r0, [pc, #64]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000cfe:	f005 f95f 	bl	8005fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d08:	f000 f92c 	bl	8000f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2360      	movs	r3, #96	@ 0x60
 8000d0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2204      	movs	r2, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4807      	ldr	r0, [pc, #28]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000d24:	f004 fb30 	bl	8005388 <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d2e:	f000 f919 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d32:	4803      	ldr	r0, [pc, #12]	@ (8000d40 <MX_TIM3_Init+0xe8>)
 8000d34:	f000 fb68 	bl	8001408 <HAL_TIM_MspPostInit>

}
 8000d38:	bf00      	nop
 8000d3a:	3738      	adds	r7, #56	@ 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000278 	.word	0x20000278
 8000d44:	40000400 	.word	0x40000400

08000d48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	@ (8000ddc <MX_USART1_UART_Init+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b17      	ldr	r3, [pc, #92]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000d92:	f005 f9bb 	bl	800610c <HAL_UART_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f000 f8e2 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000da4:	f005 ffe4 	bl	8006d70 <HAL_UARTEx_SetTxFifoThreshold>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000dae:	f000 f8d9 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000db6:	f006 f819 	bl	8006dec <HAL_UARTEx_SetRxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc0:	f000 f8d0 	bl	8000f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_USART1_UART_Init+0x90>)
 8000dc6:	f005 ff9a 	bl	8006cfe <HAL_UARTEx_DisableFifoMode>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 f8c8 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200002c4 	.word	0x200002c4
 8000ddc:	40013800 	.word	0x40013800

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000de6:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <MX_DMA_Init+0x60>)
 8000de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dea:	4a15      	ldr	r2, [pc, #84]	@ (8000e40 <MX_DMA_Init+0x60>)
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000df2:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <MX_DMA_Init+0x60>)
 8000df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <MX_DMA_Init+0x60>)
 8000e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e02:	4a0f      	ldr	r2, [pc, #60]	@ (8000e40 <MX_DMA_Init+0x60>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e40 <MX_DMA_Init+0x60>)
 8000e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	200b      	movs	r0, #11
 8000e1c:	f000 fdf1 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e20:	200b      	movs	r0, #11
 8000e22:	f000 fe0a 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	200c      	movs	r0, #12
 8000e2c:	f000 fde9 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e30:	200c      	movs	r0, #12
 8000e32:	f000 fe02 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e66:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6a:	f003 0310 	and.w	r3, r3, #16
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e76:	4a28      	ldr	r2, [pc, #160]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7e:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a22      	ldr	r2, [pc, #136]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_GPIO_Init+0xd4>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(G_LED2_GPIO_Port, G_LED2_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec0:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <MX_GPIO_Init+0xd8>)
 8000ec2:	f002 f98b 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B_BUTTON_Pin */
  GPIO_InitStruct.Pin = B_BUTTON_Pin;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ecc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4810      	ldr	r0, [pc, #64]	@ (8000f20 <MX_GPIO_Init+0xdc>)
 8000ede:	f001 ffd3 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : G_LED2_Pin */
  GPIO_InitStruct.Pin = G_LED2_Pin;
 8000ee2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(G_LED2_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4808      	ldr	r0, [pc, #32]	@ (8000f1c <MX_GPIO_Init+0xd8>)
 8000efc:	f001 ffc4 	bl	8002e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2028      	movs	r0, #40	@ 0x28
 8000f06:	f000 fd7c 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f0a:	2028      	movs	r0, #40	@ 0x28
 8000f0c:	f000 fd95 	bl	8001a3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	@ 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400
 8000f20:	48000800 	.word	0x48000800

08000f24 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	DmaRecHalfBuffCplt=1;
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]

}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000358 	.word	0x20000358

08000f44 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

	DmaRecBuffCplt=1;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]


}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000359 	.word	0x20000359

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb4 <HAL_MspInit+0x44>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb4 <HAL_MspInit+0x44>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f82:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb4 <HAL_MspInit+0x44>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_MspInit+0x44>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_MspInit+0x44>)
 8000f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_MspInit+0x44>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8001084 <HAL_DAC_MspInit+0xcc>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d14f      	bne.n	800107a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <HAL_DAC_MspInit+0xd0>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a2a      	ldr	r2, [pc, #168]	@ (8001088 <HAL_DAC_MspInit+0xd0>)
 8000fe0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <HAL_DAC_MspInit+0xd0>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <HAL_DAC_MspInit+0xd0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	4a24      	ldr	r2, [pc, #144]	@ (8001088 <HAL_DAC_MspInit+0xd0>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ffe:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <HAL_DAC_MspInit+0xd0>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800100a:	2330      	movs	r3, #48	@ 0x30
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001020:	f001 ff32 	bl	8002e88 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001026:	4a1a      	ldr	r2, [pc, #104]	@ (8001090 <HAL_DAC_MspInit+0xd8>)
 8001028:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 800102c:	2206      	movs	r2, #6
 800102e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001032:	2210      	movs	r2, #16
 8001034:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 800103e:	2280      	movs	r2, #128	@ 0x80
 8001040:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001044:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001048:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001054:	2220      	movs	r2, #32
 8001056:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 800105a:	2200      	movs	r2, #0
 800105c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001060:	f001 fc44 	bl	80028ec <HAL_DMA_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800106a:	f7ff ff7b 	bl	8000f64 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	4a05      	ldr	r2, [pc, #20]	@ (800108c <HAL_DAC_MspInit+0xd4>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	@ 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40007400 	.word	0x40007400
 8001088:	40021000 	.word	0x40021000
 800108c:	2000008c 	.word	0x2000008c
 8001090:	4002001c 	.word	0x4002001c

08001094 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ae      	sub	sp, #184	@ 0xb8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2294      	movs	r2, #148	@ 0x94
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 ff5b 	bl	8006f70 <memset>
  if(DFSDM1_Init == 0)
 80010ba:	4b45      	ldr	r3, [pc, #276]	@ (80011d0 <HAL_DFSDM_FilterMspInit+0x13c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d14b      	bne.n	800115a <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 f980 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80010de:	f7ff ff41 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80010e2:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <HAL_DFSDM_FilterMspInit+0x140>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a3a      	ldr	r2, [pc, #232]	@ (80011d4 <HAL_DFSDM_FilterMspInit+0x140>)
 80010ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80010ec:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <HAL_DFSDM_FilterMspInit+0x140>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d10b      	bne.n	800110c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010f4:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <HAL_DFSDM_FilterMspInit+0x144>)
 80010f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010f8:	4a37      	ldr	r2, [pc, #220]	@ (80011d8 <HAL_DFSDM_FilterMspInit+0x144>)
 80010fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001100:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <HAL_DFSDM_FilterMspInit+0x144>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800110c:	4b32      	ldr	r3, [pc, #200]	@ (80011d8 <HAL_DFSDM_FilterMspInit+0x144>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	4a31      	ldr	r2, [pc, #196]	@ (80011d8 <HAL_DFSDM_FilterMspInit+0x144>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001118:	4b2f      	ldr	r3, [pc, #188]	@ (80011d8 <HAL_DFSDM_FilterMspInit+0x144>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001124:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001128:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800113e:	2306      	movs	r3, #6
 8001140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001144:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001148:	4619      	mov	r1, r3
 800114a:	4824      	ldr	r0, [pc, #144]	@ (80011dc <HAL_DFSDM_FilterMspInit+0x148>)
 800114c:	f001 fe9c 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001150:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a1e      	ldr	r2, [pc, #120]	@ (80011d0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001158:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a20      	ldr	r2, [pc, #128]	@ (80011e0 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d130      	bne.n	80011c6 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel1;
 8001164:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001166:	4a20      	ldr	r2, [pc, #128]	@ (80011e8 <HAL_DFSDM_FilterMspInit+0x154>)
 8001168:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800116c:	2256      	movs	r2, #86	@ 0x56
 800116e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001170:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001176:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800117c:	4b19      	ldr	r3, [pc, #100]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800117e:	2280      	movs	r2, #128	@ 0x80
 8001180:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001188:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800118c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001190:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001194:	2220      	movs	r2, #32
 8001196:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 800119a:	2200      	movs	r2, #0
 800119c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80011a0:	f001 fba4 	bl	80028ec <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80011aa:	f7ff fedb 	bl	8000f64 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80011b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
 80011c0:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_DFSDM_FilterMspInit+0x150>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6293      	str	r3, [r2, #40]	@ 0x28
  }

}
 80011c6:	bf00      	nop
 80011c8:	37b8      	adds	r7, #184	@ 0xb8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20096f18 	.word	0x20096f18
 80011d4:	20096f14 	.word	0x20096f14
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48001000 	.word	0x48001000
 80011e0:	40016100 	.word	0x40016100
 80011e4:	20000178 	.word	0x20000178
 80011e8:	40020008 	.word	0x40020008

080011ec <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0ae      	sub	sp, #184	@ 0xb8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2294      	movs	r2, #148	@ 0x94
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f005 feaf 	bl	8006f70 <memset>
  if(DFSDM1_Init == 0)
 8001212:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d14b      	bne.n	80012b2 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800121a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800121e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f8d4 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001236:	f7ff fe95 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800123a:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a1f      	ldr	r2, [pc, #124]	@ (80012c0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001242:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001244:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10b      	bne.n	8001264 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800124c:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001250:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001256:	6613      	str	r3, [r2, #96]	@ 0x60
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800125a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001268:	4a16      	ldr	r2, [pc, #88]	@ (80012c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800127c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001296:	2306      	movs	r3, #6
 8001298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80012a4:	f001 fdf0 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a03      	ldr	r2, [pc, #12]	@ (80012bc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80012b0:	6013      	str	r3, [r2, #0]
  }

}
 80012b2:	bf00      	nop
 80012b4:	37b8      	adds	r7, #184	@ 0xb8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20096f18 	.word	0x20096f18
 80012c0:	20096f14 	.word	0x20096f14
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48001000 	.word	0x48001000

080012cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ae      	sub	sp, #184	@ 0xb8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2294      	movs	r2, #148	@ 0x94
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f005 fe3f 	bl	8006f70 <memset>
  if(hi2c->Instance==I2C2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a21      	ldr	r2, [pc, #132]	@ (800137c <HAL_I2C_MspInit+0xb0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d13b      	bne.n	8001374 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4618      	mov	r0, r3
 800130a:	f003 f865 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f7ff fe26 	bl	8000f64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001330:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001334:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800134a:	2304      	movs	r3, #4
 800134c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001354:	4619      	mov	r1, r3
 8001356:	480b      	ldr	r0, [pc, #44]	@ (8001384 <HAL_I2C_MspInit+0xb8>)
 8001358:	f001 fd96 	bl	8002e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 8001362:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001366:	6593      	str	r3, [r2, #88]	@ 0x58
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001374:	bf00      	nop
 8001376:	37b8      	adds	r7, #184	@ 0xb8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40005800 	.word	0x40005800
 8001380:	40021000 	.word	0x40021000
 8001384:	48000400 	.word	0x48000400

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001398:	d114      	bne.n	80013c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_TIM_Base_MspInit+0x78>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 fb23 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f000 fb3c 	bl	8001a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013c2:	e018      	b.n	80013f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001404 <HAL_TIM_Base_MspInit+0x7c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d113      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0x78>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201d      	movs	r0, #29
 80013ec:	f000 fb09 	bl	8001a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013f0:	201d      	movs	r0, #29
 80013f2:	f000 fb22 	bl	8001a3a <HAL_NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40000400 	.word	0x40000400

08001408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001428:	d11d      	bne.n	8001466 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <HAL_TIM_MspPostInit+0xa8>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	4a20      	ldr	r2, [pc, #128]	@ (80014b0 <HAL_TIM_MspPostInit+0xa8>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <HAL_TIM_MspPostInit+0xa8>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001452:	2301      	movs	r3, #1
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001460:	f001 fd12 	bl	8002e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001464:	e020      	b.n	80014a8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <HAL_TIM_MspPostInit+0xac>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d11b      	bne.n	80014a8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <HAL_TIM_MspPostInit+0xa8>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a0e      	ldr	r2, [pc, #56]	@ (80014b0 <HAL_TIM_MspPostInit+0xa8>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <HAL_TIM_MspPostInit+0xa8>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001488:	2310      	movs	r3, #16
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001498:	2302      	movs	r3, #2
 800149a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <HAL_TIM_MspPostInit+0xb0>)
 80014a4:	f001 fcf0 	bl	8002e88 <HAL_GPIO_Init>
}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	@ 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40000400 	.word	0x40000400
 80014b8:	48001000 	.word	0x48001000

080014bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0ae      	sub	sp, #184	@ 0xb8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	2294      	movs	r2, #148	@ 0x94
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 fd47 	bl	8006f70 <memset>
  if(huart->Instance==USART1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a21      	ldr	r2, [pc, #132]	@ (800156c <HAL_UART_MspInit+0xb0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d13a      	bne.n	8001562 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014f0:	2300      	movs	r3, #0
 80014f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 ff6d 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001504:	f7ff fd2e 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001508:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150c:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001512:	6613      	str	r3, [r2, #96]	@ 0x60
 8001514:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 8001516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b13      	ldr	r3, [pc, #76]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001524:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152c:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_UART_MspInit+0xb4>)
 800152e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001538:	23c0      	movs	r3, #192	@ 0xc0
 800153a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001550:	2307      	movs	r3, #7
 8001552:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <HAL_UART_MspInit+0xb8>)
 800155e:	f001 fc93 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001562:	bf00      	nop
 8001564:	37b8      	adds	r7, #184	@ 0xb8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40013800 	.word	0x40013800
 8001570:	40021000 	.word	0x40021000
 8001574:	48000400 	.word	0x48000400

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <NMI_Handler+0x4>

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <MemManage_Handler+0x4>

08001590 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <UsageFault_Handler+0x4>

080015a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ce:	f000 f8f9 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <DMA1_Channel1_IRQHandler+0x10>)
 80015de:	f001 fb04 	bl	8002bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000178 	.word	0x20000178

080015ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <DMA1_Channel2_IRQHandler+0x10>)
 80015f2:	f001 fafa 	bl	8002bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000008c 	.word	0x2000008c

08001600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <TIM2_IRQHandler+0x10>)
 8001606:	f003 fdb8 	bl	800517a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000022c 	.word	0x2000022c

08001614 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TIM3_IRQHandler+0x10>)
 800161a:	f003 fdae 	bl	800517a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000278 	.word	0x20000278

08001628 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_BUTTON_Pin);
 800162c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001630:	f001 fdec 	bl	800320c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f005 fc8a 	bl	8006f80 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200a0000 	.word	0x200a0000
 8001698:	00000400 	.word	0x00000400
 800169c:	20096f1c 	.word	0x20096f1c
 80016a0:	20097090 	.word	0x20097090

080016a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001700 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016cc:	f7ff ffea 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d2:	490d      	ldr	r1, [pc, #52]	@ (8001708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <LoopForever+0xe>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d8:	e002      	b.n	80016e0 <LoopCopyDataInit>

080016da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016de:	3304      	adds	r3, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e4:	d3f9      	bcc.n	80016da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001714 <LoopForever+0x16>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ec:	e001      	b.n	80016f2 <LoopFillZerobss>

080016ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f0:	3204      	adds	r2, #4

080016f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f4:	d3fb      	bcc.n	80016ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016f6:	f005 fc49 	bl	8006f8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fa:	f7ff f87b 	bl	80007f4 <main>

080016fe <LoopForever>:

LoopForever:
    b LoopForever
 80016fe:	e7fe      	b.n	80016fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001700:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001708:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800170c:	08007a60 	.word	0x08007a60
  ldr r2, =_sbss
 8001710:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001714:	20097090 	.word	0x20097090

08001718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_IRQHandler>

0800171a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 f961 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172a:	200f      	movs	r0, #15
 800172c:	f000 f80e 	bl	800174c <HAL_InitTick>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e001      	b.n	8001740 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800173c:	f7ff fc18 	bl	8000f70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001740:	79fb      	ldrb	r3, [r7, #7]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <HAL_InitTick+0x6c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d023      	beq.n	80017a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001760:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <HAL_InitTick+0x70>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <HAL_InitTick+0x6c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f96d 	bl	8001a56 <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d809      	bhi.n	800179c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295
 8001790:	f000 f937 	bl	8001a02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001794:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_InitTick+0x74>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e007      	b.n	80017ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
 80017a0:	e004      	b.n	80017ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e001      	b.n	80017ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20096f20 	.word	0x20096f20

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20096f20 	.word	0x20096f20

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	@ (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	@ (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	@ (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	@ 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e014      	b.n	8001aaa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	791b      	ldrb	r3, [r3, #4]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d105      	bne.n	8001a96 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fa91 	bl	8000fb8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	795b      	ldrb	r3, [r3, #5]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_DAC_Start+0x16>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e040      	b.n	8001b4a <HAL_DAC_Start+0x98>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6819      	ldr	r1, [r3, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d11d      	bne.n	8001b3c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	e014      	b.n	8001b3c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2102      	movs	r1, #2
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0202 	orr.w	r2, r2, #2
 8001b3a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	795b      	ldrb	r3, [r3, #5]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_DAC_Start_DMA+0x1e>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0ab      	b.n	8001cce <HAL_DAC_Start_DMA+0x176>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d12f      	bne.n	8001be8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <HAL_DAC_Start_DMA+0x180>)
 8001b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a51      	ldr	r2, [pc, #324]	@ (8001cdc <HAL_DAC_Start_DMA+0x184>)
 8001b96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a50      	ldr	r2, [pc, #320]	@ (8001ce0 <HAL_DAC_Start_DMA+0x188>)
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001bae:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d013      	beq.n	8001bde <HAL_DAC_Start_DMA+0x86>
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d845      	bhi.n	8001c48 <HAL_DAC_Start_DMA+0xf0>
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_DAC_Start_DMA+0x72>
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d005      	beq.n	8001bd4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001bc8:	e03e      	b.n	8001c48 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	613b      	str	r3, [r7, #16]
        break;
 8001bd2:	e03c      	b.n	8001c4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	330c      	adds	r3, #12
 8001bda:	613b      	str	r3, [r7, #16]
        break;
 8001bdc:	e037      	b.n	8001c4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3310      	adds	r3, #16
 8001be4:	613b      	str	r3, [r7, #16]
        break;
 8001be6:	e032      	b.n	8001c4e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a3d      	ldr	r2, [pc, #244]	@ (8001ce4 <HAL_DAC_Start_DMA+0x18c>)
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ce8 <HAL_DAC_Start_DMA+0x190>)
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_DAC_Start_DMA+0x194>)
 8001bfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d013      	beq.n	8001c3e <HAL_DAC_Start_DMA+0xe6>
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d817      	bhi.n	8001c4c <HAL_DAC_Start_DMA+0xf4>
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_DAC_Start_DMA+0xd2>
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d005      	beq.n	8001c34 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c28:	e010      	b.n	8001c4c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3314      	adds	r3, #20
 8001c30:	613b      	str	r3, [r7, #16]
        break;
 8001c32:	e00c      	b.n	8001c4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3318      	adds	r3, #24
 8001c3a:	613b      	str	r3, [r7, #16]
        break;
 8001c3c:	e007      	b.n	8001c4e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	331c      	adds	r3, #28
 8001c44:	613b      	str	r3, [r7, #16]
        break;
 8001c46:	e002      	b.n	8001c4e <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c48:	bf00      	nop
 8001c4a:	e000      	b.n	8001c4e <HAL_DAC_Start_DMA+0xf6>
        break;
 8001c4c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d111      	bne.n	8001c78 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6898      	ldr	r0, [r3, #8]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	f000 fee5 	bl	8002a3c <HAL_DMA_Start_IT>
 8001c72:	4603      	mov	r3, r0
 8001c74:	75fb      	strb	r3, [r7, #23]
 8001c76:	e010      	b.n	8001c9a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001c86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68d8      	ldr	r0, [r3, #12]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	f000 fed3 	bl	8002a3c <HAL_DMA_Start_IT>
 8001c96:	4603      	mov	r3, r0
 8001c98:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e005      	b.n	8001ccc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	f043 0204 	orr.w	r2, r3, #4
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	08002051 	.word	0x08002051
 8001cdc:	08002073 	.word	0x08002073
 8001ce0:	0800208f 	.word	0x0800208f
 8001ce4:	080020f9 	.word	0x080020f9
 8001ce8:	0800211b 	.word	0x0800211b
 8001cec:	08002137 	.word	0x08002137

08001cf0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6819      	ldr	r1, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2201      	movs	r2, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fef7 	bl	8002b32 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e00c      	b.n	8001d70 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fee9 	bl	8002b32 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8001d6e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	795b      	ldrb	r3, [r3, #5]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_DAC_ConfigChannel+0x1c>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e137      	b.n	8002044 <HAL_DAC_ConfigChannel+0x28c>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	f040 8081 	bne.w	8001eec <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001dea:	f7ff fcff 	bl	80017ec <HAL_GetTick>
 8001dee:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d140      	bne.n	8001e78 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001df6:	e018      	b.n	8001e2a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001df8:	f7ff fcf8 	bl	80017ec <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d911      	bls.n	8001e2a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00a      	beq.n	8001e2a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f043 0208 	orr.w	r2, r3, #8
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2203      	movs	r2, #3
 8001e24:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e10c      	b.n	8002044 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1df      	bne.n	8001df8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff fce3 	bl	8001804 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	69d2      	ldr	r2, [r2, #28]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e48:	e023      	b.n	8001e92 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e4a:	f7ff fccf 	bl	80017ec <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d90f      	bls.n	8001e78 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da0a      	bge.n	8001e78 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f043 0208 	orr.w	r2, r3, #8
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2203      	movs	r2, #3
 8001e72:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e0e5      	b.n	8002044 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	dbe3      	blt.n	8001e4a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff fcbe 	bl	8001804 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	69d2      	ldr	r2, [r2, #28]
 8001e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	ea02 0103 	and.w	r1, r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6a1a      	ldr	r2, [r3, #32]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	21ff      	movs	r1, #255	@ 0xff
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	ea02 0103 	and.w	r1, r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d11d      	bne.n	8001f30 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efa:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f36:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2207      	movs	r2, #7
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6819      	ldr	r1, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fd4:	d104      	bne.n	8001fe0 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fdc:	61fb      	str	r3, [r7, #28]
 8001fde:	e018      	b.n	8002012 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d104      	bne.n	8001ff2 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	e00f      	b.n	8002012 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001ff2:	f002 f8f9 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8001ff6:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4a14      	ldr	r2, [pc, #80]	@ (800204c <HAL_DAC_ConfigChannel+0x294>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d904      	bls.n	800200a <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	e003      	b.n	8002012 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002010:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6819      	ldr	r1, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	22c0      	movs	r2, #192	@ 0xc0
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43da      	mvns	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	400a      	ands	r2, r1
 8002034:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	04c4b400 	.word	0x04c4b400

08002050 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff fe8b 	bl	8001d7a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	711a      	strb	r2, [r3, #4]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fe84 	bl	8001d8e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff fe7a 	bl	8001da2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2201      	movs	r2, #1
 80020b2:	711a      	strb	r2, [r3, #4]
}
 80020b4:	bf00      	nop
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff ffd8 	bl	80020bc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	711a      	strb	r2, [r3, #4]
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7ff ffd1 	bl	80020d0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f043 0204 	orr.w	r2, r3, #4
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff ffc7 	bl	80020e4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	711a      	strb	r2, [r3, #4]
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0ac      	b.n	80022d0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fac6 	bl	800270c <DFSDM_GetChannelFromInstance>
 8002180:	4603      	mov	r3, r0
 8002182:	4a55      	ldr	r2, [pc, #340]	@ (80022d8 <HAL_DFSDM_ChannelInit+0x174>)
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e09f      	b.n	80022d0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff f82b 	bl	80011ec <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002196:	4b51      	ldr	r3, [pc, #324]	@ (80022dc <HAL_DFSDM_ChannelInit+0x178>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	4a4f      	ldr	r2, [pc, #316]	@ (80022dc <HAL_DFSDM_ChannelInit+0x178>)
 800219e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80021a0:	4b4e      	ldr	r3, [pc, #312]	@ (80022dc <HAL_DFSDM_ChannelInit+0x178>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d125      	bne.n	80021f4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80021a8:	4b4d      	ldr	r3, [pc, #308]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4c      	ldr	r2, [pc, #304]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80021b2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80021b4:	4b4a      	ldr	r3, [pc, #296]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4948      	ldr	r1, [pc, #288]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80021c2:	4b47      	ldr	r3, [pc, #284]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a46      	ldr	r2, [pc, #280]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021c8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80021cc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80021d6:	4b42      	ldr	r3, [pc, #264]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	3b01      	subs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	493f      	ldr	r1, [pc, #252]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80021e8:	4b3d      	ldr	r3, [pc, #244]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a3c      	ldr	r2, [pc, #240]	@ (80022e0 <HAL_DFSDM_ChannelInit+0x17c>)
 80021ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021f2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8002202:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002212:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002218:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 020f 	bic.w	r2, r2, #15
 8002230:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002258:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f002 0207 	and.w	r2, r2, #7
 8002284:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022b0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fa24 	bl	800270c <DFSDM_GetChannelFromInstance>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4904      	ldr	r1, [pc, #16]	@ (80022d8 <HAL_DFSDM_ChannelInit+0x174>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20096f28 	.word	0x20096f28
 80022dc:	20096f24 	.word	0x20096f24
 80022e0:	40016000 	.word	0x40016000

080022e4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0ca      	b.n	800248c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a66      	ldr	r2, [pc, #408]	@ (8002494 <HAL_DFSDM_FilterInit+0x1b0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d109      	bne.n	8002314 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002304:	2b01      	cmp	r3, #1
 8002306:	d003      	beq.n	8002310 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0bb      	b.n	800248c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe feb1 	bl	8001094 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8002340:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7a1b      	ldrb	r3, [r3, #8]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d108      	bne.n	800235c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e007      	b.n	800236c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800236a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7a5b      	ldrb	r3, [r3, #9]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	e007      	b.n	8002396 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023a4:	f023 0308 	bic.w	r3, r3, #8
 80023a8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d108      	bne.n	80023c4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7c1b      	ldrb	r3, [r3, #16]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d108      	bne.n	80023de <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0210 	orr.w	r2, r2, #16
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e007      	b.n	80023ee <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0210 	bic.w	r2, r2, #16
 80023ec:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7c5b      	ldrb	r3, [r3, #17]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d108      	bne.n	8002408 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0220 	orr.w	r2, r2, #32
 8002404:	601a      	str	r2, [r3, #0]
 8002406:	e007      	b.n	8002418 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0220 	bic.w	r2, r2, #32
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	f023 4363 	bic.w	r3, r3, #3808428032	@ 0xe3000000
 8002426:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800242a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6959      	ldr	r1, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	3b01      	subs	r3, #1
 800243c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800243e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8002446:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7c1a      	ldrb	r2, [r3, #16]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40016100 	.word	0x40016100

08002498 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d02e      	beq.n	8002510 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80024b8:	2bff      	cmp	r3, #255	@ 0xff
 80024ba:	d029      	beq.n	8002510 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ce:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10d      	bne.n	80024f2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80024e4:	431a      	orrs	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e00a      	b.n	8002508 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	631a      	str	r2, [r3, #48]	@ 0x30
 800250e:	e001      	b.n	8002514 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002514:	7dfb      	ldrb	r3, [r7, #23]
}
 8002516:	4618      	mov	r0, r3
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_DFSDM_FilterRegularStop>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002534:	2b02      	cmp	r3, #2
 8002536:	d007      	beq.n	8002548 <HAL_DFSDM_FilterRegularStop+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_DFSDM_FilterRegularStop+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e002      	b.n	800254e <HAL_DFSDM_FilterRegularStop+0x2c>
  }
  else
  {
    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f981 	bl	8002850 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	75fb      	strb	r3, [r7, #23]
 8002578:	e064      	b.n	8002644 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002584:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002588:	d002      	beq.n	8002590 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
 800258e:	e059      	b.n	8002644 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10e      	bne.n	80025b6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	75fb      	strb	r3, [r7, #23]
 80025b4:	e046      	b.n	8002644 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10b      	bne.n	80025d6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d107      	bne.n	80025d6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ca:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d102      	bne.n	80025d6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	75fb      	strb	r3, [r7, #23]
 80025d4:	e036      	b.n	8002644 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d004      	beq.n	80025ea <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d12a      	bne.n	8002640 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ee:	4a18      	ldr	r2, [pc, #96]	@ (8002650 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	4a17      	ldr	r2, [pc, #92]	@ (8002654 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80025f8:	635a      	str	r2, [r3, #52]	@ 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002600:	2b20      	cmp	r3, #32
 8002602:	d101      	bne.n	8002608 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002604:	4a14      	ldr	r2, [pc, #80]	@ (8002658 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002606:	e000      	b.n	800260a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8002608:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	331c      	adds	r3, #28
 800261a:	4619      	mov	r1, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f000 fa0c 	bl	8002a3c <HAL_DMA_Start_IT>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	22ff      	movs	r2, #255	@ 0xff
 800262e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002636:	e005      	b.n	8002644 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f8b3 	bl	80027a4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800263e:	e001      	b.n	8002644 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	080026cd 	.word	0x080026cd
 8002654:	080026e9 	.word	0x080026e9
 8002658:	080026b1 	.word	0x080026b1

0800265c <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800266e:	2b02      	cmp	r3, #2
 8002670:	d007      	beq.n	8002682 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8002678:	2b04      	cmp	r3, #4
 800267a:	d002      	beq.n	8002682 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e007      	b.n	8002692 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fa53 	bl	8002b32 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f8df 	bl	8002850 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8002692:	7bfb      	ldrb	r3, [r7, #15]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7fe fc30 	bl	8000f24 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7fe fc32 	bl	8000f44 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2203      	movs	r2, #3
 80026fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7ff ffcd 	bl	800269c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a1c      	ldr	r2, [pc, #112]	@ (8002788 <DFSDM_GetChannelFromInstance+0x7c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d102      	bne.n	8002722 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e02b      	b.n	800277a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a19      	ldr	r2, [pc, #100]	@ (800278c <DFSDM_GetChannelFromInstance+0x80>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d102      	bne.n	8002730 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	e024      	b.n	800277a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <DFSDM_GetChannelFromInstance+0x84>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d102      	bne.n	800273e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002738:	2302      	movs	r3, #2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	e01d      	b.n	800277a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a14      	ldr	r2, [pc, #80]	@ (8002794 <DFSDM_GetChannelFromInstance+0x88>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d102      	bne.n	800274c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002746:	2304      	movs	r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e016      	b.n	800277a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <DFSDM_GetChannelFromInstance+0x8c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d102      	bne.n	800275a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002754:	2305      	movs	r3, #5
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e00f      	b.n	800277a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0f      	ldr	r2, [pc, #60]	@ (800279c <DFSDM_GetChannelFromInstance+0x90>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d102      	bne.n	8002768 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002762:	2306      	movs	r3, #6
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	e008      	b.n	800277a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <DFSDM_GetChannelFromInstance+0x94>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d102      	bne.n	8002776 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002770:	2307      	movs	r3, #7
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e001      	b.n	800277a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002776:	2303      	movs	r3, #3
 8002778:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40016000 	.word	0x40016000
 800278c:	40016020 	.word	0x40016020
 8002790:	40016040 	.word	0x40016040
 8002794:	40016080 	.word	0x40016080
 8002798:	400160a0 	.word	0x400160a0
 800279c:	400160c0 	.word	0x400160c0
 80027a0:	400160e0 	.word	0x400160e0

080027a4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d108      	bne.n	80027c6 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e033      	b.n	800282e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80027e4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0201 	orr.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d116      	bne.n	800282e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0202 	orr.w	r2, r2, #2
 8002816:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <DFSDM_RegConvStart+0x84>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	e000      	b.n	800282a <DFSDM_RegConvStart+0x86>
 8002828:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <DFSDM_RegConvStart+0x98>
 8002838:	2202      	movs	r2, #2
 800283a:	e000      	b.n	800283e <DFSDM_RegConvStart+0x9a>
 800283c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286c:	2b01      	cmp	r3, #1
 800286e:	d107      	bne.n	8002880 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 800287e:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002896:	2b04      	cmp	r3, #4
 8002898:	d116      	bne.n	80028c8 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0202 	orr.w	r2, r2, #2
 80028b0:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <DFSDM_RegConvStop+0x72>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	e000      	b.n	80028c4 <DFSDM_RegConvStop+0x74>
 80028c2:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d101      	bne.n	80028d6 <DFSDM_RegConvStop+0x86>
 80028d2:	2201      	movs	r2, #1
 80028d4:	e000      	b.n	80028d8 <DFSDM_RegConvStop+0x88>
 80028d6:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e08d      	b.n	8002a1a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_DMA_Init+0x138>)
 8002906:	429a      	cmp	r2, r3
 8002908:	d80f      	bhi.n	800292a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	4b45      	ldr	r3, [pc, #276]	@ (8002a28 <HAL_DMA_Init+0x13c>)
 8002912:	4413      	add	r3, r2
 8002914:	4a45      	ldr	r2, [pc, #276]	@ (8002a2c <HAL_DMA_Init+0x140>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	009a      	lsls	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a42      	ldr	r2, [pc, #264]	@ (8002a30 <HAL_DMA_Init+0x144>)
 8002926:	641a      	str	r2, [r3, #64]	@ 0x40
 8002928:	e00e      	b.n	8002948 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	4b40      	ldr	r3, [pc, #256]	@ (8002a34 <HAL_DMA_Init+0x148>)
 8002932:	4413      	add	r3, r2
 8002934:	4a3d      	ldr	r2, [pc, #244]	@ (8002a2c <HAL_DMA_Init+0x140>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	009a      	lsls	r2, r3, #2
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a3c      	ldr	r2, [pc, #240]	@ (8002a38 <HAL_DMA_Init+0x14c>)
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800295e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002962:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002978:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002984:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fa12 	bl	8002dc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029a8:	d102      	bne.n	80029b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029c4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_DMA_Init+0x104>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d80c      	bhi.n	80029f0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa32 	bl	8002e40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e008      	b.n	8002a02 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40020407 	.word	0x40020407
 8002a28:	bffdfff8 	.word	0xbffdfff8
 8002a2c:	cccccccd 	.word	0xcccccccd
 8002a30:	40020000 	.word	0x40020000
 8002a34:	bffdfbf8 	.word	0xbffdfbf8
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Start_IT+0x20>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e066      	b.n	8002b2a <HAL_DMA_Start_IT+0xee>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d155      	bne.n	8002b1c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f957 	bl	8002d48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 020e 	orr.w	r2, r2, #14
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e00f      	b.n	8002ad4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0204 	bic.w	r2, r2, #4
 8002ac2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 020a 	orr.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d007      	beq.n	8002af2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002af0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b08:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e005      	b.n	8002b28 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
 8002b26:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d008      	beq.n	8002b5c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e040      	b.n	8002bde <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020e 	bic.w	r2, r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b7a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b90:	f003 021c 	and.w	r2, r3, #28
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	2101      	movs	r1, #1
 8002b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b9e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ba8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f003 031c 	and.w	r3, r3, #28
 8002c0a:	2204      	movs	r2, #4
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d026      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x7a>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d021      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d107      	bne.n	8002c3e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0204 	bic.w	r2, r2, #4
 8002c3c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c42:	f003 021c 	and.w	r2, r3, #28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d071      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c62:	e06c      	b.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c68:	f003 031c 	and.w	r3, r3, #28
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d02e      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xec>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d029      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 020a 	bic.w	r2, r2, #10
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	f003 021c 	and.w	r2, r3, #28
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d038      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002cd4:	e033      	b.n	8002d3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	f003 031c 	and.w	r3, r3, #28
 8002cde:	2208      	movs	r2, #8
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d02a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x156>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d025      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 020e 	bic.w	r2, r2, #14
 8002d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d08:	f003 021c 	and.w	r2, r3, #28
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
}
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d70:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f003 021c 	and.w	r2, r3, #28
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f202 	lsl.w	r2, r1, r2
 8002d84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d108      	bne.n	8002da8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002da6:	e007      	b.n	8002db8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d80a      	bhi.n	8002dee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ddc:	089b      	lsrs	r3, r3, #2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002de4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6493      	str	r3, [r2, #72]	@ 0x48
 8002dec:	e007      	b.n	8002dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	009a      	lsls	r2, r3, #2
 8002df6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	3b08      	subs	r3, #8
 8002e06:	4a0c      	ldr	r2, [pc, #48]	@ (8002e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40020407 	.word	0x40020407
 8002e34:	4002081c 	.word	0x4002081c
 8002e38:	cccccccd 	.word	0xcccccccd
 8002e3c:	40020880 	.word	0x40020880

08002e40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a08      	ldr	r2, [pc, #32]	@ (8002e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	1000823f 	.word	0x1000823f
 8002e84:	40020940 	.word	0x40020940

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e96:	e166      	b.n	8003166 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8158 	beq.w	8003160 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d005      	beq.n	8002ec8 <HAL_GPIO_Init+0x40>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d130      	bne.n	8002f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002efe:	2201      	movs	r2, #1
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	091b      	lsrs	r3, r3, #4
 8002f14:	f003 0201 	and.w	r2, r3, #1
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d017      	beq.n	8002f66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	2203      	movs	r2, #3
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d123      	bne.n	8002fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	08da      	lsrs	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	3208      	adds	r2, #8
 8002f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	220f      	movs	r2, #15
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	08da      	lsrs	r2, r3, #3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3208      	adds	r2, #8
 8002fb4:	6939      	ldr	r1, [r7, #16]
 8002fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0203 	and.w	r2, r3, #3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80b2 	beq.w	8003160 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffc:	4b61      	ldr	r3, [pc, #388]	@ (8003184 <HAL_GPIO_Init+0x2fc>)
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003000:	4a60      	ldr	r2, [pc, #384]	@ (8003184 <HAL_GPIO_Init+0x2fc>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6613      	str	r3, [r2, #96]	@ 0x60
 8003008:	4b5e      	ldr	r3, [pc, #376]	@ (8003184 <HAL_GPIO_Init+0x2fc>)
 800300a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003014:	4a5c      	ldr	r2, [pc, #368]	@ (8003188 <HAL_GPIO_Init+0x300>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800303e:	d02b      	beq.n	8003098 <HAL_GPIO_Init+0x210>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a52      	ldr	r2, [pc, #328]	@ (800318c <HAL_GPIO_Init+0x304>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d025      	beq.n	8003094 <HAL_GPIO_Init+0x20c>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a51      	ldr	r2, [pc, #324]	@ (8003190 <HAL_GPIO_Init+0x308>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01f      	beq.n	8003090 <HAL_GPIO_Init+0x208>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a50      	ldr	r2, [pc, #320]	@ (8003194 <HAL_GPIO_Init+0x30c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d019      	beq.n	800308c <HAL_GPIO_Init+0x204>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a4f      	ldr	r2, [pc, #316]	@ (8003198 <HAL_GPIO_Init+0x310>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_GPIO_Init+0x200>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a4e      	ldr	r2, [pc, #312]	@ (800319c <HAL_GPIO_Init+0x314>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d00d      	beq.n	8003084 <HAL_GPIO_Init+0x1fc>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a4d      	ldr	r2, [pc, #308]	@ (80031a0 <HAL_GPIO_Init+0x318>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d007      	beq.n	8003080 <HAL_GPIO_Init+0x1f8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a4c      	ldr	r2, [pc, #304]	@ (80031a4 <HAL_GPIO_Init+0x31c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <HAL_GPIO_Init+0x1f4>
 8003078:	2307      	movs	r3, #7
 800307a:	e00e      	b.n	800309a <HAL_GPIO_Init+0x212>
 800307c:	2308      	movs	r3, #8
 800307e:	e00c      	b.n	800309a <HAL_GPIO_Init+0x212>
 8003080:	2306      	movs	r3, #6
 8003082:	e00a      	b.n	800309a <HAL_GPIO_Init+0x212>
 8003084:	2305      	movs	r3, #5
 8003086:	e008      	b.n	800309a <HAL_GPIO_Init+0x212>
 8003088:	2304      	movs	r3, #4
 800308a:	e006      	b.n	800309a <HAL_GPIO_Init+0x212>
 800308c:	2303      	movs	r3, #3
 800308e:	e004      	b.n	800309a <HAL_GPIO_Init+0x212>
 8003090:	2302      	movs	r3, #2
 8003092:	e002      	b.n	800309a <HAL_GPIO_Init+0x212>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_GPIO_Init+0x212>
 8003098:	2300      	movs	r3, #0
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	f002 0203 	and.w	r2, r2, #3
 80030a0:	0092      	lsls	r2, r2, #2
 80030a2:	4093      	lsls	r3, r2
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030aa:	4937      	ldr	r1, [pc, #220]	@ (8003188 <HAL_GPIO_Init+0x300>)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b8:	4b3b      	ldr	r3, [pc, #236]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030dc:	4a32      	ldr	r2, [pc, #200]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030e2:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4013      	ands	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003106:	4a28      	ldr	r2, [pc, #160]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800310c:	4b26      	ldr	r3, [pc, #152]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	43db      	mvns	r3, r3
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003130:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003136:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43db      	mvns	r3, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800315a:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <HAL_GPIO_Init+0x320>)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3301      	adds	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f47f ae91 	bne.w	8002e98 <HAL_GPIO_Init+0x10>
  }
}
 8003176:	bf00      	nop
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40021000 	.word	0x40021000
 8003188:	40010000 	.word	0x40010000
 800318c:	48000400 	.word	0x48000400
 8003190:	48000800 	.word	0x48000800
 8003194:	48000c00 	.word	0x48000c00
 8003198:	48001000 	.word	0x48001000
 800319c:	48001400 	.word	0x48001400
 80031a0:	48001800 	.word	0x48001800
 80031a4:	48001c00 	.word	0x48001c00
 80031a8:	40010400 	.word	0x40010400

080031ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	e001      	b.n	80031ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ec:	787b      	ldrb	r3, [r7, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f8:	e002      	b.n	8003200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003216:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d006      	beq.n	8003230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd fa12 	bl	8000654 <HAL_GPIO_EXTI_Callback>
  }
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40010400 	.word	0x40010400

0800323c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e08d      	b.n	800336a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe f832 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2224      	movs	r2, #36	@ 0x24
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800328c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800329c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e006      	b.n	80032c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80032c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d108      	bne.n	80032de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	e007      	b.n	80032ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b20      	cmp	r3, #32
 8003386:	d138      	bne.n	80033fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003392:	2302      	movs	r3, #2
 8003394:	e032      	b.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2224      	movs	r2, #36	@ 0x24
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0201 	bic.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b20      	cmp	r3, #32
 800341c:	d139      	bne.n	8003492 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003428:	2302      	movs	r3, #2
 800342a:	e033      	b.n	8003494 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	@ 0x24
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800345a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
  }
}
 8003494:	4618      	mov	r0, r3
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034a4:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b0:	d102      	bne.n	80034b8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80034b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034b6:	e00b      	b.n	80034d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80034b8:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <HAL_PWREx_GetVoltageRange+0x3c>)
 80034ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c6:	d102      	bne.n	80034ce <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80034c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034cc:	e000      	b.n	80034d0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80034ce:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40007000 	.word	0x40007000

080034e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d141      	bne.n	8003572 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ee:	4b4b      	ldr	r3, [pc, #300]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fa:	d131      	bne.n	8003560 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034fc:	4b47      	ldr	r3, [pc, #284]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003502:	4a46      	ldr	r2, [pc, #280]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003508:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800350c:	4b43      	ldr	r3, [pc, #268]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003514:	4a41      	ldr	r2, [pc, #260]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800351a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800351c:	4b40      	ldr	r3, [pc, #256]	@ (8003620 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2232      	movs	r2, #50	@ 0x32
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	4a3f      	ldr	r2, [pc, #252]	@ (8003624 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	0c9b      	lsrs	r3, r3, #18
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003532:	e002      	b.n	800353a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3b01      	subs	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800353a:	4b38      	ldr	r3, [pc, #224]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003546:	d102      	bne.n	800354e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f2      	bne.n	8003534 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800354e:	4b33      	ldr	r3, [pc, #204]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355a:	d158      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e057      	b.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003560:	4b2e      	ldr	r3, [pc, #184]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003562:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003566:	4a2d      	ldr	r2, [pc, #180]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800356c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003570:	e04d      	b.n	800360e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003578:	d141      	bne.n	80035fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800357a:	4b28      	ldr	r3, [pc, #160]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003586:	d131      	bne.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003588:	4b24      	ldr	r3, [pc, #144]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800358e:	4a23      	ldr	r2, [pc, #140]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003594:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003598:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035a0:	4a1e      	ldr	r2, [pc, #120]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80035a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2232      	movs	r2, #50	@ 0x32
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003624 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	0c9b      	lsrs	r3, r3, #18
 80035ba:	3301      	adds	r3, #1
 80035bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035be:	e002      	b.n	80035c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035c6:	4b15      	ldr	r3, [pc, #84]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d2:	d102      	bne.n	80035da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f2      	bne.n	80035c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e6:	d112      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e011      	b.n	8003610 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035f2:	4a0a      	ldr	r2, [pc, #40]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035fc:	e007      	b.n	800360e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035fe:	4b07      	ldr	r3, [pc, #28]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003606:	4a05      	ldr	r2, [pc, #20]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003608:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800360c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	40007000 	.word	0x40007000
 8003620:	20000000 	.word	0x20000000
 8003624:	431bde83 	.word	0x431bde83

08003628 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d102      	bne.n	800363c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f000 bc08 	b.w	8003e4c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363c:	4b96      	ldr	r3, [pc, #600]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003646:	4b94      	ldr	r3, [pc, #592]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80e4 	beq.w	8003826 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_RCC_OscConfig+0x4c>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	f040 808b 	bne.w	8003782 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 8087 	bne.w	8003782 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003674:	4b88      	ldr	r3, [pc, #544]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_RCC_OscConfig+0x64>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e3df      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1a      	ldr	r2, [r3, #32]
 8003690:	4b81      	ldr	r3, [pc, #516]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <HAL_RCC_OscConfig+0x7e>
 800369c:	4b7e      	ldr	r3, [pc, #504]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a4:	e005      	b.n	80036b2 <HAL_RCC_OscConfig+0x8a>
 80036a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80036a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d223      	bcs.n	80036fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fdcc 	bl	8004258 <RCC_SetFlashLatencyFromMSIRange>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e3c0      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ca:	4b73      	ldr	r3, [pc, #460]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a72      	ldr	r2, [pc, #456]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80036d0:	f043 0308 	orr.w	r3, r3, #8
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b70      	ldr	r3, [pc, #448]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	496d      	ldr	r1, [pc, #436]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	4968      	ldr	r1, [pc, #416]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	604b      	str	r3, [r1, #4]
 80036fc:	e025      	b.n	800374a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fe:	4b66      	ldr	r3, [pc, #408]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a65      	ldr	r2, [pc, #404]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	4b63      	ldr	r3, [pc, #396]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4960      	ldr	r1, [pc, #384]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003718:	4313      	orrs	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800371c:	4b5e      	ldr	r3, [pc, #376]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	495b      	ldr	r1, [pc, #364]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fd8c 	bl	8004258 <RCC_SetFlashLatencyFromMSIRange>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e380      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800374a:	f000 fcc1 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800374e:	4602      	mov	r2, r0
 8003750:	4b51      	ldr	r3, [pc, #324]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	4950      	ldr	r1, [pc, #320]	@ (800389c <HAL_RCC_OscConfig+0x274>)
 800375c:	5ccb      	ldrb	r3, [r1, r3]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a4e      	ldr	r2, [pc, #312]	@ (80038a0 <HAL_RCC_OscConfig+0x278>)
 8003768:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800376a:	4b4e      	ldr	r3, [pc, #312]	@ (80038a4 <HAL_RCC_OscConfig+0x27c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd ffec 	bl	800174c <HAL_InitTick>
 8003774:	4603      	mov	r3, r0
 8003776:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d052      	beq.n	8003824 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	e364      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d032      	beq.n	80037f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800378a:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a42      	ldr	r2, [pc, #264]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003796:	f7fe f829 	bl	80017ec <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800379e:	f7fe f825 	bl	80017ec <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e34d      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037b0:	4b39      	ldr	r3, [pc, #228]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037bc:	4b36      	ldr	r3, [pc, #216]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a35      	ldr	r2, [pc, #212]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4b33      	ldr	r3, [pc, #204]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4930      	ldr	r1, [pc, #192]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037da:	4b2f      	ldr	r3, [pc, #188]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	492b      	ldr	r1, [pc, #172]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
 80037ee:	e01a      	b.n	8003826 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037f0:	4b29      	ldr	r3, [pc, #164]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a28      	ldr	r2, [pc, #160]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 80037f6:	f023 0301 	bic.w	r3, r3, #1
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037fc:	f7fd fff6 	bl	80017ec <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003804:	f7fd fff2 	bl	80017ec <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e31a      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003816:	4b20      	ldr	r3, [pc, #128]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f0      	bne.n	8003804 <HAL_RCC_OscConfig+0x1dc>
 8003822:	e000      	b.n	8003826 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003824:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d073      	beq.n	800391a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d005      	beq.n	8003844 <HAL_RCC_OscConfig+0x21c>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b0c      	cmp	r3, #12
 800383c:	d10e      	bne.n	800385c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b14      	ldr	r3, [pc, #80]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d063      	beq.n	8003918 <HAL_RCC_OscConfig+0x2f0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d15f      	bne.n	8003918 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e2f7      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x24c>
 8003866:	4b0c      	ldr	r3, [pc, #48]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a0b      	ldr	r2, [pc, #44]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e025      	b.n	80038c0 <HAL_RCC_OscConfig+0x298>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800387c:	d114      	bne.n	80038a8 <HAL_RCC_OscConfig+0x280>
 800387e:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a05      	ldr	r2, [pc, #20]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b03      	ldr	r3, [pc, #12]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a02      	ldr	r2, [pc, #8]	@ (8003898 <HAL_RCC_OscConfig+0x270>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e013      	b.n	80038c0 <HAL_RCC_OscConfig+0x298>
 8003898:	40021000 	.word	0x40021000
 800389c:	080079ac 	.word	0x080079ac
 80038a0:	20000000 	.word	0x20000000
 80038a4:	20000004 	.word	0x20000004
 80038a8:	4ba0      	ldr	r3, [pc, #640]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a9f      	ldr	r2, [pc, #636]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a9c      	ldr	r2, [pc, #624]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd ff90 	bl	80017ec <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fd ff8c 	bl	80017ec <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	@ 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e2b4      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e2:	4b92      	ldr	r3, [pc, #584]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2a8>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fd ff7c 	bl	80017ec <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fd ff78 	bl	80017ec <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	@ 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e2a0      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800390a:	4b88      	ldr	r3, [pc, #544]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x2d0>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d060      	beq.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d005      	beq.n	8003938 <HAL_RCC_OscConfig+0x310>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d119      	bne.n	8003966 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d116      	bne.n	8003966 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003938:	4b7c      	ldr	r3, [pc, #496]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_OscConfig+0x328>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e27d      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003950:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	4973      	ldr	r1, [pc, #460]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003964:	e040      	b.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d023      	beq.n	80039b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800396e:	4b6f      	ldr	r3, [pc, #444]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a6e      	ldr	r2, [pc, #440]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397a:	f7fd ff37 	bl	80017ec <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003982:	f7fd ff33 	bl	80017ec <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e25b      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003994:	4b65      	ldr	r3, [pc, #404]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b62      	ldr	r3, [pc, #392]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	495f      	ldr	r1, [pc, #380]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	604b      	str	r3, [r1, #4]
 80039b4:	e018      	b.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5c      	ldr	r2, [pc, #368]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80039bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fd ff13 	bl	80017ec <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ca:	f7fd ff0f 	bl	80017ec <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e237      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039dc:	4b53      	ldr	r3, [pc, #332]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d03c      	beq.n	8003a6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fc:	4b4b      	ldr	r3, [pc, #300]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a02:	4a4a      	ldr	r2, [pc, #296]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fd feee 	bl	80017ec <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fd feea 	bl	80017ec <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e212      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a26:	4b41      	ldr	r3, [pc, #260]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ef      	beq.n	8003a14 <HAL_RCC_OscConfig+0x3ec>
 8003a34:	e01b      	b.n	8003a6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a36:	4b3d      	ldr	r3, [pc, #244]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a46:	f7fd fed1 	bl	80017ec <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a4e:	f7fd fecd 	bl	80017ec <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e1f5      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a60:	4b32      	ldr	r3, [pc, #200]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ef      	bne.n	8003a4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80a6 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a80:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8c:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a90:	4a26      	ldr	r2, [pc, #152]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a98:	4b24      	ldr	r3, [pc, #144]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <HAL_RCC_OscConfig+0x508>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d118      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <HAL_RCC_OscConfig+0x508>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <HAL_RCC_OscConfig+0x508>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003abe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fe94 	bl	80017ec <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac8:	f7fd fe90 	bl	80017ec <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1b8      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ada:	4b15      	ldr	r3, [pc, #84]	@ (8003b30 <HAL_RCC_OscConfig+0x508>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d108      	bne.n	8003b00 <HAL_RCC_OscConfig+0x4d8>
 8003aee:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003afe:	e029      	b.n	8003b54 <HAL_RCC_OscConfig+0x52c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b05      	cmp	r3, #5
 8003b06:	d115      	bne.n	8003b34 <HAL_RCC_OscConfig+0x50c>
 8003b08:	4b08      	ldr	r3, [pc, #32]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0e:	4a07      	ldr	r2, [pc, #28]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b18:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1e:	4a03      	ldr	r2, [pc, #12]	@ (8003b2c <HAL_RCC_OscConfig+0x504>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b28:	e014      	b.n	8003b54 <HAL_RCC_OscConfig+0x52c>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40007000 	.word	0x40007000
 8003b34:	4b9d      	ldr	r3, [pc, #628]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3a:	4a9c      	ldr	r2, [pc, #624]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b44:	4b99      	ldr	r3, [pc, #612]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	4a98      	ldr	r2, [pc, #608]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003b4c:	f023 0304 	bic.w	r3, r3, #4
 8003b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fd fe46 	bl	80017ec <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fd fe42 	bl	80017ec <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e168      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b7a:	4b8c      	ldr	r3, [pc, #560]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ed      	beq.n	8003b64 <HAL_RCC_OscConfig+0x53c>
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8a:	f7fd fe2f 	bl	80017ec <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fd fe2b 	bl	80017ec <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e151      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba8:	4b80      	ldr	r3, [pc, #512]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ed      	bne.n	8003b92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb6:	7ffb      	ldrb	r3, [r7, #31]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b7b      	ldr	r3, [pc, #492]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc0:	4a7a      	ldr	r2, [pc, #488]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d03c      	beq.n	8003c4e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bdc:	4b73      	ldr	r3, [pc, #460]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003be2:	4a72      	ldr	r2, [pc, #456]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bec:	f7fd fdfe 	bl	80017ec <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf4:	f7fd fdfa 	bl	80017ec <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e122      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c06:	4b69      	ldr	r3, [pc, #420]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0ef      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x5cc>
 8003c14:	e01b      	b.n	8003c4e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c16:	4b65      	ldr	r3, [pc, #404]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c1c:	4a63      	ldr	r2, [pc, #396]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fd fde1 	bl	80017ec <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c2e:	f7fd fddd 	bl	80017ec <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e105      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c40:	4b5a      	ldr	r3, [pc, #360]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1ef      	bne.n	8003c2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80f9 	beq.w	8003e4a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	f040 80cf 	bne.w	8003e00 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c62:	4b52      	ldr	r3, [pc, #328]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f003 0203 	and.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d12c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	3b01      	subs	r3, #1
 8003c82:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d123      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c92:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d11b      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d113      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d109      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d071      	beq.n	8003db4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b0c      	cmp	r3, #12
 8003cd4:	d068      	beq.n	8003da8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003cd6:	4b35      	ldr	r3, [pc, #212]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ce2:	4b32      	ldr	r3, [pc, #200]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e0ac      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003cf8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cfc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cfe:	f7fd fd75 	bl	80017ec <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fd fd71 	bl	80017ec <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e099      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d18:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d24:	4b21      	ldr	r3, [pc, #132]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	4b21      	ldr	r3, [pc, #132]	@ (8003db0 <HAL_RCC_OscConfig+0x788>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d34:	3a01      	subs	r2, #1
 8003d36:	0112      	lsls	r2, r2, #4
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d3e:	0212      	lsls	r2, r2, #8
 8003d40:	4311      	orrs	r1, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d46:	0852      	lsrs	r2, r2, #1
 8003d48:	3a01      	subs	r2, #1
 8003d4a:	0552      	lsls	r2, r2, #21
 8003d4c:	4311      	orrs	r1, r2
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d52:	0852      	lsrs	r2, r2, #1
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0652      	lsls	r2, r2, #25
 8003d58:	4311      	orrs	r1, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d5e:	06d2      	lsls	r2, r2, #27
 8003d60:	430a      	orrs	r2, r1
 8003d62:	4912      	ldr	r1, [pc, #72]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d68:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d74:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a0c      	ldr	r2, [pc, #48]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d80:	f7fd fd34 	bl	80017ec <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fd fd30 	bl	80017ec <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e058      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <HAL_RCC_OscConfig+0x784>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003da6:	e050      	b.n	8003e4a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e04f      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
 8003dac:	40021000 	.word	0x40021000
 8003db0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db4:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d144      	bne.n	8003e4a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b24      	ldr	r3, [pc, #144]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dcc:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a20      	ldr	r2, [pc, #128]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dd8:	f7fd fd08 	bl	80017ec <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fd fd04 	bl	80017ec <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e02c      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df2:	4b18      	ldr	r3, [pc, #96]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x7b8>
 8003dfe:	e024      	b.n	8003e4a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d01f      	beq.n	8003e46 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e06:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a12      	ldr	r2, [pc, #72]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003e0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd fceb 	bl	80017ec <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fd fce7 	bl	80017ec <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e00f      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f0      	bne.n	8003e1a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	4905      	ldr	r1, [pc, #20]	@ (8003e54 <HAL_RCC_OscConfig+0x82c>)
 8003e3e:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <HAL_RCC_OscConfig+0x830>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	60cb      	str	r3, [r1, #12]
 8003e44:	e001      	b.n	8003e4a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40021000 	.word	0x40021000
 8003e58:	feeefffc 	.word	0xfeeefffc

08003e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e11d      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e74:	4b90      	ldr	r3, [pc, #576]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d910      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b8d      	ldr	r3, [pc, #564]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 020f 	bic.w	r2, r3, #15
 8003e8a:	498b      	ldr	r1, [pc, #556]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b89      	ldr	r3, [pc, #548]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e105      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	4b81      	ldr	r3, [pc, #516]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d908      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	497b      	ldr	r1, [pc, #492]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d079      	beq.n	8003fd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d11e      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee6:	4b75      	ldr	r3, [pc, #468]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0dc      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003ef6:	f000 fa09 	bl	800430c <RCC_GetSysClockFreqFromPLLSource>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4a70      	ldr	r2, [pc, #448]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d946      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f02:	4b6e      	ldr	r3, [pc, #440]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d140      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f16:	4a69      	ldr	r2, [pc, #420]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f1e:	2380      	movs	r3, #128	@ 0x80
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e035      	b.n	8003f90 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d107      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f2c:	4b63      	ldr	r3, [pc, #396]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d115      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0b9      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f44:	4b5d      	ldr	r3, [pc, #372]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e0ad      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f54:	4b59      	ldr	r3, [pc, #356]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0a5      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003f64:	f000 f8b4 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4a55      	ldr	r2, [pc, #340]	@ (80040c0 <HAL_RCC_ClockConfig+0x264>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d90f      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f70:	4b52      	ldr	r3, [pc, #328]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f84:	4a4d      	ldr	r2, [pc, #308]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f90:	4b4a      	ldr	r3, [pc, #296]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f023 0203 	bic.w	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4947      	ldr	r1, [pc, #284]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa2:	f7fd fc23 	bl	80017ec <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003faa:	f7fd fc1f 	bl	80017ec <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e077      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 020c 	and.w	r2, r3, #12
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d1eb      	bne.n	8003faa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2b80      	cmp	r3, #128	@ 0x80
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fd8:	4b38      	ldr	r3, [pc, #224]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	4a37      	ldr	r2, [pc, #220]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fe2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d208      	bcs.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b2e      	ldr	r3, [pc, #184]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	492b      	ldr	r1, [pc, #172]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004012:	4b29      	ldr	r3, [pc, #164]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d210      	bcs.n	8004042 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 020f 	bic.w	r2, r3, #15
 8004028:	4923      	ldr	r1, [pc, #140]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004030:	4b21      	ldr	r3, [pc, #132]	@ (80040b8 <HAL_RCC_ClockConfig+0x25c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d001      	beq.n	8004042 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e036      	b.n	80040b0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d008      	beq.n	8004060 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800404e:	4b1b      	ldr	r3, [pc, #108]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	4918      	ldr	r1, [pc, #96]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800406c:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4910      	ldr	r1, [pc, #64]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004080:	f000 f826 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b0d      	ldr	r3, [pc, #52]	@ (80040bc <HAL_RCC_ClockConfig+0x260>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	490c      	ldr	r1, [pc, #48]	@ (80040c4 <HAL_RCC_ClockConfig+0x268>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	4a0a      	ldr	r2, [pc, #40]	@ (80040c8 <HAL_RCC_ClockConfig+0x26c>)
 800409e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040a0:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <HAL_RCC_ClockConfig+0x270>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd fb51 	bl	800174c <HAL_InitTick>
 80040aa:	4603      	mov	r3, r0
 80040ac:	73fb      	strb	r3, [r7, #15]

  return status;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	40022000 	.word	0x40022000
 80040bc:	40021000 	.word	0x40021000
 80040c0:	04c4b400 	.word	0x04c4b400
 80040c4:	080079ac 	.word	0x080079ac
 80040c8:	20000000 	.word	0x20000000
 80040cc:	20000004 	.word	0x20000004

080040d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	@ 0x24
 80040d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040de:	4b3e      	ldr	r3, [pc, #248]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e8:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x34>
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d121      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d11e      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004104:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004110:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e005      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004120:	4b2d      	ldr	r3, [pc, #180]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800412c:	4a2b      	ldr	r2, [pc, #172]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004134:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10d      	bne.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d102      	bne.n	800414e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004148:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e004      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d101      	bne.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004154:	4b23      	ldr	r3, [pc, #140]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004156:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d134      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415e:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0xa6>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d003      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0xac>
 8004174:	e005      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004176:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	e005      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800417c:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800417e:	617b      	str	r3, [r7, #20]
      break;
 8004180:	e002      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	617b      	str	r3, [r7, #20]
      break;
 8004186:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	3301      	adds	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	fb03 f202 	mul.w	r2, r3, r2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ae:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	0e5b      	lsrs	r3, r3, #25
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	3301      	adds	r3, #1
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c8:	69bb      	ldr	r3, [r7, #24]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3724      	adds	r7, #36	@ 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	080079c4 	.word	0x080079c4
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	007a1200 	.word	0x007a1200

080041e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000000 	.word	0x20000000

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004204:	f7ff fff0 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4904      	ldr	r1, [pc, #16]	@ (8004228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	080079bc 	.word	0x080079bc

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004230:	f7ff ffda 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0adb      	lsrs	r3, r3, #11
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4904      	ldr	r1, [pc, #16]	@ (8004254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	080079bc 	.word	0x080079bc

08004258 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004264:	4b27      	ldr	r3, [pc, #156]	@ (8004304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004270:	f7ff f916 	bl	80034a0 <HAL_PWREx_GetVoltageRange>
 8004274:	6178      	str	r0, [r7, #20]
 8004276:	e014      	b.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004278:	4b22      	ldr	r3, [pc, #136]	@ (8004304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	4a21      	ldr	r2, [pc, #132]	@ (8004304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004282:	6593      	str	r3, [r2, #88]	@ 0x58
 8004284:	4b1f      	ldr	r3, [pc, #124]	@ (8004304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004290:	f7ff f906 	bl	80034a0 <HAL_PWREx_GetVoltageRange>
 8004294:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004296:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429a:	4a1a      	ldr	r2, [pc, #104]	@ (8004304 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a8:	d10b      	bne.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b80      	cmp	r3, #128	@ 0x80
 80042ae:	d913      	bls.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80042b4:	d902      	bls.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042b6:	2302      	movs	r3, #2
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e00d      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042bc:	2301      	movs	r3, #1
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e00a      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80042c6:	d902      	bls.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80042c8:	2302      	movs	r3, #2
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	e004      	b.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b70      	cmp	r3, #112	@ 0x70
 80042d2:	d101      	bne.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d4:	2301      	movs	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 020f 	bic.w	r2, r3, #15
 80042e0:	4909      	ldr	r1, [pc, #36]	@ (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042e8:	4b07      	ldr	r3, [pc, #28]	@ (8004308 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d001      	beq.n	80042fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	40022000 	.word	0x40022000

0800430c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004312:	4b2d      	ldr	r3, [pc, #180]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d00b      	beq.n	800433a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d825      	bhi.n	8004374 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d008      	beq.n	8004340 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d11f      	bne.n	8004374 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004334:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004336:	613b      	str	r3, [r7, #16]
    break;
 8004338:	e01f      	b.n	800437a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800433a:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800433c:	613b      	str	r3, [r7, #16]
    break;
 800433e:	e01c      	b.n	800437a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004340:	4b21      	ldr	r3, [pc, #132]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d107      	bne.n	800435c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800434c:	4b1e      	ldr	r3, [pc, #120]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e005      	b.n	8004368 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800435c:	4b1a      	ldr	r3, [pc, #104]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004368:	4a1a      	ldr	r2, [pc, #104]	@ (80043d4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004370:	613b      	str	r3, [r7, #16]
    break;
 8004372:	e002      	b.n	800437a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
    break;
 8004378:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800437a:	4b13      	ldr	r3, [pc, #76]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	3301      	adds	r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	fb03 f202 	mul.w	r2, r3, r2
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a0:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	0e5b      	lsrs	r3, r3, #25
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80043ba:	683b      	ldr	r3, [r7, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40021000 	.word	0x40021000
 80043cc:	00f42400 	.word	0x00f42400
 80043d0:	007a1200 	.word	0x007a1200
 80043d4:	080079c4 	.word	0x080079c4

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d040      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f8:	2b80      	cmp	r3, #128	@ 0x80
 80043fa:	d02a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80043fc:	2b80      	cmp	r3, #128	@ 0x80
 80043fe:	d825      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004400:	2b60      	cmp	r3, #96	@ 0x60
 8004402:	d026      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004404:	2b60      	cmp	r3, #96	@ 0x60
 8004406:	d821      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d006      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d81d      	bhi.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d010      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004418:	e018      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800441a:	4b89      	ldr	r3, [pc, #548]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4a88      	ldr	r2, [pc, #544]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004424:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004426:	e015      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fb02 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004438:	e00c      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3320      	adds	r3, #32
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fbed 	bl	8004c20 <RCCEx_PLLSAI2_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	74fb      	strb	r3, [r7, #19]
      break;
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800445a:	4b79      	ldr	r3, [pc, #484]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800445c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004460:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004468:	4975      	ldr	r1, [pc, #468]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004470:	e001      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004472:	7cfb      	ldrb	r3, [r7, #19]
 8004474:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d047      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800448a:	d030      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004490:	d82a      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004496:	d02a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800449c:	d824      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800449e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a2:	d008      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80044a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a8:	d81e      	bhi.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80044ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b2:	d010      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80044b4:	e018      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044b6:	4b62      	ldr	r3, [pc, #392]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	4a61      	ldr	r2, [pc, #388]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044c2:	e015      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	2100      	movs	r1, #0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fab4 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044d4:	e00c      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3320      	adds	r3, #32
 80044da:	2100      	movs	r1, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fb9f 	bl	8004c20 <RCCEx_PLLSAI2_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044e6:	e003      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	74fb      	strb	r3, [r7, #19]
      break;
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80044ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044f6:	4b52      	ldr	r3, [pc, #328]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004504:	494e      	ldr	r1, [pc, #312]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800450c:	e001      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450e:	7cfb      	ldrb	r3, [r7, #19]
 8004510:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 809f 	beq.w	800465e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004520:	2300      	movs	r3, #0
 8004522:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004524:	4b46      	ldr	r3, [pc, #280]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	4b41      	ldr	r3, [pc, #260]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800453c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453e:	4a40      	ldr	r2, [pc, #256]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	6593      	str	r3, [r2, #88]	@ 0x58
 8004546:	4b3e      	ldr	r3, [pc, #248]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004556:	4b3b      	ldr	r3, [pc, #236]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3a      	ldr	r2, [pc, #232]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004560:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004562:	f7fd f943 	bl	80017ec <HAL_GetTick>
 8004566:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004568:	e009      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fd f93f 	bl	80017ec <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d902      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	74fb      	strb	r3, [r7, #19]
        break;
 800457c:	e005      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800457e:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ef      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d15b      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004590:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01f      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d019      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045ae:	4b24      	ldr	r3, [pc, #144]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045ba:	4b21      	ldr	r3, [pc, #132]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045da:	4a19      	ldr	r2, [pc, #100]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d016      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd f8fe 	bl	80017ec <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f2:	e00b      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fd f8fa 	bl	80017ec <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d902      	bls.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	74fb      	strb	r3, [r7, #19]
            break;
 800460a:	e006      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800460c:	4b0c      	ldr	r3, [pc, #48]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ec      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800461a:	7cfb      	ldrb	r3, [r7, #19]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10c      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004620:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004626:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004630:	4903      	ldr	r1, [pc, #12]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004632:	4313      	orrs	r3, r2
 8004634:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004638:	e008      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	74bb      	strb	r3, [r7, #18]
 800463e:	e005      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800464c:	7c7b      	ldrb	r3, [r7, #17]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4ba0      	ldr	r3, [pc, #640]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004656:	4a9f      	ldr	r2, [pc, #636]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800465c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800466a:	4b9a      	ldr	r3, [pc, #616]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	f023 0203 	bic.w	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	4996      	ldr	r1, [pc, #600]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800468c:	4b91      	ldr	r3, [pc, #580]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004692:	f023 020c 	bic.w	r2, r3, #12
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	498e      	ldr	r1, [pc, #568]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ae:	4b89      	ldr	r3, [pc, #548]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046bc:	4985      	ldr	r1, [pc, #532]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046d0:	4b80      	ldr	r3, [pc, #512]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046de:	497d      	ldr	r1, [pc, #500]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0310 	and.w	r3, r3, #16
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046f2:	4b78      	ldr	r3, [pc, #480]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004700:	4974      	ldr	r1, [pc, #464]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004714:	4b6f      	ldr	r3, [pc, #444]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004722:	496c      	ldr	r1, [pc, #432]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004736:	4b67      	ldr	r3, [pc, #412]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004744:	4963      	ldr	r1, [pc, #396]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004758:	4b5e      	ldr	r3, [pc, #376]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004766:	495b      	ldr	r1, [pc, #364]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800477a:	4b56      	ldr	r3, [pc, #344]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004780:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	4952      	ldr	r1, [pc, #328]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800479c:	4b4d      	ldr	r3, [pc, #308]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	494a      	ldr	r1, [pc, #296]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047be:	4b45      	ldr	r3, [pc, #276]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	4941      	ldr	r1, [pc, #260]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e0:	4b3c      	ldr	r3, [pc, #240]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047e6:	f023 0203 	bic.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ee:	4939      	ldr	r1, [pc, #228]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d028      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004802:	4b34      	ldr	r3, [pc, #208]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004808:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004810:	4930      	ldr	r1, [pc, #192]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004820:	d106      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004822:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4a2b      	ldr	r2, [pc, #172]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004828:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800482c:	60d3      	str	r3, [r2, #12]
 800482e:	e011      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004838:	d10c      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2101      	movs	r1, #1
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f8f9 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d04d      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004868:	d108      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800486a:	4b1a      	ldr	r3, [pc, #104]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800486c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004870:	4a18      	ldr	r2, [pc, #96]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004876:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800487a:	e012      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800487c:	4b15      	ldr	r3, [pc, #84]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800487e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004882:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004884:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004888:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800488c:	4b11      	ldr	r3, [pc, #68]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800489a:	490e      	ldr	r1, [pc, #56]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048aa:	d106      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ac:	4b09      	ldr	r3, [pc, #36]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a08      	ldr	r2, [pc, #32]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b6:	60d3      	str	r3, [r2, #12]
 80048b8:	e020      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048c2:	d109      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048c4:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4a02      	ldr	r2, [pc, #8]	@ (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ce:	60d3      	str	r3, [r2, #12]
 80048d0:	e014      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048e0:	d10c      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3304      	adds	r3, #4
 80048e6:	2101      	movs	r1, #1
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 f8a5 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 80048ee:	4603      	mov	r3, r0
 80048f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80048f8:	7cfb      	ldrb	r3, [r7, #19]
 80048fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d028      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004908:	4b4a      	ldr	r3, [pc, #296]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004916:	4947      	ldr	r1, [pc, #284]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004926:	d106      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b42      	ldr	r3, [pc, #264]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a41      	ldr	r2, [pc, #260]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
 8004934:	e011      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800493a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800493e:	d10c      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f876 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004956:	7cfb      	ldrb	r3, [r7, #19]
 8004958:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01e      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004966:	4b33      	ldr	r3, [pc, #204]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004976:	492f      	ldr	r1, [pc, #188]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2102      	movs	r1, #2
 8004990:	4618      	mov	r0, r3
 8004992:	f000 f851 	bl	8004a38 <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049b0:	4b20      	ldr	r3, [pc, #128]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049b6:	f023 0204 	bic.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c0:	491c      	ldr	r1, [pc, #112]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049d4:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049da:	f023 0218 	bic.w	r2, r3, #24
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	4913      	ldr	r1, [pc, #76]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d017      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80049f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a08:	490a      	ldr	r1, [pc, #40]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a1a:	d105      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a1c:	4b05      	ldr	r3, [pc, #20]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a04      	ldr	r2, [pc, #16]	@ (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a28:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000

08004a38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a46:	4b72      	ldr	r3, [pc, #456]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00e      	beq.n	8004a70 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a52:	4b6f      	ldr	r3, [pc, #444]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0203 	and.w	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d103      	bne.n	8004a6a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
       ||
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d142      	bne.n	8004af0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	e03f      	b.n	8004af0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d018      	beq.n	8004aaa <RCCEx_PLLSAI1_Config+0x72>
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d825      	bhi.n	8004ac8 <RCCEx_PLLSAI1_Config+0x90>
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d002      	beq.n	8004a86 <RCCEx_PLLSAI1_Config+0x4e>
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d009      	beq.n	8004a98 <RCCEx_PLLSAI1_Config+0x60>
 8004a84:	e020      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a86:	4b62      	ldr	r3, [pc, #392]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11d      	bne.n	8004ace <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a96:	e01a      	b.n	8004ace <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a98:	4b5d      	ldr	r3, [pc, #372]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d116      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa8:	e013      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aaa:	4b59      	ldr	r3, [pc, #356]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10f      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ab6:	4b56      	ldr	r3, [pc, #344]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ac6:	e006      	b.n	8004ad6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      break;
 8004acc:	e004      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d108      	bne.n	8004af0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004ade:	4b4c      	ldr	r3, [pc, #304]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 0203 	bic.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4949      	ldr	r1, [pc, #292]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8086 	bne.w	8004c04 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004af8:	4b45      	ldr	r3, [pc, #276]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a44      	ldr	r2, [pc, #272]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b04:	f7fc fe72 	bl	80017ec <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b0a:	e009      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b0c:	f7fc fe6e 	bl	80017ec <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d902      	bls.n	8004b20 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b1e:	e005      	b.n	8004b2c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b20:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1ef      	bne.n	8004b0c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d168      	bne.n	8004c04 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d113      	bne.n	8004b60 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b38:	4b35      	ldr	r3, [pc, #212]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	4b35      	ldr	r3, [pc, #212]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	0211      	lsls	r1, r2, #8
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68d2      	ldr	r2, [r2, #12]
 8004b4a:	06d2      	lsls	r2, r2, #27
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6852      	ldr	r2, [r2, #4]
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0112      	lsls	r2, r2, #4
 8004b56:	430a      	orrs	r2, r1
 8004b58:	492d      	ldr	r1, [pc, #180]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	610b      	str	r3, [r1, #16]
 8004b5e:	e02d      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d115      	bne.n	8004b92 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b66:	4b2a      	ldr	r3, [pc, #168]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8004c18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6892      	ldr	r2, [r2, #8]
 8004b72:	0211      	lsls	r1, r2, #8
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6912      	ldr	r2, [r2, #16]
 8004b78:	0852      	lsrs	r2, r2, #1
 8004b7a:	3a01      	subs	r2, #1
 8004b7c:	0552      	lsls	r2, r2, #21
 8004b7e:	4311      	orrs	r1, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6852      	ldr	r2, [r2, #4]
 8004b84:	3a01      	subs	r2, #1
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	4921      	ldr	r1, [pc, #132]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	610b      	str	r3, [r1, #16]
 8004b90:	e014      	b.n	8004bbc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b92:	4b1f      	ldr	r3, [pc, #124]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	4b21      	ldr	r3, [pc, #132]	@ (8004c1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6892      	ldr	r2, [r2, #8]
 8004b9e:	0211      	lsls	r1, r2, #8
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6952      	ldr	r2, [r2, #20]
 8004ba4:	0852      	lsrs	r2, r2, #1
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	0652      	lsls	r2, r2, #25
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6852      	ldr	r2, [r2, #4]
 8004bb0:	3a01      	subs	r2, #1
 8004bb2:	0112      	lsls	r2, r2, #4
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	4916      	ldr	r1, [pc, #88]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bbc:	4b14      	ldr	r3, [pc, #80]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fc fe10 	bl	80017ec <HAL_GetTick>
 8004bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bce:	e009      	b.n	8004be4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bd0:	f7fc fe0c 	bl	80017ec <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d902      	bls.n	8004be4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	73fb      	strb	r3, [r7, #15]
          break;
 8004be2:	e005      	b.n	8004bf0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004be4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	4904      	ldr	r1, [pc, #16]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	40021000 	.word	0x40021000
 8004c14:	07ff800f 	.word	0x07ff800f
 8004c18:	ff9f800f 	.word	0xff9f800f
 8004c1c:	f9ff800f 	.word	0xf9ff800f

08004c20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c2e:	4b72      	ldr	r3, [pc, #456]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00e      	beq.n	8004c58 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d103      	bne.n	8004c52 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d142      	bne.n	8004cd8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e03f      	b.n	8004cd8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d018      	beq.n	8004c92 <RCCEx_PLLSAI2_Config+0x72>
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d825      	bhi.n	8004cb0 <RCCEx_PLLSAI2_Config+0x90>
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d002      	beq.n	8004c6e <RCCEx_PLLSAI2_Config+0x4e>
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d009      	beq.n	8004c80 <RCCEx_PLLSAI2_Config+0x60>
 8004c6c:	e020      	b.n	8004cb0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c6e:	4b62      	ldr	r3, [pc, #392]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11d      	bne.n	8004cb6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7e:	e01a      	b.n	8004cb6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c80:	4b5d      	ldr	r3, [pc, #372]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d116      	bne.n	8004cba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c90:	e013      	b.n	8004cba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c92:	4b59      	ldr	r3, [pc, #356]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10f      	bne.n	8004cbe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c9e:	4b56      	ldr	r3, [pc, #344]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cae:	e006      	b.n	8004cbe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb4:	e004      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e002      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004cbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f023 0203 	bic.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4949      	ldr	r1, [pc, #292]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 8086 	bne.w	8004dec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ce0:	4b45      	ldr	r3, [pc, #276]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a44      	ldr	r2, [pc, #272]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cec:	f7fc fd7e 	bl	80017ec <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cf2:	e009      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cf4:	f7fc fd7a 	bl	80017ec <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d902      	bls.n	8004d08 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	73fb      	strb	r3, [r7, #15]
        break;
 8004d06:	e005      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d08:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ef      	bne.n	8004cf4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d168      	bne.n	8004dec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d113      	bne.n	8004d48 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d20:	4b35      	ldr	r3, [pc, #212]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	4b35      	ldr	r3, [pc, #212]	@ (8004dfc <RCCEx_PLLSAI2_Config+0x1dc>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	0211      	lsls	r1, r2, #8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68d2      	ldr	r2, [r2, #12]
 8004d32:	06d2      	lsls	r2, r2, #27
 8004d34:	4311      	orrs	r1, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6852      	ldr	r2, [r2, #4]
 8004d3a:	3a01      	subs	r2, #1
 8004d3c:	0112      	lsls	r2, r2, #4
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	492d      	ldr	r1, [pc, #180]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	614b      	str	r3, [r1, #20]
 8004d46:	e02d      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d115      	bne.n	8004d7a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	0211      	lsls	r1, r2, #8
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6912      	ldr	r2, [r2, #16]
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0552      	lsls	r2, r2, #21
 8004d66:	4311      	orrs	r1, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6852      	ldr	r2, [r2, #4]
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	0112      	lsls	r2, r2, #4
 8004d70:	430a      	orrs	r2, r1
 8004d72:	4921      	ldr	r1, [pc, #132]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	614b      	str	r3, [r1, #20]
 8004d78:	e014      	b.n	8004da4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	4b21      	ldr	r3, [pc, #132]	@ (8004e04 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6892      	ldr	r2, [r2, #8]
 8004d86:	0211      	lsls	r1, r2, #8
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6952      	ldr	r2, [r2, #20]
 8004d8c:	0852      	lsrs	r2, r2, #1
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0652      	lsls	r2, r2, #25
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6852      	ldr	r2, [r2, #4]
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	0112      	lsls	r2, r2, #4
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	4916      	ldr	r1, [pc, #88]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004da4:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a13      	ldr	r2, [pc, #76]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db0:	f7fc fd1c 	bl	80017ec <HAL_GetTick>
 8004db4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db6:	e009      	b.n	8004dcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db8:	f7fc fd18 	bl	80017ec <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d902      	bls.n	8004dcc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	73fb      	strb	r3, [r7, #15]
          break;
 8004dca:	e005      	b.n	8004dd8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ef      	beq.n	8004db8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dde:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004de0:	695a      	ldr	r2, [r3, #20]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	4904      	ldr	r1, [pc, #16]	@ (8004df8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	07ff800f 	.word	0x07ff800f
 8004e00:	ff9f800f 	.word	0xff9f800f
 8004e04:	f9ff800f 	.word	0xf9ff800f

08004e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e049      	b.n	8004eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc faaa 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4619      	mov	r1, r3
 8004e46:	4610      	mov	r0, r2
 8004e48:	f000 fca4 	bl	8005794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e047      	b.n	8004f60 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a23      	ldr	r2, [pc, #140]	@ (8004f6c <HAL_TIM_Base_Start+0xb4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <HAL_TIM_Base_Start+0x66>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eea:	d018      	beq.n	8004f1e <HAL_TIM_Base_Start+0x66>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8004f70 <HAL_TIM_Base_Start+0xb8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_TIM_Base_Start+0x66>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f74 <HAL_TIM_Base_Start+0xbc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_TIM_Base_Start+0x66>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <HAL_TIM_Base_Start+0xc0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_TIM_Base_Start+0x66>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f7c <HAL_TIM_Base_Start+0xc4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_TIM_Base_Start+0x66>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a19      	ldr	r2, [pc, #100]	@ (8004f80 <HAL_TIM_Base_Start+0xc8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d115      	bne.n	8004f4a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <HAL_TIM_Base_Start+0xcc>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b06      	cmp	r3, #6
 8004f2e:	d015      	beq.n	8004f5c <HAL_TIM_Base_Start+0xa4>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f36:	d011      	beq.n	8004f5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f48:	e008      	b.n	8004f5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e000      	b.n	8004f5e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40000800 	.word	0x40000800
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40013400 	.word	0x40013400
 8004f80:	40014000 	.word	0x40014000
 8004f84:	00010007 	.word	0x00010007

08004f88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10f      	bne.n	8004fc0 <HAL_TIM_Base_Stop+0x38>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_Base_Stop+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d001      	beq.n	8004ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e04f      	b.n	8005090 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a23      	ldr	r2, [pc, #140]	@ (800509c <HAL_TIM_Base_Start_IT+0xc4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01d      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501a:	d018      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_TIM_Base_Start_IT+0x76>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a19      	ldr	r2, [pc, #100]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d115      	bne.n	800507a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005056:	4013      	ands	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b06      	cmp	r3, #6
 800505e:	d015      	beq.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005066:	d011      	beq.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005078:	e008      	b.n	800508c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e000      	b.n	800508e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	00010007 	.word	0x00010007

080050b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e049      	b.n	800515e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f841 	bl	8005166 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 fb4c 	bl	8005794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01b      	beq.n	80051de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f06f 0202 	mvn.w	r2, #2
 80051ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fac6 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 80051ca:	e005      	b.n	80051d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fab8 	bl	8005742 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fac9 	bl	800576a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01b      	beq.n	800522a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f06f 0204 	mvn.w	r2, #4
 80051fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 faa0 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 8005216:	e005      	b.n	8005224 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa92 	bl	8005742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 faa3 	bl	800576a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d020      	beq.n	8005276 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d01b      	beq.n	8005276 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f06f 0208 	mvn.w	r2, #8
 8005246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f003 0303 	and.w	r3, r3, #3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa7a 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 8005262:	e005      	b.n	8005270 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fa6c 	bl	8005742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa7d 	bl	800576a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	d020      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01b      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f06f 0210 	mvn.w	r2, #16
 8005292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2208      	movs	r2, #8
 8005298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fa54 	bl	8005756 <HAL_TIM_IC_CaptureCallback>
 80052ae:	e005      	b.n	80052bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fa46 	bl	8005742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa57 	bl	800576a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00c      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0201 	mvn.w	r2, #1
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fb fa7d 	bl	80007e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fee8 	bl	80060e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fee0 	bl	80060f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00c      	beq.n	800535c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d007      	beq.n	800535c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa11 	bl	800577e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d007      	beq.n	8005380 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f06f 0220 	mvn.w	r2, #32
 8005378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fea8 	bl	80060d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e0ff      	b.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b14      	cmp	r3, #20
 80053b2:	f200 80f0 	bhi.w	8005596 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053b6:	a201      	add	r2, pc, #4	@ (adr r2, 80053bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053bc:	08005411 	.word	0x08005411
 80053c0:	08005597 	.word	0x08005597
 80053c4:	08005597 	.word	0x08005597
 80053c8:	08005597 	.word	0x08005597
 80053cc:	08005451 	.word	0x08005451
 80053d0:	08005597 	.word	0x08005597
 80053d4:	08005597 	.word	0x08005597
 80053d8:	08005597 	.word	0x08005597
 80053dc:	08005493 	.word	0x08005493
 80053e0:	08005597 	.word	0x08005597
 80053e4:	08005597 	.word	0x08005597
 80053e8:	08005597 	.word	0x08005597
 80053ec:	080054d3 	.word	0x080054d3
 80053f0:	08005597 	.word	0x08005597
 80053f4:	08005597 	.word	0x08005597
 80053f8:	08005597 	.word	0x08005597
 80053fc:	08005515 	.word	0x08005515
 8005400:	08005597 	.word	0x08005597
 8005404:	08005597 	.word	0x08005597
 8005408:	08005597 	.word	0x08005597
 800540c:	08005555 	.word	0x08005555
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fa62 	bl	80058e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0208 	orr.w	r2, r2, #8
 800542a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0204 	bic.w	r2, r2, #4
 800543a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6999      	ldr	r1, [r3, #24]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	619a      	str	r2, [r3, #24]
      break;
 800544e:	e0a5      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68b9      	ldr	r1, [r7, #8]
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fad2 	bl	8005a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6999      	ldr	r1, [r3, #24]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	619a      	str	r2, [r3, #24]
      break;
 8005490:	e084      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68b9      	ldr	r1, [r7, #8]
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fb3b 	bl	8005b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69da      	ldr	r2, [r3, #28]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0208 	orr.w	r2, r2, #8
 80054ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0204 	bic.w	r2, r2, #4
 80054bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
      break;
 80054d0:	e064      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 fba3 	bl	8005c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	021a      	lsls	r2, r3, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	61da      	str	r2, [r3, #28]
      break;
 8005512:	e043      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 fbec 	bl	8005cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0208 	orr.w	r2, r2, #8
 800552e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0204 	bic.w	r2, r2, #4
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005552:	e023      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fc30 	bl	8005dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	021a      	lsls	r2, r3, #8
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005594:	e002      	b.n	800559c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	75fb      	strb	r3, [r7, #23]
      break;
 800559a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop

080055b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_TIM_ConfigClockSource+0x1c>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e0b6      	b.n	800573a <HAL_TIM_ConfigClockSource+0x18a>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005608:	d03e      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0xd8>
 800560a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800560e:	f200 8087 	bhi.w	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005616:	f000 8086 	beq.w	8005726 <HAL_TIM_ConfigClockSource+0x176>
 800561a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800561e:	d87f      	bhi.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005620:	2b70      	cmp	r3, #112	@ 0x70
 8005622:	d01a      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xaa>
 8005624:	2b70      	cmp	r3, #112	@ 0x70
 8005626:	d87b      	bhi.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005628:	2b60      	cmp	r3, #96	@ 0x60
 800562a:	d050      	beq.n	80056ce <HAL_TIM_ConfigClockSource+0x11e>
 800562c:	2b60      	cmp	r3, #96	@ 0x60
 800562e:	d877      	bhi.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005630:	2b50      	cmp	r3, #80	@ 0x50
 8005632:	d03c      	beq.n	80056ae <HAL_TIM_ConfigClockSource+0xfe>
 8005634:	2b50      	cmp	r3, #80	@ 0x50
 8005636:	d873      	bhi.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005638:	2b40      	cmp	r3, #64	@ 0x40
 800563a:	d058      	beq.n	80056ee <HAL_TIM_ConfigClockSource+0x13e>
 800563c:	2b40      	cmp	r3, #64	@ 0x40
 800563e:	d86f      	bhi.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005640:	2b30      	cmp	r3, #48	@ 0x30
 8005642:	d064      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x15e>
 8005644:	2b30      	cmp	r3, #48	@ 0x30
 8005646:	d86b      	bhi.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005648:	2b20      	cmp	r3, #32
 800564a:	d060      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x15e>
 800564c:	2b20      	cmp	r3, #32
 800564e:	d867      	bhi.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d05c      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x15e>
 8005654:	2b10      	cmp	r3, #16
 8005656:	d05a      	beq.n	800570e <HAL_TIM_ConfigClockSource+0x15e>
 8005658:	e062      	b.n	8005720 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800566a:	f000 fc89 	bl	8005f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800567c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	609a      	str	r2, [r3, #8]
      break;
 8005686:	e04f      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005698:	f000 fc72 	bl	8005f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056aa:	609a      	str	r2, [r3, #8]
      break;
 80056ac:	e03c      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	461a      	mov	r2, r3
 80056bc:	f000 fbe6 	bl	8005e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2150      	movs	r1, #80	@ 0x50
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fc3f 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 80056cc:	e02c      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056da:	461a      	mov	r2, r3
 80056dc:	f000 fc05 	bl	8005eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2160      	movs	r1, #96	@ 0x60
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fc2f 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 80056ec:	e01c      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	461a      	mov	r2, r3
 80056fc:	f000 fbc6 	bl	8005e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2140      	movs	r1, #64	@ 0x40
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fc1f 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 800570c:	e00c      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f000 fc16 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 800571e:	e003      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
      break;
 8005724:	e000      	b.n	8005728 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
	...

08005794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a46      	ldr	r2, [pc, #280]	@ (80058c0 <TIM_Base_SetConfig+0x12c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057b2:	d00f      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a43      	ldr	r2, [pc, #268]	@ (80058c4 <TIM_Base_SetConfig+0x130>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00b      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a42      	ldr	r2, [pc, #264]	@ (80058c8 <TIM_Base_SetConfig+0x134>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d007      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a41      	ldr	r2, [pc, #260]	@ (80058cc <TIM_Base_SetConfig+0x138>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a40      	ldr	r2, [pc, #256]	@ (80058d0 <TIM_Base_SetConfig+0x13c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d108      	bne.n	80057e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a35      	ldr	r2, [pc, #212]	@ (80058c0 <TIM_Base_SetConfig+0x12c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01f      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f4:	d01b      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a32      	ldr	r2, [pc, #200]	@ (80058c4 <TIM_Base_SetConfig+0x130>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d017      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a31      	ldr	r2, [pc, #196]	@ (80058c8 <TIM_Base_SetConfig+0x134>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a30      	ldr	r2, [pc, #192]	@ (80058cc <TIM_Base_SetConfig+0x138>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00f      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2f      	ldr	r2, [pc, #188]	@ (80058d0 <TIM_Base_SetConfig+0x13c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2e      	ldr	r2, [pc, #184]	@ (80058d4 <TIM_Base_SetConfig+0x140>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a2d      	ldr	r2, [pc, #180]	@ (80058d8 <TIM_Base_SetConfig+0x144>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_Base_SetConfig+0x9a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2c      	ldr	r2, [pc, #176]	@ (80058dc <TIM_Base_SetConfig+0x148>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d108      	bne.n	8005840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a16      	ldr	r2, [pc, #88]	@ (80058c0 <TIM_Base_SetConfig+0x12c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00f      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a18      	ldr	r2, [pc, #96]	@ (80058d0 <TIM_Base_SetConfig+0x13c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00b      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a17      	ldr	r2, [pc, #92]	@ (80058d4 <TIM_Base_SetConfig+0x140>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d007      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a16      	ldr	r2, [pc, #88]	@ (80058d8 <TIM_Base_SetConfig+0x144>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_Base_SetConfig+0xf8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a15      	ldr	r2, [pc, #84]	@ (80058dc <TIM_Base_SetConfig+0x148>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d103      	bne.n	8005894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d105      	bne.n	80058b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f023 0201 	bic.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	611a      	str	r2, [r3, #16]
  }
}
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40000800 	.word	0x40000800
 80058cc:	40000c00 	.word	0x40000c00
 80058d0:	40013400 	.word	0x40013400
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f023 0201 	bic.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f023 0302 	bic.w	r3, r3, #2
 800592c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a2c      	ldr	r2, [pc, #176]	@ (80059ec <TIM_OC1_SetConfig+0x10c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00f      	beq.n	8005960 <TIM_OC1_SetConfig+0x80>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a2b      	ldr	r2, [pc, #172]	@ (80059f0 <TIM_OC1_SetConfig+0x110>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00b      	beq.n	8005960 <TIM_OC1_SetConfig+0x80>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a2a      	ldr	r2, [pc, #168]	@ (80059f4 <TIM_OC1_SetConfig+0x114>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_OC1_SetConfig+0x80>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a29      	ldr	r2, [pc, #164]	@ (80059f8 <TIM_OC1_SetConfig+0x118>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_OC1_SetConfig+0x80>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a28      	ldr	r2, [pc, #160]	@ (80059fc <TIM_OC1_SetConfig+0x11c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10c      	bne.n	800597a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0308 	bic.w	r3, r3, #8
 8005966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 0304 	bic.w	r3, r3, #4
 8005978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <TIM_OC1_SetConfig+0x10c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00f      	beq.n	80059a2 <TIM_OC1_SetConfig+0xc2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a1a      	ldr	r2, [pc, #104]	@ (80059f0 <TIM_OC1_SetConfig+0x110>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00b      	beq.n	80059a2 <TIM_OC1_SetConfig+0xc2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a19      	ldr	r2, [pc, #100]	@ (80059f4 <TIM_OC1_SetConfig+0x114>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d007      	beq.n	80059a2 <TIM_OC1_SetConfig+0xc2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <TIM_OC1_SetConfig+0x118>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC1_SetConfig+0xc2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a17      	ldr	r2, [pc, #92]	@ (80059fc <TIM_OC1_SetConfig+0x11c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40013400 	.word	0x40013400
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40014400 	.word	0x40014400
 80059fc:	40014800 	.word	0x40014800

08005a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f023 0210 	bic.w	r2, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0320 	bic.w	r3, r3, #32
 8005a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a28      	ldr	r2, [pc, #160]	@ (8005b00 <TIM_OC2_SetConfig+0x100>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_OC2_SetConfig+0x6c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a27      	ldr	r2, [pc, #156]	@ (8005b04 <TIM_OC2_SetConfig+0x104>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d10d      	bne.n	8005a88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b00 <TIM_OC2_SetConfig+0x100>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_OC2_SetConfig+0xb0>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a1c      	ldr	r2, [pc, #112]	@ (8005b04 <TIM_OC2_SetConfig+0x104>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_OC2_SetConfig+0xb0>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <TIM_OC2_SetConfig+0x108>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_OC2_SetConfig+0xb0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b0c <TIM_OC2_SetConfig+0x10c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC2_SetConfig+0xb0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a19      	ldr	r2, [pc, #100]	@ (8005b10 <TIM_OC2_SetConfig+0x110>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d113      	bne.n	8005ad8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a27      	ldr	r2, [pc, #156]	@ (8005c10 <TIM_OC3_SetConfig+0xfc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC3_SetConfig+0x6a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <TIM_OC3_SetConfig+0x100>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d10d      	bne.n	8005b9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <TIM_OC3_SetConfig+0xfc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00f      	beq.n	8005bc2 <TIM_OC3_SetConfig+0xae>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c14 <TIM_OC3_SetConfig+0x100>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <TIM_OC3_SetConfig+0xae>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a1a      	ldr	r2, [pc, #104]	@ (8005c18 <TIM_OC3_SetConfig+0x104>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d007      	beq.n	8005bc2 <TIM_OC3_SetConfig+0xae>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a19      	ldr	r2, [pc, #100]	@ (8005c1c <TIM_OC3_SetConfig+0x108>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <TIM_OC3_SetConfig+0xae>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <TIM_OC3_SetConfig+0x10c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d113      	bne.n	8005bea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40013400 	.word	0x40013400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800

08005c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a18      	ldr	r2, [pc, #96]	@ (8005ce4 <TIM_OC4_SetConfig+0xc0>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00f      	beq.n	8005ca8 <TIM_OC4_SetConfig+0x84>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a17      	ldr	r2, [pc, #92]	@ (8005ce8 <TIM_OC4_SetConfig+0xc4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <TIM_OC4_SetConfig+0x84>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a16      	ldr	r2, [pc, #88]	@ (8005cec <TIM_OC4_SetConfig+0xc8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d007      	beq.n	8005ca8 <TIM_OC4_SetConfig+0x84>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	@ (8005cf0 <TIM_OC4_SetConfig+0xcc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC4_SetConfig+0x84>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a14      	ldr	r2, [pc, #80]	@ (8005cf4 <TIM_OC4_SetConfig+0xd0>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d109      	bne.n	8005cbc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40012c00 	.word	0x40012c00
 8005ce8:	40013400 	.word	0x40013400
 8005cec:	40014000 	.word	0x40014000
 8005cf0:	40014400 	.word	0x40014400
 8005cf4:	40014800 	.word	0x40014800

08005cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a17      	ldr	r2, [pc, #92]	@ (8005dac <TIM_OC5_SetConfig+0xb4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00f      	beq.n	8005d72 <TIM_OC5_SetConfig+0x7a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a16      	ldr	r2, [pc, #88]	@ (8005db0 <TIM_OC5_SetConfig+0xb8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00b      	beq.n	8005d72 <TIM_OC5_SetConfig+0x7a>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	@ (8005db4 <TIM_OC5_SetConfig+0xbc>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <TIM_OC5_SetConfig+0x7a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a14      	ldr	r2, [pc, #80]	@ (8005db8 <TIM_OC5_SetConfig+0xc0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d003      	beq.n	8005d72 <TIM_OC5_SetConfig+0x7a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a13      	ldr	r2, [pc, #76]	@ (8005dbc <TIM_OC5_SetConfig+0xc4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d109      	bne.n	8005d86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40012c00 	.word	0x40012c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	40014400 	.word	0x40014400
 8005dbc:	40014800 	.word	0x40014800

08005dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	051b      	lsls	r3, r3, #20
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a18      	ldr	r2, [pc, #96]	@ (8005e78 <TIM_OC6_SetConfig+0xb8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00f      	beq.n	8005e3c <TIM_OC6_SetConfig+0x7c>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a17      	ldr	r2, [pc, #92]	@ (8005e7c <TIM_OC6_SetConfig+0xbc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00b      	beq.n	8005e3c <TIM_OC6_SetConfig+0x7c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <TIM_OC6_SetConfig+0xc0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d007      	beq.n	8005e3c <TIM_OC6_SetConfig+0x7c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a15      	ldr	r2, [pc, #84]	@ (8005e84 <TIM_OC6_SetConfig+0xc4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_OC6_SetConfig+0x7c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a14      	ldr	r2, [pc, #80]	@ (8005e88 <TIM_OC6_SetConfig+0xc8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d109      	bne.n	8005e50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40013400 	.word	0x40013400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800

08005e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 030a 	bic.w	r3, r3, #10
 8005ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f023 0210 	bic.w	r2, r3, #16
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	031b      	lsls	r3, r3, #12
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f043 0307 	orr.w	r3, r3, #7
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	609a      	str	r2, [r3, #8]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	021a      	lsls	r2, r3, #8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e068      	b.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a2d      	ldr	r2, [pc, #180]	@ (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d108      	bne.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006012:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006024:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01d      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604a:	d018      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1b      	ldr	r2, [pc, #108]	@ (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1a      	ldr	r2, [pc, #104]	@ (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00e      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a18      	ldr	r2, [pc, #96]	@ (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d009      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a13      	ldr	r2, [pc, #76]	@ (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d004      	beq.n	800607e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a14      	ldr	r2, [pc, #80]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d10c      	bne.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	4313      	orrs	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40013400 	.word	0x40013400
 80060c0:	40000400 	.word	0x40000400
 80060c4:	40000800 	.word	0x40000800
 80060c8:	40000c00 	.word	0x40000c00
 80060cc:	40014000 	.word	0x40014000

080060d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e042      	b.n	80061a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fb f9c3 	bl	80014bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2224      	movs	r2, #36	@ 0x24
 800613a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fbb2 	bl	80068c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8b3 	bl	80062c8 <UART_SetConfig>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e01b      	b.n	80061a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800617a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800618a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fc31 	bl	8006a04 <UART_CheckIdleState>
 80061a2:	4603      	mov	r3, r0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	@ 0x28
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d17b      	bne.n	80062be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UART_Transmit+0x26>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e074      	b.n	80062c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2221      	movs	r2, #33	@ 0x21
 80061e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e6:	f7fb fb01 	bl	80017ec <HAL_GetTick>
 80061ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	88fa      	ldrh	r2, [r7, #6]
 80061f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	88fa      	ldrh	r2, [r7, #6]
 80061f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006204:	d108      	bne.n	8006218 <HAL_UART_Transmit+0x6c>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e003      	b.n	8006220 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006220:	e030      	b.n	8006284 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2200      	movs	r2, #0
 800622a:	2180      	movs	r1, #128	@ 0x80
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fc93 	bl	8006b58 <UART_WaitOnFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e03d      	b.n	80062c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	881a      	ldrh	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006256:	b292      	uxth	r2, r2
 8006258:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	3302      	adds	r3, #2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e007      	b.n	8006272 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3301      	adds	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29a      	uxth	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1c8      	bne.n	8006222 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	2140      	movs	r1, #64	@ 0x40
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 fc5c 	bl	8006b58 <UART_WaitOnFlagUntilTimeout>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e006      	b.n	80062c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e000      	b.n	80062c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
  }
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062cc:	b08c      	sub	sp, #48	@ 0x30
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4baa      	ldr	r3, [pc, #680]	@ (80065a0 <UART_SetConfig+0x2d8>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	6812      	ldr	r2, [r2, #0]
 80062fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006300:	430b      	orrs	r3, r1
 8006302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a9f      	ldr	r2, [pc, #636]	@ (80065a4 <UART_SetConfig+0x2dc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006330:	4313      	orrs	r3, r2
 8006332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800633e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006348:	430b      	orrs	r3, r1
 800634a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	f023 010f 	bic.w	r1, r3, #15
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a90      	ldr	r2, [pc, #576]	@ (80065a8 <UART_SetConfig+0x2e0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d125      	bne.n	80063b8 <UART_SetConfig+0xf0>
 800636c:	4b8f      	ldr	r3, [pc, #572]	@ (80065ac <UART_SetConfig+0x2e4>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d81a      	bhi.n	80063b0 <UART_SetConfig+0xe8>
 800637a:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <UART_SetConfig+0xb8>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	08006391 	.word	0x08006391
 8006384:	080063a1 	.word	0x080063a1
 8006388:	08006399 	.word	0x08006399
 800638c:	080063a9 	.word	0x080063a9
 8006390:	2301      	movs	r3, #1
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006396:	e116      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006398:	2302      	movs	r3, #2
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800639e:	e112      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a6:	e10e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063a8:	2308      	movs	r3, #8
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ae:	e10a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b6:	e106      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a7c      	ldr	r2, [pc, #496]	@ (80065b0 <UART_SetConfig+0x2e8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d138      	bne.n	8006434 <UART_SetConfig+0x16c>
 80063c2:	4b7a      	ldr	r3, [pc, #488]	@ (80065ac <UART_SetConfig+0x2e4>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c8:	f003 030c 	and.w	r3, r3, #12
 80063cc:	2b0c      	cmp	r3, #12
 80063ce:	d82d      	bhi.n	800642c <UART_SetConfig+0x164>
 80063d0:	a201      	add	r2, pc, #4	@ (adr r2, 80063d8 <UART_SetConfig+0x110>)
 80063d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d6:	bf00      	nop
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	0800642d 	.word	0x0800642d
 80063e0:	0800642d 	.word	0x0800642d
 80063e4:	0800642d 	.word	0x0800642d
 80063e8:	0800641d 	.word	0x0800641d
 80063ec:	0800642d 	.word	0x0800642d
 80063f0:	0800642d 	.word	0x0800642d
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	08006415 	.word	0x08006415
 80063fc:	0800642d 	.word	0x0800642d
 8006400:	0800642d 	.word	0x0800642d
 8006404:	0800642d 	.word	0x0800642d
 8006408:	08006425 	.word	0x08006425
 800640c:	2300      	movs	r3, #0
 800640e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006412:	e0d8      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006414:	2302      	movs	r3, #2
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641a:	e0d4      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800641c:	2304      	movs	r3, #4
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006422:	e0d0      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006424:	2308      	movs	r3, #8
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642a:	e0cc      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800642c:	2310      	movs	r3, #16
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006432:	e0c8      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5e      	ldr	r2, [pc, #376]	@ (80065b4 <UART_SetConfig+0x2ec>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d125      	bne.n	800648a <UART_SetConfig+0x1c2>
 800643e:	4b5b      	ldr	r3, [pc, #364]	@ (80065ac <UART_SetConfig+0x2e4>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006444:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006448:	2b30      	cmp	r3, #48	@ 0x30
 800644a:	d016      	beq.n	800647a <UART_SetConfig+0x1b2>
 800644c:	2b30      	cmp	r3, #48	@ 0x30
 800644e:	d818      	bhi.n	8006482 <UART_SetConfig+0x1ba>
 8006450:	2b20      	cmp	r3, #32
 8006452:	d00a      	beq.n	800646a <UART_SetConfig+0x1a2>
 8006454:	2b20      	cmp	r3, #32
 8006456:	d814      	bhi.n	8006482 <UART_SetConfig+0x1ba>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <UART_SetConfig+0x19a>
 800645c:	2b10      	cmp	r3, #16
 800645e:	d008      	beq.n	8006472 <UART_SetConfig+0x1aa>
 8006460:	e00f      	b.n	8006482 <UART_SetConfig+0x1ba>
 8006462:	2300      	movs	r3, #0
 8006464:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006468:	e0ad      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800646a:	2302      	movs	r3, #2
 800646c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006470:	e0a9      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006472:	2304      	movs	r3, #4
 8006474:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006478:	e0a5      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800647a:	2308      	movs	r3, #8
 800647c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006480:	e0a1      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006482:	2310      	movs	r3, #16
 8006484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006488:	e09d      	b.n	80065c6 <UART_SetConfig+0x2fe>
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a4a      	ldr	r2, [pc, #296]	@ (80065b8 <UART_SetConfig+0x2f0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d125      	bne.n	80064e0 <UART_SetConfig+0x218>
 8006494:	4b45      	ldr	r3, [pc, #276]	@ (80065ac <UART_SetConfig+0x2e4>)
 8006496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800649e:	2bc0      	cmp	r3, #192	@ 0xc0
 80064a0:	d016      	beq.n	80064d0 <UART_SetConfig+0x208>
 80064a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80064a4:	d818      	bhi.n	80064d8 <UART_SetConfig+0x210>
 80064a6:	2b80      	cmp	r3, #128	@ 0x80
 80064a8:	d00a      	beq.n	80064c0 <UART_SetConfig+0x1f8>
 80064aa:	2b80      	cmp	r3, #128	@ 0x80
 80064ac:	d814      	bhi.n	80064d8 <UART_SetConfig+0x210>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <UART_SetConfig+0x1f0>
 80064b2:	2b40      	cmp	r3, #64	@ 0x40
 80064b4:	d008      	beq.n	80064c8 <UART_SetConfig+0x200>
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x210>
 80064b8:	2300      	movs	r3, #0
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064be:	e082      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064c0:	2302      	movs	r3, #2
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c6:	e07e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064c8:	2304      	movs	r3, #4
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ce:	e07a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064d0:	2308      	movs	r3, #8
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064d6:	e076      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064d8:	2310      	movs	r3, #16
 80064da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064de:	e072      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a35      	ldr	r2, [pc, #212]	@ (80065bc <UART_SetConfig+0x2f4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d12a      	bne.n	8006540 <UART_SetConfig+0x278>
 80064ea:	4b30      	ldr	r3, [pc, #192]	@ (80065ac <UART_SetConfig+0x2e4>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f8:	d01a      	beq.n	8006530 <UART_SetConfig+0x268>
 80064fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064fe:	d81b      	bhi.n	8006538 <UART_SetConfig+0x270>
 8006500:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006504:	d00c      	beq.n	8006520 <UART_SetConfig+0x258>
 8006506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800650a:	d815      	bhi.n	8006538 <UART_SetConfig+0x270>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <UART_SetConfig+0x250>
 8006510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006514:	d008      	beq.n	8006528 <UART_SetConfig+0x260>
 8006516:	e00f      	b.n	8006538 <UART_SetConfig+0x270>
 8006518:	2300      	movs	r3, #0
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800651e:	e052      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006520:	2302      	movs	r3, #2
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006526:	e04e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006528:	2304      	movs	r3, #4
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800652e:	e04a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006530:	2308      	movs	r3, #8
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006536:	e046      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006538:	2310      	movs	r3, #16
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800653e:	e042      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <UART_SetConfig+0x2dc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d13a      	bne.n	80065c0 <UART_SetConfig+0x2f8>
 800654a:	4b18      	ldr	r3, [pc, #96]	@ (80065ac <UART_SetConfig+0x2e4>)
 800654c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006550:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006554:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006558:	d01a      	beq.n	8006590 <UART_SetConfig+0x2c8>
 800655a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800655e:	d81b      	bhi.n	8006598 <UART_SetConfig+0x2d0>
 8006560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006564:	d00c      	beq.n	8006580 <UART_SetConfig+0x2b8>
 8006566:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800656a:	d815      	bhi.n	8006598 <UART_SetConfig+0x2d0>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <UART_SetConfig+0x2b0>
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006574:	d008      	beq.n	8006588 <UART_SetConfig+0x2c0>
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x2d0>
 8006578:	2300      	movs	r3, #0
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800657e:	e022      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006580:	2302      	movs	r3, #2
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006586:	e01e      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800658e:	e01a      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006596:	e016      	b.n	80065c6 <UART_SetConfig+0x2fe>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800659e:	e012      	b.n	80065c6 <UART_SetConfig+0x2fe>
 80065a0:	cfff69f3 	.word	0xcfff69f3
 80065a4:	40008000 	.word	0x40008000
 80065a8:	40013800 	.word	0x40013800
 80065ac:	40021000 	.word	0x40021000
 80065b0:	40004400 	.word	0x40004400
 80065b4:	40004800 	.word	0x40004800
 80065b8:	40004c00 	.word	0x40004c00
 80065bc:	40005000 	.word	0x40005000
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4aae      	ldr	r2, [pc, #696]	@ (8006884 <UART_SetConfig+0x5bc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	f040 8097 	bne.w	8006700 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d823      	bhi.n	8006622 <UART_SetConfig+0x35a>
 80065da:	a201      	add	r2, pc, #4	@ (adr r2, 80065e0 <UART_SetConfig+0x318>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006605 	.word	0x08006605
 80065e4:	08006623 	.word	0x08006623
 80065e8:	0800660d 	.word	0x0800660d
 80065ec:	08006623 	.word	0x08006623
 80065f0:	08006613 	.word	0x08006613
 80065f4:	08006623 	.word	0x08006623
 80065f8:	08006623 	.word	0x08006623
 80065fc:	08006623 	.word	0x08006623
 8006600:	0800661b 	.word	0x0800661b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006604:	f7fd fdfc 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800660a:	e010      	b.n	800662e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800660c:	4b9e      	ldr	r3, [pc, #632]	@ (8006888 <UART_SetConfig+0x5c0>)
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006610:	e00d      	b.n	800662e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006612:	f7fd fd5d 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8006616:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006618:	e009      	b.n	800662e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006620:	e005      	b.n	800662e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800662c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8130 	beq.w	8006896 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	4a94      	ldr	r2, [pc, #592]	@ (800688c <UART_SetConfig+0x5c4>)
 800663c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006640:	461a      	mov	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	fbb3 f3f2 	udiv	r3, r3, r2
 8006648:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	4413      	add	r3, r2
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	429a      	cmp	r2, r3
 8006658:	d305      	bcc.n	8006666 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	429a      	cmp	r2, r3
 8006664:	d903      	bls.n	800666e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800666c:	e113      	b.n	8006896 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	2200      	movs	r2, #0
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	60fa      	str	r2, [r7, #12]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667a:	4a84      	ldr	r2, [pc, #528]	@ (800688c <UART_SetConfig+0x5c4>)
 800667c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006680:	b29b      	uxth	r3, r3
 8006682:	2200      	movs	r2, #0
 8006684:	603b      	str	r3, [r7, #0]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006690:	f7f9 fe0e 	bl	80002b0 <__aeabi_uldivmod>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4610      	mov	r0, r2
 800669a:	4619      	mov	r1, r3
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	020b      	lsls	r3, r1, #8
 80066a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066aa:	0202      	lsls	r2, r0, #8
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	6849      	ldr	r1, [r1, #4]
 80066b0:	0849      	lsrs	r1, r1, #1
 80066b2:	2000      	movs	r0, #0
 80066b4:	460c      	mov	r4, r1
 80066b6:	4605      	mov	r5, r0
 80066b8:	eb12 0804 	adds.w	r8, r2, r4
 80066bc:	eb43 0905 	adc.w	r9, r3, r5
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	469a      	mov	sl, r3
 80066c8:	4693      	mov	fp, r2
 80066ca:	4652      	mov	r2, sl
 80066cc:	465b      	mov	r3, fp
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7f9 fded 	bl	80002b0 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4613      	mov	r3, r2
 80066dc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066e4:	d308      	bcc.n	80066f8 <UART_SetConfig+0x430>
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ec:	d204      	bcs.n	80066f8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	60da      	str	r2, [r3, #12]
 80066f6:	e0ce      	b.n	8006896 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066fe:	e0ca      	b.n	8006896 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006708:	d166      	bne.n	80067d8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800670a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800670e:	2b08      	cmp	r3, #8
 8006710:	d827      	bhi.n	8006762 <UART_SetConfig+0x49a>
 8006712:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <UART_SetConfig+0x450>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	0800673d 	.word	0x0800673d
 800671c:	08006745 	.word	0x08006745
 8006720:	0800674d 	.word	0x0800674d
 8006724:	08006763 	.word	0x08006763
 8006728:	08006753 	.word	0x08006753
 800672c:	08006763 	.word	0x08006763
 8006730:	08006763 	.word	0x08006763
 8006734:	08006763 	.word	0x08006763
 8006738:	0800675b 	.word	0x0800675b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800673c:	f7fd fd60 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006740:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006742:	e014      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fd fd72 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8006748:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800674a:	e010      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800674c:	4b4e      	ldr	r3, [pc, #312]	@ (8006888 <UART_SetConfig+0x5c0>)
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006750:	e00d      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006752:	f7fd fcbd 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8006756:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006758:	e009      	b.n	800676e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800675e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006760:	e005      	b.n	800676e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006762:	2300      	movs	r3, #0
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800676c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8090 	beq.w	8006896 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	4a44      	ldr	r2, [pc, #272]	@ (800688c <UART_SetConfig+0x5c4>)
 800677c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006780:	461a      	mov	r2, r3
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	fbb3 f3f2 	udiv	r3, r3, r2
 8006788:	005a      	lsls	r2, r3, #1
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	441a      	add	r2, r3
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d916      	bls.n	80067d0 <UART_SetConfig+0x508>
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a8:	d212      	bcs.n	80067d0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	f023 030f 	bic.w	r3, r3, #15
 80067b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	b29a      	uxth	r2, r3
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	8bfa      	ldrh	r2, [r7, #30]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	e062      	b.n	8006896 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067d6:	e05e      	b.n	8006896 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d828      	bhi.n	8006832 <UART_SetConfig+0x56a>
 80067e0:	a201      	add	r2, pc, #4	@ (adr r2, 80067e8 <UART_SetConfig+0x520>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800681d 	.word	0x0800681d
 80067f4:	08006833 	.word	0x08006833
 80067f8:	08006823 	.word	0x08006823
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006833 	.word	0x08006833
 8006804:	08006833 	.word	0x08006833
 8006808:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680c:	f7fd fcf8 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8006810:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006812:	e014      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006814:	f7fd fd0a 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8006818:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800681a:	e010      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b1a      	ldr	r3, [pc, #104]	@ (8006888 <UART_SetConfig+0x5c0>)
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006820:	e00d      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fd fc55 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8006826:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006828:	e009      	b.n	800683e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006830:	e005      	b.n	800683e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800683c:	bf00      	nop
    }

    if (pclk != 0U)
 800683e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d028      	beq.n	8006896 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	4a10      	ldr	r2, [pc, #64]	@ (800688c <UART_SetConfig+0x5c4>)
 800684a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800684e:	461a      	mov	r2, r3
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	fbb3 f2f2 	udiv	r2, r3, r2
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	441a      	add	r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	2b0f      	cmp	r3, #15
 800686c:	d910      	bls.n	8006890 <UART_SetConfig+0x5c8>
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006874:	d20c      	bcs.n	8006890 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	b29a      	uxth	r2, r3
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60da      	str	r2, [r3, #12]
 8006880:	e009      	b.n	8006896 <UART_SetConfig+0x5ce>
 8006882:	bf00      	nop
 8006884:	40008000 	.word	0x40008000
 8006888:	00f42400 	.word	0x00f42400
 800688c:	080079f4 	.word	0x080079f4
      }
      else
      {
        ret = HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2201      	movs	r2, #1
 800689a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2200      	movs	r2, #0
 80068aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2200      	movs	r2, #0
 80068b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80068b2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3730      	adds	r7, #48	@ 0x30
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080068c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01a      	beq.n	80069d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069be:	d10a      	bne.n	80069d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b098      	sub	sp, #96	@ 0x60
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a14:	f7fa feea 	bl	80017ec <HAL_GetTick>
 8006a18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d12f      	bne.n	8006a88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f88e 	bl	8006b58 <UART_WaitOnFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d022      	beq.n	8006a88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e6      	bne.n	8006a42 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e063      	b.n	8006b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d149      	bne.n	8006b2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f857 	bl	8006b58 <UART_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d03c      	beq.n	8006b2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	623b      	str	r3, [r7, #32]
   return(result);
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ace:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ad0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e6      	bne.n	8006ab0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b02:	61fa      	str	r2, [r7, #28]
 8006b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	69b9      	ldr	r1, [r7, #24]
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e012      	b.n	8006b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3758      	adds	r7, #88	@ 0x58
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b68:	e04f      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b70:	d04b      	beq.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b72:	f7fa fe3b 	bl	80017ec <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d302      	bcc.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e04e      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d037      	beq.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b80      	cmp	r3, #128	@ 0x80
 8006b9e:	d034      	beq.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b40      	cmp	r3, #64	@ 0x40
 8006ba4:	d031      	beq.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d110      	bne.n	8006bd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2208      	movs	r2, #8
 8006bba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 f838 	bl	8006c32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e029      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006be0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006be4:	d111      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f81e 	bl	8006c32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e00f      	b.n	8006c2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69da      	ldr	r2, [r3, #28]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4013      	ands	r3, r2
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	79fb      	ldrb	r3, [r7, #7]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d0a0      	beq.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b095      	sub	sp, #84	@ 0x54
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c5a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e6      	bne.n	8006c3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3308      	adds	r3, #8
 8006c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e3      	bne.n	8006c6c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d118      	bne.n	8006cde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f023 0310 	bic.w	r3, r3, #16
 8006cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6979      	ldr	r1, [r7, #20]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e6      	bne.n	8006cac <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006cf2:	bf00      	nop
 8006cf4:	3754      	adds	r7, #84	@ 0x54
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e027      	b.n	8006d64 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2224      	movs	r2, #36	@ 0x24
 8006d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e02d      	b.n	8006de4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2224      	movs	r2, #36	@ 0x24
 8006d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f84f 	bl	8006e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e02d      	b.n	8006e60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2224      	movs	r2, #36	@ 0x24
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f811 	bl	8006e68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d108      	bne.n	8006e8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e88:	e031      	b.n	8006eee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e8e:	2308      	movs	r3, #8
 8006e90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	0e5b      	lsrs	r3, r3, #25
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	0f5b      	lsrs	r3, r3, #29
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	7b3a      	ldrb	r2, [r7, #12]
 8006eb6:	4911      	ldr	r1, [pc, #68]	@ (8006efc <UARTEx_SetNbDataToProcess+0x94>)
 8006eb8:	5c8a      	ldrb	r2, [r1, r2]
 8006eba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ebe:	7b3a      	ldrb	r2, [r7, #12]
 8006ec0:	490f      	ldr	r1, [pc, #60]	@ (8006f00 <UARTEx_SetNbDataToProcess+0x98>)
 8006ec2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ec4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	7b7a      	ldrb	r2, [r7, #13]
 8006ed4:	4909      	ldr	r1, [pc, #36]	@ (8006efc <UARTEx_SetNbDataToProcess+0x94>)
 8006ed6:	5c8a      	ldrb	r2, [r1, r2]
 8006ed8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006edc:	7b7a      	ldrb	r2, [r7, #13]
 8006ede:	4908      	ldr	r1, [pc, #32]	@ (8006f00 <UARTEx_SetNbDataToProcess+0x98>)
 8006ee0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ee2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006eee:	bf00      	nop
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	08007a0c 	.word	0x08007a0c
 8006f00:	08007a14 	.word	0x08007a14

08006f04 <sniprintf>:
 8006f04:	b40c      	push	{r2, r3}
 8006f06:	b530      	push	{r4, r5, lr}
 8006f08:	4b18      	ldr	r3, [pc, #96]	@ (8006f6c <sniprintf+0x68>)
 8006f0a:	1e0c      	subs	r4, r1, #0
 8006f0c:	681d      	ldr	r5, [r3, #0]
 8006f0e:	b09d      	sub	sp, #116	@ 0x74
 8006f10:	da08      	bge.n	8006f24 <sniprintf+0x20>
 8006f12:	238b      	movs	r3, #139	@ 0x8b
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1a:	b01d      	add	sp, #116	@ 0x74
 8006f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f20:	b002      	add	sp, #8
 8006f22:	4770      	bx	lr
 8006f24:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006f28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006f32:	bf14      	ite	ne
 8006f34:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f38:	4623      	moveq	r3, r4
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	9307      	str	r3, [sp, #28]
 8006f3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006f42:	9002      	str	r0, [sp, #8]
 8006f44:	9006      	str	r0, [sp, #24]
 8006f46:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f4a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006f4c:	ab21      	add	r3, sp, #132	@ 0x84
 8006f4e:	a902      	add	r1, sp, #8
 8006f50:	4628      	mov	r0, r5
 8006f52:	9301      	str	r3, [sp, #4]
 8006f54:	f000 f994 	bl	8007280 <_svfiprintf_r>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	bfbc      	itt	lt
 8006f5c:	238b      	movlt	r3, #139	@ 0x8b
 8006f5e:	602b      	strlt	r3, [r5, #0]
 8006f60:	2c00      	cmp	r4, #0
 8006f62:	d0da      	beq.n	8006f1a <sniprintf+0x16>
 8006f64:	9b02      	ldr	r3, [sp, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
 8006f6a:	e7d6      	b.n	8006f1a <sniprintf+0x16>
 8006f6c:	2000000c 	.word	0x2000000c

08006f70 <memset>:
 8006f70:	4402      	add	r2, r0
 8006f72:	4603      	mov	r3, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d100      	bne.n	8006f7a <memset+0xa>
 8006f78:	4770      	bx	lr
 8006f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7e:	e7f9      	b.n	8006f74 <memset+0x4>

08006f80 <__errno>:
 8006f80:	4b01      	ldr	r3, [pc, #4]	@ (8006f88 <__errno+0x8>)
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	2000000c 	.word	0x2000000c

08006f8c <__libc_init_array>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006fc4 <__libc_init_array+0x38>)
 8006f90:	4c0d      	ldr	r4, [pc, #52]	@ (8006fc8 <__libc_init_array+0x3c>)
 8006f92:	1b64      	subs	r4, r4, r5
 8006f94:	10a4      	asrs	r4, r4, #2
 8006f96:	2600      	movs	r6, #0
 8006f98:	42a6      	cmp	r6, r4
 8006f9a:	d109      	bne.n	8006fb0 <__libc_init_array+0x24>
 8006f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006fcc <__libc_init_array+0x40>)
 8006f9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006fd0 <__libc_init_array+0x44>)
 8006fa0:	f000 fc64 	bl	800786c <_init>
 8006fa4:	1b64      	subs	r4, r4, r5
 8006fa6:	10a4      	asrs	r4, r4, #2
 8006fa8:	2600      	movs	r6, #0
 8006faa:	42a6      	cmp	r6, r4
 8006fac:	d105      	bne.n	8006fba <__libc_init_array+0x2e>
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb4:	4798      	blx	r3
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	e7ee      	b.n	8006f98 <__libc_init_array+0xc>
 8006fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fbe:	4798      	blx	r3
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	e7f2      	b.n	8006faa <__libc_init_array+0x1e>
 8006fc4:	08007a58 	.word	0x08007a58
 8006fc8:	08007a58 	.word	0x08007a58
 8006fcc:	08007a58 	.word	0x08007a58
 8006fd0:	08007a5c 	.word	0x08007a5c

08006fd4 <__retarget_lock_acquire_recursive>:
 8006fd4:	4770      	bx	lr

08006fd6 <__retarget_lock_release_recursive>:
 8006fd6:	4770      	bx	lr

08006fd8 <_free_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4605      	mov	r5, r0
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	d041      	beq.n	8007064 <_free_r+0x8c>
 8006fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe4:	1f0c      	subs	r4, r1, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bfb8      	it	lt
 8006fea:	18e4      	addlt	r4, r4, r3
 8006fec:	f000 f8e0 	bl	80071b0 <__malloc_lock>
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <_free_r+0x90>)
 8006ff2:	6813      	ldr	r3, [r2, #0]
 8006ff4:	b933      	cbnz	r3, 8007004 <_free_r+0x2c>
 8006ff6:	6063      	str	r3, [r4, #4]
 8006ff8:	6014      	str	r4, [r2, #0]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007000:	f000 b8dc 	b.w	80071bc <__malloc_unlock>
 8007004:	42a3      	cmp	r3, r4
 8007006:	d908      	bls.n	800701a <_free_r+0x42>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	1821      	adds	r1, r4, r0
 800700c:	428b      	cmp	r3, r1
 800700e:	bf01      	itttt	eq
 8007010:	6819      	ldreq	r1, [r3, #0]
 8007012:	685b      	ldreq	r3, [r3, #4]
 8007014:	1809      	addeq	r1, r1, r0
 8007016:	6021      	streq	r1, [r4, #0]
 8007018:	e7ed      	b.n	8006ff6 <_free_r+0x1e>
 800701a:	461a      	mov	r2, r3
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	b10b      	cbz	r3, 8007024 <_free_r+0x4c>
 8007020:	42a3      	cmp	r3, r4
 8007022:	d9fa      	bls.n	800701a <_free_r+0x42>
 8007024:	6811      	ldr	r1, [r2, #0]
 8007026:	1850      	adds	r0, r2, r1
 8007028:	42a0      	cmp	r0, r4
 800702a:	d10b      	bne.n	8007044 <_free_r+0x6c>
 800702c:	6820      	ldr	r0, [r4, #0]
 800702e:	4401      	add	r1, r0
 8007030:	1850      	adds	r0, r2, r1
 8007032:	4283      	cmp	r3, r0
 8007034:	6011      	str	r1, [r2, #0]
 8007036:	d1e0      	bne.n	8006ffa <_free_r+0x22>
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	6053      	str	r3, [r2, #4]
 800703e:	4408      	add	r0, r1
 8007040:	6010      	str	r0, [r2, #0]
 8007042:	e7da      	b.n	8006ffa <_free_r+0x22>
 8007044:	d902      	bls.n	800704c <_free_r+0x74>
 8007046:	230c      	movs	r3, #12
 8007048:	602b      	str	r3, [r5, #0]
 800704a:	e7d6      	b.n	8006ffa <_free_r+0x22>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	1821      	adds	r1, r4, r0
 8007050:	428b      	cmp	r3, r1
 8007052:	bf04      	itt	eq
 8007054:	6819      	ldreq	r1, [r3, #0]
 8007056:	685b      	ldreq	r3, [r3, #4]
 8007058:	6063      	str	r3, [r4, #4]
 800705a:	bf04      	itt	eq
 800705c:	1809      	addeq	r1, r1, r0
 800705e:	6021      	streq	r1, [r4, #0]
 8007060:	6054      	str	r4, [r2, #4]
 8007062:	e7ca      	b.n	8006ffa <_free_r+0x22>
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	bf00      	nop
 8007068:	2009708c 	.word	0x2009708c

0800706c <sbrk_aligned>:
 800706c:	b570      	push	{r4, r5, r6, lr}
 800706e:	4e0f      	ldr	r6, [pc, #60]	@ (80070ac <sbrk_aligned+0x40>)
 8007070:	460c      	mov	r4, r1
 8007072:	6831      	ldr	r1, [r6, #0]
 8007074:	4605      	mov	r5, r0
 8007076:	b911      	cbnz	r1, 800707e <sbrk_aligned+0x12>
 8007078:	f000 fba4 	bl	80077c4 <_sbrk_r>
 800707c:	6030      	str	r0, [r6, #0]
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 fb9f 	bl	80077c4 <_sbrk_r>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d103      	bne.n	8007092 <sbrk_aligned+0x26>
 800708a:	f04f 34ff 	mov.w	r4, #4294967295
 800708e:	4620      	mov	r0, r4
 8007090:	bd70      	pop	{r4, r5, r6, pc}
 8007092:	1cc4      	adds	r4, r0, #3
 8007094:	f024 0403 	bic.w	r4, r4, #3
 8007098:	42a0      	cmp	r0, r4
 800709a:	d0f8      	beq.n	800708e <sbrk_aligned+0x22>
 800709c:	1a21      	subs	r1, r4, r0
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fb90 	bl	80077c4 <_sbrk_r>
 80070a4:	3001      	adds	r0, #1
 80070a6:	d1f2      	bne.n	800708e <sbrk_aligned+0x22>
 80070a8:	e7ef      	b.n	800708a <sbrk_aligned+0x1e>
 80070aa:	bf00      	nop
 80070ac:	20097088 	.word	0x20097088

080070b0 <_malloc_r>:
 80070b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b4:	1ccd      	adds	r5, r1, #3
 80070b6:	f025 0503 	bic.w	r5, r5, #3
 80070ba:	3508      	adds	r5, #8
 80070bc:	2d0c      	cmp	r5, #12
 80070be:	bf38      	it	cc
 80070c0:	250c      	movcc	r5, #12
 80070c2:	2d00      	cmp	r5, #0
 80070c4:	4606      	mov	r6, r0
 80070c6:	db01      	blt.n	80070cc <_malloc_r+0x1c>
 80070c8:	42a9      	cmp	r1, r5
 80070ca:	d904      	bls.n	80070d6 <_malloc_r+0x26>
 80070cc:	230c      	movs	r3, #12
 80070ce:	6033      	str	r3, [r6, #0]
 80070d0:	2000      	movs	r0, #0
 80070d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071ac <_malloc_r+0xfc>
 80070da:	f000 f869 	bl	80071b0 <__malloc_lock>
 80070de:	f8d8 3000 	ldr.w	r3, [r8]
 80070e2:	461c      	mov	r4, r3
 80070e4:	bb44      	cbnz	r4, 8007138 <_malloc_r+0x88>
 80070e6:	4629      	mov	r1, r5
 80070e8:	4630      	mov	r0, r6
 80070ea:	f7ff ffbf 	bl	800706c <sbrk_aligned>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	4604      	mov	r4, r0
 80070f2:	d158      	bne.n	80071a6 <_malloc_r+0xf6>
 80070f4:	f8d8 4000 	ldr.w	r4, [r8]
 80070f8:	4627      	mov	r7, r4
 80070fa:	2f00      	cmp	r7, #0
 80070fc:	d143      	bne.n	8007186 <_malloc_r+0xd6>
 80070fe:	2c00      	cmp	r4, #0
 8007100:	d04b      	beq.n	800719a <_malloc_r+0xea>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	4639      	mov	r1, r7
 8007106:	4630      	mov	r0, r6
 8007108:	eb04 0903 	add.w	r9, r4, r3
 800710c:	f000 fb5a 	bl	80077c4 <_sbrk_r>
 8007110:	4581      	cmp	r9, r0
 8007112:	d142      	bne.n	800719a <_malloc_r+0xea>
 8007114:	6821      	ldr	r1, [r4, #0]
 8007116:	1a6d      	subs	r5, r5, r1
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ffa6 	bl	800706c <sbrk_aligned>
 8007120:	3001      	adds	r0, #1
 8007122:	d03a      	beq.n	800719a <_malloc_r+0xea>
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	442b      	add	r3, r5
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	f8d8 3000 	ldr.w	r3, [r8]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	bb62      	cbnz	r2, 800718c <_malloc_r+0xdc>
 8007132:	f8c8 7000 	str.w	r7, [r8]
 8007136:	e00f      	b.n	8007158 <_malloc_r+0xa8>
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	1b52      	subs	r2, r2, r5
 800713c:	d420      	bmi.n	8007180 <_malloc_r+0xd0>
 800713e:	2a0b      	cmp	r2, #11
 8007140:	d917      	bls.n	8007172 <_malloc_r+0xc2>
 8007142:	1961      	adds	r1, r4, r5
 8007144:	42a3      	cmp	r3, r4
 8007146:	6025      	str	r5, [r4, #0]
 8007148:	bf18      	it	ne
 800714a:	6059      	strne	r1, [r3, #4]
 800714c:	6863      	ldr	r3, [r4, #4]
 800714e:	bf08      	it	eq
 8007150:	f8c8 1000 	streq.w	r1, [r8]
 8007154:	5162      	str	r2, [r4, r5]
 8007156:	604b      	str	r3, [r1, #4]
 8007158:	4630      	mov	r0, r6
 800715a:	f000 f82f 	bl	80071bc <__malloc_unlock>
 800715e:	f104 000b 	add.w	r0, r4, #11
 8007162:	1d23      	adds	r3, r4, #4
 8007164:	f020 0007 	bic.w	r0, r0, #7
 8007168:	1ac2      	subs	r2, r0, r3
 800716a:	bf1c      	itt	ne
 800716c:	1a1b      	subne	r3, r3, r0
 800716e:	50a3      	strne	r3, [r4, r2]
 8007170:	e7af      	b.n	80070d2 <_malloc_r+0x22>
 8007172:	6862      	ldr	r2, [r4, #4]
 8007174:	42a3      	cmp	r3, r4
 8007176:	bf0c      	ite	eq
 8007178:	f8c8 2000 	streq.w	r2, [r8]
 800717c:	605a      	strne	r2, [r3, #4]
 800717e:	e7eb      	b.n	8007158 <_malloc_r+0xa8>
 8007180:	4623      	mov	r3, r4
 8007182:	6864      	ldr	r4, [r4, #4]
 8007184:	e7ae      	b.n	80070e4 <_malloc_r+0x34>
 8007186:	463c      	mov	r4, r7
 8007188:	687f      	ldr	r7, [r7, #4]
 800718a:	e7b6      	b.n	80070fa <_malloc_r+0x4a>
 800718c:	461a      	mov	r2, r3
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	42a3      	cmp	r3, r4
 8007192:	d1fb      	bne.n	800718c <_malloc_r+0xdc>
 8007194:	2300      	movs	r3, #0
 8007196:	6053      	str	r3, [r2, #4]
 8007198:	e7de      	b.n	8007158 <_malloc_r+0xa8>
 800719a:	230c      	movs	r3, #12
 800719c:	6033      	str	r3, [r6, #0]
 800719e:	4630      	mov	r0, r6
 80071a0:	f000 f80c 	bl	80071bc <__malloc_unlock>
 80071a4:	e794      	b.n	80070d0 <_malloc_r+0x20>
 80071a6:	6005      	str	r5, [r0, #0]
 80071a8:	e7d6      	b.n	8007158 <_malloc_r+0xa8>
 80071aa:	bf00      	nop
 80071ac:	2009708c 	.word	0x2009708c

080071b0 <__malloc_lock>:
 80071b0:	4801      	ldr	r0, [pc, #4]	@ (80071b8 <__malloc_lock+0x8>)
 80071b2:	f7ff bf0f 	b.w	8006fd4 <__retarget_lock_acquire_recursive>
 80071b6:	bf00      	nop
 80071b8:	20097084 	.word	0x20097084

080071bc <__malloc_unlock>:
 80071bc:	4801      	ldr	r0, [pc, #4]	@ (80071c4 <__malloc_unlock+0x8>)
 80071be:	f7ff bf0a 	b.w	8006fd6 <__retarget_lock_release_recursive>
 80071c2:	bf00      	nop
 80071c4:	20097084 	.word	0x20097084

080071c8 <__ssputs_r>:
 80071c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071cc:	688e      	ldr	r6, [r1, #8]
 80071ce:	461f      	mov	r7, r3
 80071d0:	42be      	cmp	r6, r7
 80071d2:	680b      	ldr	r3, [r1, #0]
 80071d4:	4682      	mov	sl, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	4690      	mov	r8, r2
 80071da:	d82d      	bhi.n	8007238 <__ssputs_r+0x70>
 80071dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071e4:	d026      	beq.n	8007234 <__ssputs_r+0x6c>
 80071e6:	6965      	ldr	r5, [r4, #20]
 80071e8:	6909      	ldr	r1, [r1, #16]
 80071ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071ee:	eba3 0901 	sub.w	r9, r3, r1
 80071f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071f6:	1c7b      	adds	r3, r7, #1
 80071f8:	444b      	add	r3, r9
 80071fa:	106d      	asrs	r5, r5, #1
 80071fc:	429d      	cmp	r5, r3
 80071fe:	bf38      	it	cc
 8007200:	461d      	movcc	r5, r3
 8007202:	0553      	lsls	r3, r2, #21
 8007204:	d527      	bpl.n	8007256 <__ssputs_r+0x8e>
 8007206:	4629      	mov	r1, r5
 8007208:	f7ff ff52 	bl	80070b0 <_malloc_r>
 800720c:	4606      	mov	r6, r0
 800720e:	b360      	cbz	r0, 800726a <__ssputs_r+0xa2>
 8007210:	6921      	ldr	r1, [r4, #16]
 8007212:	464a      	mov	r2, r9
 8007214:	f000 fae6 	bl	80077e4 <memcpy>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800721e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	6126      	str	r6, [r4, #16]
 8007226:	6165      	str	r5, [r4, #20]
 8007228:	444e      	add	r6, r9
 800722a:	eba5 0509 	sub.w	r5, r5, r9
 800722e:	6026      	str	r6, [r4, #0]
 8007230:	60a5      	str	r5, [r4, #8]
 8007232:	463e      	mov	r6, r7
 8007234:	42be      	cmp	r6, r7
 8007236:	d900      	bls.n	800723a <__ssputs_r+0x72>
 8007238:	463e      	mov	r6, r7
 800723a:	6820      	ldr	r0, [r4, #0]
 800723c:	4632      	mov	r2, r6
 800723e:	4641      	mov	r1, r8
 8007240:	f000 faa6 	bl	8007790 <memmove>
 8007244:	68a3      	ldr	r3, [r4, #8]
 8007246:	1b9b      	subs	r3, r3, r6
 8007248:	60a3      	str	r3, [r4, #8]
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	4433      	add	r3, r6
 800724e:	6023      	str	r3, [r4, #0]
 8007250:	2000      	movs	r0, #0
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	462a      	mov	r2, r5
 8007258:	f000 fad2 	bl	8007800 <_realloc_r>
 800725c:	4606      	mov	r6, r0
 800725e:	2800      	cmp	r0, #0
 8007260:	d1e0      	bne.n	8007224 <__ssputs_r+0x5c>
 8007262:	6921      	ldr	r1, [r4, #16]
 8007264:	4650      	mov	r0, sl
 8007266:	f7ff feb7 	bl	8006fd8 <_free_r>
 800726a:	230c      	movs	r3, #12
 800726c:	f8ca 3000 	str.w	r3, [sl]
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007276:	81a3      	strh	r3, [r4, #12]
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	e7e9      	b.n	8007252 <__ssputs_r+0x8a>
	...

08007280 <_svfiprintf_r>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	4698      	mov	r8, r3
 8007286:	898b      	ldrh	r3, [r1, #12]
 8007288:	061b      	lsls	r3, r3, #24
 800728a:	b09d      	sub	sp, #116	@ 0x74
 800728c:	4607      	mov	r7, r0
 800728e:	460d      	mov	r5, r1
 8007290:	4614      	mov	r4, r2
 8007292:	d510      	bpl.n	80072b6 <_svfiprintf_r+0x36>
 8007294:	690b      	ldr	r3, [r1, #16]
 8007296:	b973      	cbnz	r3, 80072b6 <_svfiprintf_r+0x36>
 8007298:	2140      	movs	r1, #64	@ 0x40
 800729a:	f7ff ff09 	bl	80070b0 <_malloc_r>
 800729e:	6028      	str	r0, [r5, #0]
 80072a0:	6128      	str	r0, [r5, #16]
 80072a2:	b930      	cbnz	r0, 80072b2 <_svfiprintf_r+0x32>
 80072a4:	230c      	movs	r3, #12
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b01d      	add	sp, #116	@ 0x74
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	2340      	movs	r3, #64	@ 0x40
 80072b4:	616b      	str	r3, [r5, #20]
 80072b6:	2300      	movs	r3, #0
 80072b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ba:	2320      	movs	r3, #32
 80072bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c4:	2330      	movs	r3, #48	@ 0x30
 80072c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007464 <_svfiprintf_r+0x1e4>
 80072ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072ce:	f04f 0901 	mov.w	r9, #1
 80072d2:	4623      	mov	r3, r4
 80072d4:	469a      	mov	sl, r3
 80072d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072da:	b10a      	cbz	r2, 80072e0 <_svfiprintf_r+0x60>
 80072dc:	2a25      	cmp	r2, #37	@ 0x25
 80072de:	d1f9      	bne.n	80072d4 <_svfiprintf_r+0x54>
 80072e0:	ebba 0b04 	subs.w	fp, sl, r4
 80072e4:	d00b      	beq.n	80072fe <_svfiprintf_r+0x7e>
 80072e6:	465b      	mov	r3, fp
 80072e8:	4622      	mov	r2, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff ff6b 	bl	80071c8 <__ssputs_r>
 80072f2:	3001      	adds	r0, #1
 80072f4:	f000 80a7 	beq.w	8007446 <_svfiprintf_r+0x1c6>
 80072f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fa:	445a      	add	r2, fp
 80072fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80072fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 809f 	beq.w	8007446 <_svfiprintf_r+0x1c6>
 8007308:	2300      	movs	r3, #0
 800730a:	f04f 32ff 	mov.w	r2, #4294967295
 800730e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007312:	f10a 0a01 	add.w	sl, sl, #1
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	9307      	str	r3, [sp, #28]
 800731a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800731e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007320:	4654      	mov	r4, sl
 8007322:	2205      	movs	r2, #5
 8007324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007328:	484e      	ldr	r0, [pc, #312]	@ (8007464 <_svfiprintf_r+0x1e4>)
 800732a:	f7f8 ff71 	bl	8000210 <memchr>
 800732e:	9a04      	ldr	r2, [sp, #16]
 8007330:	b9d8      	cbnz	r0, 800736a <_svfiprintf_r+0xea>
 8007332:	06d0      	lsls	r0, r2, #27
 8007334:	bf44      	itt	mi
 8007336:	2320      	movmi	r3, #32
 8007338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800733c:	0711      	lsls	r1, r2, #28
 800733e:	bf44      	itt	mi
 8007340:	232b      	movmi	r3, #43	@ 0x2b
 8007342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007346:	f89a 3000 	ldrb.w	r3, [sl]
 800734a:	2b2a      	cmp	r3, #42	@ 0x2a
 800734c:	d015      	beq.n	800737a <_svfiprintf_r+0xfa>
 800734e:	9a07      	ldr	r2, [sp, #28]
 8007350:	4654      	mov	r4, sl
 8007352:	2000      	movs	r0, #0
 8007354:	f04f 0c0a 	mov.w	ip, #10
 8007358:	4621      	mov	r1, r4
 800735a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800735e:	3b30      	subs	r3, #48	@ 0x30
 8007360:	2b09      	cmp	r3, #9
 8007362:	d94b      	bls.n	80073fc <_svfiprintf_r+0x17c>
 8007364:	b1b0      	cbz	r0, 8007394 <_svfiprintf_r+0x114>
 8007366:	9207      	str	r2, [sp, #28]
 8007368:	e014      	b.n	8007394 <_svfiprintf_r+0x114>
 800736a:	eba0 0308 	sub.w	r3, r0, r8
 800736e:	fa09 f303 	lsl.w	r3, r9, r3
 8007372:	4313      	orrs	r3, r2
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	46a2      	mov	sl, r4
 8007378:	e7d2      	b.n	8007320 <_svfiprintf_r+0xa0>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	1d19      	adds	r1, r3, #4
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	9103      	str	r1, [sp, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	bfbb      	ittet	lt
 8007386:	425b      	neglt	r3, r3
 8007388:	f042 0202 	orrlt.w	r2, r2, #2
 800738c:	9307      	strge	r3, [sp, #28]
 800738e:	9307      	strlt	r3, [sp, #28]
 8007390:	bfb8      	it	lt
 8007392:	9204      	strlt	r2, [sp, #16]
 8007394:	7823      	ldrb	r3, [r4, #0]
 8007396:	2b2e      	cmp	r3, #46	@ 0x2e
 8007398:	d10a      	bne.n	80073b0 <_svfiprintf_r+0x130>
 800739a:	7863      	ldrb	r3, [r4, #1]
 800739c:	2b2a      	cmp	r3, #42	@ 0x2a
 800739e:	d132      	bne.n	8007406 <_svfiprintf_r+0x186>
 80073a0:	9b03      	ldr	r3, [sp, #12]
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	9203      	str	r2, [sp, #12]
 80073a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073ac:	3402      	adds	r4, #2
 80073ae:	9305      	str	r3, [sp, #20]
 80073b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007474 <_svfiprintf_r+0x1f4>
 80073b4:	7821      	ldrb	r1, [r4, #0]
 80073b6:	2203      	movs	r2, #3
 80073b8:	4650      	mov	r0, sl
 80073ba:	f7f8 ff29 	bl	8000210 <memchr>
 80073be:	b138      	cbz	r0, 80073d0 <_svfiprintf_r+0x150>
 80073c0:	9b04      	ldr	r3, [sp, #16]
 80073c2:	eba0 000a 	sub.w	r0, r0, sl
 80073c6:	2240      	movs	r2, #64	@ 0x40
 80073c8:	4082      	lsls	r2, r0
 80073ca:	4313      	orrs	r3, r2
 80073cc:	3401      	adds	r4, #1
 80073ce:	9304      	str	r3, [sp, #16]
 80073d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d4:	4824      	ldr	r0, [pc, #144]	@ (8007468 <_svfiprintf_r+0x1e8>)
 80073d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073da:	2206      	movs	r2, #6
 80073dc:	f7f8 ff18 	bl	8000210 <memchr>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d036      	beq.n	8007452 <_svfiprintf_r+0x1d2>
 80073e4:	4b21      	ldr	r3, [pc, #132]	@ (800746c <_svfiprintf_r+0x1ec>)
 80073e6:	bb1b      	cbnz	r3, 8007430 <_svfiprintf_r+0x1b0>
 80073e8:	9b03      	ldr	r3, [sp, #12]
 80073ea:	3307      	adds	r3, #7
 80073ec:	f023 0307 	bic.w	r3, r3, #7
 80073f0:	3308      	adds	r3, #8
 80073f2:	9303      	str	r3, [sp, #12]
 80073f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f6:	4433      	add	r3, r6
 80073f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fa:	e76a      	b.n	80072d2 <_svfiprintf_r+0x52>
 80073fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007400:	460c      	mov	r4, r1
 8007402:	2001      	movs	r0, #1
 8007404:	e7a8      	b.n	8007358 <_svfiprintf_r+0xd8>
 8007406:	2300      	movs	r3, #0
 8007408:	3401      	adds	r4, #1
 800740a:	9305      	str	r3, [sp, #20]
 800740c:	4619      	mov	r1, r3
 800740e:	f04f 0c0a 	mov.w	ip, #10
 8007412:	4620      	mov	r0, r4
 8007414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007418:	3a30      	subs	r2, #48	@ 0x30
 800741a:	2a09      	cmp	r2, #9
 800741c:	d903      	bls.n	8007426 <_svfiprintf_r+0x1a6>
 800741e:	2b00      	cmp	r3, #0
 8007420:	d0c6      	beq.n	80073b0 <_svfiprintf_r+0x130>
 8007422:	9105      	str	r1, [sp, #20]
 8007424:	e7c4      	b.n	80073b0 <_svfiprintf_r+0x130>
 8007426:	fb0c 2101 	mla	r1, ip, r1, r2
 800742a:	4604      	mov	r4, r0
 800742c:	2301      	movs	r3, #1
 800742e:	e7f0      	b.n	8007412 <_svfiprintf_r+0x192>
 8007430:	ab03      	add	r3, sp, #12
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	462a      	mov	r2, r5
 8007436:	4b0e      	ldr	r3, [pc, #56]	@ (8007470 <_svfiprintf_r+0x1f0>)
 8007438:	a904      	add	r1, sp, #16
 800743a:	4638      	mov	r0, r7
 800743c:	f3af 8000 	nop.w
 8007440:	1c42      	adds	r2, r0, #1
 8007442:	4606      	mov	r6, r0
 8007444:	d1d6      	bne.n	80073f4 <_svfiprintf_r+0x174>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	065b      	lsls	r3, r3, #25
 800744a:	f53f af2d 	bmi.w	80072a8 <_svfiprintf_r+0x28>
 800744e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007450:	e72c      	b.n	80072ac <_svfiprintf_r+0x2c>
 8007452:	ab03      	add	r3, sp, #12
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	462a      	mov	r2, r5
 8007458:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <_svfiprintf_r+0x1f0>)
 800745a:	a904      	add	r1, sp, #16
 800745c:	4638      	mov	r0, r7
 800745e:	f000 f879 	bl	8007554 <_printf_i>
 8007462:	e7ed      	b.n	8007440 <_svfiprintf_r+0x1c0>
 8007464:	08007a1c 	.word	0x08007a1c
 8007468:	08007a26 	.word	0x08007a26
 800746c:	00000000 	.word	0x00000000
 8007470:	080071c9 	.word	0x080071c9
 8007474:	08007a22 	.word	0x08007a22

08007478 <_printf_common>:
 8007478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800747c:	4616      	mov	r6, r2
 800747e:	4698      	mov	r8, r3
 8007480:	688a      	ldr	r2, [r1, #8]
 8007482:	690b      	ldr	r3, [r1, #16]
 8007484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007488:	4293      	cmp	r3, r2
 800748a:	bfb8      	it	lt
 800748c:	4613      	movlt	r3, r2
 800748e:	6033      	str	r3, [r6, #0]
 8007490:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007494:	4607      	mov	r7, r0
 8007496:	460c      	mov	r4, r1
 8007498:	b10a      	cbz	r2, 800749e <_printf_common+0x26>
 800749a:	3301      	adds	r3, #1
 800749c:	6033      	str	r3, [r6, #0]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	0699      	lsls	r1, r3, #26
 80074a2:	bf42      	ittt	mi
 80074a4:	6833      	ldrmi	r3, [r6, #0]
 80074a6:	3302      	addmi	r3, #2
 80074a8:	6033      	strmi	r3, [r6, #0]
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	f015 0506 	ands.w	r5, r5, #6
 80074b0:	d106      	bne.n	80074c0 <_printf_common+0x48>
 80074b2:	f104 0a19 	add.w	sl, r4, #25
 80074b6:	68e3      	ldr	r3, [r4, #12]
 80074b8:	6832      	ldr	r2, [r6, #0]
 80074ba:	1a9b      	subs	r3, r3, r2
 80074bc:	42ab      	cmp	r3, r5
 80074be:	dc26      	bgt.n	800750e <_printf_common+0x96>
 80074c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	3b00      	subs	r3, #0
 80074c8:	bf18      	it	ne
 80074ca:	2301      	movne	r3, #1
 80074cc:	0692      	lsls	r2, r2, #26
 80074ce:	d42b      	bmi.n	8007528 <_printf_common+0xb0>
 80074d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074d4:	4641      	mov	r1, r8
 80074d6:	4638      	mov	r0, r7
 80074d8:	47c8      	blx	r9
 80074da:	3001      	adds	r0, #1
 80074dc:	d01e      	beq.n	800751c <_printf_common+0xa4>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	f003 0306 	and.w	r3, r3, #6
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	bf02      	ittt	eq
 80074ea:	68e5      	ldreq	r5, [r4, #12]
 80074ec:	6833      	ldreq	r3, [r6, #0]
 80074ee:	1aed      	subeq	r5, r5, r3
 80074f0:	68a3      	ldr	r3, [r4, #8]
 80074f2:	bf0c      	ite	eq
 80074f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f8:	2500      	movne	r5, #0
 80074fa:	4293      	cmp	r3, r2
 80074fc:	bfc4      	itt	gt
 80074fe:	1a9b      	subgt	r3, r3, r2
 8007500:	18ed      	addgt	r5, r5, r3
 8007502:	2600      	movs	r6, #0
 8007504:	341a      	adds	r4, #26
 8007506:	42b5      	cmp	r5, r6
 8007508:	d11a      	bne.n	8007540 <_printf_common+0xc8>
 800750a:	2000      	movs	r0, #0
 800750c:	e008      	b.n	8007520 <_printf_common+0xa8>
 800750e:	2301      	movs	r3, #1
 8007510:	4652      	mov	r2, sl
 8007512:	4641      	mov	r1, r8
 8007514:	4638      	mov	r0, r7
 8007516:	47c8      	blx	r9
 8007518:	3001      	adds	r0, #1
 800751a:	d103      	bne.n	8007524 <_printf_common+0xac>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007524:	3501      	adds	r5, #1
 8007526:	e7c6      	b.n	80074b6 <_printf_common+0x3e>
 8007528:	18e1      	adds	r1, r4, r3
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	2030      	movs	r0, #48	@ 0x30
 800752e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007532:	4422      	add	r2, r4
 8007534:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800753c:	3302      	adds	r3, #2
 800753e:	e7c7      	b.n	80074d0 <_printf_common+0x58>
 8007540:	2301      	movs	r3, #1
 8007542:	4622      	mov	r2, r4
 8007544:	4641      	mov	r1, r8
 8007546:	4638      	mov	r0, r7
 8007548:	47c8      	blx	r9
 800754a:	3001      	adds	r0, #1
 800754c:	d0e6      	beq.n	800751c <_printf_common+0xa4>
 800754e:	3601      	adds	r6, #1
 8007550:	e7d9      	b.n	8007506 <_printf_common+0x8e>
	...

08007554 <_printf_i>:
 8007554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007558:	7e0f      	ldrb	r7, [r1, #24]
 800755a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800755c:	2f78      	cmp	r7, #120	@ 0x78
 800755e:	4691      	mov	r9, r2
 8007560:	4680      	mov	r8, r0
 8007562:	460c      	mov	r4, r1
 8007564:	469a      	mov	sl, r3
 8007566:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800756a:	d807      	bhi.n	800757c <_printf_i+0x28>
 800756c:	2f62      	cmp	r7, #98	@ 0x62
 800756e:	d80a      	bhi.n	8007586 <_printf_i+0x32>
 8007570:	2f00      	cmp	r7, #0
 8007572:	f000 80d1 	beq.w	8007718 <_printf_i+0x1c4>
 8007576:	2f58      	cmp	r7, #88	@ 0x58
 8007578:	f000 80b8 	beq.w	80076ec <_printf_i+0x198>
 800757c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007580:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007584:	e03a      	b.n	80075fc <_printf_i+0xa8>
 8007586:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800758a:	2b15      	cmp	r3, #21
 800758c:	d8f6      	bhi.n	800757c <_printf_i+0x28>
 800758e:	a101      	add	r1, pc, #4	@ (adr r1, 8007594 <_printf_i+0x40>)
 8007590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007594:	080075ed 	.word	0x080075ed
 8007598:	08007601 	.word	0x08007601
 800759c:	0800757d 	.word	0x0800757d
 80075a0:	0800757d 	.word	0x0800757d
 80075a4:	0800757d 	.word	0x0800757d
 80075a8:	0800757d 	.word	0x0800757d
 80075ac:	08007601 	.word	0x08007601
 80075b0:	0800757d 	.word	0x0800757d
 80075b4:	0800757d 	.word	0x0800757d
 80075b8:	0800757d 	.word	0x0800757d
 80075bc:	0800757d 	.word	0x0800757d
 80075c0:	080076ff 	.word	0x080076ff
 80075c4:	0800762b 	.word	0x0800762b
 80075c8:	080076b9 	.word	0x080076b9
 80075cc:	0800757d 	.word	0x0800757d
 80075d0:	0800757d 	.word	0x0800757d
 80075d4:	08007721 	.word	0x08007721
 80075d8:	0800757d 	.word	0x0800757d
 80075dc:	0800762b 	.word	0x0800762b
 80075e0:	0800757d 	.word	0x0800757d
 80075e4:	0800757d 	.word	0x0800757d
 80075e8:	080076c1 	.word	0x080076c1
 80075ec:	6833      	ldr	r3, [r6, #0]
 80075ee:	1d1a      	adds	r2, r3, #4
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6032      	str	r2, [r6, #0]
 80075f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075fc:	2301      	movs	r3, #1
 80075fe:	e09c      	b.n	800773a <_printf_i+0x1e6>
 8007600:	6833      	ldr	r3, [r6, #0]
 8007602:	6820      	ldr	r0, [r4, #0]
 8007604:	1d19      	adds	r1, r3, #4
 8007606:	6031      	str	r1, [r6, #0]
 8007608:	0606      	lsls	r6, r0, #24
 800760a:	d501      	bpl.n	8007610 <_printf_i+0xbc>
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	e003      	b.n	8007618 <_printf_i+0xc4>
 8007610:	0645      	lsls	r5, r0, #25
 8007612:	d5fb      	bpl.n	800760c <_printf_i+0xb8>
 8007614:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007618:	2d00      	cmp	r5, #0
 800761a:	da03      	bge.n	8007624 <_printf_i+0xd0>
 800761c:	232d      	movs	r3, #45	@ 0x2d
 800761e:	426d      	negs	r5, r5
 8007620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007624:	4858      	ldr	r0, [pc, #352]	@ (8007788 <_printf_i+0x234>)
 8007626:	230a      	movs	r3, #10
 8007628:	e011      	b.n	800764e <_printf_i+0xfa>
 800762a:	6821      	ldr	r1, [r4, #0]
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	0608      	lsls	r0, r1, #24
 8007630:	f853 5b04 	ldr.w	r5, [r3], #4
 8007634:	d402      	bmi.n	800763c <_printf_i+0xe8>
 8007636:	0649      	lsls	r1, r1, #25
 8007638:	bf48      	it	mi
 800763a:	b2ad      	uxthmi	r5, r5
 800763c:	2f6f      	cmp	r7, #111	@ 0x6f
 800763e:	4852      	ldr	r0, [pc, #328]	@ (8007788 <_printf_i+0x234>)
 8007640:	6033      	str	r3, [r6, #0]
 8007642:	bf14      	ite	ne
 8007644:	230a      	movne	r3, #10
 8007646:	2308      	moveq	r3, #8
 8007648:	2100      	movs	r1, #0
 800764a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800764e:	6866      	ldr	r6, [r4, #4]
 8007650:	60a6      	str	r6, [r4, #8]
 8007652:	2e00      	cmp	r6, #0
 8007654:	db05      	blt.n	8007662 <_printf_i+0x10e>
 8007656:	6821      	ldr	r1, [r4, #0]
 8007658:	432e      	orrs	r6, r5
 800765a:	f021 0104 	bic.w	r1, r1, #4
 800765e:	6021      	str	r1, [r4, #0]
 8007660:	d04b      	beq.n	80076fa <_printf_i+0x1a6>
 8007662:	4616      	mov	r6, r2
 8007664:	fbb5 f1f3 	udiv	r1, r5, r3
 8007668:	fb03 5711 	mls	r7, r3, r1, r5
 800766c:	5dc7      	ldrb	r7, [r0, r7]
 800766e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007672:	462f      	mov	r7, r5
 8007674:	42bb      	cmp	r3, r7
 8007676:	460d      	mov	r5, r1
 8007678:	d9f4      	bls.n	8007664 <_printf_i+0x110>
 800767a:	2b08      	cmp	r3, #8
 800767c:	d10b      	bne.n	8007696 <_printf_i+0x142>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	07df      	lsls	r7, r3, #31
 8007682:	d508      	bpl.n	8007696 <_printf_i+0x142>
 8007684:	6923      	ldr	r3, [r4, #16]
 8007686:	6861      	ldr	r1, [r4, #4]
 8007688:	4299      	cmp	r1, r3
 800768a:	bfde      	ittt	le
 800768c:	2330      	movle	r3, #48	@ 0x30
 800768e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007692:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007696:	1b92      	subs	r2, r2, r6
 8007698:	6122      	str	r2, [r4, #16]
 800769a:	f8cd a000 	str.w	sl, [sp]
 800769e:	464b      	mov	r3, r9
 80076a0:	aa03      	add	r2, sp, #12
 80076a2:	4621      	mov	r1, r4
 80076a4:	4640      	mov	r0, r8
 80076a6:	f7ff fee7 	bl	8007478 <_printf_common>
 80076aa:	3001      	adds	r0, #1
 80076ac:	d14a      	bne.n	8007744 <_printf_i+0x1f0>
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295
 80076b2:	b004      	add	sp, #16
 80076b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	f043 0320 	orr.w	r3, r3, #32
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	4832      	ldr	r0, [pc, #200]	@ (800778c <_printf_i+0x238>)
 80076c2:	2778      	movs	r7, #120	@ 0x78
 80076c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	6831      	ldr	r1, [r6, #0]
 80076cc:	061f      	lsls	r7, r3, #24
 80076ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80076d2:	d402      	bmi.n	80076da <_printf_i+0x186>
 80076d4:	065f      	lsls	r7, r3, #25
 80076d6:	bf48      	it	mi
 80076d8:	b2ad      	uxthmi	r5, r5
 80076da:	6031      	str	r1, [r6, #0]
 80076dc:	07d9      	lsls	r1, r3, #31
 80076de:	bf44      	itt	mi
 80076e0:	f043 0320 	orrmi.w	r3, r3, #32
 80076e4:	6023      	strmi	r3, [r4, #0]
 80076e6:	b11d      	cbz	r5, 80076f0 <_printf_i+0x19c>
 80076e8:	2310      	movs	r3, #16
 80076ea:	e7ad      	b.n	8007648 <_printf_i+0xf4>
 80076ec:	4826      	ldr	r0, [pc, #152]	@ (8007788 <_printf_i+0x234>)
 80076ee:	e7e9      	b.n	80076c4 <_printf_i+0x170>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	f023 0320 	bic.w	r3, r3, #32
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	e7f6      	b.n	80076e8 <_printf_i+0x194>
 80076fa:	4616      	mov	r6, r2
 80076fc:	e7bd      	b.n	800767a <_printf_i+0x126>
 80076fe:	6833      	ldr	r3, [r6, #0]
 8007700:	6825      	ldr	r5, [r4, #0]
 8007702:	6961      	ldr	r1, [r4, #20]
 8007704:	1d18      	adds	r0, r3, #4
 8007706:	6030      	str	r0, [r6, #0]
 8007708:	062e      	lsls	r6, r5, #24
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	d501      	bpl.n	8007712 <_printf_i+0x1be>
 800770e:	6019      	str	r1, [r3, #0]
 8007710:	e002      	b.n	8007718 <_printf_i+0x1c4>
 8007712:	0668      	lsls	r0, r5, #25
 8007714:	d5fb      	bpl.n	800770e <_printf_i+0x1ba>
 8007716:	8019      	strh	r1, [r3, #0]
 8007718:	2300      	movs	r3, #0
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	4616      	mov	r6, r2
 800771e:	e7bc      	b.n	800769a <_printf_i+0x146>
 8007720:	6833      	ldr	r3, [r6, #0]
 8007722:	1d1a      	adds	r2, r3, #4
 8007724:	6032      	str	r2, [r6, #0]
 8007726:	681e      	ldr	r6, [r3, #0]
 8007728:	6862      	ldr	r2, [r4, #4]
 800772a:	2100      	movs	r1, #0
 800772c:	4630      	mov	r0, r6
 800772e:	f7f8 fd6f 	bl	8000210 <memchr>
 8007732:	b108      	cbz	r0, 8007738 <_printf_i+0x1e4>
 8007734:	1b80      	subs	r0, r0, r6
 8007736:	6060      	str	r0, [r4, #4]
 8007738:	6863      	ldr	r3, [r4, #4]
 800773a:	6123      	str	r3, [r4, #16]
 800773c:	2300      	movs	r3, #0
 800773e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007742:	e7aa      	b.n	800769a <_printf_i+0x146>
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	4632      	mov	r2, r6
 8007748:	4649      	mov	r1, r9
 800774a:	4640      	mov	r0, r8
 800774c:	47d0      	blx	sl
 800774e:	3001      	adds	r0, #1
 8007750:	d0ad      	beq.n	80076ae <_printf_i+0x15a>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	079b      	lsls	r3, r3, #30
 8007756:	d413      	bmi.n	8007780 <_printf_i+0x22c>
 8007758:	68e0      	ldr	r0, [r4, #12]
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	4298      	cmp	r0, r3
 800775e:	bfb8      	it	lt
 8007760:	4618      	movlt	r0, r3
 8007762:	e7a6      	b.n	80076b2 <_printf_i+0x15e>
 8007764:	2301      	movs	r3, #1
 8007766:	4632      	mov	r2, r6
 8007768:	4649      	mov	r1, r9
 800776a:	4640      	mov	r0, r8
 800776c:	47d0      	blx	sl
 800776e:	3001      	adds	r0, #1
 8007770:	d09d      	beq.n	80076ae <_printf_i+0x15a>
 8007772:	3501      	adds	r5, #1
 8007774:	68e3      	ldr	r3, [r4, #12]
 8007776:	9903      	ldr	r1, [sp, #12]
 8007778:	1a5b      	subs	r3, r3, r1
 800777a:	42ab      	cmp	r3, r5
 800777c:	dcf2      	bgt.n	8007764 <_printf_i+0x210>
 800777e:	e7eb      	b.n	8007758 <_printf_i+0x204>
 8007780:	2500      	movs	r5, #0
 8007782:	f104 0619 	add.w	r6, r4, #25
 8007786:	e7f5      	b.n	8007774 <_printf_i+0x220>
 8007788:	08007a2d 	.word	0x08007a2d
 800778c:	08007a3e 	.word	0x08007a3e

08007790 <memmove>:
 8007790:	4288      	cmp	r0, r1
 8007792:	b510      	push	{r4, lr}
 8007794:	eb01 0402 	add.w	r4, r1, r2
 8007798:	d902      	bls.n	80077a0 <memmove+0x10>
 800779a:	4284      	cmp	r4, r0
 800779c:	4623      	mov	r3, r4
 800779e:	d807      	bhi.n	80077b0 <memmove+0x20>
 80077a0:	1e43      	subs	r3, r0, #1
 80077a2:	42a1      	cmp	r1, r4
 80077a4:	d008      	beq.n	80077b8 <memmove+0x28>
 80077a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ae:	e7f8      	b.n	80077a2 <memmove+0x12>
 80077b0:	4402      	add	r2, r0
 80077b2:	4601      	mov	r1, r0
 80077b4:	428a      	cmp	r2, r1
 80077b6:	d100      	bne.n	80077ba <memmove+0x2a>
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077c2:	e7f7      	b.n	80077b4 <memmove+0x24>

080077c4 <_sbrk_r>:
 80077c4:	b538      	push	{r3, r4, r5, lr}
 80077c6:	4d06      	ldr	r5, [pc, #24]	@ (80077e0 <_sbrk_r+0x1c>)
 80077c8:	2300      	movs	r3, #0
 80077ca:	4604      	mov	r4, r0
 80077cc:	4608      	mov	r0, r1
 80077ce:	602b      	str	r3, [r5, #0]
 80077d0:	f7f9 ff32 	bl	8001638 <_sbrk>
 80077d4:	1c43      	adds	r3, r0, #1
 80077d6:	d102      	bne.n	80077de <_sbrk_r+0x1a>
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	b103      	cbz	r3, 80077de <_sbrk_r+0x1a>
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	20097080 	.word	0x20097080

080077e4 <memcpy>:
 80077e4:	440a      	add	r2, r1
 80077e6:	4291      	cmp	r1, r2
 80077e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80077ec:	d100      	bne.n	80077f0 <memcpy+0xc>
 80077ee:	4770      	bx	lr
 80077f0:	b510      	push	{r4, lr}
 80077f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077fa:	4291      	cmp	r1, r2
 80077fc:	d1f9      	bne.n	80077f2 <memcpy+0xe>
 80077fe:	bd10      	pop	{r4, pc}

08007800 <_realloc_r>:
 8007800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007804:	4607      	mov	r7, r0
 8007806:	4614      	mov	r4, r2
 8007808:	460d      	mov	r5, r1
 800780a:	b921      	cbnz	r1, 8007816 <_realloc_r+0x16>
 800780c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007810:	4611      	mov	r1, r2
 8007812:	f7ff bc4d 	b.w	80070b0 <_malloc_r>
 8007816:	b92a      	cbnz	r2, 8007824 <_realloc_r+0x24>
 8007818:	f7ff fbde 	bl	8006fd8 <_free_r>
 800781c:	4625      	mov	r5, r4
 800781e:	4628      	mov	r0, r5
 8007820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007824:	f000 f81a 	bl	800785c <_malloc_usable_size_r>
 8007828:	4284      	cmp	r4, r0
 800782a:	4606      	mov	r6, r0
 800782c:	d802      	bhi.n	8007834 <_realloc_r+0x34>
 800782e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007832:	d8f4      	bhi.n	800781e <_realloc_r+0x1e>
 8007834:	4621      	mov	r1, r4
 8007836:	4638      	mov	r0, r7
 8007838:	f7ff fc3a 	bl	80070b0 <_malloc_r>
 800783c:	4680      	mov	r8, r0
 800783e:	b908      	cbnz	r0, 8007844 <_realloc_r+0x44>
 8007840:	4645      	mov	r5, r8
 8007842:	e7ec      	b.n	800781e <_realloc_r+0x1e>
 8007844:	42b4      	cmp	r4, r6
 8007846:	4622      	mov	r2, r4
 8007848:	4629      	mov	r1, r5
 800784a:	bf28      	it	cs
 800784c:	4632      	movcs	r2, r6
 800784e:	f7ff ffc9 	bl	80077e4 <memcpy>
 8007852:	4629      	mov	r1, r5
 8007854:	4638      	mov	r0, r7
 8007856:	f7ff fbbf 	bl	8006fd8 <_free_r>
 800785a:	e7f1      	b.n	8007840 <_realloc_r+0x40>

0800785c <_malloc_usable_size_r>:
 800785c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007860:	1f18      	subs	r0, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	bfbc      	itt	lt
 8007866:	580b      	ldrlt	r3, [r1, r0]
 8007868:	18c0      	addlt	r0, r0, r3
 800786a:	4770      	bx	lr

0800786c <_init>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	bf00      	nop
 8007870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007872:	bc08      	pop	{r3}
 8007874:	469e      	mov	lr, r3
 8007876:	4770      	bx	lr

08007878 <_fini>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	bf00      	nop
 800787c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787e:	bc08      	pop	{r3}
 8007880:	469e      	mov	lr, r3
 8007882:	4770      	bx	lr
